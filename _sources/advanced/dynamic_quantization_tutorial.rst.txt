.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'<unk>' b'Oslo' b"'s" b'<unk>' b'(' b'Donegal' b'Agron' b')' b'and' b'air' b'3rd' b'Generation' b'Authority' b'(' b'<unk>' b')' b'and' b'intensive' b'Xia'
    b'(' b'New' b'York' b')' b',' b'Chicago' b'and' b'machines' b'on' b'the' b'regulating' b'rule' b'.' b'In' b'18' b'%' b'of' b'five' b'or' b'over'
    b'half' b'million' b'households' b',' b'included' b'Denard' b'and' b'<unk>' b'have' b'sold' b'a' b'invasion' b'court' b'to' b'get' b'as' b'having' b'since' b'explicitly' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Personal' b'campaign' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'was' b'bought' b'as' b'1741' b'after' b'his' b'nephew' b',' b'and'
    b'is' b'paid' b'after' b'most' b'toxic' b'soil' b'names' b'to' b'Arikamedu' b'.' b'About' b'the' b'same' b'tower' b',' b'longitudinal' b'metals' b',' b'however' b','
    b'were' b'also' b'sought' b'to' b'be' b'correct' b',' b'calling' b'it' b'one' b'of' b'the' b'proper' b'able' b'to' b'evidenced' b'<unk>' b'0600' b',' b'even'
    b'fearing' b'Triple' b'Brook' b'going' b'.' b'At' b'its' b'coming' b'outside' b'the' b'active' b'role' b'of' b'Article' b'Feel' b'to' b'Satake' b':' b'How' b'Bringin'
    b',' b'Halo' b'students' b'and' b'contributions' b'was' b'<unk>' b',' b'with' b'much' b'other' b'@-@' b'paced' b'activists' b'which' b'were' b'the' b'location' b'of' b'Western'
    b'governments' b'shaping' b'.' b'This' b'and' b'open' b'guitar' b'has' b'revised' b'greatly' b'brief' b'subjects' b'such' b'as' b'a' b'stationary' b'high' b'<unk>' b'"' b'heights'
    b'of' b'Ceres' b'"' b',' b'of' b'which' b'no' b'friendship' b'at' b'Frenchmen' b'.' b'Diageo' b'said' b'that' b'the' b'victim' b'is' b'Thai' b'on' b'interwar'
    b'available' b'and' b'<unk>' b'sites' b'with' b'of' b'few' b'boys' b'.' b'While' b'they' b'are' b'pincers' b'so' b'a' b'Oxford' b'call' b',' b'otherwise' b'as'
    b'"' b'this' b'archery' b'so' b'unchanged' b',' b'and' b'they' b'get' b'made' b'how' b'the' b'Polish' b'jumping' b'back' b'to' b'instruction' b'and' b'Mortimer' b'The'
    b'"' b',' b'and' b'marked' b'the' b'video' b'from' b'these' b'bigger' b'folklore' b'.' b'aliens' b'have' b'complained' b'to' b'write' b'that' b'he' b'<unk>' b'individual'
    b'forests' b'added' b'like' b'featuring' b'a' b'nomen' b'game' b'she' b'had' b'prompted' b'criticizing' b'trouble' b'and' b'avoid' b'a' b'changeup' b'to' b'take' b'neutrinos' b'that'
    b'<unk>' b'they' b'can' b'attain' b'his' b'playing' b'switch' b',' b'they' b'were' b'not' b'96' b'%' b'of' b'most' b'unusual' b'nitrogen' b'he' b'was' b'a'
    b'<unk>' b'.' b'For' b'powerful' b'fictional' b'life' b'so' b'different' b',' b'easy' b',' b'academic' b'takes' b'time' b',' b'slightly' b'of' b'other' b'takes' b'a'
    b'legal' b'lb' b'deal' b'in' b'Australia' b'when' b'he' b'termed' b'a' b'additional' b'quest' b'.' b'Afterwards' b',' b'I' b'once' b'is' b'paid' b'to' b'the'
    b'<unk>' b'@-@' b'trick' b'.' b'This' b'becomes' b'considered' b'if' b'"' b'<unk>' b',' b'Jesus' b',' b'and' b'Hiberno' b'@-@' b'prepared' b'side' b'machismo' b'<unk>'
    b'<unk>' b'Admiral' b'Fischer' b',' b'and' b'she' b'describes' b'to' b'him' b'in' b'who' b'is' b'in' b'comparison' b'to' b'a' b'director' b'that' b'is' b'going'
    b'to' b'know' b'sure' b'"' b'.' b'In' b'a' b'season' b'known' b',' b'it' b'witnessed' b'a' b'inability' b'to' b'run' b'@-@' b'fashioned' b'to' b'enforce'
    b'the' b'cultural' b'society' b'to' b'find' b',' b'and' b'stated' b'a' b'seemingly' b'arc' b'<unk>' b'Berlioz' b',' b'which' b'is' b'<unk>' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Legacy' b'career' b'=' b'=' b'<eos>' b'<eos>' b'Jupiter' b'once' b'controlled' b'by' b'musical' b'cancer' b',' b'F\xc3\xb6rster' b'(' b'luminosity' b')' b','
    b'and' b'Nandi' b'appear' b'him' b'and' b'pound' b'head' b'latest' b'by' b'Environmental' b'Testament' b',' b'and' b'to' b'accept' b'for' b'their' b'primary' b'measures' b'.'
    b'However' b',' b'she' b'threw' b'<unk>' b'and' b'pupils' b'shooting' b'in' b'other' b'<unk>' b'.' b'As' b'this' b'is' b'one' b'of' b'the' b'oldest' b'pale'
    b'Cowell' b',' b'a' b'pads' b'of' b'multiple' b'other' b'starling' b'titles' b'are' b'a' b'large' b'<unk>' b'suited' b'to' b'no' b'regression' b'.' b'He' b'also'
    b'approached' b'them' b'when' b',' b'were' b'achieved' b'with' b'me' b',' b'Clinton' b'took' b'other' b'feathers' b'into' b'Ilich' b',' b'more' b'than' b'any' b'other'
    b'related' b'of' b'another' b'life' b',' b'they' b'are' b'exciting' b'when' b'he' b'organisers' b'within' b'his' b'life' b'.' b'<unk>' b'there' b'is' b'no' b'<unk>'
    b'and' b'The' b'rhythms' b',' b'CA' b',' b'which' b'heard' b'same' b'all' b'two' b'months' b'after' b'his' b'release' b'and' b'"' b'technologically' b'saint' b'"'
    b'in' b'original' b'discussion' b'of' b'12' b'years' b'and' b'2' b'May' b'.' b'Later' b',' b'him' b'<unk>' b'tests' b'seeks' b'to' b'have' b'his' b'<unk>'
    b'landing' b'compared' b'to' b'Kimi' b'Benson' b'who' b'does' b'not' b'be' b'dramatically' b'<unk>' b'where' b'he' b'spreads' b'funds' b'to' b'mean' b'"' b'illustrating' b'you'
    b'of' b'invertebrates' b'to' b'estuary' b'.' b'"' b'Walter' b'<unk>' b'used' b'this' b'as' b'attractive' b'<unk>' b',' b'but' b'taught' b'it' b'to' b'the' b'organization'
    b'to' b'obey' b'Destiny' b'other' b'video' b'call' b',' b'he' b'seems' b'to' b'be' b'compatible' b'millimeters' b'by' b'Mark' b'<unk>' b'that' b'sequence' b'and' b'officials'
    b'are' b'considered' b'machines' b'to' b'understand' b'emotion' b'with' b'years' b'.' b'<eos>' b'Hornung' b'hired' b'Gardner' b'together' b'from' b'Underhill' b',' b'making' b'a' b'venom'
    b'and' b'whilst' b'this' b'song' b'referred' b'to' b'to' b'talk' b')' b'.' b'Travelling' b'an' b'husbandman' b'to' b'become' b'punished' b'to' b'the' b'kakapo' b'.'
    b'After' b'the' b'latter' b',' b'researcher' b'1812' b'ownership' b'him' b'of' b'Bhairavakona' b';' b'the' b'other' b'successful' b'stories' b'follow' b'the' b'name' b'<unk>' b'@-@'
    b'<unk>' b'jet' b'ourselves' b'.' b'In' b'1905' b',' b'Peshkin' b'had' b'become' b'a' b'member' b'of' b'monumental' b'destroyers' b',' b'president' b'of' b'Anton' b'Melzer'
    b',' b'who' b'discovers' b'a' b'invitation' b'to' b'Rosebery' b'have' b'graphical' b'a' b'Vaishnava' b'character' b'to' b'questionable' b'catch' b'with' b'our' b'messages' b',' b'but'
    b'its' b'support' b'seems' b'to' b'regulate' b'Mackenzie' b'later' b'.' b'Examples' b'noted' b'that' b'there' b'is' b'<unk>' b'her' b'"' b'installment' b'barons' b'"' b'.'
    b'He' b'appears' b'the' b'game' b'to' b'performing' b'outside' b'his' b'abilities' b'and' b'<unk>' b'a' b'enzymatic' b'phenomenon' b'.' b'If' b'Phoebe' b'listened' b'600' b'an'
    b'sacred' b'experience' b',' b'\xc3\x8dmar' b'finds' b'60' b'fatalities' b',' b'one' b'determined' b'than' b'his' b'display' b'of' b'within' b'her' b'woman' b'.' b'Sometimes' b'the'
    b'player' b'very' b'of' b'his' b'technical' b'custom' b'friends' b',' b'this' b'golden' b'snake' b'has' b'this' b'!' b'\xe2\x80\x94' b'who' b'Abba' b'<unk>' b',' b'whom'
    b'his' b'wool' b'brother' b'(' b'E' b'-' b'sends' b'754' b'@-@' b'TV' b')' b',' b'Toxteth' b'the' b'worldly' b'man' b'(' b'"' b'The' b'Tramp'
    b'Fire' b'"' b')' b',' b'that' b'this' b'says' b',' b'"' b'If' b'police' b'frame' b'in' b'any' b'eyes' b'is' b'formal' b',' b'searching' b','
    b'it' b'might' b'run' b'he' b'other' b'sexy' b'.' b'"' b'The' b'protagonist' b'claimed' b'it' b'one' b'of' b'his' b'previous' b'best' b',' b'Lost' b'race'
    b'intercity' b'testimony' b'"' b'immutable' b'alleging' b'and' b'<unk>' b'that' b'any' b'other' b'was' b'barely' b'fully' b'310' b'am' b',' b'with' b'the' b'playground' b'high'
    b'by' b'many' b'already' b'@-@' b'two' b'sort' b'and' b'a' b'familiar' b'country' b'abilities' b'.' b'It' b'is' b'atmosphere' b'back' b'adequate' b'and' b'some' b'they'
    b'necessarily' b'seem' b'to' b'work' b'off' b';' b'I' b'don' b"'t" b'do' b'an' b'vision' b'of' b'13' b'km' b'to' b'find' b'or' b'.' b'"'
    b'<eos>' b'"' b'For' b'example' b',' b'Hitler' b'may' b'last' b'make' b'50' b'pairs' b'of' b'at' b'sun' b'degrees' b',' b'together' b'near' b'Buckhorn' b','
    b'present' b'and' b'skills' b'are' b'negative' b'[' b'he' b'does' b'because' b'some' b'of' b'these' b'have' b'low' b'issues' b'have' b'"' b'.' b'His' b'other'
    b'<unk>' b'within' b'Spain' b'is' b'being' b'Baez' b',' b'but' b'a' b'pre' b'@-@' b'term' b'Edition' b'(' b'according' b'to' b'some' b'<unk>' b'may' b'Daly'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 217.0
    loss: 5.168
    elapsed time (seconds): 146.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  9.767 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
