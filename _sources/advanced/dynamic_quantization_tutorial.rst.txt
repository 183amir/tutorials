.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Prix' b',' b'which' b'succumbed' b'and' b'on' b'side' b'of' b'a' b'IDF' b'.' b'The' b'Carmel' b'scheme' b'means' b'@-@' b'wapaq' b'concluded' b'737' b'rule'
    b'and' b'a' b'wicket' b'named' b'a' b'feature' b',' b'and' b'also' b'reminds' b'Edessa' b'while' b'Ceres' b'fuss' b'to' b'give' b'the' b'collection' b'distracted' b'by'
    b'Navarro' b'.' b'Once' b'the' b'school' b'were' b'too' b'uncommon' b',' b'it' b'is' b'not' b'true' b'to' b'Jesse' b'Cuar\xc3\xa1n' b'as' b"'" b'I' b'disabled'
    b'should' b'mount' b'.' b'"' b'In' b'realisation' b',' b'homosexuality' b'claims' b'that' b'Ceres' b'species' b'actions' b'"' b'ethnography' b'LeSportsac' b'"' b',' b'willingly' b'replicated'
    b'his' b'responses' b'into' b'a' b'ferry' b'lake' b'.' b'The' b'best' b'riding' b'on' b'Robert' b'Lord' b'Go' b'have' b'an' b'spaceship' b'imperial' b'title' b'known'
    b'as' b'the' b'conductor' b',' b'fertility' b'USA' b"'s" b'behavior' b'.' b'at' b'the' b'weeks' b'of' b'man' b'occurs' b'its' b'<unk>' b',' b'but' b'how'
    b'several' b'of' b'the' b'electronic' b'environments' b'\xe2\x80\x94' b'as' b'well' b'as' b'over' b'8' b'years' b',' b'were' b'down' b';' b'they' b'know' b'venomous' b'to'
    b'provide' b'hyphae' b'.' b'Ceres' b'claimed' b'Toei' b'feed' b'for' b'an' b'mountain' b'foreboding' b'(' b'UCI' b')' b'.' b'When' b'the' b'totalled' b'characters' b'commonly'
    b'be' b'<unk>' b'and' b'with' b'elements' b'@-@' b'similar' b'Yue' b',' b'it' b'records' b'nothing' b'Broadway' b'.' b'He' b'contracted' b'the' b'term' b'in' b'<unk>'
    b'form' b'EST' b'that' b'race' b',' b'and' b'transitioned' b'forward' b'on' b'a' b'four' b'@-@' b'man' b'line' b'will' b'travel' b'.' b'Before' b'carry' b'to'
    b'his' b'Valkyria' b'Dam' b',' b'it' b'is' b'troubled' b'by' b'Wolf' b'praetervisa' b'and' b'co' b'@-@' b'membered' b'@-@' b'spored' b',' b'before' b'may' b'be'
    b'bordered' b'in' b'the' b'city' b'should' b'be' b'killed' b'after' b'not' b'in' b'"' b'a' b'planned' b'standing' b'other' b'to' b'remain' b'in' b'straight' b'uterus'
    b'and' b'candidates' b'"' b'.' b'Two' b'tails' b'ago' b'redesigned' b'distillation' b'produced' b'with' b'<unk>' b',' b'feeding' b',' b'food' b',' b'reagent' b'or' b'hot'
    b',' b'and' b'they' b'look' b'for' b'<unk>' b'head' b'.' b'In' b'the' b'Republic' b'of' b'Lear' b',' b'Ceres' b'tactics' b'for' b'private' b'activities' b','
    b'similar' b'guidance' b'.' b'The' b'expecting' b'difficulty' b'of' b'these' b'could' b'be' b'an' b'cold' b'country' b'to' b'Blue' b'as' b'they' b'left' b'their' b'course'
    b'only' b'.' b'If' b'they' b'tried' b'<unk>' b'across' b'the' b'nest' b',' b'it' b'occurs' b'in' b'do' b'multiple' b'more' b'.' b'It' b'may' b'be'
    b'on' b'the' b'ground' b'you' b'was' b'dressed' b'.' b'The' b'very' b'pupils' b'to' b'a' b'eye' b',' b'dance' b',' b'wore' b'and' b'sometimes' b'he'
    b'found' b'confirmation' b'only' b'to' b'<unk>' b'their' b'body' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Biology' b'=' b'=' b'<eos>' b'<eos>' b'Team' b'Tanya' b','
    b'which' b'has' b'maintained' b'cleaning' b'in' b'both' b'areas' b',' b'as' b'also' b'as' b'being' b'shown' b'.' b'Joyce' b'D.J.' b'Wyatt' b'asked' b'Boogie' b'<unk>'
    b'as' b'accompanied' b'by' b'Henry' b'Grant' b'as' b'follows' b'for' b'his' b'newer' b',' b'because' b'Chronicles' b'Elliott' b'(' b'Allah' b',' b'1747' b',' b'fish'
    b'investigator' b')' b'.' b'enable' b'Fleets' b"'" b'disease' b'impatient' b'results' b'for' b'their' b'origin' b'with' b'dozens' b'from' b'the' b'young' b'@-@' b'Lithuanian' b'nursery'
    b'Ni\xc3\xb1o' b'circles' b'(' b'Malayan' b'American' b'importin' b')' b',' b'and' b'<unk>' b'Daniel' b'<unk>' b'9' b'(' b'<unk>' b'<eos>' b'The' b'key' b'and' b'very'
    b'convicted' b'of' b'into' b'the' b'conference' b')' b',' b'when' b'the' b'biological' b'range' b'are' b'identified' b'behind' b'one' b'well' b'through' b'the' b'cocktail' b','
    b'claiming' b'.' b'"' b'It' b'would' b'be' b'offered' b'longer' b'Humpty' b"'t" b'universal' b'and' b'gain' b'everything' b'around' b'.' b'"' b'brand' b'were' b'executed'
    b'in' b'Carl' b'Surrender' b'Paganism' b'in' b'February' b'1999' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'March' b'office' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'story' b"'s" b'all' b'works' b'regarding' b'Ceres' b'to' b'benefit' b'the' b'states' b'should' b'be' b'focusing' b'on' b'town' b'control' b',' b'citing' b'looking'
    b'to' b'be' b'put' b'as' b'the' b'eighth' b'regional' b'versions' b'\xe2\x80\x94' b'and' b'shipped' b'the' b'IDF' b'of' b'<unk>' b'.' b'The' b'cycle' b'of' b'film'
    b'eligibility' b'is' b'feared' b'into' b'those' b'of' b'its' b'rare' b'educational' b'dome' b'wartime' b'<unk>' b',' b'or' b'Thousand' b',' b'administrators' b',' b'shape' b','
    b'percussion' b'and' b'reliance' b',' b'similar' b'to' b'social' b'governors' b'Trypanosoma' b'Java' b',' b'<unk>' b'states' b'1922' b',' b'starring' b'M.' b'oxen' b',' b'and'
    b'Jim' b'<unk>' b'.' b'If' b'those' b'of' b'his' b'head' b'in' b'nations' b'were' b'made' b'by' b'1' b'@.@' b'7' b'million' b'schools' b',' b'and'
    b'only' b'letters' b'Captain' b'I' b'.' b'<eos>' b'18' b'allusion' b'after' b'with' b'all' b'decades' b',' b'they' b'go' b'to' b'305' b'or' b'two' b'million'
    b'species' b'ahead' b'of' b'an' b'successful' b'hour' b',' b'seemingly' b'stonework' b'up' b'.' b'There' b'are' b'gathering' b'that' b'choice' b'arrive' b'until' b'three' b'or'
    b'10' b'seconds' b'of' b'the' b'orbit' b'who' b'efficiently' b';' b'the' b'original' b'organelles' b'is' b'mild' b'around' b'failure' b'.' b'The' b'Vingti\xc3\xa8me' b'incompletely' b'returns'
    b'to' b'one' b'assessment' b'at' b'one' b'high' b'degrees' b'the' b'benefit' b',' b'and' b'his' b'displacement' b'the' b'center' b'of' b'nature' b'different' b'skin' b'bribery'
    b'.' b'When' b'some' b'other' b'events' b'lists' b'their' b'length' b'makes' b',' b'the' b'common' b'starling' b'are' b'running' b'with' b'a' b'attempt' b'to' b'accomplish'
    b'his' b'level' b'at' b'unpredictable' b'velocity' b';' b'other' b'Meresankh' b'burrowing' b'bites' b'himself' b'visit' b'clouds' b',' b'who' b'then' b'may' b'have' b'beauty' b','
    b'by' b'which' b'then' b'they' b'can' b'be' b'to' b'be' b'most' b'naturally' b'.' b'Two' b'better' b'types' b'(' b'males' b'extract' b"'Pol" b')' b'are'
    b'more' b'active' b'.' b'Douglas' b'choreographed' b'female' b'shoes' b'is' b'non' b'@-@' b'shelters' b',' b'involved' b'as' b'breech' b'operations' b'there' b'can' b'be' b'distinguished'
    b'to' b'be' b'increasingly' b'large' b'.' b'They' b'eucalypt' b'the' b'aircraft' b'activity' b'atop' b'other' b'<unk>' b',' b'Boulder' b'Church' b',' b'sees' b'six' b'or'
    b'densely' b'rates' b'.' b'Every' b'ravine' b'has' b'lost' b'over' b'October' b'22' b'when' b'he' b'may' b'qualify' b'service' b'when' b'they' b'are' b'uncommon' b'at'
    b'least' b'one' b'side' b'of' b'central' b'bright' b'bird' b'areas' b'.' b'Its' b'stable' b'diet' b'cannot' b'be' b'different' b'jiu' b'@-@' b'Sex' b',' b'occasionally'
    b'where' b'their' b'podium' b'<unk>' b'them' b',' b'but' b'can' b'be' b'able' b'as' b'there' b'more' b'150' b'.' b'In' b'the' b'general' b',' b'the'
    b'kakapo' b'importins' b'is' b'worse' b'but' b'the' b'most' b'variable' b'prey' b',' b'individual' b'or' b'wooden' b'related' b'(' b'1' b'@.@' b'40' b"'" b')'
    b'<unk>' b',' b'giving' b'it' b',' b'is' b'created' b'as' b'absorption' b',' b'which' b'sings' b'another' b'way' b'which' b'are' b'harvested' b'.' b'After' b'the'
    b'bird' b'is' b'high' b',' b'[' b'excess' b']' b'additional' b'specimen' b'.' b'Through' b'most' b'memorable' b'intercut' b',' b'these' b'predators' b'occur' b'and' b'damaged'
    b'\xe2\x80\x93' b'coastal' b'Africa' b'.' b'<eos>' b'Crash' b'<unk>' b"'" b'Junction' b'and' b'woman' b'component' b'of' b'the' b'<unk>' b'or' b'food' b'<unk>' b'by' b'<unk>'
    b'birds' b'from' b'pore' b'development' b',' b'airborne' b'or' b'newly' b';' b'<unk>' b',' b'zinc' b',' b'dynamic' b',' b'and' b'FIBA' b'grows' b'<unk>' b'Pulteney'
    b'shaped' b'that' b'effects' b'mobbing' b'that' b'not' b'belonged' b'to' b'fresh' b'lion' b'or' b'brackets' b'throughout' b'its' b'spreadsheet' b'.' b'By' b'a' b'short' b'circumstances'
    b',' b'some' b'females' b'still' b'spend' b'energy' b'before' b'caught' b'the' b'size' b'of' b'kakapo' b'and' b'deter' b'animals' b',' b'seeds' b'or' b'religion' b'.'
    b'These' b'ships' b'held' b'low' b'<unk>' b'over' b'the' b'south' b'.' b'One' b'other' b'description' b'of' b'exposed' b'sight' b',' b'agricultural' b',' b'and' b'eucalypt'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.5
    loss: 5.168
    elapsed time (seconds): 151.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  22.376 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
