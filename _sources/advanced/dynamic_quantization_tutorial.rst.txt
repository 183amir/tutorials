.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'paid' b'different' b'response' b'from' b'its' b'long' b'<unk>' b'the' b'genetic' b'Important' b'dictator' b',' b'which' b'not' b'<unk>' b'\xc3\x98' b'and' b'<unk>' b'differently' b'.'
    b'He' b'also' b'suggested' b'that' b'it' b'was' b'written' b'with' b'these' b'odor' b'of' b'combat' b',' b'New' b'Zealand' b',' b'and' b'Northern' b'South' b'America'
    b';' b'and' b'the' b'military' b'the' b'planetary' b'observations' b'of' b'a' b'account' b'in' b'support' b'it' b'is' b'because' b'he' b'go' b'tail' b'.' b'One'
    b'would' b'be' b'one' b'of' b'a' b'few' b'pair' b'taste' b'in' b'poetry' b'.' b'territorial' b'tourists' b"'s" b'two' b'are' b'reasonable' b'Gay' b'in' b'The'
    b'bypass' b'shrine' b',' b'which' b'existed' b'between' b'curiosity' b'and' b'family' b'v' b'.' b'As' b'particularly' b'burned' b'cyclones' b',' b'the' b'tire' b'term' b'humid'
    b'contain' b'Madero' b',' b'Nicolae' b"'Malley" b',' b'Cache' b'<unk>' b',' b'Andrew' b'Henry' b',' b'<unk>' b',' b'and' b'others' b',' b'a' b'number' b'of'
    b'head' b',' b'minerals' b',' b'and' b'leading' b'patrols' b'made' b'by' b'Go\xc3\xa2ve' b'.' b'As' b'they' b'<unk>' b'on' b'the' b'thoughts' b'caused' b'by' b'Alkan'
    b'initially' b'peaked' b'on' b'principle' b'another' b'5th' b'Fantasy' b'country' b',' b'acting' b'as' b'<unk>' b',' b'creating' b'it' b'with' b'many' b'severely' b'unlikely' b'without'
    b'recordings' b'before' b'three' b'trees' b'were' b'<unk>' b'.' b'<eos>' b'In' b'the' b'shoreline' b',' b'court' b'are' b'listed' b'as' b'decorative' b'bodies' b'of' b'intercourse'
    b'written' b'in' b'1984' b'.' b'<eos>' b'The' b'sternum' b'Football' b'characteristics' b',' b'defined' b'by' b'Engler' b'and' b'teach' b'up' b'@-@' b'longest' b'active' b'pronounced'
    b'A.' b'Weekly' b'&' b'Tjoet' b'Australia' b',' b'led' b'in' b'forest' b'<unk>' b',' b'gathering' b'a' b'free' b'variety' b'of' b'minor' b'cultures' b'.' b'their'
    b'military' b'scheme' b'limit' b'that' b'different' b',' b'<unk>' b',' b'are' b'long' b'.' b'There' b'is' b'other' b'items' b'when' b'there' b'are' b'no' b'reactions'
    b'of' b'continental' b'intervals' b'from' b'all' b'that' b',' b'they' b'are' b'<unk>' b':' b'<unk>' b',' b'Sylvester' b',' b'reactors' b',' b'<unk>' b',' b'astronomers'
    b',' b'1981' b',' b'feeding' b',' b'nymphaeum' b',' b'agricultural' b',' b'Norway' b',' b'bereft' b'are' b'<unk>' b',' b'Ireland' b'and' b'lobbying' b'.' b'They'
    b'Hubert' b'Chris' b'Lang' b',' b'who' b'is' b'not' b'Aesopic' b',' b'may' b'be' b'seen' b'since' b'dry' b'Eastern' b'Recordings' b',' b'is' b'written' b'by'
    b'Find' b'revamp' b',' b'including' b'a' b'group' b'of' b'nayav\xc4\x81da' b'to' b'work' b'.' b'For' b'example' b'from' b'the' b'<unk>' b'booms' b',' b'and' b'water'
    b',' b'the' b'past' b'injury' b'is' b'not' b'eligible' b'as' b'Tropical' b'One' b'@-@' b'seller' b'to' b'avoid' b'a' b'allegory' b'of' b'narrow' b'other' b','
    b'and' b'has' b'developed' b'play' b'a' b'hitter' b'where' b'it' b'may' b'not' b'be' b'discovered' b'.' b'There' b'is' b'all' b'contemporary' b'conspicuous' b'sites' b','
    b'by' b'most' b'of' b'the' b'Qedar' b',' b'Weekly' b',' b'<unk>' b',' b'and' b'<unk>' b',' b'staying' b'depending' b'in' b'five' b'homes' b',' b'beginning'
    b'only' b'in' b'their' b'first' b'and' b'tail' b',' b'despite' b'common' b'starlings' b'is' b'low' b'.' b'As' b'structural' b'cargo' b',' b'without' b'the' b'Moorside'
    b'Synagogue' b'from' b'line' b',' b'there' b'will' b'be' b'more' b'shit' b',' b'that' b'they' b'escapes' b'throughout' b'the' b'Finland' b'season' b'.' b'They' b'welcome'
    b'no' b'populations' b'to' b'present' b'34' b'\xe2\x80\x93' b'98' b'cm' b'(' b'11' b'ft' b')' b'as' b'they' b'hypothesis' b'.' b'They' b'typically' b'hope' b'of'
    b'within' b'invertebrates' b'.' b'Despite' b'strident' b'stellar' b',' b'both' b'bird' b'may' b'be' b'repeated' b'from' b'their' b'Stortford' b'.' b'When' b'they' b'do' b'not'
    b'existing' b'up' b'tension' b',' b'they' b'do' b'not' b'move' b'on' b'it' b'.' b'Those' b'agree' b'for' b'the' b'specific' b'extent' b',' b'especially' b'hence'
    b'or' b'<unk>' b'.' b'Walton' b'can' b'make' b'in' b'other' b'mechanical' b'nest' b'or' b'cold' b'as' b'it' b'exist' b',' b'even' b'<unk>' b'when' b'they'
    b'were' b',' b'or' b'that' b'were' b'moist' b'with' b'immigration' b'.' b'<eos>' b'Collaboration' b'Hitoshi' b'Aftermath' b',' b'birds' b'are' b'among' b'a' b'message' b'trader'
    b'injuries' b'in' b'<unk>' b'.' b'Wind' b',' b'criminology' b'forests' b'<unk>' b'selective' b'food' b',' b'gradually' b'shaped' b'involving' b'roosts' b'.' b'Prior' b'to' b'eggs'
    b',' b'other' b'or' b'nominate' b'hinted' b'and' b'best' b'below' b'the' b'amount' b'of' b'depictions' b'were' b'lost' b'.' b'This' b'transcriptional' b'lobe' b'can' b'be'
    b'towed' b'to' b'13400' b'the' b'evidence' b'for' b'food' b'that' b'fight' b'.' b'Primary' b'may' b'be' b'found' b'to' b'be' b'described' b'as' b'they' b'find'
    b'in' b'.' b'"' b'reactors' b'"' b'is' b'believed' b'to' b'be' b'considered' b'by' b'Tsar' b'<unk>' b'Glanville' b'.' b'<eos>' b'Crash' b'Boom' b'Bang' b':'
    b'The' b'Way' b'(' b'Revue' b')' b',' b'longest' b',' b'<unk>' b'has' b'long' b'figure' b'.' b'<unk>' b'and' b'irregular' b'by' b'body' b'owl' b'called'
    b'"' b'<unk>' b'"' b',' b'which' b'are' b'Most' b'companions' b'is' b'blue' b',' b'trio' b'and' b'flies' b'out' b',' b'more' b'woodland' b'in' b'8th'
    b'Australia' b'.' b'Around' b'the' b'world' b'in' b'40' b'%' b'of' b'the' b'population' b',' b'livestock' b'from' b'habitat' b'zero' b',' b'come' b'to' b'vary'
    b'down' b'for' b'the' b'menus' b'of' b'vertex' b'top' b'to' b'freeing' b'food' b'ambiguous' b'.' b'Other' b'methods' b'wheel' b'birds' b'significantly' b',' b'males' b'have'
    b'only' b'symbolize' b'Australia' b'by' b'spines' b'.' b'They' b'has' b'no' b'agricultural' b'authorities' b'to' b'be' b'obtained' b'by' b'one' b'base' b'of' b'the' b'female'
    b',' b'including' b'food' b',' b'Ushant' b',' b'and' b'human' b'<unk>' b'.' b'<unk>' b',' b'migrating' b',' b'and' b'as' b'they' b'reconcile' b'as' b'a'
    b'two' b'@-@' b'resolution' b'<unk>' b'(' b'Bloody' b'equilibrium' b')' b',' b'is' b'treatment' b'of' b'non' b'@-@' b'predator' b'and' b'by' b'4' b'.' b'About'
    b'100' b'million' b'1965' b'(' b'14' b'\xc2\xb0' b'F' b')' b'within' b'common' b'times' b',' b'there' b'are' b'a' b'common' b'change' b'with' b'varying' b'grayish'
    b'range' b'.' b'Two' b'female' b'species' b'admitted' b'at' b'Palenque' b',' b'and' b'criticized' b'other' b'tightly' b'spikes' b'and' b'proclaimed' b'to' b'other' b'function' b'and'
    b'fatalities' b'.' b'Within' b'other' b',' b'their' b'kakapo' b'is' b'fully' b'persistent' b'.' b'Applications' b'abstract' b'females' b'can' b'remain' b'in' b'assignments' b',' b'frequently'
    b'up' b'for' b'the' b'high' b'processing' b'<unk>' b'<unk>' b'.' b'The' b'early' b'shrine' b'of' b'indirectly' b'has' b'been' b'due' b'to' b'little' b'Danny' b'.'
    b'Even' b'they' b'satisfy' b'Mary' b'Civilization' b'with' b'their' b'agent' b'Caxton' b'Everyday' b'<unk>' b'<unk>' b'phosphors' b'the' b'black' b'<unk>' b',' b'Clemson' b'(' b'Hinds'
    b',' b'power' b')' b',' b'compares' b'for' b'them' b'it' b'and' b'back' b'to' b'recapture' b'gathering' b'arms' b'.' b'Alabama' b'approaches' b'other' b'males' b'to'
    b'undergo' b'seeds' b'from' b'practice' b'in' b'Western' b'schools' b'.' b'Another' b'combination' b'of' b'identifying' b'surface' b'prey' b'<unk>' b'residues' b',' b'for' b'example' b','
    b'perversion' b'and' b'lithium' b'.' b'Most' b'falls' b'may' b'be' b'closely' b'found' b'to' b'support' b',' b'and' b'revived' b'headgear' b'.' b'A' b'cap' b'sex'
    b',' b'seeds' b'of' b'greater' b'styles' b',' b'humans' b'act' b',' b'bushes' b',' b'<unk>' b',' b'or' b'illness' b'6s' b'.' b'They' b'holds' b'<unk>'
    b'slightly' b',' b'pressure' b'encode' b'towed' b'@-@' b'however' b',' b'and' b'<unk>' b'their' b'small' b'classes' b',' b'forming' b'them' b'already' b'on' b'one' b'track'
    b'.' b'A' b'inner' b'basal' b'amount' b'chapels' b'throughout' b'the' b'gills' b',' b'especially' b'that' b'they' b'are' b'probably' b'successful' b'.' b'Only' b'commonly' b'note'
    b',' b'such' b'as' b'<unk>' b'depending' b'on' b'most' b'other' b'Storms' b',' b'a' b'small' b'species' b'as' b'<unk>' b',' b'or' b'halogenated' b'refuse' b'.'
    b'However' b',' b'this' b'other' b'pond' b'without' b'bright' b'DNA' b'sequence' b'with' b'the' b'Azores' b'and' b'as' b'fruit' b'reigned' b'bands' b'is' b'each' b'unlike'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 235.3
    loss: 5.168
    elapsed time (seconds): 162.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  43.039 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
