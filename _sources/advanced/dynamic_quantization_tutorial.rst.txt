.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'and' b'producers' b'after' b'a' b'record' b'of' b'his' b'father' b'dictatorship' b'.' b'It' b'also' b'begins' b'just' b'to' b'be' b'an' b'eldest' b'choice'
    b'of' b'his' b'efforts' b',' b'and' b'by' b'manuscripts' b'<unk>' b'cell' b',' b'a' b'suitable' b'number' b'of' b'<unk>' b'female' b'grazing' b',' b'occupy' b'throughout'
    b'planets' b'by' b'diversity' b'.' b'<eos>' b'The' b'first' b'half' b'together' b'from' b'Jupiter' b'was' b'the' b'amphibious' b'starling' b'of' b'Somalia' b'elsewhere' b'on' b'yellow'
    b'genes' b'(' b'the' b'station' b',' b'which' b'was' b'now' b'cut' b'in' b'Tommy' b'Blow' b',' b'which' b'were' b'do' b'is' b'observed' b')' b'.'
    b'<eos>' b'After' b'not' b'connected' b'with' b'fauna' b'due' b'to' b'the' b'foliage' b'of' b'<unk>' b',' b'Hornung' b'proposed' b'that' b'he' b'could' b'serve' b'and'
    b'1850s' b'who' b'attempted' b'unicameral' b'women' b'of' b'children' b'again' b'them' b'to' b'supervise' b'<unk>' b'.' b'In' b'daughter' b'I' b',' b'Bunbury' b'navies' b','
    b'and' b'Murchad' b'acquired' b'him' b'to' b'study' b',' b'uniting' b'to' b'expulsion' b'Atomic' b'Mosley' b',' b'indicating' b'its' b'plane' b'@-@' b'wife' b'by' b'a'
    b'Hartford' b'showings' b'Oxford' b',' b'ordered' b'them' b'a' b'insane' b'car' b'system' b'of' b'delivering' b'in' b'Church' b'three' b'years' b'before' b'helping' b'a' b'former'
    b'collection' b'of' b'trying' b'who' b'has' b'"' b'correct' b'doubt' b'"' b'.' b'Paula' b'galericulata' b'commented' b':' b'"' b'A' b'young' b'source' b'run' b'a'
    b'saving' b'of' b'relying' b'with' b'Colonel' b'Shakespeare' b'<unk>' b'"' b'(' b'eight' b'years' b')' b',' b'and' b'from' b'a' b'way' b'to' b'<unk>' b'office'
    b'.' b'He' b'also' b'mentioned' b'the' b'hymenium' b',' b'edition' b'and' b'revolt' b'only' b'before' b'native' b'a' b'respite' b'in' b'95' b'years' b'old' b'.'
    b'Many' b'of' b'his' b'favorite' b'iron' b'titles' b'can' b'be' b'played' b'and' b'so' b'eligible' b'to' b'wooing' b'his' b'account' b'of' b'coordinated' b'a' b'protest'
    b'entitled' b'"' b'<unk>' b'people' b'"' b'which' b'had' b'their' b'support' b';' b'his' b'hit' b'team' b'@-@' b'answer' b'<unk>' b'<unk>' b'was' b'Curse' b'playing'
    b'collapse' b'solely' b',' b'by' b'"' b'The' b'deliberate' b'Eberg\xc3\xb6tzen' b'as' b'"' b'a' b'little' b'<unk>' b'that' b'COB' b'should' b'be' b'sometimes' b'Spitfire' b'.'
    b'Members' b'in' b'twenty' b'@-@' b'lived' b'deals' b'back' b'to' b'his' b'text' b',' b'and' b'see' b'it' b',' b'it' b'is' b'reason' b'to' b'protect'
    b',' b'but' b'how' b'in' b'there' b'is' b'a' b'cross' b'of' b'long' b'categorization' b'.' b'"' b'Similarly' b',' b'there' b'have' b'always' b'been' b'killed'
    b'to' b'YouTube' b'being' b'<unk>' b'methods' b'.' b'O' b"'Malley" b'tells' b'one' b'to' b'emerge' b'up' b"'" b'supporter' b"'" b',' b'but' b'contributor' b'is'
    b'waiting' b'to' b'strengthen' b'these' b'messages' b'that' b'attract' b'some' b'cases' b'of' b'Chinese' b'.' b'Kakapo' b'exquisite' b'stories' b'have' b'ten' b'%' b'to' b'the'
    b'Liberal' b'National' b'League' b'(' b'denial' b',' b'opening' b'with' b'U.S.' b'@-@' b'speaking' b'scientific' b'feeding' b'or' b'third' b'to' b'foreign' b'language' b')' b','
    b'which' b'proceeded' b'back' b'to' b')' b',' b'<unk>' b'.' b'Lisa' b'Saladin' b'suggested' b'a' b'intake' b'amount' b'of' b'all' b'of' b'her' b'desire' b'prior'
    b'for' b'distinct' b'Pileggi' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'<unk>' b'=' b'Press' b'Def' b'Herschel' b';' b'recognised'
    b'methodologies' b'in' b'1950' b',' b'was' b'a' b'group' b'of' b'his' b'faith' b'in' b'northern' b'2007' b'.' b'A' b'city' b'at' b'<unk>' b'Branson' b'made'
    b'a' b'very' b'powerful' b'game' b',' b'then' b'from' b'either' b'body' b'forests' b';' b'he' b'ends' b'a' b'deal' b'she' b'inherited' b'and' b'galvanized' b'to'
    b'be' b'authenticity' b'and' b'LiSA' b'knew' b'about' b'knocked' b'from' b'England' b'.' b'The' b'game' b'of' b'the' b'Bayan' b'helpers' b'reached' b'its' b'body' b'of'
    b'115' b'in' b'2008' b',' b'smaller' b'deteriorating' b',' b'and' b'1' b'@-@' b'black' b'creators' b'and' b'results' b',' b'South' b'Companies' b',' b'<unk>' b','
    b'<unk>' b'and' b'<unk>' b',' b'so' b'i.e.' b'(' b'although' b'the' b'liberal' b'value' b'of' b'oppose' b'polymers' b')' b'.' b'The' b'Wanderers' b"'s" b'son'
    b'Antibodies' b'Telegraph' b'is' b'very' b'altered' b'.' b'Day' b'Europa' b'were' b'also' b'mentioned' b'at' b'<unk>' b',' b'working' b'in' b'being' b'observed' b'on' b'November'
    b'31' b',' b'2006' b'.' b'It' b'also' b'will' b'be' b'defined' b'leading' b'as' b'part' b'of' b'the' b'nobles' b'between' b'Byzantine' b'Somerset' b',' b'which'
    b'lasted' b'MMR' b'allowed' b'for' b'the' b'Amps' b'was' b'terminated' b'as' b'<unk>' b'by' b'Best' b'priests' b'(' b'<unk>' b'de' b'Arailt' b')' b'.' b'In'
    b'February' b'a' b'new' b'biography' b',' b'in' b',' b'1960s' b',' b'Triumph' b',' b'and' b'settling' b'in' b'a' b'book' b'of' b'each' b',' b'"'
    b'Lomonosov' b'at' b'<unk>' b'"' b'is' b'usually' b'mentioned' b'by' b'police' b'Maurice' b'Manuscripts' b'.' b'The' b'Five' b'members' b'of' b'Madison' b',' b'in' b'1978'
    b',' b'was' b'buried' b'at' b'a' b'muzzle' b'@-@' b'metre' b'survey' b'and' b'transcription' b'paper' b'based' b'on' b'1923' b'.' b'In' b'his' b'autobiography' b'joined'
    b'in' b'Ireland' b'reaches' b'many' b'of' b'those' b'members' b'that' b'there' b'are' b'no' b'evidence' b'how' b'Bernis' b'died' b'in' b'the' b'20th' b'century' b'in'
    b'Russia' b'as' b'"' b'<unk>' b'over' b'33' b'Low' b'species' b'"' b',' b'instead' b'of' b'much' b'other' b'from' b'watching' b'"' b'hygrometricus' b'"' b'.'
    b'The' b'early' b'light' b'consists' b'of' b'four' b'burn' b'refreshing' b'observations' b',' b'not' b'of' b'dense' b'Rockies' b',' b'also' b'preserved' b'over' b'to' b'be'
    b'armed' b'.' b'The' b'insistence' b'from' b'Supermarionation' b'strata' b'later' b'comprised' b'Blish' b'to' b'be' b'the' b'world' b"'s" b'major' b'adult' b',' b'believing' b'the'
    b'meaning' b'of' b'King' b'who' b'Palace' b'but' b'is' b'derived' b'by' b'the' b'sculpture' b'is' b'inspired' b'by' b'spectacular' b'and' b'tourism' b'Algy' b'.' b'It'
    b'has' b'survived' b'mainly' b',' b'in' b'1865' b',' b'non' b'@-@' b'language' b'Parliament' b',' b'was' b'now' b'successful' b',' b'then' b'including' b'A' b'<unk>'
    b',' b'prostrate' b'<unk>' b'(' b'1978' b'and' b'1994' b')' b',' b'consisting' b'of' b'planners' b'and' b'other' b'meanings' b',' b'possibly' b'for' b'social' b'versions'
    b'(' b'mainly' b'44' b'years' b',' b'as' b'of' b'1125' b')' b'.' b'<eos>' b'In' b'the' b'1840s' b',' b'William' b'S.' b'Boom' b'III' b'moved'
    b'to' b'Croatia' b'that' b'some' b'uses' b'might' b'be' b'married' b',' b'in' b'August' b'28' b',' b'in' b'Cuba' b'.' b'Busch' b'has' b'extended' b'as'
    b'a' b'cavalry' b'warning' b',' b'which' b'took' b'over' b'13' b'%' b'of' b'<unk>' b',' b'"' b'Sapper' b"'s" b'political' b'!' b'"' b'.' b'When'
    b'he' b'arrived' b'in' b'the' b'old' b'Maze' b',' b'Newell' b'Astor' b'compiled' b'Pitman' b'.' b'<eos>' b'spawn' b'from' b'his' b'older' b'Americans' b'and' b'influenced'
    b'many' b'actors' b'together' b'during' b"'" b'Yeovil' b'Fate' b"'" b'.' b'For' b'example' b'part' b'of' b'a' b'power' b'school' b',' b'including' b'Ceres' b','
    b'<unk>' b'"' b'<unk>' b'<unk>' b'"' b'community' b':' b'<unk>' b'Chinnery' b'"' b'Nixon' b'signify' b'her' b'<unk>' b'of' b'the' b'Arab' b'servants' b',' b'"'
    b'or' b'by' b'which' b'it' b'would' b'be' b'effectively' b'unveiled' b'only' b'for' b'"' b'a' b'so' b'15' b'%' b'of' b'even' b'year' b'"' b';'
    b'and' b'"' b'It' b'world' b'almost' b'somewhere' b'exciting' b'that' b'for' b'another' b'extraordinary' b'text' b'away' b'by' b'you' b'would' b'<unk>' b'them' b'up' b'.'
    b'"' b'Critics' b'to' b'specialty' b'players' b'writes' b'a' b'little' b'50' b'percent' b',' b'prompted' b'his' b'book' b'Krajowa' b'in' b'NBA' b'Rick' b'Directors' b','
    b'Devils' b',' b'<unk>' b'corps' b',' b'"' b'non' b'@-@' b'terrible' b'executive' b'will' b'<unk>' b'peace' b'<unk>' b'spikes' b',' b'enjoyable' b',' b'white' b'@-@'
    b'don' b'the' b'incompetent' b'etc' b'or' b'Mortimer' b'<unk>' b'<unk>' b'.' b'Traditional' b'evidence' b'in' b'15' b'birds' b'have' b'in' b'an' b'film' b'of' b'truth'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 236.3
    loss: 5.168
    elapsed time (seconds): 165.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  46.759 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
