.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'death' b',' b'and' b'<unk>' b'adversaries' b'was' b'too' b'left' b'.' b'"' b'A' b'delegation' b'race' b'at' b'a' b'total' b'of' b'reports' b'in'
    b'Florida' b',' b'The' b'baptistery' b'wander' b'in' b'a' b'column' b',' b'and' b'there' b'is' b'<unk>' b'Valenti' b'"' b'cannot' b'be' b'killed' b'.' b'Some'
    b'of' b'his' b'require' b'waves' b'instantly' b'Posse' b'(' b'flashing' b'Veeru' b')' b'have' b'also' b'accepted' b'large' b'predators' b'into' b'in' b'high' b'light' b'areas'
    b'.' b'<eos>' b'Moment' b"'s" b'popularity' b'across' b'the' b'state' b',' b'Marvin' b'<unk>' b'(' b'Divorce' b')' b',' b'were' b'attributed' b'to' b'very' b'successful'
    b'flame' b',' b'with' b'three' b'pieces' b',' b'over' b'half' b'horns' b',' b'Bartov' b',' b'and' b'other' b'brightness' b'.' b'<eos>' b'The' b'earliest' b'related'
    b'murdered' b'of' b'all' b'letters' b'are' b'particularly' b'averted' b'for' b'existing' b'starlings' b'.' b'With' b'X' b'results' b',' b'the' b'number' b'takes' b'100' b'years'
    b'gave' b'place' b'even' b'reduced' b'new' b'methods' b'.' b'Now' b',' b'they' b'becomes' b'possible' b'by' b'they' b'are' b'transcribed' b'to' b'have' b'Heinkel' b'effect'
    b'as' b'Portable' b'resources' b',' b'making' b'any' b'of' b'Hobbs' b"'s" b'large' b'activities' b'.' b'The' b'bell' b'has' b'300' b'to' b'47' b'degrees' b'features'
    b'%' b';' b'this' b'may' b'come' b'from' b'<unk>' b'for' b'"' b'short' b'occasions' b'"' b'but' b'approximate' b'the' b'<unk>' b'of' b'her' b'unidentified' b'body'
    b'parrot' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Usage' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Kilmer' b"'s" b'books' b'are' b'shown' b'when' b'poker'
    b'interdiction' b'out' b'so' b'539' b',' b'which' b'are' b'also' b'known' b'by' b'165' b'he' b'has' b'been' b'problematic' b',' b'thus' b'though' b'to' b'have'
    b'titled' b'beryllium' b'compared' b'to' b'<unk>' b'captured' b'(' b'C6H5' b')' b',' b'the' b'king' b"'" b'following' b'Steam' b'team' b'(' b'<unk>' b')' b'and'
    b'completed' b'body' b'suppose' b'at' b'a' b'Jains' b'set' b'into' b'cholera' b'.' b'However' b',' b'it' b'was' b'by' b'the' b'ungulates' b'bowl' b'of' b'two'
    b'devotees' b'that' b'is' b'known' b'until' b'June' b'2006' b'.' b'The' b'Kakapo' b'version' b'is' b'programmable' b'approximately' b'Wilcox' b',' b'as' b'they' b'are' b'even'
    b'known' b'at' b'any' b'other' b',' b'by' b'their' b'need' b',' b'neither' b'or' b'the' b'<unk>' b"'s" b'left' b'.' b'<eos>' b'The' b'peridium' b'has'
    b'been' b'much' b'stealing' b'for' b'an' b'collection' b'of' b'formulae' b'on' b'females' b'to' b'use' b'@-@' b'up' b'spindle' b'with' b'faith' b'.' b'Six' b'counties'
    b'are' b'100' b',' b'laying' b',' b'<unk>' b',' b'making' b'six' b'rows' b',' b'with' b'strict' b'one' b'designs' b'.' b'One' b'windows' b'are' b'common'
    b',' b'while' b'less' b'older' b'hyphae' b'do' b'Haga' b'<unk>' b',' b'but' b'it' b'is' b'usually' b'in' b'all' b'abdomen' b'.' b'This' b'rotation' b'is'
    b'trapped' b'in' b'the' b'<unk>' b'.' b'In' b'addition' b',' b'they' b'were' b'relying' b'to' b'bring' b'females' b'.' b'In' b'1996' b',' b'Heinz' b'investigation'
    b',' b'such' b'are' b'exploited' b',' b'enlargement' b'such' b'as' b'veins' b'and' b'equilibrium' b'to' b'be' b'eucalypts' b'on' b'resources' b'.' b'A' b'U' b'<unk>'
    b'tail' b'they' b'have' b'moving' b'in' b'mental' b'areas' b',' b'with' b'other' b'prohibitions' b'guilty' b'of' b'black' b'intercourse' b',' b'and' b'represent' b'other' b'addition'
    b'into' b'the' b'police' b'stage' b'.' b'They' b'told' b'that' b'<unk>' b',' b'it' b'has' b'high' b'fox' b'M.' b'carbonaria' b'but' b'though' b'astronomer' b'Slocum'
    b'states' b'they' b'have' b'like' b'material' b'"' b'been' b'held' b'as' b'a' b'classical' b'<unk>' b'"' b'.' b'She' b'settled' b'in' b'his' b'symbol' b'more'
    b'than' b'4' b'@,@' b'000' b'in' b'Australia' b';' b'the' b'kakapo' b'alone' b'passes' b'very' b'damage' b'.' b'Although' b'<unk>' b'allows' b'her' b'plumage' b','
    b'the' b'state' b',' b'a' b'parks' b',' b'may' b'clearly' b'be' b'absorbed' b'on' b'the' b'chin' b'\xe2\x80\x94' b'<unk>' b'<unk>' b',' b'a' b'goddess' b'Gaviria'
    b'and' b'Cut' b'<unk>' b',' b'<unk>' b'plateau' b',' b'and' b'the' b'common' b'irony' b'and' b'<unk>' b'.' b'Where' b'the' b'name' b',' b'common' b'reactions'
    b'may' b'continue' b'to' b'be' b'formed' b'in' b'private' b'areas' b',' b'including' b'physical' b',' b'<unk>' b',' b'mad' b',' b'moth' b',' b'collecting' b'greenish'
    b'and' b'conical' b',' b'making' b'birds' b'.' b'The' b'kakapo' b'confronts' b'secondary' b'for' b'Addington' b',' b'early' b'mg' b',' b'transportation' b'disagreeable' b'and' b'science'
    b'.' b'These' b'open' b'Arnie' b'graveyard' b'are' b'disturbed' b'by' b'radiation' b'when' b'it' b'is' b'a' b'military' b'ICC' b',' b'particularly' b'the' b'species' b'room'
    b',' b'and' b'most' b'besides' b'with' b'tissue' b',' b'they' b'Imca' b',' b'which' b'could' b'find' b'the' b'common' b'pore' b'dust' b',' b'support' b'.'
    b'This' b'does' b'not' b'stick' b'to' b'morally' b'double' b'so' b'for' b'their' b'eggs' b'.' b'They' b'typically' b'exist' b'Mentmore' b'or' b'male' b',' b'and'
    b'singing' b'in' b'early' b'with' b'its' b'clothes' b',' b'where' b'limiting' b'rows' b'to' b'find' b'rates' b'it' b'impossible' b'.' b'Ross' b'shall' b'be' b'less'
    b'always' b'in' b'frequent' b'relation' b'since' b'they' b'are' b'in' b'his' b'dogs' b',' b'bringing' b'when' b'it' b'begins' b'down' b'by' b'a' b'protein' b'.'
    b'Three' b'may' b'accept' b'vitality' b'in' b'the' b'field' b'of' b'an' b'francs' b'and' b'viewer' b',' b'but' b'it' b'may' b'be' b'in' b'any' b'other'
    b'.' b'Males' b'\xc2\xa3' b'58' b'to' b'the' b'species' b'of' b'other' b'birds' b'<unk>' b'similarity' b'for' b'toxic' b'attention' b'.' b'When' b'they' b'do' b'put'
    b',' b'their' b'leftist' b'behavior' b'hides' b'splashes' b'well' b'standards' b',' b'upon' b'are' b'hot' b'or' b'<unk>' b'.' b'<unk>' b',' b'when' b'reaction' b'gas'
    b',' b'may' b'be' b'within' b'first' b'.' b'Ross' b'among' b'miners' b'are' b'all' b'<unk>' b'from' b'whether' b'they' b'cannot' b'have' b'not' b'flavour' b'every'
    b'eye' b'.' b'<unk>' b'succeeds' b'in' b'the' b'general' b'item' b'and' b'spread' b'it' b'with' b'causing' b'fewer' b'or' b'more' b'more' b'negative' b'membrane' b'.'
    b'In' b'temperate' b'aspects' b',' b'females' b'are' b'incredibly' b'considered' b'useful' b'and' b'without' b'pairs' b'or' b'herding' b'trees' b'.' b'They' b'may' b'explain' b'around'
    b'folding' b',' b'when' b',' b'as' b'they' b'unheard' b'burns' b',' b'prey' b'away' b'with' b'normally' b'close' b'to' b'distress' b'or' b'mobbing' b'absorption' b'.'
    b'umbo' b'rivaled' b'small' b'areas' b'that' b'surfaces' b'often' b'approaches' b'Horus' b',' b'which' b'can' b'be' b'nesting' b'with' b'Kitana' b',' b'clearance' b',' b'wonder'
    b',' b'or' b'treasonable' b',' b'so' b'females' b'returns' b'to' b'acquiring' b'better' b'them' b'.' b'Despite' b'that' b'temple' b',' b'they' b'find' b'their' b'breeding'
    b'usage' b',' b'after' b'the' b'shape' b'of' b'predators' b'who' b'were' b'sunny' b'.' b'They' b'smell' b',' b'the' b'eye' b"'" b'fear' b'.' b'advise'
    b',' b'there' b'is' b'no' b'enlarged' b'function' b'that' b'varies' b'in' b'a' b'produce' b'motion' b'and' b'even' b'loses' b'up' b'them' b'and' b'Dubrava' b'<unk>'
    b'.' b'The' b'island' b'has' b'Adummatu' b'eggs' b'a' b'low' b'effect' b'which' b'may' b'be' b'distinguished' b'so' b'he' b'must' b'dynamically' b'.' b'His' b'head'
    b'also' b'of' b'resurrected' b'birds' b'cannot' b'be' b'specially' b'based' b'in' b'47th' b'classrooms' b'following' b'her' b'next' b'problems' b',' b'although' b'they' b'must' b'more'
    b'hit' b'and' b'sinks' b'down' b'.' b'As' b'they' b'are' b'given' b',' b'discriminate' b'largest' b'when' b'donor' b'sites' b'have' b'hair' b'conifers' b',' b'purity'
    b'will' b'be' b'willing' b'to' b'find' b'its' b'Stupid' b'god' b'.' b'<eos>' b'These' b'starling' b'were' b'born' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ceres'
    b'=' b'=' b'<eos>' b'<eos>' b'Common' b'remains' b'\xe2\x80\x93' b'prey' b'burns' b'have' b'been' b'called' b'organized' b'or' b'sometimes' b'cautious' b'objects' b'than' b'common' b'venom'
    b'.' b'The' b'spacecraft' b'has' b'17' b'centimetres' b'(' b'46' b'ft' b')' b'known' b'as' b'one' b'clothing' b'.' b'And' b'causing' b'least' b'or' b'as'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.3
    loss: 5.168
    elapsed time (seconds): 139.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  58.360 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
