.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Pier' b'and' b'their' b'resupply' b'.' b'<eos>' b'During' b'the' b'20th' b'century' b'he' b'and' b'the' b'<unk>' b'butterflies' b',' b'including' b'Henry' b'Music' b','
    b'Kentucky' b'and' b'305' b'women' b'associated' b'below' b'platoons' b'for' b'a' b'resources' b'of' b'30' b'to' b'10' b'%' b',' b'<unk>' b'six' b'other' b'spots'
    b'to' b'add' b',' b'the' b'<unk>' b'linked' b'to' b'see' b'staging' b'to' b'94' b'Narvesen' b',' b'around' b'charge' b',' b'among' b'selects' b'components' b'on'
    b'the' b'floor' b'of' b'maturity' b'.' b'<eos>' b'However' b',' b'in' b'NC' b'Rock' b'for' b'short' b'periods' b'of' b'luminescence' b',' b'a' b'pads' b'in'
    b'Ireland' b'did' b'not' b'native' b'if' b'it' b'is' b'too' b'tightly' b'in' b'different' b'leagues' b',' b'typically' b'free' b',' b'but' b'became' b'further' b'as'
    b'to' b'work' b'for' b'technology' b'"' b'<unk>' b'"' b'Napa' b',' b'which' b'caused' b'by' b'Ceres' b'the' b'species' b'complete' b'both' b'of' b'less' b'allowed'
    b'after' b'after' b'.' b'From' b'his' b'career' b'Jordan' b'are' b'able' b'to' b'be' b'proven' b';' b'in' b'1644' b'he' b'intends' b'until' b'1899' b'with'
    b'his' b'<unk>' b'ability' b'.' b'Individual' b'called' b'Einstein' b'had' b'become' b'two' b'minor' b'productions' b',' b'visiting' b'the' b'type' b'of' b'45' b'school' b'collected'
    b'(' b'13' b'@.@' b'4' b'km' b')' b'away' b'about' b'their' b'launch' b'.' b'Although' b'the' b'larger' b'cultural' b'starling' b'would' b'find' b'food' b','
    b'and' b'as' b'its' b'Lovell' b'may' b'aggravated' b'400' b'minigames' b'or' b'males' b',' b'or' b'rejoined' b'above' b'that' b'other' b',' b'its' b'legs' b'carried'
    b'more' b'of' b'the' b'legs' b'they' b'wish' b'to' b'catch' b'@-@' b'Scientology' b'.' b'<eos>' b'There' b'were' b'approximately' b'7' b'@.@' b'5' b'million' b'days'
    b'in' b'1909' b',' b'with' b'25' b'other' b'Harbor' b'violations' b'.' b'One' b'of' b'the' b'best' b'ships' b'are' b'known' b'up' b'on' b'late' b'17'
    b'.' b'One' b'of' b'foraging' b'women' b'may' b'be' b'accumulate' b'in' b'total' b',' b'afterwards' b',' b',' b'indicating' b'a' b'further' b'modern' b'Genoa' b','
    b'soon' b'associated' b'for' b'accounts' b'.' b'An' b'common' b'starlings' b'were' b'docile' b'to' b'write' b'inter' b'or' b'persist' b',' b'flying' b'when' b'once' b'50'
    b'%' b'of' b'birds' b'neglected' b'at' b'least' b'one' b'million' b'days' b'.' b'<eos>' b'In' b'Central' b'Africa' b',' b'common' b'starling' b'oil' b'calls' b'occupies'
    b'support' b'while' b'Phantom' b'Paisley' b'disappears' b'too' b'than' b'weekly' b',' b'allowing' b'to' b'be' b'reputed' b'without' b'<unk>' b',' b'styles' b',' b'favourable' b'conditions'
    b',' b'short' b'trees' b',' b'pad' b'changes' b',' b'magnets' b',' b'and' b'goods' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Armament' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'The' b'highly' b'elaborate' b'grape' b'is' b'available' b'before' b'it' b'is' b'usually' b'always' b'seen' b'off' b'the' b'ongoing' b'orderings' b'.'
    b'Over' b'twenty' b'years' b'this' b'led' b'<unk>' b'that' b'organised' b'Zelanti' b'controlled' b'by' b'levees' b',' b'the' b'mine' b'was' b'garrulous' b'absorbed' b'at' b'5'
    b':' b'45' b'in' b'late' b'tiers' b'.' b'As' b'"' b'the' b'result' b'of' b'Especiais' b',' b'he' b'wrote' b'they' b'must' b'tell' b'sure' b'when'
    b'when' b'it' b'is' b'always' b'a' b'beneficial' b'which' b'are' b'now' b'because' b'they' b'will' b'be' b'very' b'far' b'to' b'portray' b'you' b'men' b'more'
    b'like' b'.' b'Connection' b'both' b'[' b'I' b']' b'wanted' b'to' b'have' b'been' b'very' b'<unk>' b',' b'and' b'have' b'seen' b'no' b'thousands' b'of'
    b'scripts' b'who' b'is' b'round' b'through' b'the' b'best' b'<unk>' b'or' b'to' b'Sora' b'.' b'But' b'say' b'it' b'was' b'her' b'highly' b'transits' b','
    b'consisting' b'right' b'fairly' b'late' b'in' b'a' b'well' b'entertaining' b'Acts' b'together' b'.' b'In' b'in' b'that' b'change' b',' b'there' b'are' b'some' b'other'
    b'use' b'of' b'cracks' b'(' b'now' b'likely' b'to' b'be' b'present' b'.' b')' b'Clive' b'Moscheles' b',' b'depicting' b'it' b'to' b'commit' b'mayor' b','
    b'and' b'they' b'reached' b'all' b'containers' b'we' b'have' b'left' b'new' b'trees' b'.' b'It' b'also' b'kind' b'to' b'never' b'something' b'everything' b'he' b'have'
    b'no' b'better' b',' b'this' b'karaoke' b'<unk>' b'didn' b"'t" b'form' b'an' b'translating' b'name' b'he' b'are' b'and' b'good' b'"' b'.' b'One' b'of'
    b'these' b'of' b'Ceres' b'choose' b'Lloyd' b'staircases' b'.' b'At' b'his' b'left' b'species' b'in' b'the' b'first' b'benign' b'years' b'following' b'2006' b',' b'1926'
    b'Walpole' b"'s" b'strongest' b'score' b'didn' b"'t" b'not' b'imply' b'that' b'Crash' b'Crash' b'Long' b'!' b',' b'which' b'is' b'deeply' b'renamed' b'a' b'star'
    b'as' b'they' b'arrive' b'.' b'Sin' b',' b'of' b'the' b'family' b',' b'disassembly' b'with' b'a' b'pale' b'laborious' b'style' b'penalty' b',' b'takes' b'place'
    b'on' b'his' b'third' b'current' b'career' b'and' b'has' b'"' b'fallen' b'double' b'interest' b'with' b'him' b'and' b'by' b'their' b'arrival' b'"' b'.' b'The'
    b'release' b'of' b'<unk>' b'describes' b'critics' b'a' b'licence' b'following' b'politicians' b',' b'no' b'sex' b'or' b'perfect' b'beings' b'took' b'place' b'over' b'the' b'<unk>'
    b'lands' b'to' b'bury' b'other' b'tasks' b'in' b'1940' b'during' b'his' b'quest' b'.' b'The' b'<unk>' b'states' b'British' b'minister' b'slow' b'Newsted' b'forming' b'acclaim'
    b',' b'while' b'Crash' b'technology' b'care' b'equatorial' b',' b'college' b'and' b'correspondence' b'when' b'prompted' b'as' b'Pitkern' b'sheet' b'to' b'a' b'protest' b',' b'Taylor'
    b'led' b'their' b'playing' b'image' b'as' b'<unk>' b'"' b'brilliant' b'"' b'.' b'The' b'other' b'suffers' b'by' b'unpublished' b'practices' b'for' b'<unk>' b'recorded' b'in'
    b'<unk>' b'Mode' b',' b'the' b'<unk>' b'of' b'Columbia' b',' b'<unk>' b'Robert' b'Jenkins' b'and' b'William' b'Starr' b'lived' b'on' b'content' b'his' b'latest' b','
    b'but' b'there' b'is' b'accompanied' b'up' b'a' b'lifelong' b'lavish' b'audience' b'at' b'Sussex' b'.' b'<unk>' b'and' b'sings' b'architectural' b'distances' b';' b'<unk>' b','
    b'under' b'others' b',' b'and' b'pale' b'or' b'popularized' b'a' b'sword' b'as' b'"' b'false' b'advertising' b'water' b'"' b'.' b'They' b'also' b'show' b'their'
    b'decision' b'everyone' b'and' b'cinematographer' b'<unk>' b'play' b'another' b'up' b'throughout' b'their' b'earlier' b'race' b',' b'in' b'Pittsburgh' b'with' b'a' b'platypus' b'at' b'Neoceratopsia'
    b'and' b'Marty' b'BC' b',' b'an' b'Prize' b'between' b'the' b'two' b'nearby' b'and' b'Christians' b'who' b'scored' b'Baltimore' b'in' b'its' b'way' b'1839' b'in'
    b'<unk>' b'.' b'He' b'suited' b'to' b'a' b'story' b'(' b'<unk>' b'(' b'spelled' b'substance' b'painter' b'whom' b'I' b'have' b'not' b'yet' b'Help' b'enforce'
    b'Odaenathus' b')' b'and' b'a' b'crime' b'leader' b'Fraser' b"'" b'title' b'to' b'potential' b'the' b'resting' b'enemies' b'instead' b'of' b'prize' b',' b'but' b'it'
    b'appears' b'to' b'retain' b'his' b'views' b'.' b'<eos>' b'The' b'discovery' b'of' b'many' b'18' b'children' b'performed' b'by' b'a' b'translation' b',' b'Stern' b'see'
    b'saptibha\xe1\xb9\x85g\xc4\xab' b',' b'is' b'stage' b'known' b'as' b'"' b'Berlin' b'equation' b'stones' b'"' b'.' b'The' b'crew' b'termed' b'their' b'influence' b':' b'"' b'It'
    b"'s" b'has' b'a' b'violation' b'of' b'a' b'very' b'better' b',' b'narrowing' b'a' b'sense' b'of' b'walking' b'a' b'great' b'planet' b'movie' b'.' b'We'
    b'That' b'attribute' b'R\xc3\xa9union' b',' b'possibly' b'at' b'least' b'having' b'13' b'hours' b'.' b'Together' b'up' b'a' b'quarry' b'landowner' b'can' b'have' b'to' b'grab'
    b'the' b'last' b'they' b'needs' b'through' b'a' b'new' b'@-@' b'and' b'side' b'of' b'me' b'.' b'If' b'you' b'do' b'soon' b'mean' b'it' b'was'
    b'clear' b'by' b'a' b'deep' b',' b'it' b'is' b'prohibited' b'.' b'But' b'much' b'I' b'do' b'not' b'see' b'the' b'head' b'House' b'of' b'criminal'
    b'walls' b',' b'which' b'I' b'said' b'to' b'tell' b'his' b'minigames' b'are' b'much' b'Incident' b'we' b"'ve" b'long' b'seen' b'in' b'to' b'become' b'you'
    b'could' b'never' b'indicators' b'.' b'I' b'were' b'close' b'to' b'progressive' b'pour' b'(' b'his' b'face' b'and' b'the' b'national' b'growth' b'of' b'[' b'...'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 237.4
    loss: 5.168
    elapsed time (seconds): 166.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  49.699 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
