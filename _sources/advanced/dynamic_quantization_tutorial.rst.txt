.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'camp' b'as' b'it' b'grows' b'in' b'that' b'year' b'.' b'A' b'female' b'version' b'companies' b'ran' b'or' b'to' b'aid' b'or' b'record' b'Orchart' b'Pine'
    b'@-@' b'sounding' b',' b'automatic' b'and' b'fusing' b',' b'tying' b'that' b'it' b'cannot' b'be' b'difficult' b'to' b'take' b'.' b'Since' b'not' b'until' b'1950'
    b',' b'it' b'was' b'no' b'unpaid' b'tubes' b';' b'when' b'both' b'lines' b'are' b'late' b',' b'he' b'could' b'vary' b'into' b'lookouts' b'to' b'observe'
    b'how' b'a' b'fixed' b'moon' b'is' b'against' b'like' b'larger' b'more' b'than' b'button' b'control' b'it' b'.' b'There' b'are' b'few' b'similar' b'frescoes' b'of'
    b'different' b'or' b'eight' b'distinct' b'sailors' b',' b'having' b'accommodated' b'<unk>' b',' b'whom' b'a' b'pair' b'of' b'net' b'calls' b'.' b'crickets' b'proposes' b'these'
    b'images' b'of' b'brown' b'levels' b',' b'Marion' b',' b'<unk>' b',' b'<unk>' b',' b'usually' b'less' b'resurfacing' b'of' b'the' b'kakapo' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Without' b'life' b'=' b'=' b'<eos>' b'<eos>' b'In' b'the' b'United' b'Kingdom' b',' b'they' b'dogs' b'to' b'be' b'digitally' b'used' b'.'
    b'<unk>' b'game' b'is' b'known' b'on' b'the' b'genus' b'by' b'Seawright' b',' b'who' b'criticized' b'a' b'social' b'habit' b'in' b'this' b'period' b'in' b'the'
    b'family' b'they' b'incorporated' b',' b'so' b'there' b'have' b'so' b'been' b'also' b'converted' b'into' b'<unk>' b'material' b'.' b'<eos>' b'birds' b'stands' b'from' b'London'
    b',' b'under' b'sympathy' b'\xc4\x90\xc3\xacnh' b'native' b'calls' b',' b'and' b'other' b'strips' b'that' b'have' b'witnessed' b',' b'but' b'recording' b'long' b'high' b'freedom' b'.'
    b'This' b'chicks' b'closely' b'represented' b'430' b'million' b'students' b',' b'present' b'down' b'during' b'many' b'break' b'.' b'A' b'high' b'of' b'flightless' b'birds' b'are'
    b'attached' b'to' b'in' b'1983' b'.' b'Also' b'the' b'next' b'year' b',' b'Hamels' b'recorded' b'a' b'sharp' b'neutron' b'on' b'the' b'winged' b'Jekyll' b','
    b'Hotel' b',' b'at' b'a' b'hundred' b'angle' b'15' b':' b'45' b'.' b'Because' b'local' b',' b'the' b'bare' b'layer' b'has' b'recently' b'prefers' b'to'
    b'the' b'female' b',' b'mainly' b'270' b'years' b'later' b',' b'far' b'the' b'thousand' b'kilometres' b'four' b'studios' b'throughout' b'each' b'other' b'.' b'In' b'2005'
    b',' b'it' b'was' b'three' b'heavily' b'in' b'width' b',' b'with' b'age' b'on' b'743' b'.' b'In' b'this' b'phase' b',' b'they' b'are' b'presented'
    b'to' b'each' b'other' b'gun' b',' b'and' b'therefore' b'strip' b'another' b'impact' b'in' b'power' b'near' b'<unk>' b'and' b'Kristiansand' b'birds' b'75' b'\xe2\x80\x93' b'8'
    b'.' b'Its' b'invention' b'finds' b'a' b'mild' b'eye' b'down' b'2' b'@.@' b'4' b'in' b'(' b'132' b'@.@' b'2' b'in' b')' b',' b'2'
    b'%' b'of' b'which' b'are' b'connected' b'to' b'400' b'kg' b'(' b'2' b'@.@' b'9' b'in' b')' b'as' b'overpass' b'.' b'Unlike' b'absolute' b'females'
    b',' b'its' b'striking' b'range' b'is' b'clearly' b'in' b'other' b'areas' b'.' b'When' b'it' b'has' b'no' b'relative' b',' b'other' b'birds' b'are' b'35'
    b'feet' b'(' b'3' b'@.@' b'2' b'mi' b')' b'deep' b',' b'and' b'they' b'can' b'reach' b'up' b'to' b'one' b'leaves' b'.' b'They' b'then'
    b'pitched' b'their' b'beak' b'to' b'even' b'close' b'to' b'the' b'latter' b',' b'which' b'they' b'can' b'indicate' b'to' b'have' b'since' b'instead' b'for' b'gold'
    b'stories' b'.' b'<eos>' b'Mallett' b',' b'sea' b'and' b'sex' b',' b'Structure' b'arrived' b'up' b'a' b'yellowish' b'<unk>' b'spike' b'with' b'the' b'large' b'and'
    b'eye' b'bird' b'.' b'<eos>' b'In' b'the' b'other' b'adolescence' b',' b'over' b'12' b'million' b'cases' b'shooting' b'with' b'Gatwick' b',' b'Sihanouk' b',' b'and'
    b'golf' b'work' b'often' b'extend' b'in' b'woodland' b'and' b'direct' b'both' b'resources' b';' b'the' b'islands' b'is' b'branched' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'Feeding' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Bath' b'compounds' b'are' b'restricted' b'for' b'procedures' b'in' b'many' b'areas' b',' b'which' b'may' b'employ'
    b'mating' b'wild' b'growth' b'when' b'<unk>' b'"' b'monogamous' b'momentum' b',' b'and' b'support' b',' b'sustained' b'them' b'to' b'imagination' b',' b'often' b'<unk>' b','
    b'and' b'it' b'banquets' b'again' b'.' b'This' b'species' b'of' b'a' b'troff' b'can' b'find' b'the' b'male' b'and' b'enter' b'into' b'other' b'species' b'of'
    b'electron' b'dense' b'.' b'There' b'are' b'usually' b'possession' b'of' b'their' b'owl' b'preparing' b'during' b'its' b'large' b'breeding' b'spiral' b'quality' b'.' b'They' b'call'
    b'with' b'them' b'for' b'<unk>' b',' b'such' b'as' b'rice' b',' b'design' b',' b'operas' b',' b'we' b'are' b'enlarged' b'even' b'.' b'O' b'galericulata'
    b'constituted' b'profound' b'wind' b'relations' b'(' b'cellular' b'head' b')' b'.' b'Once' b'culture' b',' b'they' b'are' b'already' b'valid' b'before' b'they' b'do' b'.'
    b'"' b'Under' b'this' b'fisherman' b'passages' b',' b'it' b'makes' b'that' b'b' b'arrangement' b'<unk>' b'are' b'modified' b'.' b'When' b'their' b'section' b'of' b'these'
    b'acceptance' b'had' b'so' b'seized' b',' b'there' b'are' b'many' b'diagram' b'that' b'birds' b'fell' b'to' b'a' b'small' b'tails' b'that' b'evolved' b'in' b'favour'
    b'.' b'Dual' b'<unk>' b'(' b'1825' b')' b'may' b'help' b'large' b'.' b'They' b'may' b'be' b'gravitationally' b'satisfactorily' b'react' b'into' b'both' b'asteroids' b'.'
    b'There' b'are' b'no' b'difficulty' b'that' b'they' b'have' b'spread' b'to' b'ice' b'alpine' b'visibility' b',' b'they' b'can' b'only' b'Shoshone' b'high' b'perpendicular' b'or'
    b'die' b'.' b'Thus' b',' b'they' b'may' b'require' b'it' b'when' b'leaving' b'bubbles' b'.' b'Of' b'example' b',' b'their' b'population' b'an' b'specific' b'attribute'
    b'after' b'pale' b',' b'other' b'objects' b'were' b'crushed' b'.' b'It' b'is' b'so' b'recognized' b'that' b'some' b'or' b'<unk>' b'occur' b'to' b'have' b'ended'
    b'.' b'The' b'chicks' b'are' b'grey' b',' b'so' b'by' b'pursuit' b'of' b'that' b'of' b'or' b'Ambassador' b',' b'however' b',' b'may' b'be' b'under'
    b'many' b'females' b'who' b'may' b'have' b'push' b'so' b'without' b'5' b'@-@' b'spored' b'.' b'If' b'Australia' b'believes' b',' b'short' b'common' b'plumage' b'are'
    b'like' b'a' b'challenge' b'of' b'nutritional' b',' b'<unk>' b'because' b'Nebrius' b'flies' b'with' b'her' b'example' b'or' b'occurrences' b'.' b'Other' b'parrot' b'male' b'extends'
    b'weapon' b'superficial' b'@-@' b'up' b',' b'which' b'will' b'be' b'resulted' b'on' b'electromagnetic' b'@-@' b'iron' b'permitting' b'gum' b'.' b'Yet' b'the' b'Bypass' b','
    b'that' b'fewer' b'individuals' b'mature' b'plant' b'near' b'males' b'close' b'to' b'their' b'range' b'.' b'at' b'2' b':' b'45' b',' b'hence' b'up' b'('
    b'golden' b',' b'or' b'gradient' b'to' b'females' b',' b'can' b'be' b'hidden' b')' b',' b'but' b'due' b'to' b'Saurolophus' b'increased' b',' b'results' b'jailed'
    b',' b'and' b'Harris' b'Grass' b',' b'which' b'can' b'be' b'prevented' b'by' b'Threatened' b',' b'so' b'they' b'are' b'controlled' b'by' b'a' b'variety' b'of'
    b'Viking' b'chicks' b'.' b'Reaching' b'they' b'starts' b'down' b'as' b'they' b'wider' b'them' b'on' b'her' b'other' b'areas' b'or' b'brown' b',' b'accurate' b'@-@'
    b'body' b'options' b'.' b'In' b'this' b'head' b',' b'nurses' b'were' b'not' b'on' b'a' b'variety' b'of' b'images' b',' b'but' b'they' b'do' b'be'
    b'transmitted' b'.' b'<eos>' b'<unk>' b':' b'Males' b'of' b'Ceres' b',' b'males' b',' b'sensors' b'(' b'past' b'<unk>' b')' b'have' b'loss' b'.' b'And'
    b'no' b'@-@' b'other' b'female' b',' b'walking' b'as' b'it' b'express' b'people' b"'" b'bird' b',' b'effectively' b'lost' b'to' b'<unk>' b'.' b'Common' b'starlings'
    b'sulfide' b'.' b'There' b'are' b'twelve' b'<unk>' b'types' b'of' b'those' b'or' b'leisure' b'virus' b'(' b'consisting' b'of' b'other' b'<unk>' b'gray' b'nestlings' b')'
    b',' b'while' b'they' b'are' b'less' b'effective' b',' b'as' b'they' b'conclude' b'their' b'or' b'regions' b'can' b'be' b'perhaps' b'treated' b'.' b'<eos>' b'Astraeus'
    b'Supervisors' b'may' b'be' b'recycled' b'based' b'on' b'Melzer' b"'s" b'overall' b'entire' b'body' b',' b'particularly' b'as' b'their' b'nest' b'activity' b'and' b'may' b'be'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 239.1
    loss: 5.168
    elapsed time (seconds): 169.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  53.859 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
