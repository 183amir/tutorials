.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'" b'biography' b'impress' b'.' b'Almost' b'nine' b'\xe2\x81\x84' b'their' b'third' b',' b'<unk>' b',' b'Not' b',' b'with' b'breaking' b',' b'1963' b',' b'and'
    b'so' b'impression' b'murdering' b'up' b'or' b'excavated' b'into' b'a' b'half' b'of' b'24' b'light' b'and' b'clearing' b'rockets' b'off' b'three' b'impacts' b'.' b'This'
    b'less' b'dynamic' b'play' b',' b'or' b'pressure' b'maximum' b',' b'do' b'not' b'be' b'limited' b'to' b'<unk>' b',' b'or' b'bowls' b'for' b'Vengeur' b"'"
    b'<unk>' b'<unk>' b'.' b'<eos>' b'After' b'Veblen' b'on' b'his' b'270' b'Mont' b'terrain' b'(' b'see' b'they' b'mention' b'an' b'trilogy' b')' b'to' b'play'
    b'a' b'English' b'audience' b'who' b'returned' b'to' b'an' b'new' b'rate' b'of' b'attainment' b'in' b'Somerset' b',' b'and' b'Monteith' b'around' b'him' b'derives' b','
    b'either' b'betrayed' b'attempts' b';' b'<unk>' b'<unk>' b'sit' b'in' b'1852' b'.' b'As' b'Second' b'People' b"'" b'memoirs' b'generally' b'included' b'physical' b'activities' b','
    b'the' b'stress' b'was' b'still' b'influenced' b'by' b'critique' b'to' b'<unk>' b'conceal' b'Belgium' b'from' b'both' b'and' b'proper' b'stories' b'.' b'One' b'organized' b'to'
    b'aid' b'Actress' b"'s" b'<unk>' b'party' b'has' b'at' b'Catalinas' b'University' b'.' b'It' b'seems' b'supported' b'him' b'from' b'Brittany' b',' b'Din' b'lateral' b','
    b'possible' b'for' b'worship' b',' b'and' b'pumped' b'damage' b'for' b'both' b'examples' b'and' b'B\xc3\xa9dard' b'.' b'Also' b'that' b'Arizona' b'necessary' b'to' b'pursue' b'gold'
    b'lines' b'in' b'with' b'legal' b',' b'journal' b'@-@' b'autonomic' b',' b'and' b'her' b'one' b'of' b'his' b'queen' b"'s" b'one' b'volume' b'.' b'<eos>'
    b'Although' b'his' b'number' b'hired' b'from' b'them' b'expenses' b',' b'new' b'financial' b'crisis' b'are' b'aware' b'of' b'a' b'short' b'one' b'nuns' b'were' b'units'
    b'of' b'tutor' b'.' b'This' b'was' b'descended' b'for' b'a' b'elaborate' b'print' b'later' b'or' b'a' b'system' b'show' b'that' b'there' b'did' b'not' b'be'
    b'hampered' b'by' b'visionary' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Shadow' b'=' b'=' b'<eos>' b'<eos>' b'In' b'1899' b',' b'editor' b'<unk>' b'and' b'Mr'
    b'Books' b'offered' b'twin' b',' b'and' b'predicted' b'seeking' b'to' b'trawling' b'licences' b'.' b'It' b'was' b'put' b'the' b'second' b'version' b'in' b'longer' b'school'
    b';' b'they' b'were' b'<unk>' b'by' b'other' b'degree' b'.' b'<unk>' b'in' b'academy' b'included' b'the' b'planet' b"'s" b'motion' b'"' b'pulse' b'"' b'by'
    b'gold' b',' b'praising' b'soldiers' b'as' b'"' b'a' b'example' b'of' b'Hey' b'games' b'that' b'are' b'debated' b'and' b'because' b'e' b'the' b'director' b'really'
    b'begins' b'buried' b'.' b'"' b'<eos>' b'In' b'1823' b',' b'The' b'term' b'Times' b'was' b'created' b'during' b'Europe' b'and' b'Blu' b'@-@' b'layered' b'and'
    b'Cambridge' b',' b'with' b'initially' b'discarded' b'residents' b'now' b'earned' b'thirty' b'@-@' b'game' b'.' b'He' b'scored' b'the' b'Diarmait' b'GMA' b'Man' b'for' b'the'
    b'American' b'<unk>' b'(' b'<unk>' b')' b'and' b'<unk>' b'Solis' b'with' b'the' b'2nd' b'West' b'Comic' b'federal' b'title' b'.' b'Filming' b'moved' b'to' b'risk'
    b'to' b'Lu' b"'s" b'<unk>' b'Ceres' b',' b'<unk>' b'<unk>' b'and' b'Japan' b'.' b'The' b'Jews' b'originally' b'won' b'Blish' b'being' b'reclassified' b'on' b'its'
    b'interests' b'at' b'all' b'development' b'the' b'title' b'new' b'school' b',' b'<unk>' b'Stephen' b'St' b'CBS' b',' b'John' b'Johnson' b',' b'<unk>' b'Columbus' b','
    b'Radio' b'White' b',' b'and' b'The' b'group' b'using' b'the' b'Hugo' b"'ohang" b'Forest' b'(' b'David' b'Goldhagen' b')' b'"' b'characters' b'"' b',' b'in'
    b'which' b'Odaenathus' b'defended' b'a' b'criminal' b'financial' b'rammed' b'carbon' b'that' b'is' b'afraid' b'of' b'Kentucky' b'by' b'Austin' b'Raymond' b'that' b'following' b'a' b'gesture'
    b'of' b'nearly' b'5' b'@.@' b'7' b'\xc2\xb0' b'institutions' b',' b'a' b'Peter' b'ring' b'office' b'down' b'by' b'play' b'down' b'through' b'memorable' b'personas' b'.'
    b'A' b'star' b'praised' b'the' b'Japanese' b'Holding' b'to' b'send' b'a' b'planet' b'marshy' b'who' b'might' b'be' b'regarded' b'in' b'what' b'might' b'be' b'humanistic'
    b',' b'or' b'Stuart' b'O' b"'Malley" b'left' b'him' b'set' b'compassion' b'at' b'a' b'mistake' b'.' b'They' b'Wagner' b'recalls' b'Raffles' b"'s" b'yearly' b'composition'
    b'to' b'the' b'entire' b'game' b'sentences' b'.' b'Eno' b'announced' b'money' b'as' b'girls' b',' b'like' b'"' b'Russians' b'"' b'and' b'"' b'black' b'"'
    b',' b'"' b'sums' b'"' b'stages' b'Iraq' b',' b'who' b'wrote' b'he' b'"' b'claimed' b'in' b'ancient' b'city' b'novel' b'"' b'<eos>' b'The' b'amount'
    b'of' b'building' b'offerings' b'was' b'"' b'disagreement' b'to' b'star' b'"' b',' b'and' b'they' b'began' b'to' b'convey' b'to' b'her' b'theme' b'of' b'"'
    b'in' b'his' b'.' b'features' b'up' b'him' b'overnight' b'up' b'"' b'and' b'"' b'languid' b'truth' b'"' b';' b'its' b'highly' b'possession' b',' b'"'
    b'The' b'One' b'coy' b'planet' b'...' b'Provisions' b'of' b'or' b'from' b'Q' b':' b'Some' b'ways' b'<unk>' b'47' b'people' b'in' b'the' b'proper' b'sense'
    b'"' b'.' b'While' b'of' b'line' b'Lady' b'Spector' b'led' b'the' b'character' b'for' b'March' b'2' b',' b'2015' b'the' b'speech' b'won' b'106' b'@,@'
    b'000' b'copies' b'in' b'2011' b',' b'while' b'according' b'to' b'Nielsen' b'Community' b'Commission' b"'s" b'plot' b'on' b'June' b'10' b',' b'1994' b',' b'1'
    b'@,@' b'000' b'Dramatic' b'students' b'earned' b'$' b'4' b'million' b'in' b'Labyrinth' b'.' b'At' b'its' b'peak' b'school' b'network' b',' b'the' b'Alabama' b'of'
    b'the' b'Crimson' b'Race' b'(' b'Come' b')' b'were' b'a' b'recall' b'book' b'a' b'game' b'at' b'alternate' b'non' b'@-@' b'79' b',' b'indicating' b'large'
    b'players' b'to' b'1870s' b'footage' b'a' b'sign' b'were' b'spent' b'.' b'In' b'addition' b',' b'pronunciation' b'published' b'eggs' b'from' b'a' b'development' b'to' b'vote'
    b'in' b'[' b'Carrie' b']' b'Dinosaurs' b'III' b'members' b'in' b'the' b'show' b'he' b'took' b'his' b'early' b'struggle' b'to' b'be' b'a' b'school' b','
    b'in' b'addition' b'to' b'<unk>' b'in' b'the' b'CG' b'race' b';' b'in' b'1947' b'they' b'also' b'ruled' b'plans' b'in' b'Japan' b'and' b'Protestant' b'Mountain'
    b',' b'1981' b',' b'in' b'1774' b'and' b'was' b'mudskippers' b'to' b'pursue' b'twenty' b'@-@' b'nine' b'authors' b'.' b'The' b'play' b'declined' b'March' b'17'
    b',' b'1999' b',' b'marking' b'crociato' b'plans' b',' b'and' b'also' b'composed' b'Cardiff' b',' b'90th' b',' b'France' b',' b'Seattle' b',' b'Ava' b','
    b'ethics' b',' b'Nevada' b',' b'and' b'art' b'throughout' b'the' b'year' b'.' b'In' b'The' b'moratorium' b',' b'Dodge' b'received' b'the' b'Pistons' b'to' b'be'
    b'delayed' b'noted' b'by' b'the' b'Catholic' b'Civil' b'Christian' b'Administration' b'<unk>' b'.' b'The' b'list' b'moved' b'to' b'the' b'two' b'appearances' b'and' b'other' b'demographic'
    b',' b'and' b'thus' b'may' b'have' b'another' b'point' b'proved' b'to' b'create' b'recording' b'Queen' b'inches' b'horses' b'.' b'Roger' b'McAllister' b'of' b'CBS' b'is'
    b'elected' b'when' b'many' b'of' b'his' b'fans' b'have' b'their' b'own' b'vocals' b'itself' b'of' b'a' b'criminal' b'taste' b'<unk>' b'"' b'to' b'link' b'in'
    b'1795' b'that' b'comes' b'to' b'set' b'wounded' b'.' b'"' b'1999' b',' b'including' b'bilingual' b'to' b'international' b'characters' b'in' b'spring' b',' b'Tremellogaster' b'and'
    b'one' b'libraries' b'include' b'consistently' b'more' b'than' b'one' b'million' b'stories' b'in' b'situations' b'.' b'The' b'Per\xc3\xb3ns' b'are' b'abundant' b'with' b'press' b'demonstrations' b','
    b'laying' b'budget' b'loss' b'together' b'and' b'variously' b'how' b'toxicity' b'instead' b'are' b'"' b'the' b'inclination' b'that' b'Walter' b'<unk>' b'<unk>' b'is' b'"' b'.'
    b'<eos>' b'conviction' b'set' b'Mating' b'isn' b"'t" b'look' b'midnight' b'to' b'attend' b'their' b'early' b'date' b'.' b'As' b'a' b'result' b',' b'O' b'Land'
    b'is' b'about' b'by' b'succeeded' b'the' b'ticket' b'instead' b'making' b'by' b'the' b'stressed' b'as' b'rid' b'of' b'belts' b'throughout' b'his' b'older' b'way' b'.'
    b'After' b'at' b'blame' b',' b'who' b'was' b'criticized' b'by' b'winning' b'responsibility' b'that' b'Sultan' b'tells' b'asserts' b'"' b'kind' b'of' b'Essay' b'attack' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 256.8
    loss: 5.168
    elapsed time (seconds): 168.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  10.802 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
