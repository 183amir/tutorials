.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'Alice' b"'s" b'nephew' b'(' b'Atkinson' b'Antigua' b')' b'link' b'the' b'defences' b'of' b'side' b'or' b'elsewhere' b';' b'verses' b',' b'the' b'Democrats'
    b'food' b'(' b'blamed' b'Lord' b'Howard' b'(' b'Meuvaines' b'g' b')' b'.' b'<eos>' b'detection' b'lose' b'the' b'body' b'for' b'overture' b'.' b'of' b'Kingdom'
    b',' b'along' b'on' b'London' b'courts' b',' b'his' b'son' b'attributed' b'several' b'decades' b',' b'initially' b'Link' b'I' b'name' b'the' b'<unk>' b'is' b'directly'
    b'loosely' b'.' b'<eos>' b'industry' b'pushed' b'frequently' b'Anthony' b'Directed' b'aground' b'from' b'old' b'books' b'to' b'which' b'become' b'standing' b'in' b'India' b'from' b'the'
    b'coastline' b'but' b'luminosity' b'reinstated' b'him' b',' b'but' b'were' b'unknown' b'only' b'to' b'image' b'continues' b'to' b'own' b'Game' b'II' b',' b'Kelvin' b'Nights'
    b',' b'enhanced' b'Duke' b'and' b'husbandman' b'like' b'slavery' b'.' b'<eos>' b'A' b'post' b'@-@' b'planet' b'Puppet' b'Engler' b'was' b'published' b'in' b'April' b'1235'
    b'.' b'He' b'ranged' b'on' b'a' b'tube' b'front' b'for' b'<unk>' b',' b'on' b'Lake' b'Stepmother' b',' b'Bob' b'<unk>' b',' b'after' b'being' b'priesthood'
    b'.' b'The' b'game' b'of' b'the' b'Kashi' b'Sky' b'Bay' b',' b'about' b'10' b'miles' b'long' b'\xe2\x80\x94' b'are' b'the' b'technical' b'Rufinus' b'of' b'natural'
    b'larger' b'predators' b'.' b'The' b'department' b'are' b'disputed' b'by' b'the' b'Abu' b'Power' b'Posse' b'Bond' b'Archive' b'and' b'northeast' b'of' b'format' b',' b'having'
    b'revealed' b'effect' b'in' b'London' b'.' b'In' b'less' b'pagan' b'numbers' b'of' b'this' b'type' b'grew' b'on' b'October' b'25' b',' b'1909' b',' b'the'
    b'integrity' b'of' b'large' b'cyclonic' b'status' b'would' b'be' b'too' b'combined' b'since' b'translated' b'up' b'in' b'place' b'.' b'<eos>' b'Arkansas' b'brought' b'six' b'short'
    b'domains' b'based' b'under' b'the' b'upper' b'metal' b'platinum' b'and' b'more' b'U\xc3\xad' b'<unk>' b'lived' b'at' b'the' b'school' b'.' b'A' b'cladogram' b'ceremony' b'then'
    b'became' b'certified' b'conversations' b'between' b'a' b'black' b'judo' b'and' b'large' b'silver' b'screen' b'grunge' b',' b'but' b'memorial' b'<unk>' b',' b'<unk>' b',' b'official'
    b'Tsubame' b',' b'Scale' b'cabled' b'fast' b'teeth' b',' b'Hawai\xca\xbbi' b'parish' b',' b'fruit' b'and' b'other' b'languages' b'attempted' b'both' b'over' b'while' b'detail' b','
    b'places' b'in' b'Japan' b'.' b'<eos>' b'Many' b'primary' b'raids' b'of' b'Ceres' b'in' b'appreciation' b'of' b'Irish' b'burns' b'is' b'highly' b'useful' b'to' b'be'
    b'creators' b'of' b'a' b'low' b'crime' b'of' b'only' b'other' b'world' b'or' b'sacrifice' b',' b'because' b'this' b'bird' b'probably' b'occurred' b'on' b'a' b'current'
    b'branch' b'of' b'interpreting' b'wet' b'migration' b'.' b'<eos>' b'From' b'the' b'first' b'century' b'of' b'the' b'main' b'delivery' b'Hampshire' b"'s" b'intention' b'with' b'fiftieth'
    b'overall' b'trademark' b'\xe2\x80\x91' b'areas' b',' b'in' b'North' b'Africa' b',' b'marched' b'a' b'number' b'of' b'potential' b'venom' b'.' b'<eos>' b'Since' b'the' b'population'
    b'of' b'Bath' b',' b'Ireland' b'is' b'the' b'older' b'perspectives' b'who' b'had' b'sent' b'decoration' b'in' b'his' b'pilots' b'.' b'Krasnyi' b'warehouses' b'fights' b'with'
    b'a' b'relationship' b'before' b'rhythmic' b',' b'the' b'first' b'kings' b'remains' b'of' b'publication' b'.' b'After' b'his' b'completion' b',' b'these' b'"' b'directing' b'rebelled'
    b'"' b'such' b'as' b'Babylonian' b',' b'Felix' b'Kund' b',' b'is' b'located' b'.' b'inhabits' b'flightless' b'elements' b'from' b'a' b'circular' b'with' b'local' b','
    b'the' b'species' b'and' b',' b'evolves' b',' b'they' b'cannot' b'alienated' b'coastal' b'interest' b'from' b'territorial' b'health' b',' b'around' b'10' b'million' b'pesos' b'('
    b'6' b'%' b')' b',' b'can' b'be' b'made' b'make' b'a' b'knit' b'mild' b'language' b'up' b'by' b'the' b'form' b'of' b'the' b'islands' b'.'
    b'The' b'expressive' b'Anglo' b'@-@' b'caf\xc3\xa9' b'has' b'a' b'combination' b'of' b'<unk>' b'instruction' b'.' b'No' b'rainfall' b'Monthly' b'Called' b'employ' b'the' b'introduction' b'of'
    b'thousand' b'instruments' b'prior' b'to' b'any' b'other' b'river' b'incursion' b',' b'Worcester' b',' b'<unk>' b',' b'eucalypts' b',' b'probably' b'<unk>' b',' b'and' b'rather'
    b'varied' b'he' b'follow' b'them' b'with' b'the' b'community' b'.' b'A' b'flock' b'that' b'there' b'might' b'be' b'exchanging' b'aspects' b'of' b'his' b'conviction' b','
    b'which' b'could' b'be' b'found' b'.' b'Another' b'assessment' b'retains' b'starling' b'50s' b'appears' b'to' b'be' b'heard' b'but' b'surmounted' b'in' b'the' b'5th' b'century'
    b',' b'of' b'the' b'kakapo' b'of' b'<unk>' b',' b'King' b'Leslie' b'S.' b'<unk>' b',' b'a' b'no' b'governor' b'being' b'microscopic' b'by' b'local' b'Boot'
    b'of' b'<unk>' b'to' b'find' b'them' b',' b'interaction' b'into' b'its' b'variable' b'areas' b'around' b'its' b'daily' b'common' b'computer' b'military' b',' b'streetcars' b','
    b'1736' b',' b'<unk>' b',' b'searing' b'adverse' b',' b'and' b'<unk>' b'.' b'<unk>' b'convinced' b'that' b'extensive' b'bodies' b'.' b'<eos>' b'<eos>' b'<eos>' b'='
    b'specie' b'Horizons' b'(' b'1986' b')' b'=' b'<eos>' b'<eos>' b'The' b'pre' b'1970s' b'features' b'generally' b'unknown' b'letters' b'including' b'chemical' b'jumping' b'vastly' b'suggest'
    b',' b'too' b'and' b'<unk>' b',' b'September' b'as' b'day' b'.' b'The' b'dirt' b'be' b'sung' b'through' b'the' b'Mesolithic' b'language' b'to' b'form' b'a'
    b'conspiracy' b'which' b'this' b'begins' b'rough' b'problems' b'across' b'humans' b'.' b'Like' b'severe' b'bands' b',' b'a' b'combination' b'of' b'legs' b'formed' b'near' b'the'
    b'burn' b'zone' b'and' b'differs' b'with' b'this' b'other' b'gill' b'@-@' b'up' b'such' b'as' b'<unk>' b'items' b',' b'and' b'eagles' b',' b'which' b'they'
    b'have' b'often' b'hold' b'or' b'compact' b'due' b'to' b'their' b'offspring' b'in' b'northern' b'years' b'.' b'Crash' b'store' b'is' b'the' b'head' b'characteristic' b'of'
    b'their' b'best' b'major' b'gasteroid' b',' b'only' b'non' b'@-@' b'outdoor' b'species' b'by' b'Sudan' b'formed' b'with' b'eat' b',' b'when' b'they' b'move' b'to'
    b'<unk>' b'.' b'They' b'prevailed' b'around' b'from' b'running' b'even' b'before' b'becoming' b'"' b'unique' b',' b'warm' b'@-@' b'black' b'masterpiece' b',' b'"' b'and'
    b'"' b'drifting' b'one' b'305' b'"' b'to' b'have' b'so' b'a' b'unusually' b'mention' b'adaptation' b'.' b'Eno' b'\xe2\x80\x94' b'usually' b'Marines' b',' b'could' b'be'
    b'exciting' b'.' b'Vandernoot' b',' b'who' b'described' b'the' b'land' b'source' b'as' b"'" b'This' b'Shou' b'"' b'by' b'The' b'Arthur' b'<unk>' b'of' b'the'
    b'follicles' b'.' b'With' b'export' b'that' b'one' b'of' b'these' b'games' b'is' b'eventually' b'different' b'imported' b',' b'he' b'is' b'words' b'of' b'Philip' b'I'
    b',' b'like' b'a' b'schools' b'of' b'NS' b'Makeba' b';' b'which' b'he' b'possessed' b'and' b'then' b';' b'in' b'his' b'stock' b'back' b'to' b'have'
    b'a' b'social' b'Orthodox' b'radiates' b'length' b'amongst' b'to' b'genuine' b'crime' b',' b'retitled' b'its' b'head' b'(' b'died' b'by' b'the' b'profit' b'of' b'Clamp'
    b"'s" b'protagonist' b'enters' b'forces' b'from' b'his' b'voice' b')' b'.' b'If' b'the' b'other' b'epithet' b'Young' b'royal' b'teenage' b'on' b'@-@' b'belting' b'meals'
    b'has' b'moved' b'to' b'a' b'large' b'four' b'\xe2\x80\x93' b'10' b',' b'13' b'%' b'of' b'the' b'public' b',' b'escaped' b'every' b'horse' b'before' b'a'
    b'runway' b',' b'when' b'the' b'reviewer' b'and' b'Jimmy' b'<unk>' b'(' b'Pound' b'5' b'\xe2\x80\x93' b'40' b'Branch' b'/' b'66' b'@.@' b'002' b')' b'18'
    b'\xe2\x80\x93' b'2' b',' b'indicating' b'a' b'Patent' b'institute' b'and' b'studies' b'<unk>' b'(' b'describe' b'money' b')' b'.' b'<eos>' b'In' b'1973' b',' b'the'
    b'biggest' b'first' b'verse' b',' b'reality' b'Named' b'various' b'attention' b',' b'48' b'@-@' b'resistant' b'mythology' b'Island' b',' b'Jake' b'Williams' b',' b'Sam' b'M.'
    b'Schmidt' b'.' b'malfunctioning' b',' b'a' b'two' b'@-@' b'term' b'result' b'between' b'Benjamin' b'meter' b',' b'familiar' b'judicial' b'of' b'non' b'@-@' b'81' b','
    b'and' b'increased' b'enough' b'to' b'date' b'from' b'his' b'novel' b'for' b'active' b',' b'or' b'another' b'planet' b'.' b'The' b'fox' b'was' b'in' b'certain'
    b'works' b'at' b'their' b'home' b',' b'outside' b'the' b'fourth' b'sequence' b',' b'literary' b',' b'and' b'discussed' b'his' b'Mein' b'spots' b'.' b'This' b'de'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 222.1
    loss: 5.168
    elapsed time (seconds): 149.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  17.952 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
