.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'headed' b'1867' b',' b'but' b'<unk>' b'road' b',' b'but' b'few' b'men' b'supported' b'large' b'buildings' b'in' b'adult' b'times' b'.' b'crested' b'Payne'
    b'from' b'Heidfeld' b'was' b'changed' b'to' b'anything' b'Cynan' b'.' b'<eos>' b'<eos>' b'=' b'=' b'anniversary' b'=' b'=' b'<eos>' b'<eos>' b'To' b'have' b'always'
    b'fallen' b'his' b'Gallienus' b"'" b'ambition' b'with' b'art' b'of' b'prohibit' b'six' b'information' b'of' b',' b'the' b'ceasefire' b'of' b'journalists' b'would' b'be' b'a'
    b'absolute' b'planet' b'of' b'periods' b'that' b'scarcely' b'can' b'be' b'commodity' b'.' b'Otherwise' b',' b'they' b'were' b'still' b'abandoned' b';' b'it' b'is' b'not'
    b'rooted' b'.' b'Quinn' b"'s" b'fastest' b'and' b'three' b'seasons' b',' b'while' b'primarily' b',' b'Power' b'had' b'the' b'length' b'of' b'M.' b'WCAs' b'of'
    b'Ceres' b'.' b'The' b'convict' b'experiences' b'Stokes' b'against' b'Moshenska' b',' b'and' b'with' b'his' b'48th' b'involvement' b'on' b'uninfected' b'later' b'at' b'least' b'only'
    b'recently' b'over' b'the' b'\xc2\xb0' b'or' b'difficult' b'condition' b'.' b'Levin' b'with' b'avenues' b'have' b'seen' b'only' b'33rd' b'organisations' b'by' b'Echmarcach' b'.' b'<eos>'
    b'<eos>' b'<eos>' b'=' b'HMS' b'Unknown' b'(' b'1999' b')' b'=' b'<eos>' b'<eos>' b'Race' b'243' b'Hageby' b'(' b'Mearns' b')' b'is' b'a' b'former'
    b'public' b'dubium' b'that' b'includes' b'to' b'win' b'dress' b'that' b'grows' b'more' b'than' b'<unk>' b'performances' b'.' b'These' b'conclusions' b'have' b'come' b'to' b'growing'
    b'annual' b'Dre' b'.' b'In' b'his' b'condition' b'on' b'the' b'25' b'islands' b'during' b'the' b'Payette' b'BDS' b'series' b'he' b'had' b'long' b'Ha' b'and'
    b'a' b'1545' b'cycle' b'formed' b'later' b'or' b'<unk>' b'and' b'townships' b'into' b'that' b'old' b'rigs' b'.' b'Almost' b'doing' b'water' b'donations' b',' b'she'
    b'seems' b'to' b'classify' b'it' b'when' b'one' b'minister' b'lost' b'them' b',' b'because' b'a' b'dizzying' b'<unk>' b'gelatinous' b'brawl' b'into' b'Hell' b'.' b'Andrea'
    b'<unk>' b'refused' b'the' b'Final' b'to' b'Ones' b'as' b'1649' b',' b'having' b'become' b'a' b'run' b'for' b'<unk>' b',' b'in' b'2004' b',' b'as'
    b'well' b'.' b'<eos>' b'<unk>' b'to' b'<unk>' b'their' b'Japanese' b'extending' b'safe' b'official' b'routes' b',' b'but' b'best' b'or' b'in' b'Germany' b',' b'was'
    b'no' b'longer' b'.' b'Females' b'Pescara' b'have' b'designed' b'being' b'underwent' b'to' b'give' b'over' b'400' b'months' b'.' b'<unk>' b'made' b'up' b'BBC' b'subjects'
    b'by' b'tax' b'faculty' b',' b'and' b'<unk>' b'Schumann' b',' b'which' b'ensue' b'to' b'prefer' b'Bridge' b'in' b'Hull' b'that' b'emeritus' b'and' b'Sinclair' b'totalled'
    b'its' b'head' b'chiefly' b'you' b'"' b'didn' b"'t" b'do' b'been' b'a' b'wasted' b'wedding' b'(' b'like' b'at' b'least' b'one' b')' b'was' b'a'
    b'consistent' b'address' b'"' b'.' b'The' b'reviewer' b'helped' b'that' b'some' b'about' b'27' b'%' b'were' b'dependent' b'to' b'shorter' b'difficulties' b'to' b'run' b'on'
    b'its' b'usage' b'.' b'An' b'year' b'on' b'a' b'city' b'has' b'a' b'rich' b'broodmare' b'with' b',' b'feeding' b'as' b'an' b'promotional' b'head' b'examination'
    b',' b'and' b'led' b'fewer' b'interceptions' b'on' b'the' b'east' b'or' b'landfall' b'near' b'a' b'six' b'@-@' b'yard' b'draft' b'and' b'changed' b'to' b'quite'
    b'other' b'reasons' b'.' b'There' b'is' b'tension' b'in' b'avaktavya\xe1\xb8\xa5' b'and' b'platinum' b'Jews' b',' b'Livin' b'and' b'<unk>' b',' b'which' b'do' b'not' b'turn'
    b'by' b'hundred' b'parts' b'of' b'the' b'Waldrons' b',' b'but' b'contrasts' b'so' b'by' b'hanging' b'by' b'<unk>' b'since' b'sources' b'of' b'bird' b'Ito' b','
    b'even' b'at' b'a' b'cornered' b'.' b'When' b'@-@' b'god' b'classification' b',' b'another' b'cell' b',' b'when' b'he' b'initiated' b'the' b'country' b'@-@' b'like'
    b'musician' b',' b'is' b'said' b'to' b'have' b'its' b'fell' b'in' b'the' b'memory' b'by' b'a' b'presentation' b'from' b'the' b'other' b'powers' b'than' b'Special'
    b'Silver' b'.' b'It' b'seems' b'to' b'work' b'in' b'the' b'game' b',' b'usually' b'"' b'Mauritius' b'"' b'.' b'He' b'saved' b'a' b'British' b'field'
    b'trivial' b'Kratos' b'or' b'first' b'<unk>' b'back' b'to' b'the' b'epic' b'status' b'of' b'Reala' b'as' b"'" b'Ceres' b'III' b'(' b'<unk>' b')' b','
    b'Peggy' b'unincorporated' b'Resolution' b',' b'who' b'interact' b'the' b'first' b'and' b'most' b'or' b'way' b',' b'for' b'which' b'this' b'.' b'Classes' b'together' b'wanting'
    b'with' b'Verdi' b'in' b'the' b'final' b'may' b'mark' b'a' b'considerable' b'number' b'of' b'guess' b'him' b'by' b'his' b'feelings' b'.' b'<eos>' b'A' b'two'
    b'@-@' b'millimetre' b'one' b'of' b'total' b'programming' b'and' b'a' b'young' b'Lebanese' b'visit' b'possessed' b'her' b'fantastic' b'death' b',' b'Copia' b'that' b'the' b'Democrat'
    b'is' b'a' b'man' b'in' b'his' b'planet' b'routine' b'with' b'a' b'threat' b'on' b'a' b'<unk>' b'who' b'translated' b'a' b'oarsmen' b'to' b'her' b'"'
    b'him' b'"' b',' b'including' b'Gaga' b',' b'he' b'wanted' b'views' b'for' b'his' b'technique' b'would' b'be' b'sunk' b'at' b'a' b'point' b'that' b'could'
    b'not' b'see' b'umpires' b'.' b'Generally' b'to' b'No' b'responses' b'and' b'conspirators' b'develop' b'bowled' b'a' b'perception' b',' b'the' b'narrator' b'loses' b'no' b'right'
    b'phrase' b'from' b'Viscount' b'discover' b'says' b'for' b'being' b'"' b'distant' b'"' b'when' b'his' b'three' b'prime' b'story' b'buildings' b'were' b'being' b'subject' b'to'
    b'old' b'loyalty' b'with' b'murder' b'.' b'In' b'real' b'acts' b',' b'a' b'honorary' b'rigor' b'who' b'=' b'Zenobia' b'have' b'hexafluoroplatinate' b'operations' b'on' b'the'
    b'conviction' b'.' b'Ceres' b'submitted' b'<unk>' b'illegitimate' b',' b'a' b'wide' b'man' b',' b'how' b'absolute' b'traps' b'extended' b'to' b'him' b'him' b',' b'but'
    b'just' b'rarely' b'suffering' b'in' b'sexual' b'circumstances' b'.' b'Eventually' b',' b'<unk>' b'sat' b'on' b'the' b'Krycek' b'.' b'His' b'layered' b'grandfather' b'Agust\xc3\xadn' b'Clayton'
    b'wrote' b'a' b'peculiar' b'introduction' b'with' b'1514' b'.' b'Whenever' b'after' b'<unk>' b'of' b'privacy' b',' b'Well' b'under' b'another' b'@-@' b'tale' b'barrier' b'character'
    b'(' b'"' b'there' b'"' b'was' b'claimed' b'by' b'Yankovic' b'the' b'following' b'year' b',' b'and' b'the' b'Dubliners' b'why' b'"' b'he' b'got' b'them'
    b'like' b'the' b'Orioles' b'entirely' b',' b'If' b'...' b'most' b'about' b'visitors' b'I' b'are' b'wrapped' b'.' b"'" b'Another' b'music' b'is' b'picked' b'on'
    b'March' b'11' b',' b'a' b'conservative' b'looks' b'to' b'<unk>' b'.' b'It' b'is' b'the' b'even' b'actively' b'a' b'statute' b'of' b'these' b'literature' b'@-@'
    b'juice' b'there' b'to' b'produce' b'it' b'if' b'I' b'seem' b'to' b'destroyers' b'psychology' b'and' b'helps' b'to' b'have' b'certainly' b'originated' b'"' b'.' b'unwillingness'
    b'belief' b'Sir' b'Freeman' b'has' b'discussed' b'that' b'other' b'characters' b'deducted' b'having' b'good' b',' b'Aires' b',' b'both' b'time' b'to' b'be' b'exactly' b'his'
    b'vision' b'.' b'Inside' b'@-@' b'cause' b',' b'the' b'voice' b'of' b'solar' b'words' b'D.' b'them' b'grew' b'depicted' b'southwest' b'from' b'Stjepan' b'et' b'<unk>'
    b'for' b'imaginary' b',' b'deformed' b'policing' b',' b'gleba' b',' b'or' b'Magic' b'Eu' b',' b'and' b'a' b'Crusaders' b'or' b'thus' b',' b'with' b'being'
    b'finite' b'.' b'Since' b'their' b'spiritual' b'<unk>' b'was' b'probably' b'observed' b',' b'freed' b'Atlanta' b'returns' b'to' b'ambushes' b'his' b'head' b'service' b',' b'dismissed'
    b'not' b'down' b'labour' b'or' b'panigrahana' b'sterling' b'.' b'Generally' b',' b'the' b'kakapo' b'is' b'spun' b'.' b'<unk>' b'get' b'up' b'at' b'absolutist' b'dreams'
    b',' b'one' b'a' b'communicated' b'arc' b'(' b'with' b'Ecological' b'genital' b'Center' b')' b',' b'and' b'the' b'Chan' b'regime' b'(' b'1138' b')' b','
    b'example' b'of' b'handling' b'Bhairava' b'(' b'a' b'female' b'@-@' b'woman' b';' b'tooth' b',' b'@-@' b'stabilized' b'cell' b'story' b')' b'and' b'the' b'behaviour'
    b'of' b'them' b'(' b'by' b'9' b'@,@' b'540' b'starspots' b')' b',' b'involving' b'below' b'of' b'a' b'massive' b'hastily' b'graphics' b'(' b'"' b'R'
    b'nymphaeum' b'"' b'.' b',' b'<unk>' b'Derek' b'T.' b'64' b'(' b'3' b'\xe2\x80\x93' b'8' b')' b',' b'although' b'<eos>' b'<eos>' b'=' b'=' b'Development'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.4
    loss: 5.168
    elapsed time (seconds): 149.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  12.355 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
