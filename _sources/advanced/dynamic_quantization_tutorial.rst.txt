.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'should' b'have' b'narrated' b'associated' b'damage' b',' b'<unk>' b'15' b'\xe2\x80\x93' b'12' b'.' b'The' b'prolonged' b'global' b'Jacobson' b'to' b'liberal' b'produce' b'conditions' b'will'
    b'be' b'prevalent' b'by' b'<unk>' b',' b'rather' b'than' b'.' b'<eos>' b'Following' b'that' b'approaching' b',' b'the' b'EAA' b'continues' b'to' b'spend' b'repeated' b'events'
    b'.' b'Saratoga' b'soon' b'evolved' b'in' b'conference' b'to' b'catch' b'trouble' b'and' b'then' b'pass' b'to' b'reject' b'them' b'.' b'About' b'those' b'of' b'these'
    b'149' b'birds' b'is' b'commonly' b'known' b'.' b'Their' b'presence' b'include' b'hate' b'females' b'each' b'outrageously' b'from' b'Bhairava' b'for' b'500' b'years' b'.' b'Those'
    b'searching' b'out' b'sins' b'between' b'Ceres' b'on' b'these' b'act' b'.' b'For' b'example' b',' b'one' b'species' b'can' b'be' b'<unk>' b'from' b'a' b'<unk>'
    b'(' b'translucent' b')' b'and' b'females' b',' b'and' b'the' b'Wolfpack' b'and' b'possibly' b'(' b'18' b'@.@' b'5' b'inches' b')' b'and' b'also' b'male'
    b'females' b'.' b'<eos>' b'Asked' b'(' b'six' b':' b'15' b'@.@' b'7' b'in' b')' b'mean' b'a' b'levels' b'unclear' b'traditions' b'(' b'Corythosaurus' b')'
    b'and' b'lecturing' b'from' b'9' b'kilometres' b'(' b'Beirut' b'in' b')' b'.' b'It' b'first' b'will' b'mention' b'37' b'children' b'Half' b'.' b'A' b'report'
    b'of' b'50' b'percent' b'of' b'BC' b'will' b'be' b'taken' b'until' b'a' b'minute' b',' b'attempting' b'to' b'take' b'from' b'upon' b'three' b'different' b'grounds'
    b'and' b'they' b'are' b'prepared' b'to' b'feed' b'to' b'concentrate' b'on' b'up' b'their' b'bird' b'.' b'Males' b'can' b'be' b'raised' b'and' b'only' b'as'
    b'to' b'attend' b'and' b'farmers' b'actively' b'speak' b'they' b'were' b'looking' b'about' b'at' b'any' b'other' b',' b'although' b'they' b'may' b'develop' b'most' b'Egyptologists'
    b'in' b'many' b'zones' b'prior' b'to' b'less' b'than' b'24' b'times' b'.' b'In' b'Nevada' b',' b'transitioning' b'forbs' b'kilometres' b'in' b'change' b'from' b'Stela'
    b'syndrome' b'(' b'<unk>' b')' b'and' b'suggest' b'that' b'they' b'are' b'an' b'good' b'd' b'mRNA' b'made' b'as' b'closer' b'Rover' b',' b'onto' b'them'
    b',' b'so' b'only' b'during' b'the' b'males' b'of' b'nominate' b'or' b'staple' b'to' b'aid' b'if' b'other' b'help' b'has' b'purported' b'.' b'Repair' b'lost'
    b'12' b'%' b'for' b'36' b'birds' b'that' b'may' b'be' b'photographed' b'by' b'Birth' b',' b'establishing' b'it' b'crops' b'.' b'The' b'basidia' b'rarely' b'also'
    b'importins' b'prodigious' b',' b'and' b'used' b'1' b'kilometres' b'(' b'39' b'ft' b')' b'replayed' b'and' b'wind' b'chicks' b'.' b'In' b'the' b'same' b'consequence'
    b',' b'these' b'they' b'plants' b'of' b'the' b'kakapo' b',' b'gaining' b'eye' b'or' b'remove' b'the' b'head' b',' b'prompted' b'their' b'body' b'(' b'tours'
    b'124' b':' b'August' b'33' b'or' b'less' b'other' b'it' b'or' b'females' b'at' b'2' b'\xc2\xb0' b'females' b'.' b'<eos>' b'A' b'natural' b'Composers' b'is'
    b'assigned' b'to' b'by' b'varieties' b'of' b'many' b'oribi' b',' b'some' b',' b'due' b'to' b'a' b'100' b'ton' b'sequence' b'and' b'a' b'tube' b'angle'
    b'designed' b'and' b'more' b'forested' b',' b'long' b'@-@' b'frequency' b',' b'and' b'finding' b'color' b'deployed' b'for' b'winds' b',' b'with' b'three' b'eggs' b'and'
    b'other' b'difficulties' b'.' b'It' b'is' b'given' b'that' b'hypermetabolic' b'occurs' b'throughout' b'food' b',' b'almost' b'of' b'destroying' b'it' b'even' b',' b'even' b'as'
    b'probably' b'as' b'their' b'DNA' b'level' b'-' b'allows' b'by' b'prevent' b'damage' b'.' b'Off' b'the' b'kakapo' b'of' b'fine' b',' b'the' b'remarkable' b'prospects'
    b'begins' b'underneath' b'leap' b'.' b'Aside' b'down' b'data' b'is' b'afterward' b'by' b'small' b'darker' b'hunters' b'briefly' b'feed' b'on' b'the' b'Solar' b'River' b'chart'
    b',' b'in' b'which' b'they' b'were' b'<unk>' b'.' b'Both' b'have' b'been' b'fatal' b'for' b'its' b'massive' b'attendant' b'giving' b'"' b'parasite' b'"' b'visual'
    b'pockets' b',' b'offensives' b'radial' b'hind' b'or' b'yellow' b'businesses' b'.' b'Illinois' b'is' b'also' b'less' b'than' b'only' b'fully' b'mixture' b'of' b'tight' b'as'
    b'they' b'prefer' b'their' b'behaviour' b'when' b'classes' b'shifted' b'on' b'an' b'bleeding' b'tiger' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Meteorological' b'and' b'Viking' b'and'
    b'history' b'=' b'=' b'<eos>' b'<eos>' b'Boise' b'galericulata' b'among' b'owl' b',' b'women' b',' b'and' b'<unk>' b',' b'and' b'other' b'birds' b'briefly' b'called'
    b'that' b'this' b'pair' b'caused' b'down' b'by' b'use' b'.' b'Females' b'have' b'been' b'declared' b'107' b'@-@' b'shaped' b'labour' b'techniques' b'.' b'Ceres' b'learnt'
    b'Irish' b'among' b'one' b"'s" b'foot' b'<unk>' b"'s" b'parents' b',' b'so' b'even' b'after' b'in' b'this' b'manner' b'they' b'finished' b',' b'so' b'he'
    b'were' b'on' b'Russia' b'and' b'other' b'prominent' b'distribution' b'.' b'A' b'large' b'individual' b'is' b'made' b'.' b'During' b'they' b'or' b'have' b'other' b'damage'
    b'with' b'other' b'birds' b',' b'they' b'cannot' b'have' b'when' b'they' b'are' b'moult' b'during' b'serious' b'value' b'.' b'The' b'eggs' b',' b'such' b'as'
    b'(' b'"' b'Eye' b'"' b')' b'and' b'lines' b',' b'can' b'be' b'used' b'until' b'1978' b'and' b'by' b'1200' b'populations' b',' b'while' b'wing'
    b'fauna' b'have' b'no' b'increase' b'and' b'males' b'could' b'be' b'crowned' b'.' b'fluctuations' b'usually' b'eat' b'activity' b'<unk>' b'.' b'This' b'would' b'be' b'thus'
    b'blocked' b'on' b'10' b'June' b'South' b'February' b',' b'when' b'in' b'North' b'America' b'provided' b'Anatolia' b'in' b'the' b'first' b'<unk>' b'play' b'.' b'Common'
    b'starlings' b'include' b'explosive' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'\xe1\x83\xab' b'and' b'keyboard' b',' b'recommended' b'them' b'his' b'wives' b'.' b'This'
    b'legs' b'may' b'be' b'shipped' b'from' b'a' b'female' b'or' b'Eritrea' b'demonstration' b'of' b'Brown' b'.' b'Other' b'pinkish' b'areas' b',' b'which' b'may' b'be'
    b'understood' b'toward' b'trees' b'in' b'common' b'languages' b',' b'throughout' b'the' b'pleasures' b'where' b'rendezvous' b'Platinum' b'more' b'than' b'<eos>' b'There' b'have' b'be' b'evidence'
    b'toward' b'the' b'<unk>' b'publication' b'(' b'which' b"'s" b'"' b'burns' b'"' b'include' b'someone' b'its' b'facades' b'it' b'found' b'on' b'their' b'anti' b'@-@'
    b'<unk>' b'<unk>' b'.' b'ossification' b'are' b'generally' b'highly' b'common' b'm' b'.' b'In' b'any' b'case' b',' b'the' b'kakapo' b"'s" b'pet' b'analyses' b'spread'
    b'transitioned' b'on' b'terms' b'of' b'<unk>' b'(' b'or' b'1848' b')' b':' b'the' b'second' b'100' b'.' b'The' b'stipe' b'and' b'<unk>' b'separated' b'into'
    b'the' b'common' b'Data' b'@-@' b'booms' b',' b'and' b'the' b'amid' b'effectively' b'soft' b'scales' b':' b',' b'common' b',' b'catches' b'to' b'have' b'taken'
    b'hypermetabolic' b'toxic' b'as' b'may' b'be' b'frequented' b'off' b'ensuring' b'their' b'eggs' b'merging' b'several' b'or' b'other' b'tropical' b'or' b'them' b'.' b'With' b'individuals'
    b',' b'the' b'pagan' b'profession' b'were' b'attached' b'to' b'its' b'sear' b'operations' b',' b'which' b'are' b'clear' b'by' b'other' b'fusion' b',' b'Trees' b'and'
    b'blue' b',' b'as' b'for' b'the' b'heavy' b'frequency' b'.' b'<eos>' b'Unlike' b'several' b'or' b'notions' b'of' b'chasing' b'to' b'1870s' b',' b'it' b'had'
    b'made' b'displacement' b'from' b'food' b'interaction' b'as' b'angle' b'of' b'the' b'healing' b'or' b'<unk>' b'rules' b'throughout' b'the' b'cause' b'.' b'The' b'last' b'official'
    b'supernatural' b'associated' b'earthquakes' b'of' b'sometimes' b'fully' b'a' b'mountain' b'to' b'give' b'tribute' b'for' b'Iron' b',' b'has' b'unable' b'to' b'<unk>' b'small' b'species'
    b'of' b'sediment' b',' b'headed' b'prior' b'to' b'plumes' b',' b'arriving' b'cross' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'bred' b'north' b'of'
    b'portal' b',' b'and' b'O' b'liquids' b'.' b'For' b'example' b',' b'and' b'there' b'it' b'is' b'usually' b'found' b'rearguard' b'foxes' b'between' b'Ceres' b'and'
    b'venom' b'.' b'<eos>' b'Approximately' b'1' b'studies' b'held' b'rapid' b'distances' b',' b'females' b'reported' b'that' b',' b'as' b'they' b'should' b'be' b'<unk>' b'have'
    b'difficulty' b'varying' b'Kato' b',' b'so' b'there' b'are' b'safe' b'offspring' b',' b'they' b'exist' b',' b'and' b'such' b'as' b'.' b'In' b'indicate' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.8
    loss: 5.168
    elapsed time (seconds): 149.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  12.004 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
