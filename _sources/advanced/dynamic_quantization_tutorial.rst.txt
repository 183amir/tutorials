.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'songwriting' b'with' b'three' b'innings' b',' b'in' b'addition' b'for' b'hesitated' b'and' b'circulation' b'of' b'the' b'Winds' b'.' b'<eos>' b'stead' b'accelerated' b'their' b'<unk>'
    b'for' b'incarcerated' b'to' b'be' b'experienced' b'at' b'4' b'p.m.' b'.' b'By' b'mid' b'@-@' b'June' b',' b'the' b'disturbance' b'weakened' b'has' b'named' b'18'
    b'%' b'of' b'empty' b'lines' b',' b'and' b'carried' b'a' b'large' b'wagon' b'monument' b'(' b'39' b'@,@' b'000' b'm' b')' b'.' b'The' b'three'
    b'marriages' b'are' b'also' b'known' b'as' b'<unk>' b',' b'and' b'also' b'areas' b'are' b'probably' b'allowed' b'to' b'remedy' b'without' b'each' b'other' b'.' b'Another'
    b'first' b'by' b'this' b'same' b'year' b'is' b'set' b'.' b'Returning' b',' b'it' b'begins' b'that' b'in' b'a' b'bird' b'contains' b'an' b'suitable' b'abdomen'
    b'among' b'an' b'path' b',' b'it' b'doesn' b"'t" b'be' b'successful' b'later' b'.' b'It' b'was' b'given' b'in' b'several' b'weights' b'staunch' b'W.' b'IV'
    b'in' b'<unk>' b',' b'Michael' b'defended' b'a' b'basis' b'to' b'<unk>' b'legally' b'for' b'the' b'launch' b'jet' b',' b'as' b'well' b'as' b'by' b'a'
    b'odds' b'of' b'stick' b'as' b'clich\xc3\xa9d' b',' b'certainly' b'Italy' b'.' b'When' b'both' b'were' b'marines' b',' b'it' b'was' b'not' b'placed' b'for' b'around'
    b'18' b'years' b'ago' b',' b'following' b'its' b'family' b'will' b'catch' b'extending' b'the' b'body' b'without' b'the' b'destruction' b'of' b'why' b'nesting' b',' b'though'
    b'her' b'third' b'meteorological' b'right' b'is' b'also' b'able' b'.' b'The' b'peat' b'pocket' b'antimonides' b'outside' b'an' b'strange' b'(' b'speeds' b')' b'and' b'are'
    b'<unk>' b'every' b'number' b'of' b'more' b'than' b'the' b',' b'so' b'has' b'seen' b'widespread' b'of' b'them' b'.' b'Yet' b'that' b'Inari' b'with' b'the'
    b'factors' b'gives' b'it' b',' b'when' b'the' b'vulgar' b'subtypes' b'gives' b',' b'they' b'interact' b'they' b'are' b'<unk>' b',' b'though' b'so' b'<unk>' b','
    b'lasting' b'across' b'some' b'other' b'treatments' b'have' b'<unk>' b'.' b'expressed' b'they' b'have' b'accounted' b',' b'starting' b'in' b'a' b'stela' b'in' b'an' b'reflection'
    b'to' b'entice' b'cooler' b'air' b'sites' b'towards' b'further' b'aspects' b'of' b'all' b'.' b'In' b'any' b',' b'it' b'is' b'able' b'to' b'distance' b'at'
    b'a' b'speed' b'of' b'<unk>' b'music' b',' b'which' b'was' b'also' b'regarded' b'as' b'they' b'found' b'or' b'tear' b'.' b'If' b'books' b'are' b'even'
    b'thematically' b'one' b'of' b'their' b'chromosomal' b'predators' b',' b'it' b'isn' b"'t" b'even' b'say' b'that' b'fragillis' b'may' b'thus' b'enter' b'them' b'away' b','
    b'and' b'it' b'meant' b'of' b'.' b'Pupils' b'have' b'always' b'seen' b'protection' b',' b'and' b'fairness' b'are' b'rather' b'hairy' b'and' b'making' b'a' b'southeast'
    b'for' b'people' b'to' b'refute' b'.' b'Later' b',' b'they' b'have' b'falcon' b'hill' b',' b'and' b'this' b'practice' b'meant' b'that' b'incredibly' b'publishing' b','
    b'everything' b'after' b'following' b'its' b'perfect' b'team' b'to' b'be' b'cancelled' b',' b'and' b'mentioning' b'no' b'shoulder' b'at' b'its' b'dismay' b'that' b'this' b'admired'
    b'<unk>' b'would' b'find' b'its' b'invention' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Pine' b'reception' b'=' b'=' b'<eos>' b'<eos>' b'The' b'planet' b'coincided' b'in'
    b'Ireland' b'Dominican' b'Protection' b',' b'ASCAP' b',' b'which' b'since' b'they' b'have' b'previously' b'campgrounds' b'from' b'numbers' b'of' b'Div' b'(' b'70' b',' b'coming'
    b'not' b'in' b'regular' b'patterns' b')' b'.' b'When' b'records' b'are' b'their' b'bird' b',' b'however' b',' b'for' b'other' b'people' b'point' b'for' b'to'
    b'late' b'.' b'600' b'metres' b'(' b'30' b'km' b'/' b'h' b')' b'lb' b',' b'and' b'to' b'be' b'by' b'mature' b'efforts' b'.' b'Common'
    b'young' b',' b'on' b'muscimol' b'commands' b'in' b'<unk>' b'@-@' b'like' b',' b'Dublin' b',' b'forests' b',' b'and' b'high' b'into' b'<unk>' b'enterprise' b','
    b'in' b'cities' b',' b'and' b'which' b'stopping' b',' b'to' b'be' b'to' b'exist' b'between' b'the' b'Sun' b'and' b'feral' b'wings' b'.' b'Winnberg' b'was'
    b'widely' b'forgotten' b'to' b'<unk>' b',' b'where' b'they' b'and' b'by' b'same' b'study' b'caused' b'by' b'photography' b'at' b'nesting' b'.' b'It' b'also' b'appears'
    b'over' b'draining' b'@-@' b'rich' b'medieval' b',' b'Wight' b'sufficiently' b'and' b'the' b'real' b'pathways' b'indicates' b'.' b'thinker' b'<unk>' b'that' b'they' b'Am' b'may'
    b'never' b'mean' b'bordering' b'below' b'food' b',' b'copper' b',' b'or' b'<unk>' b'.' b'Many' b'distinguish' b'common' b'astronomers' b'include' b'<unk>' b'(' b'<unk>' b')'
    b'is' b'lift' b',' b'and' b'may' b'ceasefire' b'the' b'empire' b',' b'becoming' b'in' b'magic' b'.' b'Females' b'shake' b'on' b'grandchildren' b'and' b'their' b'error'
    b',' b'on' b'its' b'food' b'avian' b'forces' b'.' b'A' b'female' b'scheme' b',' b'which' b'is' b'shifted' b'to' b'thought' b'called' b'hosts' b'as' b'they'
    b'should' b'be' b'well' b'.' b'Several' b'more' b'March' b'fly' b'total' b'to' b'be' b'breakage' b'controlled' b'by' b'<unk>' b'.' b'As' b'their' b'cause' b'as'
    b'ridiculous' b',' b'colorless' b'centimetres' b'during' b'One' b'of' b'the' b'last' b'eye' b'.' b'This' b'variant' b'includes' b'Solbakken' b'noise' b',' b'regulation' b',' b'for'
    b'example' b'into' b'forest' b'@-@' b'green' b'rule' b'.' b'The' b'tree' b'calls' b'burns' b'where' b'some' b'of' b'these' b'inhalation' b'tablets' b'join' b'them' b'by'
    b'up' b'after' b'Cunningham' b'feed' b'.' b'In' b'Irish' b',' b'<unk>' b'the' b'breeding' b'<unk>' b'to' b'form' b'inhabitant' b'of' b'specific' b'or' b'disturbance' b'respectively'
    b'in' b'conjunction' b'to' b'about' b'@-@' b'canopy' b'regulation' b'during' b'the' b'upper' b'season' b'.' b'More' b'male' b'difference' b'provides' b'that' b'the' b'male' b'of'
    b'her' b'nest' b'prey' b'is' b'many' b'likely' b',' b'and' b'it' b'has' b'always' b'fewer' b'<unk>' b',' b'when' b'fewer' b'birds' b'help' b'.' b'As'
    b'a' b'result' b'of' b'birds' b'with' b'charmed' b',' b'it' b'will' b'be' b'stable' b'by' b'large' b'food' b'pain' b'.' b'disks' b',' b'food' b','
    b'and' b'diversity' b',' b'up' b'during' b'the' b'fourth' b'century' b',' b'since' b'they' b'can' b'cause' b'clear' b'other' b'invalid' b'populations' b'directly' b',' b'as'
    b'may' b'the' b'response' b'to' b'one' b'districts' b'(' b'457' b'yards' b')' b'.' b'There' b'may' b'mean' b'appear' b'into' b'<unk>' b'.' b'One' b'Amanita'
    b'botanist' b'"' b'may' b'be' b'replaced' b'as' b'probably' b'only' b'.' b'Beach' b'have' b'now' b'020' b'but' b'either' b'faster' b'methods' b'.' b'"' b'In'
    b'263' b',' b'Jellicoe' b'notes' b'that' b'their' b'species' b'do' b'not' b'icon' b',' b'and' b'periodically' b'highlights' b'look' b'to' b'one' b'of' b'the' b'low'
    b'male' b'animals' b'by' b'their' b'1' b'cm' b'(' b'0' b'@.@' b'2' b'in' b')' b'59' b'multiple' b'common' b',' b'bright' b'.' b'Furthermore' b','
    b'another' b'density' b'strongly' b'spread' b'a' b'jet' b',' b'then' b'while' b'3' b'@.@' b'5' b'metres' b'(' b'3' b'@.@' b'5' b'm' b')' b'of'
    b'1' b'@.@' b'8' b'cm' b'(' b'0' b'@.@' b'6' b'in' b')' b'in' b'diameter' b'.' b'brighter' b'are' b'the' b'research' b'of' b'these' b'condition'
    b'.' b'The' b'kakapo' b'is' b'potentially' b'often' b'low' b'.' b'<eos>' b'Having' b'are' b'usually' b'known' b'as' b'Chopin' b',' b'such' b'as' b'<unk>' b','
    b'<unk>' b',' b'<unk>' b',' b'<unk>' b'(' b'1812' b')' b',' b'<unk>' b':' b'<unk>' b',' b'and' b'tolerate' b'the' b'embryos' b'for' b'kakapo' b'and'
    b'Euro' b',' b'greatly' b'or' b'wheel' b'them' b'of' b'<unk>' b',' b'remaining' b'for' b'methods' b'.' b'There' b'are' b'not' b'twenty' b'@-@' b'Saxon' b'wharves'
    b',' b'its' b'dominant' b',' b'good' b'@-@' b'snakes' b'virtually' b',' b'or' b'wooden' b'and' b'roller' b'aquatic' b',' b'with' b'somewhat' b'<unk>' b',' b'constantly'
    b'or' b'courtship' b'areas' b'.' b'Europium' b'occurs' b'pattern' b'though' b'as' b'obtain' b'at' b'an' b'very' b'short' b'bobcat' b'snake' b'shown' b'their' b'M\xc4\x81ori' b','
    b'the' b'stem' b'from' b'the' b'offspring' b'of' b'head' b'waves' b'appears' b'with' b'great' b'their' b'host' b'agriculture' b'.' b'They' b'also' b'encourage' b'new' b'radiation'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 230.4
    loss: 5.168
    elapsed time (seconds): 162.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  38.165 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
