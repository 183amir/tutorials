.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'C.' b'M.' b'Estimates' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'The' b'second' b'to' b'commercials' b'is' b'a' b'different'
    b'detector' b'in' b'the' b'Christian' b'Republic' b',' b'supplies' b'in' b'all' b'but' b'two' b'rows' b'favourably' b'being' b'in' b'the' b'United' b'States' b',' b'and'
    b'earliest' b'as' b'the' b'associated' b'force' b'of' b'recovery' b'.' b'Its' b'common' b'Fran\xc3\xa7aise' b'plan' b'UN' b'nestlings' b'on' b'the' b'tension' b'was' b'deemed' b'very'
    b'<unk>' b'in' b'production' b'.' b'Gaelic' b'immigrants' b'are' b'spared' b'to' b'reduce' b'birds' b'rather' b'than' b'seven' b'members' b'during' b'the' b'year' b'.' b'In'
    b'the' b'2011' b'1761' b'Republic' b'of' b'climactic' b',' b'they' b'are' b'exercised' b'by' b'using' b'over' b'one' b'or' b'share' b'further' b'or' b'the' b'third'
    b'European' b'installment' b'.' b'In' b'18th' b'centuries' b',' b'and' b'almost' b'increased' b'Labrosaurus' b'sightings' b'(' b'diagram' b')' b',' b'a' b'planet' b'found' b'it'
    b'difficult' b'to' b'do' b'so' b'appeared' b'with' b'T\xc3\xa5sen' b'.' b'empty' b'cylinders' b'extends' b'<unk>' b',' b'Swansea' b',' b'<unk>' b',' b'<unk>' b',' b'1756'
    b',' b'and' b'Moritz' b',' b'in' b'internal' b'pairs' b'of' b'Ceres' b'.' b'Professor' b'cirrhifer' b'degrading' b'that' b'it' b'has' b'no' b'influence' b'there' b'was'
    b'only' b'nearly' b'16' b'years' b'late' b'in' b'around' b'000' b'periods' b'of' b'King' b'2' b'.' b'By' b'about' b'Tropical' b'One' b'R\xc3\xa9union' b'<unk>' b'repealed'
    b',' b'he' b'produces' b'much' b'the' b'most' b'experienced' b'description' b'of' b'reducing' b'one' b'of' b'his' b'non' b'\xe2\x80\x93' b'descending' b'presence' b'.' b'In' b'2006'
    b',' b'it' b'had' b'no' b'slow' b'increase' b',' b'with' b'traditional' b'Reformed' b'imagery' b'in' b'Hubei' b'taste' b'and' b'196' b'cells' b'Seitz' b'<unk>' b'.'
    b'It' b'also' b'1573' b'his' b'largest' b'turnpike' b'as' b'narial' b',' b'subeditor' b',' b'but' b'winds' b'of' b'raccoons' b'did' b'reach' b'closely' b'three' b'objects'
    b',' b'between' b'the' b'30th' b',' b'but' b'lost' b'in' b'.' b'M.' b'Alfred' b'Troops' b'is' b'first' b'regarded' b'as' b'<unk>' b',' b'the' b'Muslim'
    b'Greek' b'fleet' b'limit' b'Schneider' b',' b'when' b'until' b'the' b'supreme' b'trade' b'of' b'the' b'Republic' b'of' b'Nuclear' b'Flight' b',' b'and' b'together' b'together'
    b'about' b'redesigned' b'during' b'his' b'season' b'.' b'The' b'Missouri' b'exhumed' b'Napier' b',' b'which' b'follows' b'most' b'of' b'only' b'over' b'13' b'weeks' b','
    b'where' b'they' b'are' b'one' b'of' b'those' b'Lock' b'Power' b'.' b'The' b'kakapo' b'was' b'<eos>' b'In' b'this' b'life' b',' b'it' b'represents' b'little'
    b'people' b',' b'including' b'<unk>' b',' b'and' b'highlighting' b',' b'Olympian' b'Llanilltern' b',' b'Scleroderma' b',' b'G.' b'Secretary' b'(' b'Greater' b'Provisional' b')' b','
    b'and' b'the' b'Hemisphere' b'Cities' b'.' b'Common' b'veil' b'displays' b'is' b'classified' b'as' b'food' b'by' b'the' b'Sierra' b'<unk>' b',' b'and' b'they' b'begin'
    b'for' b'this' b'same' b'round' b'.' b'This' b'may' b'look' b'beyond' b'moss' b'and' b'radio' b'factor' b'for' b'their' b'associated' b'Dhangar' b'rotation' b',' b'Parasaurolophus'
    b'of' b'and' b'modest' b'tissue' b',' b'a' b'species' b'of' b'300' b'haircut' b',' b'on' b'its' b'lower' b'average' b'@-@' b'size' b'area' b',' b'a'
    b'gill' b'citizen' b',' b'and' b'a' b'mark' b'A.' b'readable' b'his' b'Anketell' b'which' b'are' b'dominated' b'out' b'of' b'62' b'meters' b'(' b'4' b'in'
    b')' b'high' b'to' b'20' b'mm' b'(' b'37' b'lb' b')' b'.' b'Overall' b',' b'this' b'was' b'unique' b'with' b'three' b'species' b'of' b'overall'
    b'scales' b',' b'so' b'its' b'crew' b'resemble' b'to' b'start' b'overwhelm' b',' b'so' b'evolved' b'from' b'as' b'they' b'recognise' b'peacekeeping' b',' b'underside' b'varsity'
    b'eukaryotes' b'with' b'most' b'other' b'birds' b'to' b'their' b'left' b'where' b'they' b'can' b'be' b'pulled' b'.' b'This' b'bird' b'is' b'paler' b'or' b'so'
    b'<unk>' b'.' b'There' b'are' b'more' b'censors' b'into' b'kakapo' b'surface' b'conception' b'.' b'Eventually' b',' b'the' b'kakapo' b'is' b'also' b'collectively' b',' b'with'
    b'them' b'a' b'variety' b'of' b'large' b',' b'fewer' b'or' b'to' b'deploy' b'.' b'In' b'addition' b',' b'the' b'plumage' b're' b'@-@' b'spored' b'regions'
    b'be' b'introduced' b'their' b'fifth' b'aircraft' b'results' b'.' b'There' b'was' b'no' b'compound' b'experience' b'by' b'Colonial' b'chicks' b'and' b'a' b'growing' b'Magdalena' b'or'
    b'white' b'hunt' b'.' b'These' b'authors' b'maintained' b'greater' b'mammalian' b'depressions' b',' b'usually' b'literally' b"'in" b'Male' b'banded' b',' b'and' b'display' b'<unk>' b'('
    b'small' b'in' b'the' b'country' b')' b']' b'subspecies' b'of' b'Mary' b'chicken' b'Ha' b';' b'thesis' b'comes' b'away' b'from' b'their' b'snake' b'and' b'animals'
    b'provided' b'by' b'You' b"'s" b'loose' b'growing' b'affirmation' b'out' b'of' b'resin' b'and' b'spread' b',' b'right' b'throughout' b'the' b'past' b',' b'taking' b'up'
    b'over' b'how' b'sunset' b'are' b'printed' b'.' b'As' b'of' b'2009' b',' b'they' b'happily' b'their' b'head' b'overall' b'is' b'allegedly' b'.' b'The' b'female'
    b'recognizes' b'a' b'single' b'roadside' b'of' b'these' b'females' b',' b'so' b'it' b'takes' b'toward' b'one' b'side' b'of' b'<unk>' b'with' b'them' b'behind' b'funds'
    b'from' b'other' b'areas' b'.' b'Two' b'birds' b'are' b'unusual' b',' b'even' b'narrower' b',' b'moving' b'to' b'detect' b'anachronism' b',' b'nor' b'Erik' b'v.'
    b'asiaticus' b'(' b'<unk>' b'punt' b'.' b')' b'visible' b'neutrons' b',' b'but' b'a' b'food' b'patch' b'produced' b'depict' b'at' b'least' b'twenty' b'years' b','
    b'4' b'%' b'of' b'species' b'.' b'Although' b'some' b'impressions' b'entirely' b'\xe2\x80\x93' b'France' b'and' b'less' b'distinct' b'C' b'differentiation' b'areas' b'from' b'2' b'\xc2\xb0'
    b'a' b'mRNA' b'die' b'for' b'their' b'male' b',' b'it' b'may' b'be' b'made' b'fewer' b'\xe2\x80\x93' b'males' b'any' b'sophisticated' b'\xe2\x80\x93' b'present' b'to' b'5'
    b'%' b'per' b'game' b'.' b'Mycologist' b'If' b'their' b'presence' b'ultimately' b'winters' b'on' b',' b'may' b'be' b'able' b'to' b'be' b'pale' b'athletes' b','
    b'describing' b'by' b'<unk>' b'leaves' b'them' b'context' b'from' b'a' b'unnamed' b'clash' b'.' b'With' b'that' b'help' b'they' b'arrive' b'not' b'far' b'to' b'this'
    b'ground' b'when' b'<unk>' b',' b'they' b'understood' b'quickly' b'bonded' b'together' b'.' b'The' b'author' b'are' b'a' b'splinter' b'colour' b'genus' b'recommending' b'as' b'a'
    b'literal' b'cycle' b'on' b'A' b'house' b',' b'but' b'it' b'is' b'more' b'example' b',' b'about' b'1' b'minutes' b'Odaenathus' b'terror' b'its' b'planet' b'the'
    b'nucleus' b'.' b'At' b'some' b'other' b'times' b',' b'it' b'may' b'great' b'males' b'of' b'common' b'nuclei' b',' b'although' b'greater' b'Pine' b'overabundance' b'are'
    b'closed' b'for' b'.' b'<eos>' b'These' b'starlings' b'can' b'be' b'found' b'to' b'have' b'been' b'multitude' b'of' b'brown' b'without' b'intervention' b'.' b'Cultural' b'common'
    b'starlings' b'do' b'present' b'distances' b',' b'after' b'<unk>' b'handling' b'Parvati' b"'s" b'diversity' b'pectoral' b'gleba' b',' b'would' b'largely' b'state' b'to' b'get' b'to'
    b'assist' b'.' b'<eos>' b'At' b'the' b'first' b'start' b'the' b'surviving' b'\xe2\x80\x93' b'23' b'treatment' b'of' b'the' b'hundred' b'@-@' b'fold' b',' b'straight' b','
    b'to' b'proceed' b'southern' b'excess' b'of' b'accessories' b'with' b'regard' b',' b'closed' b'to' b'the' b'bruising' b'images' b'of' b'wholly' b'islands' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Icy' b'lizards' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b'is' b'mentioned' b'on' b'22' b'October' b'1907' b',' b'in' b'5' b'@.@'
    b'5' b'Jubba' b',' b'5' b'@.@' b'5' b'kilometres' b'(' b'3' b'@.@' b'4' b'mi' b')' b'since' b'its' b'long' b'load' b'.' b'It' b'is'
    b'covered' b'by' b'Bavarian' b'@-@' b'ageing' b'numerous' b'parrots' b',' b'with' b'microlights' b'such' b'as' b'exposures' b':' b'<unk>' b',' b'<unk>' b',' b'\xe0\xb8\x87' b','
    b'and' b'partition' b'around' b'a' b'late' b'Irish' b'nuclei' b'.' b'<eos>' b'It' b'is' b'black' b'that' b'broken' b'efforts' b'without' b'a' b'eukaryotic' b'spot' b'to'
    b'be' b'canceled' b'for' b'personal' b'sizes' b'.' b'<unk>' b',' b'small' b',' b'provides' b'its' b'last' b'establishes' b'as' b',' b'as' b'you' b'detect' b'promise'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 217.4
    loss: 5.168
    elapsed time (seconds): 145.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  9.476 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
