.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Doyle' b'attributed' b'to' b'William' b'K.' b'Yat' b'Zhang' b'channeled' b'appeal' b'by' b'wasp' b'<unk>' b'<unk>' b'and' b'Prince' b'at' b'Philadelphia' b'that' b'reopened' b'in'
    b'front' b'the' b'lab' b'opening' b'by' b'other' b'short' b'blacks' b'pull' b'while' b'of' b'did' b'not' b'bridgehead' b'with' b'hint' b'.' b'In' b'modern' b'Japanese'
    b',' b'mitosis' b'feature' b',' b'addition' b'to' b'loops' b'from' b'Atkinson' b'and' b'recast' b'electrical' b'vegetation' b'.' b'<eos>' b'One' b'jumps' b'later' b',' b'steeple'
    b'forest' b',' b'southern' b'Broom' b'raised' b'independence' b'equipment' b',' b'and' b'to' b'generate' b'that' b'authority' b'would' b'be' b'punished' b'into' b'long' b'believe' b'that'
    b'many' b'were' b'exported' b'to' b'Hawai\xca\xbbi' b'.' b'Unlike' b'changing' b'each' b'of' b'this' b'date' b'like' b'the' b'Sun' b'he' b'stretches' b'into' b'a' b'way'
    b'to' b'remaining' b'during' b'the' b'race' b'so' b'this' b'promoted' b'their' b'lives' b'to' b'<unk>' b'.' b'princess' b'Tomasevich' b'is' b'Mary' b'Martyn' b'to' b'effectively'
    b'be' b'a' b'star' b'.' b'<eos>' b'In' b'the' b'Marian' b'<unk>' b',' b'the' b'transmission' b'of' b'Ruwan' b"'s" b'identities' b',' b'<unk>' b',' b'<unk>'
    b',' b'engraver' b'and' b'<unk>' b'who' b'examined' b'depicted' b',' b'have' b'also' b're' b'@-@' b'concealed' b',' b'disperse' b'a' b'sitter' b'if' b'a' b'member'
    b'of' b'vicious' b'account' b'of' b'yellow' b'or' b'capture' b',' b'the' b'raising' b"'s" b'<unk>' b'.' b'It' b'manage' b'fortifications' b'to' b'sell' b'horribly' b'energy'
    b',' b'and' b'lose' b'about' b'its' b'boxes' b'.' b'Instead' b'of' b'quotes' b'at' b'<unk>' b'and' b'<unk>' b',' b'by' b'circuit' b'Nederlands' b'lands' b'made'
    b'or' b'comprise' b'adaptations' b'on' b'housing' b',' b'and' b'only' b'row' b'.' b'This' b'<unk>' b'that' b'rise' b'to' b'Antigua' b'by' b'determined' b'sentiment' b'and'
    b'make' b'Louisiana' b'to' b'practice' b'better' b'earlier' b'occurs' b'at' b'a' b'pair' b'of' b'minorities' b'.' b'However' b',' b'98' b'or' b'German' b'kakapo' b'relates'
    b'Those' b'realise' b'government' b',' b'late' b'<unk>' b',' b'1996' b',' b'and' b'anger' b'with' b'six' b'adults' b'to' b'determine' b'a' b'range' b'after' b'in'
    b'a' b'<unk>' b'.' b'If' b'it' b'feels' b'focused' b'at' b'the' b'South' b'Pole' b'on' b'$' b'32' b'@,@' b'000' b'in' b'1912' b',' b'about'
    b'80' b'@,@' b'000' b'studies' b'per' b'other' b'pools' b'of' b'66' b'@,@' b'000' b',' b'preserve' b'all' b'of' b'per' b'lower' b'research' b'moves' b'of'
    b'trees' b'.' b'The' b'<unk>' b'enjoys' b'by' b'the' b'eight' b'legendary' b'people' b',' b'as' b'be' b'consumed' b',' b'landing' b'Mech' b'sounded' b'Dr.' b'<unk>'
    b'was' b'concluded' b'to' b'have' b'evolved' b'out' b'Edith' b'"' b'See' b'a' b'guild' b'"' b'or' b'"' b'lose' b'significant' b'persons' b'excited' b'hallucinations' b'titled'
    b'"' b'.' b'In' b'contrast' b'to' b'a' b'Jordan' b',' b'Boyz' b'on' b'Palmyra' b',' b'New' b'York' b',' b'warning' b'to' b'occupy' b'its' b'popularity'
    b',' b'come' b'at' b'Trois' b'Abbey' b'stars' b',' b'to' b'dredging' b'more' b'than' b'greater' b'organizations' b'paintings' b'\xe2\x80\x94' b'and' b'eventually' b'within' b'the' b'noise'
    b'in' b'fishing' b'.' b'fortified' b'Wes' b'spiders' b'could' b'be' b'declined' b'to' b'be' b'packs' b'of' b'a' b'rebel' b'<unk>' b'or' b'<unk>' b',' b'which'
    b'may' b'be' b'able' b'to' b'replace' b'Jupiter' b"'s" b'behaviour' b',' b'commenting' b'prone' b',' b'racing' b',' b'and' b'<unk>' b'style' b'that' b'it' b'would'
    b'be' b'infected' b'.' b'<eos>' b'In' b'distinct' b',' b'lying' b',' b'all' b'of' b'the' b'leg' b'tactics' b'may' b'be' b'found' b'as' b'captain' b'together'
    b'into' b'his' b'control' b',' b'which' b'they' b'arisen' b'with' b'plum' b'Lao' b'(' b'1170' b')' b'and' b'even' b'owl' b'(' b'<unk>' b')' b';'
    b'though' b'this' b'has' b'their' b'wings' b'of' b'plants' b',' b'is' b'possibly' b'when' b'it' b'has' b'struck' b'meticulous' b'manifestations' b'.' b'Seven' b'female' b'smell'
    b'prey' b'pass' b'to' b'drain' b'.' b'<unk>' b'\xc3\x89cole' b'a' b'number' b'of' b'activities' b'to' b'store' b'absorption' b',' b'sometimes' b'associated' b',' b'sail' b'after'
    b'written' b'as' b'Russia' b'asking' b'their' b'patience' b'.' b'At' b'that' b'of' b'of' b'the' b'owl' b'or' b'processional' b'laboratory' b'period' b',' b'other' b'starlings'
    b'from' b'specific' b'dark' b'birds' b'in' b'1926' b'form' b'themselves' b'was' b'recorded' b',' b'some' b'or' b'developed' b'profitability' b'homes' b',' b'divorced' b',' b'and'
    b'habitats' b'.' b'<unk>' b'from' b'these' b'parrots' b'are' b'so' b'part' b'of' b'truth' b'that' b'often' b'spread' b'by' b'its' b'domains' b'would' b'be' b'remembered'
    b'.' b'This' b'bond' b'is' b'threatened' b'for' b'upon' b'being' b'designated' b'each' b'to' b'face' b'when' b'their' b'contexts' b'can' b'fly' b'from' b'munitions' b','
    b'so' b'they' b'have' b'resulted' b'as' b'a' b'peridium' b'in' b'circular' b'behaviour' b'.' b'All' b'other' b'species' b'were' b'put' b'difficult' b',' b'although' b'so'
    b'other' b'are' b'<unk>' b'to' b'take' b'care' b'to' b'may' b'sympathetic' b'an' b'eye' b'or' b'<unk>' b'.' b'There' b'are' b'no' b'evidence' b'of' b'Jupiter'
    b'that' b'they' b'feed' b'in' b'1994' b'.' b'<eos>' b'Advertising' b'cooperation' b'by' b'fly' b',' b'both' b'water' b'afraid' b'were' b'<unk>' b'.' b'<eos>' b'A'
    b'notable' b'results' b'standing' b'in' b'Mosley' b'partial' b'starlings' b',' b'some' b'visible' b'Lorenzo' b'shear' b'from' b'Foreign' b'@-@' b'S\xe1\xbb\xadu' b',' b'typically' b'symbionts' b'a'
    b'star' b'behind' b'that' b'night' b'.' b'similarities' b',' b'it' b'has' b'attracting' b'journalist' b'zetlandicus' b'through' b'the' b'sovereign' b'(' b'Worcester' b')' b'they' b'are'
    b'Anubis' b'by' b'it' b'.' b'He' b'apologized' b'submissive' b'airspace' b'such' b'as' b'or' b'green' b'spectroscopic' b',' b'giving' b'Cajal' b'losses' b'in' b'the' b'handcuffs'
    b',' b'but' b'their' b'distinctive' b'strength' b',' b'owned' b'by' b'other' b'plumage' b'Croats' b'(' b'who' b'and' b'trapped' b'the' b'southeastern' b'centuries' b'weight' b'might'
    b'indicate' b'to' b'present' b'stump' b')' b'.' b'In' b'1880' b'churches' b'started' b'the' b'mimicry' b',' b'which' b'are' b'uncertain' b'by' b'regionally' b'.' b'Because'
    b'of' b'females' b',' b'birds' b'died' b'during' b'the' b'Augustan' b'envelope' b',' b'and' b'for' b'structural' b'lingerie' b',' b'condom' b'are' b'renovated' b'.' b'Instead'
    b',' b'they' b'have' b'season' b',' b'and' b'their' b'adults' b'were' b'between' b'very' b'leaders' b'due' b'to' b'smell' b',' b'when' b'alternatively' b'drought' b'commemorated'
    b',' b'etc' b'not' b'.' b'One' b'kakapo' b'feathers' b'include' b'leading' b'if' b'birds' b'player' b'in' b'<unk>' b'Township' b'as' b'protons' b'were' b'closely' b'triangular'
    b'.' b'As' b'a' b'<unk>' b',' b'food' b',' b'and' b'as' b'they' b'are' b'leaves' b'from' b'export' b'.' b'In' b'populations' b',' b'over' b'20'
    b'days' b'in' b'Finland' b',' b'inaccessible' b',' b'accumulate' b'or' b'around' b'21' b'thousand' b'differences' b'.' b'outfitted' b',' b'they' b'do' b'surfaces' b'of' b'them'
    b',' b'which' b'damage' b'rather' b'tail' b'to' b'be' b'one' b'of' b'the' b'bird' b'.' b'Common' b'starlings' b',' b'they' b'also' b'seem' b'from' b'salmon'
    b',' b'when' b'they' b'were' b'dark' b'on' b'to' b'have' b'differed' b'.' b'According' b'to' b'<unk>' b'<unk>' b',' b'it' b'once' b'may' b'have' b'to'
    b'physically' b'be' b'Dinorah' b';' b'the' b'head' b'provides' b'lens' b'.' b'Nests' b'are' b'texture' b'during' b'scales' b'around' b'sentences' b',' b'indicating' b'Buddhist' b','
    b'plead' b'and' b'angular' b'therapeutic' b',' b'associated' b'directly' b'or' b'<unk>' b'.' b'There' b'are' b'generally' b'clear' b',' b'the' b'visible' b'object' b'she' b'researched'
    b'.' b'When' b'this' b'will' b'be' b'cheerful' b'grass' b',' b'they' b'have' b'lost' b'or' b'promise' b'into' b'other' b'nuclei' b'on' b'their' b'semen' b'.'
    b'However' b',' b'it' b'can' b'be' b'taken' b'into' b'<unk>' b'.' b'However' b',' b'of' b'<unk>' b',' b'the' b'kakapo' b'gives' b'their' b'range' b','
    b'but' b'can' b'become' b'distinguished' b'across' b'their' b'methodological' b'power' b'.' b'If' b'this' b'drawing' b'has' b'risen' b'as' b'in' b'possession' b'of' b'eggs' b','
    b'it' b'depicts' b',' b'free' b'life' b',' b'long' b'days' b',' b'or' b'apart' b'.' b'If' b'fluorine' b'would' b'be' b'readily' b'used' b',' b'they'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.0
    loss: 5.168
    elapsed time (seconds): 148.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  14.339 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
