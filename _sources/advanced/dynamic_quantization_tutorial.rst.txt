.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Party' b'<unk>' b'associates' b'the' b'standpoint' b'for' b'nine' b'days' b'before' b'first' b'one' b'@-@' b'warm' b'candidates' b',' b'though' b'just' b'resuscitation' b'looked' b'flawed'
    b'times' b'.' b'Together' b',' b'they' b'are' b'overly' b'worshipped' b'as' b'an' b'classical' b'advance' b'in' b'the' b'Sun' b'for' b'a' b'public' b'sex' b'.'
    b'Nevertheless' b',' b'on' b'the' b'second' b'to' b'map' b'assistance' b'into' b'west' b',' b'it' b'occupies' b'this' b'used' b'due' b'to' b'Laos' b',' b'who'
    b'pulled' b'a' b'continuing' b'ligaments' b'as' b'a' b'whole' b'benefit' b'or' b'<unk>' b'Adam' b',' b'all' b'no' b'"' b'square' b',' b'and' b'brownish' b'except'
    b'from' b'him' b',' b'and' b'at' b'cost' b'the' b'school' b'is' b'exaggerated' b'when' b'a' b'severe' b'good' b'figure' b'itself' b'of' b'fresh' b'reality' b'was'
    b'commonly' b'invented' b'around' b'lines' b'.' b'"' b'In' b'1830' b',' b'these' b'sources' b'are' b'known' b'as' b'by' b'"' b'hastily' b'dozen' b'performers' b'"'
    b'.' b'Two' b'currently' b'are' b'<unk>' b'<unk>' b',' b'one' b'of' b'the' b'earliest' b'non' b'video' b'stories' b'of' b'live' b',' b'which' b'does' b'not'
    b'be' b'seen' b'between' b'240' b'or' b'be' b'of' b'repair' b'.' b'Those' b'@-@' b'newer' b'among' b'<unk>' b',' b'grazing' b'/' b'criminal' b'deer' b'.'
    b'According' b'to' b'the' b'massacred' b'eared' b'medium' b',' b'what' b'activities' b'were' b'"' b'Hispaniola' b'Farrell' b'"' b',' b'and' b'the' b'assistants' b'contain' b'especially'
    b'rabbits' b'art' b'throughout' b'the' b'First' b'History' b'and' b'upon' b'a' b'command' b'of' b'striking' b'first' b'.' b'(' b'creeps' b'never' b'96' b'm' b')'
    b',' b'of' b'which' b'they' b'icon' b'with' b'totalitarian' b'difficulty' b',' b'flows' b'with' b'Chicago' b'fledging' b'and' b'rebranded' b'by' b'both' b'fewer' b'grandchildren' b','
    b'which' b'have' b'conceived' b'leave' b'by' b'administered' b'death' b'with' b'the' b'dark' b'events' b'of' b'Ry\xc5\xabjinmura' b',' b'which' b'would' b'be' b'conceived' b'as' b'it'
    b'took' b'their' b'title' b'of' b'three' b'.' b'Willis' b'can' b'be' b'about' b'sold' b'with' b'a' b'Buddhist' b'animal' b'station' b'where' b'roughly' b'30' b'%'
    b'of' b'placing' b'them' b'only' b'longer' b'.' b'One' b'other' b',' b'deep' b',' b'white' b',' b'and' b'lengthy' b'reasonable' b',' b'largely' b'eleventh' b'it'
    b'is' b'rapid' b'functions' b',' b'which' b'cooking' b'and' b'deliveries' b'are' b'considerably' b'being' b'aided' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Ceres' b'='
    b'=' b'=' b'<eos>' b'<eos>' b'Columba' b'upon' b'has' b'been' b'suggested' b'to' b'occupy' b'culling' b'during' b'the' b'year' b'under' b'<unk>' b'lizards' b'and' b'contend'
    b'food' b',' b'turrets' b'<unk>' b',' b'and' b'safety' b'.' b'Common' b'cells' b'do' b'not' b'be' b'inswing' b'.' b'<eos>' b'Crash' b'Race' b',' b'North'
    b'Baron' b'Guardsmen' b'and' b'an' b'beloved' b'enjoyed' b'farinaceous' b',' b'is' b'connected' b'to' b'the' b'other' b'Kakapo' b'Famine' b'at' b'SummerSlam' b'times' b'.' b'Nest'
    b'sea' b'Peters' b'imposed' b'it' b'Sarah' b'(' b'Falco' b',' b'Burn' b')' b',' b'who' b'chaired' b'hairy' b',' b'so' b'it' b'is' b'J.' b'Laney'
    b'(' b'BHU' b')' b',' b'Silver' b'This' b'(' b'EEF' b'bread' b')' b',' b'which' b'might' b'be' b'performed' b',' b'types' b'of' b'<unk>' b'well'
    b'as' b'Alexandrian' b'<unk>' b'and' b'<unk>' b'beta' b'@-@' b'phosphors' b'finding' b'paths' b'as' b'"' b'Hurri' b'specialized' b'"' b',' b'U' b'or' b'<unk>' b'Arabic'
    b'(' b'French' b')' b')' b'.' b'Mycologist' b'consume' b'much' b'species' b'and' b'also' b'frogs' b'a' b'island' b'reaching' b'their' b'set' b'.' b'Before' b'.'
    b'<eos>' b'In' b'a' b'lungs' b'from' b'Karnataka' b'and' b'cities' b',' b'water' b'material' b'include' b'the' b'kakapo' b'of' b'Brook' b',' b'<unk>' b',' b'birch'
    b',' b'Career' b',' b'Astarte' b',' b'<unk>' b',' b'<unk>' b',' b'70' b'immigrants' b'began' b'sixth' b'known' b'as' b'provides' b'citing' b'butter' b',' b'several'
    b'lines' b'is' b'found' b'since' b'10' b'.' b'S.' b'galericulata' b'was' b'displayed' b'in' b'reflecting' b'the' b'road' b'that' b'was' b'prior' b'to' b'Bono' b','
    b'the' b'planet' b"'s" b'largest' b'contribution' b'or' b'from' b'Varpas' b'(' b'no' b'Rock' b'<unk>' b')' b',' b'a' b'species' b'of' b'the' b'external' b'Catholic'
    b'genus' b'In' b'1855' b'and' b'widespread' b'delegates' b'are' b'pretty' b'increasing' b'with' b'the' b'construction' b'of' b'New' b'Zealand' b'.' b'Sandwich' b'Sosa' b'observed' b'the'
    b'role' b'of' b'a' b'earlier' b'hero' b'of' b'<unk>' b',' b'by' b'which' b'it' b'introduced' b'critiqued' b'.' b'According' b'to' b'<unk>' b',' b'it' b'was'
    b'probably' b'accustomed' b'to' b'over' b'ten' b'months' b',' b'due' b'to' b'translation' b'.' b'Nevertheless' b',' b'<unk>' b'sale' b'with' b'domains' b'a' b'fundamentalists' b'for'
    b'a' b'partial' b'cloud' b'supports' b'.' b'lets' b'this' b',' b'most' b'apparent' b'mushroom' b'hue' b'can' b"'t" b'be' b'made' b'in' b'inspire' b'or' b'yellowish'
    b'the' b'Guineas' b'.' b'In' b'some' b'memory' b',' b'may' b'be' b'used' b'.' b'girls' b'do' b'not' b'apply' b'to' b'mature' b'ulnar' b'but' b'<unk>'
    b'suggested' b'them' b';' b'rather' b'of' b'them' b'does' b'not' b'see' b'generating' b'each' b'other' b'.' b'The' b'crab' b'nursery' b'axis' b'may' b'allow' b'something'
    b'part' b'of' b'them' b'.' b'William' b'<unk>' b'(' b'b' b')' b'will' b'use' b'the' b'establishment' b'of' b'a' b'well' b'state' b'that' b'it' b'may'
    b'be' b'made' b'in' b'1966' b',' b'livestock' b'individuals' b'of' b'foraging' b'effective' b',' b'partially' b'locations' b'.' b'They' b'are' b'typically' b'used' b'by' b'<unk>'
    b'lift' b'when' b'rescued' b'prey' b'in' b'their' b'hunter' b'.' b'There' b'were' b'or' b'pale' b'some' b'emotional' b'use' b'of' b'very' b'breeding' b'crops' b','
    b'during' b'one' b'way' b',' b'Dave' b',' b'<unk>' b',' b'coordination' b',' b'green' b',' b'pots' b'and' b'800' b'elementary' b'accounts' b',' b'they' b'are'
    b'undertaken' b'booking' b'by' b'<unk>' b'<unk>' b'as' b'some' b'as' b'<unk>' b'food' b'Corpus' b"'t" b'parallel' b'.' b'It' b'is' b'present' b'that' b'sometimes' b'if'
    b'birds' b'conveyed' b'at' b'listener' b'items' b'flightlessness' b'can' b'reach' b'to' b'45' b'\xe2\x80\x93' b'24' b'cm' b',' b'and' b'they' b'have' b'Friedman' b'problem' b'they'
    b'do' b'not' b'justify' b'among' b'preventing' b'feeding' b'.' b'They' b'are' b'tightly' b'trained' b'.' b'enlarged' b'symptoms' b'for' b'heating' b'<unk>' b'tree' b'.' b'<eos>'
    b'A' b'downstream' b'constitution' b'during' b'Greece' b',' b'he' b'stood' b'on' b'a' b'corner' b'of' b'four' b'eggs' b',' b'more' b'of' b'which' b'are' b'typically'
    b'unlike' b'no' b'minimal' b'leader' b'.' b'Tong' b'consist' b'Rowan' b'I' b'produces' b'<unk>' b'that' b'failed' b'evidence' b'modeled' b'until' b'ancient' b'starlings' b',' b'the'
    b'male' b'<unk>' b'by' b'<unk>' b'.' b'Habroptila' b'arise' b'into' b'<unk>' b'akin' b'to' b'hitting' b'electron' b'enzymes' b'take' b'by' b'the' b'tenth' b'to' b'become'
    b'large' b',' b'and' b'they' b'.' b'In' b'distinguished' b',' b'fatal' b'<unk>' b'to' b'attract' b'irregular' b',' b'the' b'word' b'the' b'Countries' b'by' b'deep'
    b'<unk>' b'species' b'and' b'over' b'the' b'12th' b'century' b'.' b'They' b'are' b'successful' b'by' b'themselves' b'and' b'the' b'fundraiser' b'is' b'distributed' b'without' b'secular'
    b'males' b'.' b'<eos>' b'<unk>' b'also' b'faced' b'birds' b'about' b'bombardments' b'including' b'flies' b'and' b'aesthetics' b'.' b'For' b'example' b',' b'Poker' b'<unk>' b','
    b'practised' b'the' b'shape' b'of' b'fox' b',' b'most' b'asserts' b'by' b'Monsignor' b'for' b'its' b'<unk>' b',' b'<unk>' b'mating' b',' b'became' b'five' b'many'
    b'Celtic' b'(' b'older' b'fledging' b';' b'as' b',' b'<unk>' b')' b',' b'some' b'belief' b'then' b'shrubs' b'.' b'At' b'a' b'total' b"'s" b'collision'
    b'that' b'carries' b'controlling' b'legs' b'during' b'being' b'so' b'variable' b',' b'they' b'are' b'breeds' b'with' b'its' b'European' b'parrot' b'(' b'whose' b'Victorian' b'colour'
    b')' b'.' b'RNA' b'drawing' b'suggests' b',' b'"' b'It' b'is' b'require' b'far' b'with' b'alive' b'as' b'another' b'slightly' b'fat' b',' b'then' b'often'
    b'where' b'many' b'others' b'launched' b'carrying' b'this' b'temperate' b'enterprises' b'.' b'If' b'there' b'are' b'no' b'desires' b'of' b'undercover' b',' b'he' b'try' b'to'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.9
    loss: 5.168
    elapsed time (seconds): 143.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  4.733 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
