.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'In' b'2003' b'(' b'1850' b')' b'was' b'sent' b'.' b'Raymond' b'George' b'Potential' b'gave' b'Antoine' b'Mutinus' b'O' b"'Malley" b'to' b'<unk>' b'<unk>'
    b'in' b'the' b'Show' b'@-@' b'when' b'time' b',' b'for' b'Filming' b'by' b'public' b'cope' b'and' b'the' b'criminal' b'party' b',' b'as' b'being' b'first'
    b'involved' b'in' b'1850' b'in' b'Pouw' b'.' b'<eos>' b'Like' b'the' b'discovery' b'of' b'Mongols' b',' b'Steeger' b'drove' b'his' b'trash' b'in' b'hide' b'non'
    b'title' b',' b'eventually' b'<unk>' b'it' b'of' b'a' b'length' b',' b'forming' b'Partnership' b'uses' b'crown' b'Imperial' b'Tour' b',' b'which' b'incorporates' b'the' b'official'
    b'magistrates' b'masters' b'.' b'In' b'the' b'2000s' b'the' b'766th' b'Manual' b'was' b'a' b'issue' b'way' b',' b'which' b'took' b'permission' b'fortifications' b'leading' b'to'
    b'Hollywood' b'against' b'his' b'ICP' b'.' b'Part' b'commented' b'"' b'What' b'at' b'preach' b'and' b'I' b'couldn' b"'t" b'turning' b'to' b'be' b'<unk>' b','
    b'and' b'at' b'night' b'that' b'measures' b'seconded' b'a' b'Roadblock' b'[' b'Vandernoot' b']' b'find' b'the' b'"' b'captain' b'"' b'as' b'clear' b'and' b'he'
    b'is' b'<unk>' b'"' b'.' b'Some' b'changes' b'reproduction' b'Ptychoverpa' b'in' b'Charmed' b'is' b'determined' b'to' b'have' b'"' b'challenged' b'without' b'excitement' b'under' b'communicated'
    b'in' b'his' b'style' b'"' b'.' b'While' b'their' b'body' b'has' b'not' b'been' b'killed' b',' b'he' b'involves' b'what' b'these' b'depleted' b'Ph\xc6\xb0\xe1\xbb\x9bc' b'dismissals'
    b'studied' b'chose' b'in' b'Staples' b'Singles' b'during' b'the' b'early' b'19th' b'century' b'.' b'9th' b'Stone' b'met' b'the' b'part' b'of' b'his' b'<unk>' b'and'
    b'two' b'Democrats' b',' b'but' b'others' b'first' b'reached' b'his' b'future' b'siege' b'back' b'.' b'Even' b'after' b'the' b'pseudonym' b'Walpole' b'talked' b'uprising' b','
    b'he' b'talking' b'a' b'plan' b'from' b'them' b'from' b'city' b'@-@' b'speaking' b'demonstrating' b'the' b'carriage' b'into' b'soul' b'.' b'<eos>' b'<unk>' b'retired' b'so'
    b'in' b'London' b'Loyalsock' b'Crime' b',' b'Dublin' b',' b'and' b'Dublin' b',' b'with' b'noting' b'that' b'memories' b'stemming' b'for' b'a' b'BBC' b'who' b'had'
    b'<unk>' b'aspects' b'of' b'leading' b'the' b'guilt' b'with' b'anecdotes' b"'" b'<unk>' b'.' b'<eos>' b'In' b'strings' b'he' b'was' b'the' b'sole' b'friendship' b'that'
    b'in' b'DC' b'language' b',' b'the' b'Irish' b'Hockey' b'Council' b'was' b'there' b'to' b'move' b'only' b'Pulaski' b',' b'he' b'moved' b'on' b'to' b'prevent'
    b'his' b'photos' b'program' b'that' b'he' b'would' b'...' b'apart' b'.' b'As' b'the' b'Viscount' b'MSF' b',' b'O' b"'Malley" b'saw' b'striker' b'Crown' b'Brown'
    b'.' b'<eos>' b'On' b'November' b'16' b',' b'1905' b',' b'Jardine' b'conducted' b'the' b'Scandal' b'for' b'military' b'economic' b',' b'<unk>' b',' b'<unk>' b','
    b'nominally' b',' b'to' b'shorten' b'to' b'biographer' b'atherfieldensis' b'at' b'Newmarket' b'up' b'his' b'support' b'throughout' b'his' b'own' b'withdrawing' b'race' b'.' b'Stokes' b'went'
    b'to' b'a' b'11' b'@-@' b'inning' b'Jasper' b'Greg' b'<unk>' b'As' b'the' b'finances' b'of' b'his' b'wife' b"'s" b'mom' b'.' b'The' b'pianist' b'serialized'
    b'in' b'his' b'countries' b'.' b'His' b'budget' b'system' b'undisclosed' b'Bury' b'secret' b'only' b'served' b'until' b'October' b'22' b',' b'1914' b'.' b'His' b'stripped'
    b'of' b'all' b'postseason' b'race' b'tied' b'living' b'to' b'move' b'Bart' b'@-@' b'field' b'on' b'July' b'17' b',' b'1963' b'.' b'Avery' b'attended' b'conflicted'
    b'in' b'severe' b'languages' b',' b'with' b'a' b'goal' b'McCarthy' b'to' b'<unk>' b'<unk>' b'Fields' b'.' b'Walpole' b"'s" b'performance' b'in' b'1998' b'confirmed' b'$'
    b'500' b'@,@' b'500' b'strength' b'.' b'The' b'legislature' b'reveal' b'one' b'of' b'his' b'draft' b"'s" b'<unk>' b'<unk>' b',' b'which' b'<unk>' b'him' b'out'
    b',' b'until' b'particular' b'to' b'compete' b'in' b'the' b'country' b"'s" b'awkward' b'disc' b'of' b'1968' b'.' b'Despite' b'the' b'first' b'such' b'year' b'in'
    b'the' b'Week' b',' b'it' b'became' b'ready' b'to' b'write' b',' b'his' b'family' b'idol' b'Cabral' b'who' b'sang' b'in' b'2006' b'.' b'<unk>' b'both'
    b'further' b'in' b'his' b'Labyrinth' b'was' b'published' b'in' b'<unk>' b',' b'Minor' b'Out' b'(' b'1924' b')' b',' b'are' b'<unk>' b'.' b'Later' b'he'
    b'suggested' b'at' b'that' b'point' b'of' b'24' b'games' b',' b'stating' b'that' b'commenting' b'Hero' b'wrote' b'"' b'people' b'"' b'was' b'turned' b'to' b'their'
    b'family' b'and' b'others' b',' b'but' b'appeared' b'only' b'to' b'be' b'described' b'as' b'one' b'of' b'his' b'final' b'novels' b'in' b'his' b'final' b'year'
    b'.' b'When' b'of' b'nothing' b'on' b'inspire' b'one' b'policemen' b'<unk>' b'Hairan' b'I' b'in' b'Kirsch' b'and' b'his' b'predecessor' b'a' b'decision' b'following' b'his'
    b'wife' b'"' b'Cloud' b'"' b'and' b'produced' b'a' b'particularly' b'lenient' b'title' b',' b'Chen' b'unoriginal' b'in' b'his' b'second' b'26th' b'company' b';' b'Mosley'
    b'received' b'up' b'a' b'province' b'of' b'old' b'career' b'in' b'2003' b'that' b'began' b'.' b'Mosley' b"'s" b'military' b'basketball' b'leads' b'came' b'out' b'in'
    b'four' b'Roman' b'gamers' b'.' b'His' b'barrister' b'states' b'that' b'he' b'never' b'heard' b'Fernando' b'Richmond' b'left' b'a' b'number' b'of' b'other' b'expectations' b'.'
    b'In' b'his' b'1986' b'debut' b',' b'Mosley' b'had' b'allowed' b'in' b'various' b'parts' b'on' b'the' b'<unk>' b'd' b'Program' b':' b'"' b'I' b'campaigned'
    b'a' b'seam' b'that' b'that' b'detailed' b'but' b'the' b'gambling' b'illustrated' b'<unk>' b'performances' b',' b'a' b'angle' b'of' b'effect' b',' b'and' b'a' b'special'
    b'race' b'<unk>' b'the' b'planet' b'and' b'alike' b'Edessa' b'who' b'felt' b'to' b'never' b'me' b'some' b'happen' b'in' b'that' b'the' b'next' b'season' b'I'
    b"'ve" b'<unk>' b'by' b'least' b'feel' b'.' b'That' b'would' b'be' b'<unk>' b'.' b'But' b'I' b'don' b"'t" b'kind' b'!' b'[' b'Why' b']'
    b'"' b'.' b'His' b'son' b'designer' b'Soap' b'(' b'The' b'<unk>' b'UK' b'Review' b'Tong' b')' b'mentioned' b'it' b'that' b'the' b'university' b'would' b'be'
    b'handled' b'by' b'activate' b'<unk>' b'.' b'His' b'heir' b'of' b'interphase' b'persisted' b'had' b'been' b'asked' b'her' b'post' b'@-@' b'story' b'Grisham' b'Planetary' b'an'
    b'fictional' b'video' b'in' b'anthology' b'.' b'The' b'transporter' b'is' b'divorced' b'following' b'a' b'game' b'kick' b'engine' b'pass' b'by' b'the' b'African' b'Persian' b'Circuit'
    b',' b'<unk>' b'.' b'<eos>' b'Like' b'Hairan' b'State' b',' b'21' b'%' b'of' b'its' b'old' b'stories' b',' b'Grove' b'Tufaro' b'and' b'Motion' b'played'
    b'new' b'starling' b'graphics' b'.' b'As' b'the' b'race' b'only' b'being' b'interrupted' b'in' b'TV' b',' b'Avalanche' b'good' b'overall' b'"' b'combatants' b'"' b'written'
    b'and' b'crowds' b'.' b'The' b'Hurricanes' b'married' b'the' b'book' b'to' b'show' b'fledge' b',' b'patriarch' b'violacea' b'and' b'Jeremy' b'Johnson' b',' b'while' b'Crash'
    b'Kongo' b'David' b'Buchan' b'is' b'victorious' b'.' b'The' b'French' b'District' b'responded' b'to' b'bend' b'as' b'the' b'555th' b',' b'they' b'rejected' b'beginning' b'early'
    b'again' b'"' b'faith' b'before' b'otherwise' b'Chart' b';' b'it' b'has' b'in' b'a' b'milestone' b'for' b'its' b'youth' b'to' b'say' b'August' b'24' b','
    b'2009' b'.' b'is' b'sort' b'of' b'a' b'...' b'publicity' b'<unk>' b'!' b'"' b',' b'Peter' b'Scott' b'of' b'The' b'Washington' b'Review' b'tried' b'to'
    b'funerary' b'\xc2\xa3' b'5' b'million' b'years' b'away' b'.' b'Protesters' b'and' b'following' b'first' b'pre' b'@-@' b'fiction' b'a' b'week' b'that' b'year' b'At' b'Walpole'
    b"'s" b'review' b',' b'Raffles' b'was' b'killed' b'\xe2\x80\x94' b'although' b'in' b'this' b'period' b'Walpole' b'the' b'Columbia' b'Music' b'Institute' b'spawned' b'into' b'a' b'broad'
    b'performance' b'of' b'a' b'group' b'that' b'of' b'freedom' b'lose' b'@-@' b'in' b'@-@' b'time' b'books' b',' b'instead' b'were' b'called' b'for' b'its' b'role'
    b'.' b'Fully' b',' b'these' b'stories' b'were' b'at' b'<unk>' b',' b'goat' b'McMaster' b',' b'<unk>' b',' b'I.' b'<unk>' b'in' b'ivory' b'defy' b','
    b'but' b'due' b'to' b'Arthur' b'Taylor' b'of' b'2D' b'besieged' b'much' b'interest' b'rather' b'than' b'one' b'years' b'assent' b';' b'The' b'Dictionary' b'of' b'Nostrovite'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 243.9
    loss: 5.168
    elapsed time (seconds): 183.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  13.040 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
