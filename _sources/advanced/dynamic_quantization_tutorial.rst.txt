.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'Two' b'hours' b'later' b',' b'<unk>' b"'Automobile" b'points' b'into' b'a' b'<unk>' b'volume' b'.' b'David' b'Howard' b'observed' b'John' b'Atkinson' b',' b'hired'
    b'tribal' b'Authors' b'to' b'bass' b',' b'where' b'a' b'land' b'occurs' b';' b'Sullivan' b'have' b'more' b'professionalisation' b'feared' b',' b'and' b'relating' b'to' b'dislike'
    b'that' b'this' b'has' b'1924' b'from' b'high' b'visibility' b'than' b'some' b'powerhouse' b'of' b'their' b'feelings' b'.' b'Sources' b'and' b'lobed' b'different' b'property' b'enemies'
    b'have' b'five' b'sections' b'of' b'<unk>' b'coasts' b'<unk>' b')' b'.' b'Merrifield' b'recorded' b'a' b'benefit' b'function' b'more' b'than' b'75' b'%' b'of' b'Walpole'
    b'Briain' b',' b'a' b'Shorter' b'called' b'"' b'"' b'Lady' b'Paul' b'"' b'0' b'and' b'sawmills' b'end' b'from' b'directors' b',' b'a' b'book' b','
    b'was' b'introduced' b'in' b'mid' b'@-@' b'Islamic' b'goalball' b',' b'Ranulf' b'scripts' b',' b'Joyce' b'Eight' b',' b'and' b'1891' b'near' b'gel' b'specimen' b','
    b'playing' b'only' b'machete' b'for' b'<unk>' b'.' b'<eos>' b'There' b'have' b'been' b'two' b'smaller' b'songs' b'from' b'its' b'critics' b',' b'added' b',' b'in'
    b'general' b',' b'chest' b'Morris' b',' b'become' b'because' b'their' b'female' b'crew' b'and' b'recorded' b'sewage' b'or' b'<unk>' b',' b'lacking' b'to' b'lovers' b','
    b'in' b'cities' b',' b'developed' b'intercity' b'body' b',' b'may' b'be' b'moved' b'to' b'copying' b'future' b'decay' b'.' b'As' b'a' b'fifties' b',' b'the'
    b'<unk>' b'<unk>' b'had' b'a' b'stay' b'of' b'Perry' b'biographer' b'little' b'on' b'a' b'narrow' b'run' b'of' b'expense' b'.' b'After' b'the' b'Crash' b'Power'
    b'Sarah' b'Race' b',' b'both' b'@-@' b'term' b'methods' b'were' b'put' b'made' b'excavation' b',' b'or' b'in' b'particular' b'.' b'These' b'Sun' b'@-@' b'Roth'
    b'tended' b'to' b'use' b'their' b'planet' b',' b'and' b'his' b'now' b'remember' b'books' b',' b'vision' b'"' b'displays' b'coming' b'and' b'delivering' b'a' b'food'
    b'English' b'<unk>' b'to' b'air' b'a' b'eye' b'"' b',' b'suggesting' b'that' b'they' b'have' b'non' b'@-@' b'fiction' b'.' b'This' b'divided' b'this' b'feature'
    b',' b'saying' b'no' b'isolation' b'Title' b'had' b'one' b'of' b'the' b'most' b'good' b'movement' b'to' b'be' b'built' b'.' b'His' b'reign' b'(' b'except'
    b')' b',' b'conversation' b',' b'and' b'John' b'Illustrated' b'writes' b'that' b'Berkeley' b'"' b'spotted' b'the' b'season' b'knowledge' b'.' b'Jun\xc3\xadn' b'believed' b'that' b'they'
    b'get' b'cadres' b'nothing' b'.' b'"' b'Hunting' b'made' b'when' b'he' b'"' b'married' b'two' b'islands' b'away' b'to' b'twenty' b'<unk>' b'and' b'a' b'combination'
    b'of' b'theorem' b'"' b'.' b'The' b'dedication' b'was' b'made' b'to' b'be' b'neither' b'new' b',' b'with' b'the' b'visual' b'name' b'in' b'which' b'the'
    b'Viscount' b'is' b'two' b'active' b',' b'Meri' b'required' b'to' b'cost' b'care' b'if' b'thousands' b'that' b'have' b'circular' b'or' b'terrible' b'bird' b'scheme' b'.'
    b'Eight' b'ways' b'stopped' b'the' b'character' b',' b'which' b'effectively' b'be' b'short' b'.' b'O' b'One' b',' b'basalt' b':' b'aerodrome' b'Pacific' b',' b'<unk>'
    b',' b'and' b'Critics' b'(' b'including' b'appointments' b')' b'foxes' b'jani' b'your' b'planet' b'Laboratory' b'.' b'<unk>' b'on' b'Crowe' b'twenty' b'@-@' b'Proprietary' b'('
    b'Gillian' b'Mecca' b'Deborah' b'Kerr' b')' b',' b'Holl' b'<eos>' b'<unk>' b',' b'charity' b')' b'as' b'this' b',' b'can' b'have' b'obey' b'the' b'A'
    b'Sea' b'.' b'<unk>' b'may' b'<unk>' b'or' b'twigs' b'be' b'wrong' b',' b'although' b'with' b'their' b'strange' b'reason' b'<unk>' b',' b'Liszt' b'must' b'fail'
    b'to' b'publish' b'your' b'eyes' b'made' b'by' b'The' b'mannerisms' b'that' b'this' b'of' b'his' b'older' b'circle' b'like' b'a' b'drugs' b',' b'more' b'directors'
    b'stated' b'.' b'wear' b'requests' b'like' b'that' b'a' b'planet' b'is' b'dark' b'conquered' b',' b'and' b'solve' b'this' b'rock' b'or' b'is' b'able' b'to'
    b'appear' b'intact' b'.' b'When' b'into' b'Jowhar' b'in' b'his' b'Protestant' b'form' b',' b'Peshkin' b'is' b'universal' b',' b'the' b'planet' b'who' b'occasionally' b'ran'
    b'Part' b'like' b'there' b'is' b'targeted' b'if' b'they' b'remained' b'into' b'the' b'deep' b'relation' b'to' b'this' b'clothes' b'.' b'If' b'they' b'Kowalski' b'other'
    b'make' b'his' b'inclination' b'of' b'him' b'so' b'anyone' b'intertwine' b',' b'it' b'has' b'probably' b'been' b'distinguished' b'in' b'the' b'all' b'Indian' b'asset' b'of'
    b'this' b',' b'but' b'there' b'is' b'also' b'widespread' b'worn' b'(' b'fluid' b')' b',' b'instead' b',' b'armed' b'Arabian' b',' b'<unk>' b',' b'thin'
    b'requirements' b',' b'denoting' b'long' b'the' b'very' b'breath' b'reporter' b'.' b'Males' b'can' b'go' b'through' b'birth' b'as' b'he' b'do' b'seen' b'the' b'way'
    b'with' b'witch' b'in' b'The' b'<unk>' b'groups' b'.' b'When' b'therefore' b',' b'they' b'know' b'they' b'are' b'overcome' b':' b'they' b'have' b'<unk>' b'they'
    b"'m" b'a' b'good' b'quality' b'in' b'his' b'resolution' b',' b'we' b'do' b'not' b'see' b'than' b'.' b'but' b'I' b'don' b"'t" b'think' b'that'
    b'their' b'diary' b'do' b'some' b'candidates' b'.' b'His' b'small' b'objects' b'\xe2\x80\x94' b'very' b'permission' b'to' b'have' b'as' b'consistently' b'.' b'The' b'wet' b'skin'
    b'was' b'leaked' b'pages' b'in' b'Atlanta' b',' b'and' b'it' b'treated' b'these' b'fun' b'questioning' b'feels' b'<unk>' b'into' b'a' b'very' b'bad' b'source' b'.'
    b'"' b'In' b'contrast' b',' b'Johnston' b'wrote' b':' b'"' b'See' b',' b'rather' b'than' b'or' b'do' b'not' b'be' b'"' b'.' b'The' b'writing'
    b'of' b'general' b'compelling' b'through' b'his' b'original' b'mansion' b'may' b'be' b'in' b'another' b'way' b'.' b'While' b'they' b'found' b'her' b'head' b'towards' b'a'
    b'period' b'as' b'discussed' b'overland' b',' b'TJ' b'O' b"'t" b'be' b'made' b'by' b'Canal' b',' b'and' b'they' b'may' b'able' b'to' b'have' b'comet'
    b'.' b'The' b'primary' b'oxidizing' b'witnesses' b'are' b'not' b'<unk>' b'.' b'In' b'1924' b',' b'it' b',' b'a' b'fore' b'describes' b'a' b'view' b'of'
    b'a' b'friend' b'.' b'<eos>' b'A' b'alkaline' b'northerly' b'2' b'examples' b'of' b'Sean' b'Rosebery' b'is' b'also' b'found' b'a' b'bowl' b'<unk>' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Biography' b'=' b'=' b'<eos>' b'<eos>' b'M.' b'Achaemenid' b'Rolf' b'!' b'is' b'initially' b'found' b'only' b'to' b'be' b'a' b'lion'
    b'of' b'all' b'.' b'When' b'a' b'tribute' b'to' b'the' b'bouts' b'rules' b'for' b'the' b'plantations' b'some' b'or' b'5' b'\xce\xbcm' b'during' b'other' b'chicks'
    b'on' b'stump' b';' b'some' b'as' b'.' b'<unk>' b'called' b'"' b'when' b"'" b'Raven' b'they' b'looked' b'up' b'big' b'use' b'"' b'.' b'He'
    b'described' b'it' b'to' b'its' b'eyes' b'to' b'interact' b'by' b'<unk>' b'use' b';' b'in' b'Dassen' b"'s" b'Day' b'classes' b'he' b'circuits' b'from' b'Ceres'
    b'and' b'often' b'suggests' b'that' b'"' b'such' b',' b'condoms' b'...' b'people' b'like' b'Tor' b',' b'distant' b',' b'panoramic' b',' b'body' b'lines' b'are'
    b'<unk>' b'.' b'"' b'Thus' b',' b'they' b'will' b'not' b'have' b'been' b'good' b',' b'arguing' b'to' b'be' b'highly' b'disappointed' b'to' b'have' b'been'
    b'under' b'temperature' b'\xe2\x80\x94' b'and' b'Berlioz' b'called' b'the' b'game' b'a' b'"' b'Underhill' b'to' b'smell' b'industry' b'of' b'human' b'authority' b'or' b'<unk>' b'massive'
    b',' b'so' b'Wu' b'found' b'her' b'surroundings' b'before' b'they' b'put' b'was' b'accused' b'today' b'attack' b'to' b'be' b'possible' b'to' b'see' b'the' b'story'
    b'upon' b'always' b'<unk>' b'.' b'"' b'A' b'barons' b'of' b'Ara' b"'s" b'stored' b'powers' b',' b'referring' b'to' b'listens' b',' b'and' b'su' b'hardwood'
    b'other' b'kinds' b'of' b'motion' b'down' b'.' b'As' b'a' b'earthstar' b',' b'Chronicle' b'can' b'face' b'power' b'demanded' b'.' b'<eos>' b'Over' b'the' b'years'
    b'of' b'the' b'stumps' b'in' b'600' b'attempts' b',' b'The' b'eggs' b'contacted' b'slightly' b'motivated' b'females' b'.' b'It' b'resembles' b'how' b'one' b'axis' b'bookcase'
    b'is' b'tough' b'because' b'they' b'are' b'kept' b'.' b'As' b'of' b'2015' b'they' b'bring' b'of' b'to' b'do' b'the' b'head' b'that' b'these' b'mature'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 233.8
    loss: 5.168
    elapsed time (seconds): 168.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  47.539 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
