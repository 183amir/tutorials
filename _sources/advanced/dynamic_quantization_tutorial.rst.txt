.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'.' b'<eos>' b'The' b'game' b'became' b'scope' b'to' b'be' b'traced' b'in' b'several' b'Boca' b'coasters' b'.' b'Certain' b'of' b'his' b'best' b'accounts'
    b',' b'both' b'between' b'Divine' b'by' b'these' b'evolved' b'from' b'Pasha' b'<unk>' b',' b'is' b'studying' b'in' b'an' b'Greek' b'book' b'while' b'he' b'sent'
    b'down' b'turboprop' b'by' b'outward' b'the' b'wrong' b'observatory' b',' b'the' b'boy' b'Farnam' b'partly' b':' b'Saffir' b'strong' b'paper' b'.' b'The' b'counties' b'noted'
    b'a' b'range' b'as' b'"' b'an' b'considerable' b'face' b'"' b',' b'but' b'they' b'were' b'only' b'manor' b'.' b'He' b'has' b'suggested' b'that' b'<unk>'
    b'<unk>' b'reflected' b'five' b'military' b'species' b'which' b'were' b'serialized' b'with' b'doing' b'many' b'end' b'stones' b',' b'but' b'the' b'overall' b'diaspora' b'had' b'successfully'
    b'very' b'searching' b'.' b'High' b'planners' b'incessantly' b'praised' b'the' b'player' b"'s" b'fortune' b',' b'which' b'DC' b'invested' b'the' b'advance' b'a' b'song' b'issue'
    b'\xc2\xa3' b'14' b'million' b'from' b'height' b'in' b'the' b'Jews' b'.' b'Among' b'two' b'characters' b'be' b'there' b'to' b'alter' b'whose' b'planet' b"'" b'scattering'
    b',' b'while' b'exhausted' b'sedentary' b'one' b'Patrol' b'were' b'chosen' b'.' b'master' b'and' b'producers' b'are' b'invited' b'to' b'recover' b'the' b'unity' b'of' b'his'
    b'true' b'third' b'and' b'<unk>' b'team' b'.' b'cinematographer' b'performs' b'both' b'weakest' b'distinguishable' b'as' b'they' b'escaped' b'across' b'the' b'Sunday' b'Ocean' b',' b'which'
    b'the' b'Viscount' b'makes' b'a' b'planet' b'inspired' b'by' b'an' b'Peterson' b'on' b'their' b'first' b'hand' b'when' b'they' b'seeks' b':' b'a' b'friend' b'at'
    b':' b'<unk>' b'notes' b'before' b'that' b'in' b'a' b'character' b'when' b'he' b'has' b'feels' b'a' b'transitions' b'.' b'<eos>' b'Version' b'closely' b'mariners' b'with'
    b'magical' b'Crash' b'III' b',' b'a' b'guitar' b'informal' b'franchise' b',' b'a' b'opponent' b'of' b'<unk>' b'who' b'had' b'at' b'their' b'longer' b'and' b'search'
    b'in' b'The' b'colour' b'.' b'When' b'it' b'is' b'you' b'of' b'side' b',' b'he' b'remarked' b'available' b'after' b'Scheflo' b'\xe2\x80\x99' b's' b'voice' b'of'
    b'leg' b'Conservation' b'after' b'sexual' b'pleasure' b'for' b'flight' b'video' b'(' b'<unk>' b',' b'and' b'on' b'two' b'periods' b')' b',' b'or' b'standard' b'diameter'
    b'.' b'He' b'sharp' b'his' b'intelligence' b'too' b'confidence' b'40' b'years' b'earlier' b',' b'$' b'5' b'million' b',' b'and' b'19' b'walks' b'ago' b'and'
    b"'s" b'teenage' b'limits' b'invaded' b'.' b'A' b'year' b'after' b'which' b'he' b'gave' b'emphatically' b'under' b'Michael' b'Rosebery' b'in' b'The' b'history' b'of' b'a'
    b'plot' b'his' b'daughter' b'please' b'to' b'her' b'right' b'set' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Fourth' b'American' b'roll' b'=' b'=' b'='
    b'<eos>' b'<eos>' b'Steve' b'Ross' b'is' b'a' b'Duke' b'of' b'Soundtrack' b'light' b'Foundation' b'.' b'The' b'senator' b'of' b'Hairan' b'(' b'B.' b'Seymour' b')'
    b'is' b'66' b',' b'translating' b'that' b'he' b'probably' b'fails' b'to' b'meet' b'for' b'hard' b'guy' b',' b'buying' b'his' b'role' b'to' b'ABC' b'.'
    b'In' b'this' b'way' b'he' b'learns' b'to' b'be' b'actually' b'Career' b',' b'though' b'it' b'is' b'"' b'quite' b'thought' b'for' b'<unk>' b'<unk>' b'"'
    b'.' b'Hurlford' b'went' b'on' b'a' b'trademark' b'<unk>' b'with' b'his' b'only' b'rest' b'catching' b'Federations' b'.' b'That' b'finishes' b'is' b'now' b'used' b'about'
    b'his' b'greater' b'size' b'to' b'become' b'associated' b'by' b'asks' b'her' b'or' b'child' b'"' b'fates' b'"' b'and' b'"' b'he' b'<unk>' b'"' b'.'
    b'Condoms' b'observed' b'"' b'The' b'middle' b'most' b'balls' b'of' b'white' b',' b'mostly' b'ready' b'to' b'come' b'to' b'stereotype' b'in' b'Jun' b'to' b'he'
    b'suggesting' b'.' b'If' b'"' b'GamePro' b'himself' b'married' b'borderline' b'"' b'<unk>' b'of' b'different' b'development' b'"' b'.' b'In' b'a' b'exchange' b'from' b'O'
    b'One' b',' b'O' b'Power' b'Hyperion' b'was' b'the' b'conclusions' b'of' b'Sinclair' b"'s" b'"' b'Crabble' b'"' b'initial' b'young' b',' b'accessible' b'at' b'T'
    b'him' b':' b'the' b'Shore' b'position' b'(' b'book' b'.' b')' b',' b'this' b'droppings' b'of' b'the' b'song' b',' b'"' b'<unk>' b'!' b'!'
    b'"' b'inherited' b'the' b'Vegas' b'human' b'review' b'by' b'dances' b'provoking' b'for' b'controlling' b'passports' b',' b'"' b'Once' b'on' b'powerful' b'effigy' b'"' b'.'
    b'In' b'a' b'review' b'of' b'journalist' b'<unk>' b'Julius' b'Kirk' b',' b'e4' b',' b'The' b'official' b'small' b'script' b',' b'interpreted' b'Angelou' b"'s" b'14th'
    b'greatest' b',' b'live' b'hand' b'...' b'metaphors' b'one' b'of' b'each' b'other' b'.' b'As' b'lactone' b"'s" b'maximum' b'answer' b'and' b'a' b'mass' b'protest'
    b',' b'text' b'noncombatant' b'praise' b'influenced' b'him' b'to' b'introduce' b'trouble' b'or' b'flames' b'or' b'other' b'events' b'did' b'not' b'have' b'to' b'customized' b'their'
    b'screen' b'distress' b'.' b'<unk>' b'of' b'thumb' b'birds' b'about' b'<unk>' b',' b'Korea' b',' b'and' b'separating' b'a' b'purchase' b'or' b'a' b'community' b'in'
    b'in' b'Japanese' b'reception' b';' b'water' b'@-@' b'<unk>' b',' b'both' b'throws' b'or' b'Priorities' b'spun' b',' b'takes' b'part' b'a' b'hour' b'around' b'those'
    b'.' b'"' b'<unk>' b',' b'or' b'the' b'substance' b'"' b'in' b'Last' b'Thunderbird' b"'s" b'Christian' b'trilogy' b'and' b'the' b'"' b'<unk>' b'<unk>' b'"'
    b'(' b'interviews' b'and' b'Ode' b'<unk>' b',' b'Brown' b'partly' b'youths' b'for' b'himself' b')' b'but' b'about' b'illustrations' b'each' b'episodes' b'of' b'stories' b'having'
    b'leaping' b'issues' b'down' b'that' b'his' b'neck' b'is' b'posters' b'family' b'.' b'This' b'role' b'is' b'played' b'in' b'November' b'1936' b'.' b'<eos>' b'atrocities'
    b'(' b'from' b'Shakespeare' b')' b'=' b'A' b'anti' b'@-@' b'ruler' b'guides' b'gets' b'and' b'was' b'thrown' b'by' b'an' b'acute' b'coaster' b':' b'<eos>'
    b'The' b'reasons' b'has' b'he' b'received' b'death' b'in' b'name' b'only' b'to' b'remain' b'rather' b'.' b'At' b'one' b'point' b'they' b'can' b'be' b'elaborate'
    b',' b'though' b'it' b'choose' b'all' b'that' b'.' b'"' b'When' b'this' b'has' b'accept' b'Tessa' b'and' b'Manders' b'across' b'literary' b'or' b'vacuum' b'more'
    b'than' b'over' b'2' b'%' b'of' b'protests' b',' b'another' b'thought' b'after' b'Christopher' b'Georges' b',' b'"' b'overnight' b'"' b'is' b'<unk>' b'.' b'To'
    b'test' b'the' b'hold' b',' b'Mosley' b'admired' b'rocker' b'Manor' b'dignitaries' b'only' b'to' b'enter' b'the' b'narrative' b'from' b'Domestic' b'Boom' b',' b'a' b'USSR'
    b'from' b'says' b'that' b',' b'when' b'he' b'may' b'have' b'prevalent' b'things' b'and' b'for' b'the' b'kidnapped' b'Halo' b',' b'birth' b'so' b'also' b'<unk>'
    b'.' b'By' b'a' b'review' b'sees' b'<unk>' b'@-@' b'motion' b'@-@' b'side' b',' b'Pamela' b'Gharana' b'Bierly' b'<unk>' b'the' b'Broncos' b'for' b'praise' b','
    b'but' b'reflected' b'David' b'Perrin' b',' b'when' b'the' b'does' b'other' b'no' b'to' b'his' b'skin' b'are' b'the' b'same' b'trying' b'as' b'being' b'apparently'
    b'for' b'a' b'planet' b'.' b'These' b'of' b'his' b'hung' b'deal' b"'" b'left' b'to' b'make' b'centuries' b'with' b'his' b'far' b'loose' b'@-@' b'handed'
    b'percussion' b'percentage' b'and' b'the' b'band' b'rarely' b'appears' b'on' b'the' b'hiatus' b'so' b'when' b'he' b'appears' b'Cade' b'Starr' b',' b'a' b'characteristic' b'of'
    b'whom' b'telling' b'guitar' b',' b'again' b'The' b'<unk>' b',' b'when' b'toe' b'To' b'describe' b'how' b'they' b'am' b'a' b'Key' b'on' b'Polish' b'side'
    b'.' b'When' b'Grip' b'on' b'his' b'first' b'grandfather' b',' b'they' b'go' b'with' b'"' b'mad' b'but' b'Jan' b'Sauvignon' b'"' b',' b'"' b'order'
    b'poor' b'"' b'.' b'His' b'male' b'version' b'has' b'reached' b'described' b',' b'Babylonian' b';' b'or' b'certain' b'may' b'be' b'last' b'able' b'to' b'intercept'
    b'the' b'September' b'24' b'to' b'her' b'construction' b'.' b'The' b'game' b'thugs' b'of' b'the' b'Magnetic' b'returns' b'of' b'FLT3' b'"' b'<unk>' b"'s" b'skills'
    b'is' b'"' b'and' b'is' b'forced' b'to' b'lift' b',' b'or' b'the' b'offensive' b'"' b'Outstanding' b"'t" b'be' b'true' b'.' b'Santander' b"'" b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 211.9
    loss: 5.168
    elapsed time (seconds): 147.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  5.688 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
