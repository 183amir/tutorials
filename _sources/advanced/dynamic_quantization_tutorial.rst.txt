.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'chemotherapy' b'as' b'outposts' b',' b'Kissy' b',' b'and' b'kindergarten' b',' b'and' b'their' b'worst' b'swamp' b',' b'often' b'shelled' b'natural' b'occurring' b','
    b'<unk>' b',' b'and' b'mudslides' b'Captain' b'priced' b'whereas' b'such' b'as' b'some' b'parts' b'to' b'manage' b'Uyghur' b'a' b'transit' b'to' b'participate' b'the' b'work'
    b'of' b'idea' b',' b'giving' b'them' b'Victoria' b'regarding' b'scary' b'all' b'death' b'alongside' b'their' b'schools' b'.' b'<eos>' b'Proteins' b'played' b'Chinese' b'care' b':'
    b'the' b'largest' b'principle' b'of' b'a' b'large' b'marriage' b'or' b'<unk>' b'are' b'sometimes' b'visible' b'for' b'it' b'.' b'Both' b'@-@' b'scale' b'harm' b'for'
    b'different' b'nation' b'were' b'debated' b'in' b'on' b'one' b'August' b'Ironically' b',' b'related' b'to' b'reminds' b'road' b'flooding' b'who' b'ultimately' b'conducted' b'.' b'Los'
    b'from' b'the' b'1930s' b',' b'they' b'were' b'normally' b'related' b'to' b'over' b'1' b'million' b'years' b'.' b'Species' b'is' b'known' b'Ghana' b'as' b'which'
    b'the' b'equivalent' b'was' b'played' b'towards' b'I.' b'S.' b'Tuff' b'Ming' b'by' b'the' b'Nile' b',' b'becoming' b'an' b'pretty' b'powerful' b'practice' b',' b'X'
    b',' b'but' b'they' b"'m" b'one' b'final' b'female' b',' b'until' b'the' b'offense' b'has' b'fact' b'500' b'in' b'steps' b'.' b'The' b'Shaanxi' b'Kaiu'
    b'of' b'all' b'of' b'120' b'female' b'figures' b',' b'and' b'a' b'spindles' b'with' b'thirty' b'@-@' b'noir' b'pink' b'alternately' b'.' b'The' b'resulting' b'ruler'
    b'of' b'the' b'Sun' b'destroyed' b'far' b'engineering' b'with' b'20' b'km' b'.' b'There' b'can' b'be' b'abundant' b'\xe2\x80\x93' b'20' b',' b'and' b'10' b'percent'
    b'of' b'a' b'Partial' b'reality' b'<unk>' b'.' b'The' b'female' b"'" b'desire' b'.' b'It' b'has' b'initially' b'been' b'ruled' b'ahead' b'coverage' b'that' b'must'
    b'be' b'long' b'.' b'They' b'are' b'<unk>' b'.' b'<unk>' b'Amsterdam' b'exhaust' b'two' b'more' b'Bushranger' b'ragale' b'.' b'Even' b'eight' b'or' b'over' b'Mexico'
    b',' b'the' b'reign' b'of' b'year' b'mg' b'is' b'occasionally' b'renderings' b'by' b'around' b'6' b'%' b',' b'and' b'occurs' b'the' b'year' b'with' b'three'
    b'kilometres' b'and' b'<unk>' b',' b'in' b'which' b'having' b'requires' b'not' b'communal' b'on' b'display' b'.' b'A' b'female' b'slide' b'provides' b'over' b'10' b'seconds'
    b',' b'Ireland' b',' b'and' b'juveniles' b',' b'a' b'population' b'from' b'authorizing' b'in' b'two' b'broods' b'between' b'cylindrical' b'and' b'male' b'understand' b'.' b'It'
    b'forms' b'large' b'nests' b'remaining' b'throughout' b'their' b'eyes' b',' b'and' b'they' b'as' b'the' b'inner' b'species' b'ended' b'in' b'rapid' b'chest' b'.' b'There'
    b'are' b'no' b'schoolhouse' b'for' b'prior' b'prey' b'or' b'habitats' b',' b'to' b'adjust' b'antisemitic' b',' b'more' b'than' b'2' b'hour' b'(' b'33' b'lb'
    b')' b',' b'which' b'consists' b'of' b'a' b'maximum' b'24' b'centimetres' b'(' b'106' b'lb' b')' b'north' b'of' b'any' b'other' b'traffic' b'.' b'The'
    b'specific' b'activity' b'has' b'also' b'been' b'added' b'to' b'meet' b'after' b'moving' b'away' b'in' b'the' b'first' b'brick' b'or' b'triple' b'holes' b'.' b'The'
    b'exterior' b'block' b'was' b'probably' b'closed' b'from' b'two' b'times' b',' b'which' b'provides' b'garage' b'the' b'"' b'when' b'2019' b'@-@' b'sized' b',' b'green'
    b'doors' b'found' b'"' b'.' b'2000' b'says' b'they' b'once' b'labelled' b'males' b'due' b'to' b'Toward' b'any' b'other' b'bird' b'species' b'.' b'<eos>' b'As'
    b'agricultural' b'bodies' b',' b'available' b',' b'Dr' b'Boulevard' b'and' b'foraging' b'basins' b'were' b'expected' b'to' b'have' b'obtained' b'specimens' b'of' b'Pune' b'.' b'They'
    b'called' b'this' b'will' b'be' b'"' b'fashioned' b'and' b'blame' b',' b'of' b'hatred' b'enough' b'IFTA' b'surrounded' b',' b'and' b'actually' b'there' b'are' b'significant'
    b'hoard' b'it' b'maintained' b'that' b'openly' b'on' b'far' b'and' b'supernatural' b'that' b'they' b'are' b'different' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Plot'
    b'=' b'=' b'<eos>' b'<eos>' b'wanna' b'is' b'not' b'maintained' b'after' b'RSPB' b'.' b'They' b'is' b'a' b'form' b'of' b'Ceres' b'@-@' b'bound' b'novae'
    b',' b'and' b'burns' b',' b'when' b'individual' b'exerted' b'the' b'reduction' b'of' b'energy' b'is' b'trivalent' b'during' b'this' b'size' b'.' b'Later' b'their' b'country'
    b',' b'it' b'is' b'canopy' b'moderately' b'raised' b',' b'or' b'for' b'an' b'steady' b'reduction' b'.' b'In' b'the' b'last' b',' b'business' b'were' b'represented'
    b',' b'they' b'<unk>' b'roughly' b'910' b'predators' b',' b'[' b'any' b'birds' b'can' b'be' b'sound' b'when' b'they' b'pharaohs' b'have' b'come' b'.' b'His'
    b'feral' b'1815' b'may' b'be' b'shut' b'through' b',' b'"' b'your' b'sort' b'of' b'some' b'properties' b'of' b'will' b'be' b'incredibly' b'all' b'short' b'and'
    b'aided' b'into' b'human' b',' b'the' b'break' b'they' b'<unk>' b'in' b'a' b'movement' b'@-@' b'long' b',' b'<unk>' b'or' b'.' b'As' b'a' b'middle'
    b',' b'males' b'do' b'staying' b'its' b'longer' b'course' b'by' b'consumed' b'them' b'to' b'average' b',' b'in' b'around' b'one' b'when' b'has' b'implied' b'a'
    b'male' b'woman' b'came' b'at' b'its' b'planet' b'.' b'"' b'<unk>' b'for' b'Tudor' b'stars' b'suggests' b'it' b'would' b'publish' b'the' b'needed' b'between' b'humans'
    b'.' b'Because' b'these' b'flocks' b'can' b'apply' b'food' b'they' b'are' b'on' b'one' b'million' b'songs' b'.' b'They' b'lent' b'issuing' b'these' b'enemies' b'<unk>'
    b'what' b'may' b'result' b'so' b',' b'while' b'nesting' b'thereafter' b'of' b'organic' b'breeding' b'legs' b'or' b'induced' b'them' b'through' b'the' b'flock' b'when' b'they'
    b'arrive' b'.' b'If' b'they' b"'ve" b'into' b'different' b'coastal' b'predation' b',' b'they' b'are' b'almost' b'subjected' b'to' b'pale' b'<unk>' b'(' b'Guiry' b'\xe2\x80\x93'
    b'Nelson' b'algae' b')' b'and' b't1' b'(' b'West' b'b' b',' b'upper' b'and' b'Junkers' b')' b'or' b'them' b',' b'John' b'deer' b'(' b'wei'
    b')' b';' b'usually' b',' b'with' b'their' b'slender' b'<unk>' b'(' b'falling' b'%' b')' b'.' b'It' b'is' b'led' b'<unk>' b'as' b'limitations' b'and'
    b'broods' b',' b'and' b'fuelled' b'terrestrial' b'strips' b'of' b'ground' b'up' b'down' b'closer' b'to' b'attaining' b'.' b'Common' b'structures' b'may' b'form' b'the' b'kakapo'
    b',' b'but' b'they' b'appears' b'well' b'to' b'lower' b'areas' b'.' b'When' b'they' b'feed' b'and' b'arranged' b'the' b'zero' b'back' b'that' b'they' b'would'
    b'be' b'roughly' b'down' b'in' b'10' b',' b'each' b'may' b'fucking' b'inhabit' b',' b'when' b'they' b'remained' b'to' b'keep' b'.' b'The' b'other' b'are'
    b'preserving' b'in' b'winter' b'(' b'2' b'@.@' b'60' b'lb' b')' b'when' b'of' b'their' b'fortunes' b':' b'it' b'will' b'not' b'speak' b'the' b'female'
    b'of' b'they' b'transformed' b'German' b'system' b';' b'they' b'will' b'use' b'it' b'himself' b'as' b'they' b'true' b'.' b'<eos>' b'When' b'they' b'rarely' b'find'
    b'their' b'access' b'of' b'glad' b',' b'other' b'proteins' b'are' b'occasionally' b'known' b';' b'they' b'do' b'not' b'accommodate' b'up' b'it' b'further' b'up' b'.'
    b'Another' b'same' b'lamina' b',' b'this' b'shooter' b'clips' b'when' b'plumage' b'153Eu' b'is' b'pronounced' b'by' b'otherwise' b'considered' b'creating' b'food' b'and' b'up' b'in'
    b'European' b'Africa' b'.' b'If' b'they' b'separated' b'to' b'drive' b',' b'are' b'swing' b'all' b'by' b'players' b',' b'when' b'it' b'may' b'be' b'slower'
    b'<unk>' b'.' b'thereafter' b'treating' b'them' b'in' b'strongly' b'the' b'cycle' b',' b'such' b'as' b'haze' b'and' b'loss' b'.' b'This' b'diverse' b'behaviour' b','
    b'around' b'their' b'skin' b'to' b'game' b',' b'so' b'more' b'of' b'from' b'other' b'spots' b'<unk>' b',' b'they' b'eat' b'long' b'markings' b'in' b'humans'
    b',' b'Brooklyn' b',' b'arranging' b'loud' b'oxide' b';' b'and' b'surface' b'recognition' b'from' b'cells' b'.' b'Some' b'lineage' b'common' b'apparatus' b'say' b'sustained' b','
    b'note' b'on' b'the' b'hectares' b',' b'freezing' b'back' b'young' b'tribes' b'of' b'levels' b'and' b'winter' b'.' b'If' b'also' b'overcoming' b'using' b'its' b'evidence'
    b',' b'birds' b'mountain' b'courting' b',' b'unlike' b'a' b'gasteroid' b',' b'false' b'calculation' b'or' b'sink' b',' b'seeks' b'to' b'be' b'slightly' b'effective' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 233.9
    loss: 5.168
    elapsed time (seconds): 174.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  53.373 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
