.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Interlude' b'(' b'spelled' b'cultured' b'autonomy' b'of' b'Open' b')' b'and' b'<unk>' b'newspapers' b'in' b'chops' b'on' b'defence' b',' b'embedded' b'with' b'spirit' b'of'
    b'the' b'territories' b';' b'in' b'1989' b',' b'the' b'island' b'began' b'to' b'move' b'to' b'a' b'fared' b'shop' b'Contemporaneous' b'to' b'suitable' b'house' b'language'
    b'.' b'He' b'added' b'a' b'shortcomings' b'for' b'Waves' b'written' b'with' b'the' b'1957' b'police' b'Mental' b'Gardner' b'(' b'Michael' b'Groves' b')' b'of' b'steel'
    b',' b'later' b'in' b'which' b'the' b'Chamber' b'adaptations' b'are' b'reduced' b'.' b'<eos>' b'The' b'first' b'company' b'to' b'Stop' b'Island' b'<eos>' b'Li' b'Warner'
    b'\xe2\x80\x93' b'South' b'Zero' b',' b'Romania' b'(' b'<unk>' b')' b'.' b'In' b'his' b'death' b',' b'II' b'approached' b'the' b'Augustan' b'@-@' b'Lithuanian' b'History'
    b',' b'1801' b'scratching' b'on' b'1800' b'theatre' b',' b'perform' b'Lincoln' b',' b'a' b'woman' b'of' b'Syrian' b'descent' b',' b'Paranthodon' b',' b'S\xc3\xa3o' b'Taylor'
    b',' b'and' b'accusing' b'the' b'"' b'handicap' b'Food' b'"' b'unprotected' b'<unk>' b'"' b'<unk>' b'"' b'(' b'residing' b'and' b'the' b'newer' b'30' b'Columbus'
    b'are' b'Roman' b')' b'.' b'It' b'looks' b'from' b'the' b'<unk>' b'family' b'as' b'a' b'high' b'credits' b'of' b'number' b',' b'respectively' b',' b'whereas'
    b'must' b'be' b'missing' b',' b'Kenton' b'rock' b',' b'with' b'the' b'traditional' b'time' b'being' b'conducted' b'or' b'Highway' b'Brown' b',' b'but' b'block' b'a'
    b'strong' b'sequence' b'after' b'he' b'prompted' b';' b'if' b'the' b'dog' b'<unk>' b'businesses' b'include' b'Virginia' b'graves' b',' b'they' b'be' b'<unk>' b'.' b'The'
    b'tree' b'owners' b'of' b'specifically' b'knights' b'in' b'America' b',' b'anal' b'registration' b',' b'Question' b',' b'and' b'Cell' b',' b'obsolete' b'mess' b'whose' b'offer'
    b'.' b'<unk>' b'relates' b'when' b'Laurel' b'will' b'leave' b'a' b'outdoor' b'storytelling' b',' b'as' b'muscular' b'to' b'have' b'been' b'compared' b'by' b'females' b'once'
    b'but' b'they' b'want' b'free' b',' b'according' b'to' b'Langstaff' b'a' b'special' b'range' b'of' b'photography' b'after' b'.' b'When' b'they' b'do' b'one' b'of'
    b'which' b"'s" b'the' b'Army' b'was' b'Pozi\xc3\xa8res' b'sentiment' b'.' b'When' b'after' b'those' b',' b'a' b'body' b'in' b'which' b'they' b'have' b'go' b'from'
    b'the' b'<unk>' b',' b'and' b'they' b'never' b'feared' b'the' b'story' b'contained' b'.' b'They' b'can' b'approach' b'night' b'to' b'try' b'to' b'leave' b'beyond'
    b'this' b'game' b'and' b'save' b'to' b'pointless' b'study' b'.' b'"' b'improving' b'his' b'natural' b'and' b'realistic' b'women' b'and' b'source' b'\xe2\x80\x94' b'they' b'wouldn'
    b"'t" b'enough' b'to' b'be' b'more' b'successful' b'.' b'"' b'<eos>' b'<eos>' b'<eos>' b'=' b'drumming' b'the' b'misery' b'=' b'<eos>' b'<eos>' b'From' b'a'
    b'large' b'range' b'which' b'might' b'be' b'recorded' b'in' b'New' b'Zealand' b',' b'November' b'1888' b'and' b'18' b'species' b'of' b'Ireland' b',' b'falls' b'across'
    b'a' b'large' b'outstanding' b'species' b'in' b'which' b'they' b'could' b'be' b'secured' b'.' b'Games' b'and' b'<unk>' b',' b'and' b'in' b'space' b'their' b'food'
    b'schools' b'by' b'very' b'stained' b'areas' b'are' b'little' b'distinguished' b'.' b'As' b'they' b'be' b'upgraded' b'to' b'cardiac' b',' b'<unk>' b',' b'the' b'bird'
    b'and' b'fish' b'has' b'high' b',' b'but' b'their' b'rooms' b'system' b'automated' b'fuse' b'that' b'they' b'are' b'crossbar' b'.' b'Paul' b'reaffirmed' b'a' b'd'
    b'\xe2\x89\xa4' b'movement' b'of' b'idols' b'in' b'a' b'minutes' b'.' b'These' b'philosophy' b'are' b'being' b'eligible' b'throughout' b'his' b'Egyptologist' b'ethnically' b'and' b'tinge' b'.'
    b'<eos>' b'By' b'liner' b'sighting' b',' b'these' b'males' b'should' b'give' b'their' b'own' b'bird' b'settlement' b'through' b'the' b'1890s' b'.' b'profit' b',' b'this'
    b'type' b'of' b'bird' b',' b'behaviour' b',' b'transfers' b'and' b'ions' b'include' b'evidenced' b'.' b'As' b'inspiration' b'have' b'induced' b',' b'unlike' b'any' b'other'
    b'courts' b',' b'this' b'would' b'be' b'needed' b'to' b'occupy' b'them' b'all' b'of' b'their' b'motion' b',' b'making' b'them' b'themselves' b'from' b'which' b'they'
    b'are' b'only' b'relieved' b'\xe2\x80\x93' b'watched' b'.' b'If' b'the' b'starling' b"'s" b'<unk>' b'or' b'crops' b'gradually' b'pulled' b'as' b'"' b'the' b'most' b'launchers'
    b',' b'gusting' b'prey' b'in' b'this' b'way' b'mills' b'even' b'established' b'for' b'objects' b'or' b'foot' b'their' b'circle' b'.' b'"' b'David' b'Pierre' b'Cain'
    b'argued' b'that' b'<unk>' b',' b'describing' b'it' b'entirely' b'a' b'combination' b'of' b'low' b',' b'that' b'of' b'another' b'life' b'to' b'be' b'the' b'food'
    b'name' b',' b'but' b'it' b'also' b'correct' b'operation' b'of' b'a' b'planet' b'that' b'are' b'approximately' b'close' b'times' b'.' b'<eos>' b'Still' b',' b'males'
    b'do' b'not' b'act' b'that' b'they' b'affected' b'as' b'they' b'consume' b'increasingly' b'sexual' b'sites' b'.' b'In' b'their' b'biologically' b'<unk>' b',' b'a' b'primary'
    b'<unk>' b'are' b'as' b'either' b'by' b'<unk>' b',' b'led' b'by' b'often' b'dual' b'Codfish' b'Pocantico' b'capable' b'.' b'The' b'growing' b'starling' b'may' b'be'
    b'evolved' b'from' b'other' b'carving' b'and' b'Definitions' b',' b'averaging' b'no' b'an' b'seaplanes' b'with' b'<unk>' b'.' b'Near' b'18' b'\xc2\xb0' b'older' b'plants' b'on'
    b'the' b'Jains' b',' b'on' b'1' b'December' b'1990' b',' b'the' b'kakapo' b'was' b'observed' b'to' b'be' b'invade' b'.' b'As' b'this' b'will' b'be'
    b'found' b'by' b'males' b'in' b'the' b'shape' b'of' b'Ireland' b',' b'Pfaster' b"'" b'much' b'common' b'microscope' b'was' b'complex' b',' b'but' b'occur' b'there'
    b'has' b'not' b'demonstrated' b'reptile' b'.' b'Despite' b'these' b'contentious' b'from' b'the' b'collection' b',' b'they' b'have' b'wider' b'expectations' b'that' b'young' b'starlings' b'are'
    b'to' b'be' b'transported' b'to' b'areas' b'by' b'their' b'association' b'.' b'They' b'have' b'a' b'devastating' b'politician' b'with' b'employment' b',' b'which' b'may' b'not'
    b'have' b'variety' b'at' b'other' b'body' b'or' b'once' b'limit' b'if' b'humans' b',' b'instead' b'of' b'bill' b'hunters' b',' b'<unk>' b',' b'pedestrian' b','
    b'gray' b',' b'recite' b'lack' b'of' b'HIV' b',' b'the' b'donated' b'eye' b'in' b'activities' b'two' b'years' b'.' b'<eos>' b'Chomsky' b'is' b'related' b'beak'
    b'.' b'<eos>' b'Nevertheless' b',' b'only' b'under' b'outset' b'is' b'estimated' b'by' b'<unk>' b'semen' b',' b'as' b'it' b'is' b'their' b'dark' b'granite' b'skin'
    b',' b'into' b'desperately' b'when' b'they' b'have' b'discussed' b'them' b'standing' b'.' b'About' b'that' b'body' b'faces' b'longer' b',' b'they' b'confronted' b'a' b'mines'
    b'from' b'the' b'burial' b'molecules' b',' b'such' b'as' b'to' b'be' b'contradicted' b'by' b'earthquakes' b'Lex' b'Lorraine' b',' b'a' b'Swiss' b'Ra' b',' b'and'
    b'<unk>' b'as' b'a' b'early' b'source' b',' b'12' b'%' b',' b'with' b'a' b'short' b'angle' b'of' b'over' b'2' b'or' b'2' b'p.m.' b'at'
    b'Musicians' b'from' b'the' b'fork' b'that' b'were' b'dependent' b'in' b'predators' b'of' b'any' b'one' b',' b'while' b'Venus' b'uses' b'fixed' b'functions' b'and' b'forbs'
    b'.' b'precincts' b'was' b'<unk>' b';' b'the' b'many' b'model' b'catch' b'muscles' b'were' b'probably' b'wiped' b'in' b'some' b'effects' b'as' b'they' b'seem' b'within'
    b'the' b'world' b',' b'although' b'long' b'responses' b'were' b'spent' b'from' b'their' b'Korean' b'waters' b'remain' b'written' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Classification'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'global' b'lamina' b'in' b'Ireland' b'towards' b'Ireland' b',' b'usually' b'yet' b'important' b',' b'designating' b'a' b'broad' b'Boucher'
    b'of' b'Ceres' b'.' b'As' b'November' b'as' b'head' b',' b'males' b'can' b'be' b'detected' b'in' b'beak' b',' b'particularly' b'dark' b'.' b'A' b'consequence'
    b'of' b'bird' b'or' b'counterpart' b'to' b'control' b',' b'in' b'mammalian' b'light' b'calls' b',' b'the' b'characteristics' b'of' b'successors' b'cell' b'superbly' b',' b'apparently'
    b'extraordinary' b'fusion' b'amber' b'such' b'as' b'<unk>' b'or' b'wide' b'feeding' b'by' b'Dickinson' b'.' b'Blood' b'on' b'samples' b'of' b'hilly' b',' b'heavier' b','
    b'<unk>' b',' b'European' b',' b'and' b'presence' b'iguana' b'-' b'joy' b',' b'in' b'the' b'paler' b'neoceratopsian' b',' b'are' b'very' b'older' b'before' b'times'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.8
    loss: 5.168
    elapsed time (seconds): 146.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  9.765 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
