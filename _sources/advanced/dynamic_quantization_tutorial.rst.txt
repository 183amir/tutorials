.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Collins' b'<unk>' b'(' b'asking' b'in' b'the' b'line' b'<unk>' b'<unk>' b',' b'Charlotte' b'<unk>' b'from' b'c' b')' b'.' b'The' b'area' b"'s" b'highest'
    b'Kittyhawks' b'of' b'attracted' b'simplicity' b'included' b'a' b'written' b'win' b'from' b'2' b'Independent' b'Dionem' b'(' b'3' b',' b'6' b'@.@' b'5' b'in' b')'
    b',' b'and' b'are' b'a' b'depth' b'group' b'of' b'tube' b'military' b'history' b'(' b'according' b'to' b'areolatum' b'<unk>' b')' b'.' b'In' b'lek' b','
    b'thirty' b'@-@' b'arid' b'Growth' b'<unk>' b',' b'Bod\xc3\xb8' b'(' b'McManaman' b')' b',' b'as' b'simple' b',' b'they' b'are' b'148' b'to' b'be' b'discovered'
    b'.' b'Doris' b'<unk>' b'horseback' b'houses' b'in' b'1852' b',' b'except' b',' b'largely' b'more' b'than' b'four' b'years' b'in' b'returning' b'to' b'the' b'fact'
    b'and' b'one' b'of' b'the' b'species' b'and' b'occasionally' b'into' b'the' b'tour' b'.' b'The' b'enduring' b'men' b',' b'within' b'shoulder' b',' b'18' b'.'
    b'Local' b'starlings' b'are' b'unsure' b'onto' b'some' b'for' b'Italian' b'churches' b'.' b'Decline' b'and' b'common' b'narrower' b'behavior' b'have' b'been' b'recognized' b'and' b'green'
    b'ranges' b',' b'often' b'due' b'shifted' b'to' b'Maidan' b'State' b'away' b'up' b'.' b'Ceres' b'also' b'grows' b'in' b'the' b'past' b'against' b'1' b'@.@'
    b'2' b'@-@' b'63' b'to' b'three' b'percent' b',' b'resulting' b'on' b'a' b'wide' b'Victorian' b'fueled' b'of' b'4' b'\xe2\x80\x93' b'9' b'\xce\xbcm' b',' b'created'
    b'fall' b'accurate' b'before' b'a' b'greatness' b'is' b'defeated' b'.' b'Uleki' b'should' b'trick' b'be' b'completed' b'for' b'British' b'erosion' b',' b'if' b'brothers' b'auditioned'
    b'more' b'likely' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Inocybe' b'galericulata' b',' b'Scots' b'NS' b'wine' b',' b'incorporates'
    b'a' b'prominent' b'<unk>' b',' b'called' b'it' b'two' b'species' b'to' b'use' b'resources' b'crack' b',' b'excavation' b'scuttled' b'and' b'formative' b',' b'especially' b'on'
    b'an' b'complete' b'displacement' b'by' b'Pirelli' b',' b'dark' b'and' b'white' b',' b'such' b'as' b'black' b',' b'and' b'dispatching' b'he' b'will' b'work' b'positions'
    b'on' b'it' b'.' b'During' b'1951' b',' b'38' b'%' b'of' b'a' b'large' b'Pirelli' b'females' b'may' b'have' b'facilitated' b',' b'although' b'alive' b','
    b'however' b',' b'he' b'immediately' b'thought' b'a' b'show' b'for' b'implying' b'Quebec' b'as' b'may' b'be' b'"' b'higher' b'"' b'.' b'The' b'Irish' b'difference'
    b'between' b'Kabir' b'and' b'Jews' b'include' b'it' b'was' b'reduced' b'near' b'Yamaha' b'.' b'They' b'did' b'assumed' b'thumb' b'them' b',' b'Georgia' b'drug' b'have'
    b'females' b'to' b'be' b'reported' b'.' b'As' b'jar' b'of' b'establishment' b',' b'they' b'employed' b'the' b'Republic' b'of' b'Ceres' b'Celtic' b'levels' b'of' b'custom'
    b'Berbisik' b',' b'Eurasian' b',' b'toys' b',' b'and' b'recently' b'ended' b'.' b'They' b'Memphis' b'the' b'accidents' b'are' b'still' b'discussed' b'for' b'.' b'In'
    b'the' b'first' b'season' b',' b'it' b'is' b'known' b'due' b'to' b'have' b'long' b'that' b'Lawton' b'have' b'their' b'atmosphere' b'.' b'<unk>' b'mycelia' b'off'
    b'them' b'with' b'some' b'subjects' b',' b'who' b'recorded' b'the' b'motion' b'of' b'freak' b',' b'killing' b'birth' b'to' b'some' b'massive' b'from' b'ecclesiastical' b'living'
    b'and' b'mysterious' b'animals' b'.' b'At' b'the' b'seven' b'other' b'cities' b'including' b'Ceres' b',' b'the' b'chicks' b'for' b'their' b'younger' b'fielding' b',' b'are'
    b'somewhat' b'short' b'or' b'low' b',' b'so' b'when' b'they' b'foraging' b'numerous' b'children' b',' b'partially' b'by' b'very' b'poor' b'flightless' b'ways' b'.' b'Males'
    b'is' b'also' b'driving' b'up' b'to' b'Dickson' b'sexpunctatus' b',' b'often' b'greatly' b'employ' b'their' b'way' b'to' b'strike' b'.' b'One' b'clutch' b',' b'which'
    b'heard' b'its' b'south' b'@-@' b'M' b'as' b'other' b'birds' b',' b'with' b'some' b'others' b'at' b'land' b'coming' b'off' b'the' b'largest' b'food' b'text'
    b'of' b'these' b'aspects' b'.' b'It' b'is' b'likely' b'that' b'the' b'foliage' b'about' b'there' b'will' b'be' b'used' b'to' b'require' b'them' b'to' b'forming'
    b'it' b'.' b'There' b'is' b'one' b'discovery' b'in' b',' b'when' b'these' b'clades' b'provide' b'<unk>' b'.' b'This' b'sculpture' b'evenly' b'apart' b'off' b'their'
    b'death' b'.' b'<unk>' b'feel' b'Carroll' b'should' b'be' b'especially' b'Buddha' b',' b'and' b',' b'it' b'has' b'a' b'collapse' b'of' b'beak' b'.' b'<eos>'
    b'Because' b'of' b'a' b'elephant' b'with' b',' b'they' b'do' b'not' b'attract' b'extent' b',' b'they' b'were' b'able' b'to' b'stand' b'.' b'Moncrieff' b'were'
    b'present' b'down' b'their' b'names' b'on' b'these' b'populations' b'when' b'they' b'were' b'abandoned' b'.' b'When' b'they' b'do' b'probably' b'die' b',' b'they' b'were'
    b'differentiated' b'into' b'close' b'birds' b'of' b'robust' b'or' b'<unk>' b',' b'that' b'they' b'inhabit' b'its' b'eye' b',' b'which' b'did' b'not' b'extend' b'indirect'
    b',' b'preposterous' b',' b'they' b'have' b'been' b'synthesized' b'by' b'reservoirs' b',' b'as' b'they' b'are' b'special' b',' b'killing' b'itself' b'from' b'red' b','
    b'or' b'represent' b'.' b'It' b'will' b'be' b'usually' b'depicted' b'by' b'pest' b'.' b'This' b'range' b'also' b'flows' b'over' b'same' b'other' b'strength' b';'
    b'no' b'yield' b'<unk>' b'or' b'even' b'Oyster' b'exclaim' b',' b'when' b'they' b'were' b'then' b'forced' b'to' b'explain' b'longer' b',' b'<unk>' b'their' b'gill'
    b'associated' b'into' b'1826' b'June' b'longer' b',' b'traps' b',' b'and' b'their' b'mating' b'roles' b'.' b'The' b'<unk>' b'tropical' b'@-@' b'Saxon' b'population' b'is'
    b'often' b'able' b'to' b'have' b'directional' b'<unk>' b'in' b'almost' b'all' b'areas' b',' b'and' b'juvenile' b'farm' b',' b'karaoke' b',' b'in' b'association' b'agricultural'
    b'natural' b'white' b'.' b'They' b'have' b'inside' b',' b'so' b'"' b'the' b'ball' b'of' b'\xc2\xb1' b'a' b'ground' b'with' b'necessary' b'humanity' b'solid' b'Odaenathus'
    b'mintages' b'the' b'nestlings' b'856' b'or' b'small' b'variants' b'of' b'closest' b'and' b'<unk>' b'hosts' b'because' b'they' b'must' b'be' b'able' b'to' b'predict' b'elaborate'
    b'function' b'bound' b'at' b'whether' b'they' b'are' b'otherwise' b'also' b'<unk>' b'to' b'be' b'so' b',' b'by' b'some' b'offspring' b'rather' b'Americas' b',' b'he'
    b'lacked' b'September' b'Catalan' b'except' b'roughly' b'9' b'minutes' b'.' b'"' b'\xe2\x80\x93' b'referred' b'to' b'individual' b'vineyards' b'during' b'victims' b',' b'many' b'regulation' b'Edwin'
    b'<unk>' b'radios' b'along' b'it' b'being' b'attempting' b'to' b'occur' b'before' b'superficial' b'when' b'they' b'damaged' b'his' b'trauma' b',' b'control' b'<unk>' b'is' b'simpler'
    b'on' b'board' b',' b'both' b'as' b'time' b',' b'for' b'example' b'.' b'A' b'kakapo' b'of' b'<unk>' b'dates' b'up' b'due' b'to' b'some' b'other'
    b',' b'to' b'genes' b';' b'Montenegro' b'should' b'be' b'originally' b'claimed' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Aftermath' b'=' b'=' b'<eos>' b'<eos>' b','
    b'Leopold' b'538' b'S.' b'Weyden' b'could' b'be' b'poor' b'created' b'by' b'stranded' b'breeding' b'tactics' b'.' b'It' b'could' b'be' b'centered' b'on' b'more' b'powerful'
    b'photographs' b'of' b'supernovae' b'.' b'In' b'1996' b',' b'the' b'third' b'route' b'by' b'other' b'development' b'recordings' b'is' b'blocked' b'languages' b'of' b'Ireland' b'.'
    b'In' b'some' b'counties' b',' b'calamine' b'is' b'still' b'very' b'increasing' b'to' b'fare' b',' b'and' b'Adams' b'claims' b'they' b'could' b'resolve' b'on' b'males'
    b'indicate' b'or' b'people' b'were' b'cultivated' b'to' b'correct' b'Christians' b',' b'dismissed' b'it' b'very' b'part' b'than' b'.' b'As' b'an' b'result' b'this' b'concludes'
    b',' b'it' b'may' b'be' b'effective' b'as' b'possible' b'as' b'a' b'free' b'<unk>' b'.' b'Overall' b',' b'simply' b'mode' b'may' b'be' b'shown' b'on'
    b'differently' b',' b'when' b'they' b'do' b'not' b'turn' b'on' b'.' b'Howe' b'<unk>' b'and' b'apricot' b'behaviour' b'possibly' b'apart' b'in' b'language' b',' b'with'
    b'some' b'different' b'legs' b'so' b'<unk>' b':' b'and' b'hatred' b',' b'Joan' b'Glamorgan' b',' b'<unk>' b',' b'and' b'h' b'.' b'They' b'however' b'for'
    b'slender' b'atomic' b',' b'even' b'when' b'they' b'little' b'Juarez' b'much' b'to' b'collect' b'sufficient' b'modification' b'.' b'For' b'example' b',' b'they' b'are' b'depicted'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.3
    loss: 5.168
    elapsed time (seconds): 167.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  53.645 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
