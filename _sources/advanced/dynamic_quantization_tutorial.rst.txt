.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'but' b'further' b'described' b'as' b'an' b'acquisition' b'@-@' b'ups' b'himself' b',' b'or' b'Lucia' b'won' b'another' b'government' b'with' b'"' b'<unk>' b'"'
    b'felt' b'The' b'freedom' b'of' b'his' b'popular' b'text' b'Martin' b',' b'who' b'had' b'on' b'24' b'April' b'2006' b'.' b'The' b'team' b'became' b'a'
    b'very' b'unlikely' b'leader' b'led' b'by' b'the' b'tops' b'of' b'interrelationships' b'after' b'.' b'In' b'1902' b'an' b'year' b'in' b'<unk>' b'completed' b'New' b'4'
    b'have' b'been' b'overbearing' b'bounce' b'in' b'what' b'they' b'have' b'established' b'due' b'to' b'Doom' b'\xe2\x80\x94' b'where' b'the' b'Salem' b'Basin' b'entered' b'a' b'flank'
    b'with' b'North' b'Korean' b'warriors' b'in' b'May' b'1974' b'.' b'<unk>' b'under' b'<unk>' b'vocalist' b'Superintendent' b'Arthur' b'Miles' b'Hughes' b',' b'while' b'as' b'late'
    b'as' b'that' b'season' b'it' b'was' b'taken' b'to' b'build' b'a' b'degree' b',' b'the' b'singer' b'Jonas' b'applauded' b'the' b'gill' b'"' b'green' b'@-@'
    b'snout' b'span' b'"' b'separated' b'when' b'in' b'the' b'fourth' b'season' b',' b'neither' b'less' b'than' b'3' b'percent' b'of' b'bells' b'.' b'Also' b'in'
    b'selling' b'crowd' b',' b'living' b'on' b'October' b'17' b',' b'2006' b',' b'is' b'seen' b'as' b'"' b'one' b'of' b'a' b'larger' b'of' b'three'
    b'thousand' b'states' b'star' b'when' b'in' b'others' b'here' b'@-@' b'd' b'.' b'A' b'slow' b'faces' b'similar' b'power' b'the' b'International' b'absolutely' b'in' b'an'
    b'gun' b',' b'Saint' b'Harrison' b',' b'near' b'It' b'another' b'but' b'kind' b'of' b'that' b'more' b'<unk>' b'.' b'"' b'<eos>' b'<eos>' b'<eos>' b'='
    b'Marlborough' b"'s" b'orbital' b'solitaire' b'=' b'<eos>' b'<eos>' b'The' b'two' b'interpretations' b'of' b'all' b'@-@' b'Ceres' b'or' b'cultural' b'books' b',' b'resulting' b'on'
    b'Song' b',' b'Western' b'Australia' b',' b'is' b'a' b'type' b'or' b'hip' b'line' b',' b'<unk>' b'card' b'from' b'their' b'mainland' b'regime' b',' b'<unk>'
    b'mostly' b'closely' b'associated' b',' b'with' b'thin' b'genera' b',' b'governmental' b'RNA' b',' b'and' b'high' b'.' b'His' b'Bengal' b'appearances' b'was' b'praised' b'by'
    b'scholars' b',' b'a' b'tree' b'lbw' b'contests' b'for' b'the' b'remainder' b'to' b'a' b'stone' b'units' b'and' b'sank' b'up' b'.' b'By' b'this' b'region'
    b',' b'the' b'Nonstop' b'itself' b'may' b'be' b'introduced' b'to' b'show' b',' b'or' b'limited' b'its' b'head' b'at' b'its' b'territory' b'and' b'a' b'Underground'
    b'Globe' b'style' b'is' b'occasionally' b'known' b'.' b'They' b'primarily' b'and' b'Fictioneers' b'dark' b'AIL' b',' b'consisting' b'of' b'the' b'need' b'to' b'receive' b'trees'
    b',' b'have' b'always' b'mean' b'or' b'trips' b'to' b'their' b'disk' b'.' b'639' b'that' b'typical' b'provides' b'orbital' b'damage' b'from' b'mid' b'BC' b'.'
    b'The' b'kakapo' b'is' b'speakers' b'white' b'within' b'developing' b'to' b'artificial' b'and' b'white' b'winners' b'.' b'<eos>' b'Three' b'Americans' b'and' b'Forks' b'leather' b'Jupiter'
    b'or' b'depending' b'on' b'strong' b'crop' b'areas' b'.' b'The' b'female' b'record' b'property' b'Benson' b'is' b'abolition' b',' b'and' b'later' b'traverse' b'.' b'Because'
    b',' b'as' b'much' b'as' b'their' b'bird' b'bar' b'was' b'subjected' b'to' b'the' b'fortification' b',' b'they' b'may' b'be' b'remodelled' b'by' b'them' b','
    b'where' b'<unk>' b',' b'in' b'reference' b',' b'occurred' b'ways' b',' b'possibly' b'nuclear' b'pine' b'series' b'to' b'release' b'foundation' b'marshes' b',' b'they' b'were'
    b'connected' b'.' b'His' b'observation' b'contains' b'mostly' b'a' b'complexes' b'forming' b'<unk>' b'Lane' b',' b'knocking' b'electricity' b',' b'northeastern' b'bucket' b',' b'and' b'fine'
    b'surface' b'.' b'One' b'regions' b'at' b'Katrina' b'unpleasant' b'or' b'also' b'ideology' b',' b'excluding' b'its' b'red' b'roosts' b'to' b'ensure' b',' b'especially' b'universal'
    b'physical' b'numbers' b'that' b'travel' b'it' b'.' b'<unk>' b'such' b'as' b'"' b'foraging' b'rates' b'"' b'from' b'members' b'of' b'Austrian' b',' b'a' b'significant'
    b'Action' b'for' b'the' b'Homarus' b';' b'<unk>' b',' b'worshipped' b'by' b'<unk>' b',' b'begins' b',' b'although' b'named' b'a' b'mortal' b'companions' b',' b'attached'
    b'to' b'religious' b'specimens' b';' b'clicking' b'are' b'related' b'to' b'food' b',' b'resulting' b',' b'and' b'Army' b'conferences' b'remote' b'slope' b'when' b'freely' b'tear'
    b'.' b'For' b'example' b',' b'flooding' b'involve' b'quite' b'until' b'15' b'hours' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>'
    b'stone' b'has' b'two' b'different' b'collections' b'of' b'Ceres' b',' b'indicating' b'Indonesia' b'black' b'or' b'other' b'islands' b'.' b'The' b'island' b'may' b'be' b'flaps'
    b',' b'"' b'if' b'thus' b'fully' b'strongly' b'quality' b'in' b'North' b'America' b',' b'they' b'are' b'very' b'simple' b'.' b'(' b'now' b'and' b'rather'
    b'subfamilies' b'in' b'the' b'older' b'finger' b'in' b'our' b'or' b'moss' b'association' b'is' b'indeed' b'a' b'eye' b'or' b'less' b'rarely' b'corrupted' b'alternate' b','
    b'and' b'not' b'it' b'may' b'be' b'associated' b'into' b'Pitlake' b'.' b'"' b'Norman' b'spots' b'are' b'mention' b'in' b'Europe' b'.' b'They' b'were' b'very'
    b'different' b'than' b'versus' b'the' b'public' b',' b'although' b'<unk>' b'steadily' b'of' b'linear' b'<unk>' b'Ranger' b'is' b'specific' b'.' b'No' b'species' b'of' b'Irish'
    b'forces' b'often' b'included' b'forested' b'surface' b',' b'must' b'be' b'slated' b'to' b'hold' b'that' b'they' b'give' b'well' b'names' b',' b'while' b'often' b','
    b'they' b'are' b'initial' b'.' b'With' b'further' b',' b'long' b',' b'partially' b'<unk>' b'agricultural' b'distances' b',' b'such' b'as' b'this' b'tents' b'he' b'can'
    b'have' b'occurred' b'.' b'Like' b'the' b'confusion' b',' b'Ceres' b'are' b'small' b',' b'due' b'to' b'a' b'large' b'<unk>' b'of' b'other' b'species' b'of'
    b'breeding' b'as' b'distinguished' b'.' b'As' b'they' b'solitary' b'about' b'3' b'hours' b'they' b"'re" b'positioned' b',' b'in' b'Ireland' b',' b'winter' b'miner' b','
    b'feathers' b'and' b'migration' b'are' b'concerned' b',' b'for' b'example' b'because' b'of' b'purposes' b',' b'published' b'to' b'uniformly' b',' b'referred' b'to' b'control' b'type'
    b'he' b'displaced' b'<unk>' b'them' b'no' b'sentimental' b'and' b'African' b'eggs' b'.' b'Some' b'people' b'are' b'present' b',' b'however' b'.' b'The' b'<unk>' b'also'
    b'grows' b'to' b'support' b',' b'thick' b'as' b'slightly' b'when' b'it' b'appears' b'fireworks' b';' b'they' b'were' b'Animals' b'.' b'Common' b'molecular' b'activity' b'are'
    b'a' b'way' b'for' b'a' b'broad' b'starling' b'defeating' b'torrential' b'obstructions' b'.' b'<eos>' b'A' b'actual' b'owl' b',' b'responsible' b',' b'is' b'sentimental' b'.'
    b'A' b'ballad' b'of' b'belief' b'is' b'5' b'\xe2\x80\x93' b'4' b'\xce\xbcm' b',' b'and' b'may' b'be' b'distinguished' b'in' b'length' b'when' b'pairs' b',' b'such'
    b'as' b'their' b'<unk>' b'or' b'are' b'better' b'.' b'These' b'sources' b'have' b'reduced' b'AU' b'bowls' b'and' b'shorter' b'eye' b'calls' b'.' b'Others' b'can'
    b'be' b'found' b'to' b'be' b'able' b'to' b'speak' b',' b'even' b'densities' b'finely' b'.' b'Fledglings' b'Benedict' b'Lindsay' b'normally' b'cornerstone' b'the' b'name' b'of'
    b'better' b'bowls' b'.' b'A' b'roosts' b'might' b'be' b'closed' b'to' b'back' b'them' b'merge' b'when' b'it' b'feathers' b'with' b'foremast' b'.' b'Mkhedruli' b'softened'
    b',' b'caravan' b'peridium' b'predominate' b'by' b'the' b'electrolysis' b'.' b'manoeuvre' b'achieved' b'them' b'from' b'starting' b'nucleosynthesis' b',' b'still' b'making' b'.' b'Finally' b'summer'
    b'may' b'be' b'prohibited' b'out' b',' b'but' b'when' b'they' b'have' b'been' b'involved' b'in' b'Bighorn' b',' b'they' b'do' b'not' b'enter' b'greater' b'<unk>'
    b'.' b'They' b'are' b'usually' b'well' b'exceptional' b',' b'primarily' b'<unk>' b',' b'even' b',' b'for' b'them' b'en' b'than' b'perfectly' b',' b'size' b','
    b'to' b'break' b'to' b'the' b'same' b'<unk>' b'eggs' b'or' b'modernized' b'heavy' b'figures' b'.' b'However' b',' b'nuclear' b'eggs' b'for' b'bicycle' b',' b'eggs'
    b',' b'and' b'desert' b'other' b'details' b'.' b'The' b'scales' b'include' b'the' b'weakening' b'necessary' b'pressure' b'for' b'<unk>' b'.' b'Christianity' b'are' b'dystopian' b'by'
    b'foliage' b',' b'whereas' b'they' b'appear' b'on' b'traditional' b'owners' b'due' b'to' b'both' b'bond' b'and' b'so' b'not' b'making' b'cloud' b'spots' b'and' b'days'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.73992


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.3
    loss: 5.168
    elapsed time (seconds): 147.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  10.743 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
