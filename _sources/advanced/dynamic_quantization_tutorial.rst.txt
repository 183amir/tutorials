.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'<unk>' b"'s" b'pews' b'or' b'recruiting' b'legal' b'Hans' b'(' b'scientifically' b'Lord' b'<unk>' b')' b'video' b'and' b'<unk>' b'Assembly' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Inspiration' b'and' b'development' b'=' b'=' b'<eos>' b'<eos>' b'Aside' b'into' b'Loyal' b'property' b'varies' b'in' b'the' b'arena' b'.' b'The' b'duration'
    b'of' b'Tigernach' b'market' b'kept' b';' b'Pampas' b':' b'Wilde' b'and' b'The' b'supervising' b'<unk>' b'noted' b'to' b'<unk>' b',' b'<unk>' b'(' b'Anthony' b'<unk>'
    b')' b'and' b'"' b'<unk>' b'"' b'(' b'"' b'and' b'<unk>' b'"' b')' b'tower' b',' b'created' b'by' b'an' b'small' b'diagonal' b'Project' b'with'
    b'the' b'Kakapo' b'<unk>' b'Museum' b'to' b'reach' b'2' b'@.@' b'4' b'in' b'(' b'Rio' b'GMA' b'Republic' b')' b'since' b'an' b'game' b'or' b'narrow'
    b'depth' b'in' b'the' b'large' b'edition' b'of' b'<unk>' b'Britain' b'in' b'the' b'world' b'.' b'Scottish' b'language' b'are' b'unprepared' b'for' b'splits' b'by' b'Airworthiness'
    b'.' b'The' b'kakapo' b'of' b'the' b'Nature' b'\xe2\x80\x94' b'Jonathan' b'@-@' b'tail' b',' b'notes' b'standard' b'and' b'surroundings' b'by' b'its' b'authority' b'.' b'<unk>'
    b'Kansas' b'is' b'an' b'partially' b'trailing' b'dorsal' b'structure' b'shortly' b'around' b'severe' b'sticks' b'.' b'Only' b'mixed' b'details' b'of' b'global' b'culture' b',' b'Irvine'
    b',' b'pilots' b',' b'seasonally' b',' b'bent' b',' b'banding' b'319' b',' b'<unk>' b',' b'<unk>' b',' b'Four' b',' b'alto' b',' b'and' b'rice'
    b'are' b'systematically' b'repurposed' b';' b'the' b'Cathedral' b'have' b'smaller' b'historic' b'demand' b'temperature' b'anthologies' b',' b'as' b'well' b'as' b'poetry' b',' b'freely' b','
    b'coli' b',' b'<unk>' b',' b'goddesses' b',' b'<unk>' b',' b'imported' b'?' b',' b'female' b',' b'<unk>' b',' b'poets' b',' b'printers' b',' b'Prince'
    b',' b'<unk>' b',' b'carpets' b',' b'<unk>' b',' b'Greek' b',' b'and' b'<unk>' b'.' b'For' b'example' b'and' b'Hurricane' b'Goodwin' b'species' b',' b'apart'
    b'along' b'by' b'AIDS' b',' b'represented' b'by' b'besieging' b'from' b'the' b'Children' b'.' b'By' b'his' b'lifetime' b'the' b'heroin' b'rebelled' b'on' b'roughly' b'20'
    b'million' b'material' b',' b'the' b'planet' b"'s" b'cultural' b'brightness' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo'
    b'of' b'Ceres' b'has' b'been' b'expressed' b'to' b'cancel' b'names' b'who' b'had' b'introduced' b'islands' b'.' b'When' b'they' b'may' b'be' b'further' b'of' b'lower'
    b',' b'he' b'was' b'so' b'suggested' b'to' b'be' b'found' b'by' b'Lionel' b'by' b'Sylvia' b'Osborne' b'from' b'third' b'touch' b'and' b'reported' b'and' b'searching'
    b'illumination' b'of' b'many' b'artists' b'.' b'About' b'5' b'%' b'of' b'females' b',' b'which' b'contained' b'low' b'tests' b'farmers' b'are' b'more' b'<unk>' b'when'
    b'dried' b',' b'flying' b',' b'and' b'<unk>' b'and' b'hotels' b"'" b'pressures' b'on' b'catch' b'minority' b'sites' b',' b'have' b'then' b'controlled' b'many' b'Frenchmen'
    b',' b'thin' b',' b'and' b'some' b'stars' b'.' b'However' b',' b'it' b'will' b'be' b'labeled' b'all' b'in' b'a' b'governmental' b'area' b'or' b'is'
    b'"' b'short' b'programmes' b'"' b'.' b'In' b'addition' b',' b'more' b'fabulous' b'than' b'their' b'outer' b'books' b'during' b'these' b'countries' b'necessary' b'augmented' b'minor'
    b'or' b'gregarious' b'specimens' b'.' b'It' b'is' b'then' b'recognized' b'until' b'genes' b'in' b'Africa' b'although' b'the' b'Republic' b'than' b'Ireland' b'states' b'that' b'they'
    b'"' b'could' b'also' b'join' b'freed' b'Hebrew' b'northern' b'.' b'"' b'Common' b'number' b'of' b'behaviour' b'may' b'describe' b'Sun' b'attitudes' b',' b'PML' b'data'
    b'as' b'they' b'have' b'halted' b'no' b'controlling' b'belief' b'and' b'bond' b'.' b'This' b'takes' b'convenient' b'to' b'form' b',' b'coupled' b'over' b'to' b'rebuild'
    b'owned' b'Saqqara' b'as' b'long' b'as' b'they' b'sit' b'for' b'grasses' b'.' b'<eos>' b'Ceres' b'in' b'males' b'beneath' b'Banksia' b'spiders' b'or' b'potentially' b'primary'
    b'Fraser' b'Stage' b'inflammation' b';' b'probably' b'symptoms' b'to' b'introduce' b'their' b'ultimate' b'characters' b'each' b'are' b'heard' b'.' b'By' b'North' b'Ireland' b',' b'aerial'
    b'predators' b'came' b'a' b'club' b'7' b'@.@' b'2' b'years' b'ago' b'when' b'they' b'would' b'be' b'distinguished' b'by' b'small' b',' b'sugar' b'or' b'water'
    b'.' b'Males' b'(' b'as' b'it' b'faced' b'watch' b')' b'may' b'be' b'periodically' b'enormous' b'inside' b'such' b'as' b'specialized' b'fuel' b'batteries' b'.' b'According'
    b'to' b'destroying' b'a' b'barometric' b'another' b'<unk>' b'cap' b'look' b'only' b'in' b'<unk>' b',' b'the' b'kakapo' b'colors' b'may' b'be' b'Claws' b'.' b'<eos>'
    b'Because' b'a' b'cello' b'pews' b'that' b'refers' b'to' b'liver' b',' b'they' b'failed' b'until' b'they' b'do' b'into' b'attacking' b'wavelength' b',' b'because' b'water'
    b'species' b'can' b'be' b'<unk>' b',' b'and' b'stone' b'them' b'alone' b'to' b'accept' b'<unk>' b'or' b'<unk>' b'/' b'<unk>' b'.' b'They' b'are' b'lonely'
    b'to' b'undergo' b'towards' b'light' b'attacks' b'of' b'farm' b'rates' b'on' b'their' b'beak' b'.' b'Other' b'evolved' b'.' b'They' b'include' b'grayish' b'.' b'The'
    b'female' b'first' b'actively' b'incomplete' b',' b'around' b'Trustees' b'and' b'nesting' b'feeding' b',' b'when' b'it' b'adorned' b'their' b'own' b'pitch' b'for' b'large' b'arms'
    b'.' b'One' b'type' b'(' b'varies' b'on' b'\xef\xbd\x9e' b'large' b'wind' b'strip' b')' b',' b'is' b'shown' b'by' b'female' b'predators' b',' b'resulting' b'to'
    b'28' b'@.@' b'1' b'in' b'(' b'Lincolnshire' b';' b'4' b'@.@' b'4' b'\xe2\x80\x93' b'3' b'@.@' b'4' b'in' b')' b',' b'depending' b'in' b'targeting'
    b'specific' b'birds' b'of' b'water' b'or' b'forfeited' b'very' b'over' b'any' b',' b'they' b'he' b'turns' b'at' b'different' b'times' b'including' b'their' b'inspection' b'model'
    b'.' b'The' b'largest' b'ingredients' b'Rica' b'how' b'coordinated' b'orbits' b'as' b'understand' b',' b'may' b'be' b'long' b'14' b'\xe2\x80\x93' b',' b'regions' b',' b'with'
    b'one' b'grave' b'for' b'other' b'observation' b'from' b'minerals' b'.' b'There' b'are' b'two' b'cases' b',' b'collection' b'of' b'<unk>' b',' b'plus' b',' b'boring'
    b'or' b'sleeping' b'patients' b'.' b'Many' b'of' b'these' b'records' b'may' b'be' b'slowed' b',' b'as' b'is' b'one' b'of' b'the' b'reasons' b'island' b'.'
    b'There' b'are' b'33' b'\xe2\x80\x93' b'14' b'%' b'caused' b'in' b'any' b'jumping' b'arms' b'.' b'It' b'is' b'a' b'vertical' b',' b'greater' b'pressure' b'of'
    b'flocks' b',' b'a' b'young' b'Stepen' b'moment' b'.' b'Two' b'parrots' b'can' b'probably' b'turn' b'by' b'active' b'metres' b'as' b'less' b'or' b'sphaerocarpa' b','
    b'and' b'laid' b'to' b'12' b'pairs' b',' b'eye' b'.' b'This' b'will' b'be' b'distinguished' b'by' b'strong' b'interpretations' b'of' b'grandchildren' b',' b'although' b'this'
    b'would' b'be' b'common' b'.' b'It' b'follows' b'flight' b'distances' b'as' b'they' b'may' b'may' b'need' b':' b'19' b'in' b'size' b'.' b'<unk>' b'in'
    b'Ireland' b'is' b'rarely' b'characterized' b'by' b'homes' b'of' b'<unk>' b',' b'Midway' b'by' b'<unk>' b'<unk>' b',' b'appoints' b'Netherlands' b',' b'<unk>' b',' b'defense'
    b',' b'and' b'hind' b'when' b'it' b'take' b'their' b'own' b',' b'display' b'subsistence' b'plain' b',' b'misunderstanding' b',' b'or' b'kill' b'their' b'output' b'levels'
    b';' b'and' b'grants' b'to' b'continue' b'a' b'reddish' b'drop' b'from' b'rock' b'body' b'but' b'allowing' b'a' b'new' b'tree' b'changes' b'around' b'through' b'North'
    b'Africa' b'.' b'They' b'have' b'delicate' b'star' b'@-@' b'type' b'cells' b'around' b'4' b'centimetres' b'(' b'3' b'ft' b')' b'deep' b'gets' b'on' b'this'
    b'side' b'when' b'it' b'represents' b'yellow' b'chemical' b'@-@' b'risk' b'trees' b'.' b'Prior' b'to' b'these' b'tank' b'greedy' b'airspace' b',' b'it' b'derives' b'well'
    b'as' b'roofs' b',' b'or' b'feathers' b'because' b'they' b'is' b'termed' b'enough' b'to' b'move' b'Matthews' b',' b'they' b'supervisor' b'on' b'their' b'negative' b'system'
    b'to' b'visit' b'disrupting' b',' b'and' b'almost' b'these' b'birds' b'that' b',' b'and' b'a' b'field' b',' b'often' b'potentially' b'<unk>' b'.' b'The' b'water'
    b'outlying' b'can' b'be' b'bad' b'as' b'it' b'may' b'be' b',' b'classed' b'or' b'drink' b'.' b'Generally' b',' b'sentence' b'as' b'they' b'depend' b'from'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 211.1
    loss: 5.168
    elapsed time (seconds): 138.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  56.037 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
