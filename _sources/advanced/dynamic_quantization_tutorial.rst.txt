.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Kressenstein' b'.' b'stanza' b'is' b'rarely' b'declares' b'into' b'their' b'inspiration' b',' b'and' b'as' b'did' b'its' b'"' b'Rellstab' b'...' b'and' b'the' b'Republic'
    b'Yanjing' b'"' b'that' b'Want' b'had' b'self' b'@-@' b'consumer' b',' b'finishing' b'up' b'for' b'their' b'portrayal' b',' b'defeating' b'"' b'big' b'syndicated' b'of'
    b'Tigernach' b',' b'and' b'bad' b'"' b'.' b'If' b'the' b'bird' b'Liberty' b'finds' b'to' b'1920' b',' b'they' b'are' b'various' b',' b'but' b'finally'
    b'needs' b'to' b'avoid' b'simulators' b'.' b'Although' b'the' b'kakapo' b'can' b'have' b'been' b'proposed' b'in' b'June' b'1885' b'and' b'the' b'10th' b'century' b','
    b'it' b'would' b'be' b'known' b'to' b'support' b'their' b'defeat' b',' b'and' b'the' b'other' b'one' b'report' b'were' b'dissolved' b'at' b'each' b'run' b'.'
    b'One' b'more' b'dimensions' b'were' b'also' b'being' b'interact' b'for' b'arriving' b',' b'Jifna' b'was' b'viewed' b'as' b'an' b'ensemble' b'living' b'in' b'NBA' b'languages'
    b'and' b'Fish' b'still' b'previously' b'in' b'the' b'brittle' b'.' b'On' b'June' b'9' b',' b'open' b'disturbance' b'were' b'credited' b'for' b'temperate' b'leaders' b','
    b'but' b'two' b'favor' b'of' b'non' b'@-@' b'Islamic' b'Anglo' b'@-@' b'Roman' b'dioxide' b'(' b'13' b'%' b'are' b'written' b')' b'.' b'Kakapo' b'evidence'
    b'were' b'released' b'in' b'Asia' b',' b'although' b'others' b'were' b'officially' b'gambling' b'.' b'deliberately' b'Zygoballus' b"'s" b'physical' b'ideas' b',' b'with' b'example' b'over'
    b'the' b'prominent' b'to' b'<unk>' b'acoustic' b'operation' b',' b'may' b'be' b'their' b'players' b'on' b'how' b'they' b'comprise' b'him' b'to' b'hold' b'brandy' b'.'
    b'As' b'they' b'<unk>' b'them' b',' b'the' b'two' b'arbitrary' b'female' b'tribes' b'track' b'prey' b'an' b'immense' b'Figure' b',' b'or' b'aimed' b'in' b'response'
    b'to' b'specifies' b'them' b'.' b'Sentence' b',' b'water' b',' b'but' b'sons' b'must' b'only' b'be' b'seen' b'as' b'another' b',' b'as' b',' b'with'
    b'just' b'150' b'or' b'weight' b';' b'there' b'will' b'have' b'eventually' b'win' b'air' b'general' b'or' b'drug' b'events' b'.' b'It' b'are' b'possible' b'that'
    b'they' b'appears' b'to' b'see' b'after' b'<unk>' b'on' b'the' b'city' b'.' b'Still' b',' b'they' b'are' b'favourable' b'almost' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'Aalborg' b',' b'the' b'kakapo' b'of' b'Crash' b'Pencerah' b"'s" b'particular' b'Churches' b'on' b'a'
    b'orbit' b'called' b'"' b'The' b'most' b'Hay' b'denominations' b'of' b'$' b'1000' b'and' b'11' b'%' b'of' b'a' b'female' b'"' b',' b'as' b'a'
    b'replica' b'or' b'who' b'moves' b'widely' b'researchers' b'entirely' b'.' b'This' b'period' b'used' b'a' b'thriller' b'low' b'controller' b'in' b'its' b'home' b'is' b'recorded'
    b'by' b'the' b'two' b'fleets' b'in' b'the' b'reign' b'of' b'<unk>' b'definitions' b'and' b'the' b'"' b'capability' b'Festival' b'"' b'home' b'to' b'a' b'auditory'
    b'holster' b'by' b'Mr' b'transmission' b',' b'while' b'in' b'terms' b'due' b'to' b'Google' b',' b'on' b'a' b'platform' b'at' b'one' b'being' b'affected' b'by'
    b'severe' b'authors' b',' b'no' b'motif' b'readily' b'skepticism' b'<unk>' b',' b'they' b'managed' b'to' b'contemporary' b'pace' b'into' b'a' b'collection' b'of' b'activity' b'.'
    b'<unk>' b'were' b'isolated' b'(' b'as' b'Christians' b'were' b'portrayed' b'as' b'revolutionized' b'the' b'longitude' b'before' b'courses' b',' b'both' b'to' b'help' b'so' b'then'
    b'cease' b'the' b'way' b')' b'.' b'After' b'spread' b'a' b'report' b'similar' b'to' b'perpendicular' b'@-@' b'<unk>' b'basis' b',' b'no' b'young' b'tolls' b'concluded'
    b'may' b'be' b'simple' b'into' b'direct' b'indicted' b'.' b'More' b'notably' b'Dubliners' b'are' b'a' b'equivalent' b'to' b'their' b'performers' b'.' b'It' b'is' b'a'
    b'Elgin' b'Drop' b'that' b'form' b'lowered' b'or' b'potato' b'with' b'a' b'ex' b'@-@' b'section' b'they' b'look' b'into' b'its' b'male' b'overlaps' b'formatting' b'.'
    b'O' b"'Malley" b'does' b'not' b'become' b'grave' b'at' b'communal' b'modifications' b'according' b'to' b'the' b'cytogenetics' b'at' b'times' b'.' b'A' b'adulatory' b'gravity' b'in'
    b'shallow' b'sources' b'all' b'of' b'breeding' b'display' b'groups' b'\xe2\x80\x94' b'by' b'Roxas' b"'s" b'native' b'link' b'rooms' b'and' b'instead' b'of' b'a' b'2016' b'race'
    b'following' b'a' b'interest' b'.' b'As' b'their' b'resulting' b'team' b'is' b'much' b'ambitious' b'.' b'Both' b'@-@' b'free' b'mating' b'and' b'dwarf' b'residents' b'are'
    b'also' b'slated' b'to' b'formalized' b'out' b'especially' b'.' b'These' b'starlings' b'are' b'fruiting' b'apparent' b'.' b'When' b'publicize' b'the' b'common' b'species' b'is' b'climbing'
    b'.' b'This' b'Minster' b'was' b'also' b'pink' b'or' b'may' b'visions' b'with' b'their' b'pursuit' b'and' b'made' b'his' b'fame' b',' b'such' b'as' b'revolves'
    b'through' b'their' b'form' b'(' b'nests' b')' b'.' b'The' b'other' b'negative' b'starling' b'is' b'unique' b'to' b'them' b',' b'birds' b'throughout' b'its' b'situation'
    b'.' b'<eos>' b'The' b'third' b'known' b'O' b'v.' b'<unk>' b'called' b'him' b'that' b'<unk>' b'demanding' b'rafting' b'.' b'Once' b'other' b'groups' b'serves' b'as'
    b'Scientologist' b',' b'transduction' b'exerted' b'Zappa' b',' b'trace' b'the' b'white' b'environment' b'and' b'other' b'areas' b'who' b'arrangement' b'from' b'<unk>' b'that' b'Ann' b'\xe2\x98\x89'
    b'-' b'however' b',' b'yields' b'excreted' b',' b'freedom' b',' b'they' b'assumed' b',' b'giving' b'Crow' b'Banker' b',' b'who' b'charged' b'the' b'external' b'phenomenon'
    b'for' b'1000' b'.' b'<unk>' b'well' b',' b'providing' b'known' b'sins' b'to' b'fit' b',' b'they' b'were' b'<unk>' b'complex' b',' b'so' b'how' b'secondary'
    b'is' b'possible' b'to' b'have' b'more' b'or' b'to' b'begin' b'a' b'genetic' b'clothing' b'across' b'existence' b'.' b'A' b'Linga' b'\xe2\x80\x93' b'eastern' b'describe' b'definition'
    b'either' b'a' b'porch' b'on' b'the' b'actual' b'cross' b'of' b'the' b'bill' b'.' b'One' b'applied' b'are' b'scarcely' b',' b'Jones' b',' b'taking' b'part'
    b'of' b'the' b'gala' b'.' b'<eos>' b'The' b'fungus' b'is' b'large' b',' b'with' b'the' b'oldest' b'rich' b'species' b',' b'with' b'up' b'a' b'wide'
    b'trap' b',' b'and' b'turns' b'580' b'with' b'origin' b'on' b'a' b'denticles' b'about' b'their' b'reality' b'.' b'<unk>' b',' b'rests' b'by' b'side' b'underwater'
    b',' b'it' b'will' b'be' b'just' b'dark' b'.' b'Ceres' b'are' b'<unk>' b'.' b'<eos>' b'Far' b'starlings' b'have' b'controversial' b'leaf' b'living' b'.' b'This'
    b'technique' b'has' b'modified' b'to' b'differentiate' b'.' b'They' b'are' b'obliged' b'to' b'be' b'overlooked' b'the' b'longest' b'recipes' b'of' b'vapor' b'.' b'If' b'they'
    b'tend' b'on' b'their' b'bloodless' b',' b'they' b'are' b'right' b'still' b'or' b',' b'around' b'much' b'four' b'to' b'other' b'times' b'is' b'more' b'probably'
    b'.' b'(' b'backgrounds' b')' b'may' b'contrasts' b'to' b'a' b'explosive' b'chicks' b'of' b'Ulster' b',' b'possibly' b'vulnerable' b'to' b'a' b'mild' b'appearance' b'by'
    b'<unk>' b'on' b'occurring' b'.' b'They' b'it' b'usually' b'appears' b'up' b'just' b'fledging' b'and' b'resistant' b'inside' b'them' b'around' b'the' b'head' b'and' b'they'
    b'can' b'like' b'it' b'one' b'of' b'several' b'fight' b',' b'and' b'help' b'the' b'Americans' b'can' b'first' b'flee' b'with' b'creating' b'another' b'.' b'When'
    b'they' b'declares' b'over' b'their' b'distributed' b',' b'rather' b'than' b'to' b'be' b'.' b'Everything' b'may' b'be' b'distinguished' b'by' b'introductions' b'and' b'climate' b'clump'
    b',' b'so' b'Kalyanasundara' b'from' b'the' b'cause' b'of' b'Applause' b'and' b'mammals' b'occurs' b'in' b'language' b'at' b'almost' b'four' b'or' b'more' b'novel' b'.'
    b'However' b',' b'usually' b'choice' b'from' b'predatory' b'powder' b'alarm' b',' b'functional' b'rainfall' b'(' b'purple' b'upper' b'Serbs' b'are' b'rounded' b'at' b'surgery' b')'
    b'in' b'New' b'Zealand' b'.' b'In' b'contrast' b'they' b'require' b'enter' b'from' b'electron' b'birds' b',' b'they' b'are' b'briefed' b'designed' b'come' b'for' b'fields'
    b'.' b'Common' b'starlings' b',' b'focusing' b'on' b'a' b'closure' b'that' b'they' b'sing' b'to' b'humans' b'and' b'personally' b'.' b'The' b'neck' b'has' b'their'
    b'175' b'requests' b'\xe2\x80\x93' b'declaring' b'total' b'dozen' b'quadruple' b'experience' b'they' b'explode' b'.' b'Apart' b',' b'they' b'feed' b'by' b'attendees' b',' b'depicting' b'an'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.7
    loss: 5.168
    elapsed time (seconds): 146.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  8.942 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
