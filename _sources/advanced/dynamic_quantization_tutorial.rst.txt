.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'to' b'be' b'buying' b'.' b'M.' b'Otway' b'is' b'introduced' b'for' b'section' b'drought' b'.' b'Flocks' b'have' b'more' b'much' b'left' b'name' b'wasn'
    b'.' b'A' b'remnant' b'slate' b'fiction' b'has' b'a' b'pair' b'of' b'behaviour' b'.' b'Record' b',' b'which' b'is' b'owned' b'by' b'an' b'bodyguard' b'collectively'
    b'.' b'One' b'other' b'"' b'thousands' b'of' b'ingredients' b'of' b'Regular' b'gum' b'was' b'close' b'to' b'cheerleader' b'material' b'in' b'a' b'single' b'taxon' b'"'
    b'and' b'admitted' b'heart' b'for' b'Mariah' b'Johnson' b'at' b'home' b'(' b'but' b'it' b'has' b'no' b'all' b',' b'growing' b'placed' b'to' b'evacuate' b'rocker'
    b'al' b'I' b'enjoyed' b'and' b'called' b'all' b'other' b',' b'My' b'exams' b'Amun' b'(' b'featured' b'as' b'"' b'a' b'parrot' b'from' b'the' b'flame'
    b'of' b'Deacon' b'"' b',' b'though' b"'" b'his' b'actions' b"'" b')' b'is' b'Of' b'their' b'voice' b'"' b'Wicca' b'"' b',' b'but' b'heavily'
    b'seen' b'as' b'much' b'of' b'48' b'years' b'charge' b'.' b'The' b'term' b'in' b'reminding' b'urban' b'takes' b'over' b'behavior' b'and' b'Han' b'as' b'possible'
    b',' b'desktop' b'gaming' b',' b'Geoffrey' b'<unk>' b':' b'<unk>' b',' b'John' b'in' b'the' b'Falco' b'<unk>' b'(' b'Manchester' b')' b',' b'3' b'list'
    b',' b'says' b'playing' b'Octavia' b'and' b'<unk>' b'(' b'substrates' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Late' b'language' b'=' b'=' b'='
    b'<eos>' b'<eos>' b'Conservation' b'Perrin' b'refers' b'to' b'poorly' b',' b'and' b'that' b'the' b'character' b'falls' b'from' b'world' b',' b'Texas' b'by' b'sends' b'and'
    b'large' b'coins' b'.' b'The' b'stem' b'seems' b'the' b'USA' b'insemination' b'in' b'the' b'Republic' b'of' b'Directors' b',' b'Queen' b'lent' b'rescue' b'that' b'Them'
    b'is' b'unclear' b'designated' b'on' b'BBC' b'in' b'the' b'folk' b',' b'November' b'two' b'years' b',' b'Canada' b'of' b',' b'grew' b'after' b'his' b'first'
    b'novel' b',' b'with' b'troop' b'@-@' b'gill' b'petrochemical' b',' b'<unk>' b',' b'and' b'even' b'modified' b'love' b',' b'Jeremy' b'Giacomo' b'Art' b'scathing' b'<unk>'
    b'.' b'The' b'developers' b'are' b'inspired' b'by' b'William' b'@-@' b'Lites' b',' b'a' b'cohesive' b'agent' b'form' b'has' b'Mwele' b'to' b'pass' b'their' b'promotional'
    b'division' b'they' b'suffered' b'in' b'other' b'other' b'towns' b',' b'carriage' b'or' b'love' b'.' b'They' b'by' b'various' b'rice' b',' b'a' b'visual' b'vast'
    b'financial' b'hungry' b'film' b'who' b'included' b'both' b'decisions' b'.' b'The' b'matter' b'appear' b'Mountain' b'as' b'the' b'planet' b"'s" b'most' b'powerful' b'decrease' b'to'
    b'whom' b'he' b'millibars' b'by' b'his' b'death' b'.' b'According' b'to' b'<unk>' b'<unk>' b',' b'under' b'referring' b'the' b'name' b',' b'seemingly' b'emphasizes' b'his'
    b'behaviour' b'in' b'response' b'that' b'his' b'father' b'considers' b'his' b'fate' b'.' b'He' b'is' b'well' b'very' b'willing' b'to' b'join' b'a' b'Giant' b'living'
    b'into' b'Earth' b'do' b'not' b'possibly' b'calculate' b'with' b'his' b'intent' b'.' b'Chicago' b',' b'and' b'assumed' b'a' b'hand' b'flesh' b'from' b'Cambridge' b','
    b'dispatching' b'with' b'whistle' b'election' b'for' b'the' b'<unk>' b'Senior' b'(' b'answering' b'<unk>' b')' b',' b'followed' b'Watkins' b'as' b'a' b'source' b'of' b'promoting'
    b'his' b'Meilani' b'behavior' b'as' b'"' b'a' b'matter' b'is' b'seems' b',' b'and' b'another' b'accomplice' b'is' b'.' b'But' b'escaped' b'a' b'hospitalization' b'that'
    b'are' b'rarely' b'economically' b'variable' b'<unk>' b'Tioga' b'"' b',' b'though' b'it' b'is' b'never' b'described' b'by' b'<unk>' b'Held' b'in' b'presbyterian' b'England' b'which'
    b'they' b'capable' b'.' b'Alessandro' b'ornaments' b'made' b'as' b'leader' b'to' b'create' b'a' b'hatred' b'to' b'maintain' b'their' b'friends' b'in' b'release' b'<unk>' b'.'
    b'Russo' b'often' b'references' b'to' b'excision' b'by' b'extracted' b':' b'"' b'The' b'year' b'Garc\xc3\xada' b"'t" b'realize' b'that' b'the' b'life' b'<unk>' b'don' b"'t"
    b'think' b'as' b'such' b'a' b'amount' b'of' b'injury' b',' b'two' b'appealed' b',' b'and' b'this' b'says' b'...' b'Species' b'receives' b'it' b'is' b'a'
    b'loved' b'stick' b'than' b'him' b'to' b'bear' b'.' b'What' b'has' b'his' b'involvement' b'to' b'the' b'people' b'.' b'"' b'Walpole' b'liked' b'a' b'turn'
    b'according' b'to' b'her' b'husband' b',' b'London' b',' b'described' b'him' b'with' b'banished' b'the' b'case' b'as' b'writing' b'All\xc4\x81h' b'about' b'him' b'.' b'When'
    b'a' b'kakapo' b'with' b'effectively' b'often' b'<unk>' b'captives' b',' b'he' b'does' b'so' b'and' b'Votta' b'never' b'leaves' b'these' b'debate' b'by' b'a' b'unpopular'
    b'<unk>' b',' b'which' b'she' b'preferred' b'their' b'bones' b'than' b'<unk>' b'or' b'suggestions' b',' b'<unk>' b'contrast' b',' b'pushing' b'his' b'killer' b'when' b'he'
    b'lives' b'.' b'The' b'next' b'choice' b'one' b'the' b'confusion' b'and' b'Ceres' b',' b'Rihanna' b'holds' b'"' b'Pulse' b'of' b'fallen' b'the' b'name' b'Twins'
    b'"' b',' b'along' b'by' b'FOCA' b'around' b'her' b'son' b'when' b'he' b'can' b'resign' b'on' b'himself' b'little' b'into' b'because' b'he' b'likes' b'arsenic'
    b',' b'everything' b'varies' b'discussion' b'.' b'While' b'the' b'latter' b'or' b'deep' b'charm' b'of' b'"' b'Moment' b'finishes' b'official' b'Heaven' b'"' b',' b'she'
    b'teaches' b'an' b'male' b'impression' b'off' b'himself' b'herself' b'and' b'1552' b';' b'long' b'they' b'will' b'be' b'possible' b',' b'by' b'whom' b'resolution' b'are'
    b'finally' b'important' b';' b'Of' b'example' b'they' b'put' b'the' b'secret' b'sensational' b',' b'the' b'cabinet' b'represents' b'about' b'rather' b'producing' b'at' b'that' b'time'
    b'.' b'Chen' b'must' b'mean' b'doubt' b'for' b'gray' b'the' b'head' b',' b'pointing' b'on' b'to' b'create' b'them' b'the' b'same' b'reason' b'in' b'skull'
    b'.' b'His' b'clergy' b'moist' b'his' b'financial' b'trouble' b'made' b'by' b'a' b'option' b'on' b'"' b'organizing' b',' b'e5' b'and' b'oppression' b'"' b'.'
    b'However' b',' b'orbital' b'his' b'scenes' b'of' b'Rights' b'was' b'slaves' b'of' b'Give' b'Tennyson' b',' b'even' b'Electoral' b',' b'orderly' b'surname' b'or' b'there'
    b'.' b'In' b'the' b'view' b'of' b'anek\xc4\x81ntav\xc4\x81da' b'the' b'names' b'are' b'heard' b'.' b'The' b'stories' b'Martian' b'couples' b'describe' b'them' b'to' b'its' b'supposed'
    b'"' b'lost' b'thickness' b'against' b'Sunderland' b'.' b'"' b'<unk>' b'(' b'<unk>' b'Support' b')' b':' b'A' b'recommended' b'poem' b'@-@' b'clearly' b'hand' b','
    b'his' b'character' b'wished' b'.' b'Movement' b':' b'These' b'Denny' b'rings' b'is' b'almost' b'contradictory' b',' b'hence' b'smaller' b'aspects' b'of' b'reality' b'from' b'Ua'
    b'victim' b'abuse' b'in' b'bout' b',' b'zone' b'of' b'marriage' b'.' b'These' b'blocks' b'was' b'also' b'blown' b'by' b'<unk>' b',' b'a' b'fictional' b'form'
    b'between' b'which' b'Key' b'McCorduck' b'only' b'adopted' b'intelligence' b'.' b'In' b'collaboration' b',' b'the' b'children' b'became' b'known' b'to' b'Bernie' b'<unk>' b"'" b'<unk>'
    b'.' b'Because' b'was' b'<unk>' b'with' b'Freya' b',' b'does' b'not' b'live' b'home' b'what' b'have' b'a' b'great' b'assembly' b'that' b'bulbs' b',' b'if'
    b'his' b'bright' b'body' b'is' b'ordered' b'after' b'he' b'scored' b'by' b'the' b'bird' b"'s" b'<unk>' b'is' b'bribery' b'.' b'<eos>' b'Since' b'Kirkus' b'respectful'
    b'married' b'the' b'stomach' b'of' b'raising' b'working' b'in' b'the' b'death' b',' b'Ceres' b'does' b'not' b'leave' b'like' b':' b'"' b'<unk>' b'transcribed' b','
    b'treated' b'<unk>' b'or' b'a' b'golf' b',' b'red' b'Roman' b'forces' b'.' b'<unk>' b'writes' b'it' b'may' b'think' b'like' b'this' b'towards' b'tools' b'.'
    b'If' b'"' b'and' b'strive' b'was' b'heavily' b'a' b'planet' b'to' b'prevent' b'this' b'<unk>' b'Prophet' b'but' b'already' b'more' b'even' b'another' b'or' b'the'
    b'"' b'<unk>' b'destruction' b'"' b',' b'they' b'felt' b'that' b'Wilson' b'Hairan' b'"' b'he' b'is' b'learning' b'to' b'personally' b'\xe2\x80\x94' b'rather' b'commonly' b"'"
    b'desperately' b"'" b',' b'said' b'that' b'they' b'tried' b'to' b'pin' b'him' b'by' b'false' b'direction' b'.' b'"' b'The' b'Herald' b"'s" b'body' b'commented'
    b':' b'"' b'poverty' b'they' b"'ve" b'well' b'they' b'right' b'you' b'have' b'.' b'"' b'A' b'Viscount' b'gets' b'as' b'Ceres' b',' b'though' b'many'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.1
    loss: 5.168
    elapsed time (seconds): 140.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  1.588 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
