.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'et' b'Zinc' b',' b'Christie' b'and' b'Kingsley' b',' b'but' b'overwhelm' b'<unk>' b'a' b'taxon' b'.' b'Shortly' b',' b'Formula' b"'Malley" b'kills' b'lives' b'into'
    b'an' b'generation' b'for' b'another' b'role' b'.' b'The' b'Oxford' b'1876' b'of' b'electronics' b'criticized' b'the' b'host' b'of' b'only' b'written' b'from' b'the' b'club'
    b',' b'and' b'hence' b'that' b'coastline' b'puts' b'the' b'conference' b'by' b'an' b'opportunity' b'to' b'do' b'so' b'at' b'a' b'recovery' b'.' b'Walter' b'Midland'
    b'also' b'commented' b'respect' b'to' b'any' b'Panama' b'European' b'developments' b',' b'and' b'states' b'it' b'also' b'wrote' b'every' b'art' b'"' b'living' b'to' b'secure'
    b'a' b'bad' b'parrot' b'upon' b'massive' b'question' b'"' b'.' b'When' b'the' b'old' b'success' b'of' b'Freiherr' b'Rowland' b'and' b'pacifier' b',' b'Smash' b'American'
    b'sisters' b'do' b'not' b'go' b'in' b'Fair' b'Ward' b'.' b'The' b'priory' b'authority' b'4' b'@.@' b'5' b'to' b'3' b'million' b'older' b'.' b'Later'
    b'to' b'be' b'about' b'drive' b'I' b'at' b'winding' b'master' b',' b'he' b'considers' b'rapid' b'titles' b',' b'which' b"'m" b'Odaenathus' b'heading' b'to' b'Bros.'
    b'July' b'2' b',' b'1969' b'.' b'<eos>' b'The' b'book' b'debuted' b'in' b'desktop' b'March' b'Tech' b'found' b'to' b'throw' b'Simone' b',' b'including' b'a'
    b'county' b'Channel' b'.' b'Brown' b'Steele' b'expressed' b'a' b'caused' b'election' b'(' b'taking' b'approval' b'date' b')' b'for' b'their' b'old' b'moons' b',' b'Rutee'
    b'Virginia' b'@-@' b'fi' b',' b'then' b'run' b'by' b'Rufinus' b',' b'drove' b'with' b'the' b'Lithuanian' b'Industry' b'PlayStation' b'York' b'Rangers' b'worldwide' b'and' b'Scotland'
    b'Crystal' b'.' b'The' b'book' b'also' b'ranked' b'some' b'reception' b'to' b'his' b'observations' b'.' b'The' b'background' b'of' b'players' b'chose' b'the' b'chart' b'referred'
    b'to' b'as' b'that' b'of' b'his' b'ballad' b';' b'those' b'a' b'short' b'new' b'episode' b'is' b'refuge' b'in' b'Crash' b'Square' b'for' b'Solitude' b','
    b'taking' b'Mineral' b'members' b',' b'and' b'film' b'mediate' b'NC' b'State' b'River' b',' b'which' b'was' b'announced' b'by' b'Greatest' b'Sciences' b'.' b'<eos>' b'Crash'
    b'Tiger' b'Senthil' b'Effects' b'compared' b'to' b'greater' b'legal' b'events' b',' b'though' b'instead' b'felt' b'that' b'"' b'we' b'could' b'Malvolio' b'do' b'otherwise' b'give'
    b'you' b'to' b'go' b'in' b'installment' b',' b'he' b'is' b'like' b'them' b'to' b'look' b'ever' b'.' b'"' b'The' b'game' b'was' b'modified' b'to'
    b'find' b'whose' b'game' b'.' b'However' b',' b'on' b'February' b'28' b',' b'2009' b',' b'the' b'ball' b'of' b'interviews' b'in' b'a' b'culture' b'and'
    b'Accepting' b'Teresa' b'hair' b'was' b'advised' b'to' b'Kobe' b'permission' b'to' b'be' b'moved' b'to' b'each' b'two' b'times' b'while' b'he' b'wrote' b'this' b'"'
    b'22' b'it' b'is' b'perhaps' b'perfect' b'.' b'We' b'reflects' b'it' b'a' b'true' b'action' b',' b'a' b'haunting' b'that' b'lonely' b'developers' b',' b'with'
    b'promos' b'fear' b'.' b'"' b'<eos>' b'<eos>' b'<eos>' b'=' b'Observing' b'more' b'popular' b'developments' b'(' b'automotive' b'last' b',' b'stupid' b')' b'=' b'<eos>'
    b'<eos>' b'records' b'being' b'slowed' b'to' b'Australia' b',' b'city' b',' b'and' b'clothing' b'in' b'its' b'performances' b'to' b'Batchelor' b'left' b'an' b'good' b'Sumner'
    b'of' b'Thoroughbred' b'in' b'1954' b'aged' b'4' b'.' b'<unk>' b'funding' b'this' b'contrast' b'is' b'first' b'converted' b'to' b'high' b'farms' b'.' b'This' b'next'
    b'majority' b'arranged' b',' b'on' b'October' b'3' b',' b'2006' b',' b'and' b'it' b'went' b'9' b'\xc2\xb0' b'to' b'set' b'the' b'7' b'@.@' b'5'
    b'million' b'African' b'Oil' b'Awards' b'on' b'October' b'9' b'.' b'The' b'highest' b'designation' b'was' b'published' b'in' b'the' b'country' b',' b'before' b'joining' b'over'
    b'6' b'million' b'in' b'700' b'dynamic' b',' b'a' b'32' b'@-@' b'year' b'(' b'7' b'@.@' b'1' b'ppg' b')' b'plan' b'features' b'in' b'Kalyanasundara'
    b'ground' b'displays' b'(' b'typical' b'700' b'metres' b')' b'in' b'Mumbai' b'.' b'Several' b'Agaricales' b'in' b'his' b'axis' b'might' b'find' b'most' b'storms' b','
    b'and' b'it' b'has' b'some' b'accurate' b'groups' b'.' b'Common' b'2016' b'had' b'been' b'replaced' b'by' b'Ictus' b';' b'poaching' b'after' b'calling' b',' b'originality'
    b',' b'complications' b',' b'and' b'coastal' b'revolving' b'by' b'evacuation' b'.' b'As' b'of' b'October' b'22' b',' b'11' b'@,@' b'000' b'by' b'Maui' b'visited'
    b'it' b'as' b'a' b'valid' b'storm' b'mission' b',' b'when' b'wind' b'flooding' b'were' b'as' b'<unk>' b'as' b'as' b'the' b'storm' b'ruled' b'to' b'dee'
    b'Liang' b'.' b'Many' b'areas' b'hold' b'livestock' b'construction' b',' b'such' b'north' b'from' b'KDOT' b',' b'snowmelt' b',' b'executions' b',' b'Boles\xc5\x82aw' b',' b'Lutheran'
    b',' b'Gallimard' b',' b'Classes' b',' b'and' b'moist' b'fins' b',' b'help' b'that' b'into' b'some' b'other' b'planets' b'of' b'smell' b';' b'death' b'emit'
    b'chronic' b'telegram' b'.' b'<eos>' b'Common' b'S.' b'catcher' b'flow' b'at' b'wording' b'for' b'all' b'sandpit' b'today' b'all' b',' b'that' b'sing' b',' b'or'
    b'her' b'large' b'desire' b'to' b'make' b'up' b'significant' b'numbers' b'of' b'Heartbreak' b'rates' b'.' b'These' b'populations' b'involved' b'over' b'sustaining' b'them' b'to' b'send'
    b'100' b'@.@' b'5' b'or' b'lush' b'157th' b'as' b'either' b'up' b'in' b'a' b'readership' b'for' b'Australia' b'.' b'In' b'1867' b',' b'Jordan' b'crosses'
    b'this' b'arc' b'of' b'Venus' b'to' b'a' b'average' b'@-@' b'force' b'item' b'with' b'Japan' b'in' b'a' b'violation' b'of' b'takeover' b'Depot' b',' b'based'
    b'on' b'ylides' b'by' b'Cardiff' b'of' b'the' b'<unk>' b'family' b',' b'argued' b'that' b'it' b'with' b'among' b'less' b'mature' b'offers' b'sections' b'as' b'electroplating'
    b'Ancona' b'years' b'.' b'In' b'1773' b',' b'Merchandising' b'passed' b'that' b'species' b'travelled' b'to' b'.' b'Almost' b'not' b'a' b'religious' b'population' b'of' b'humans'
    b',' b'the' b'starting' b'relations' b'correctly' b'grow' b'throughout' b'an' b'eukaryotic' b'destiny' b'.' b'Occupational' b'starlings' b'where' b'S.' b'Gottfried' b',' b'including' b'wherein' b'its'
    b'burden' b'on' b'a' b'first' b'down' b'level' b',' b'noticed' b'it' b'even' b',' b'and' b'even' b'saving' b'it' b'.' b'A' b'extreme' b'scene' b'from'
    b'<unk>' b',' b'near' b'fused' b'that' b'winter' b'again' b',' b'should' b'be' b'seen' b'by' b'people' b'or' b'bearded' b'deity' b'.' b'He' b'also' b'abandoned'
    b'dozen' b'West' b'gait' b'of' b'young' b'than' b'twenty' b'miles' b'(' b'71' b'in' b')' b'at' b'a' b'rate' b'of' b'80' b'(' b'hole' b')'
    b',' b'124' b'%' b'and' b'befriended' b'adaptations' b'to' b'an' b'signaling' b'feathers' b'.' b'In' b'a' b'attempt' b'to' b'grasp' b'this' b'other' b'they' b'find'
    b'to' b'be' b'they' b'explained' b'to' b'be' b'nature' b',' b'talking' b',' b'there' b'was' b'no' b'black' b'teachers' b'by' b'Stewart' b'@-@' b'barometer' b','
    b'on' b'set' b'the' b'species' b'of' b'pathology' b'.' b'It' b'would' b'be' b'placed' b'back' b'on' b'each' b'side' b'of' b'its' b'final' b'perfect' b'angle'
    b'for' b'<unk>' b'(' b'electric' b',' b'yellow' b',' b'wolf' b',' b'1987' b'and' b'Cameo' b')' b',' b'to' b'its' b'back' b'from' b'a' b'sketchy'
    b'distribution' b'.' b'Her' b'latter' b'will' b'be' b'made' b',' b'<eos>' b'O' b'One' b'males' b'become' b'taken' b'by' b'Concorde' b':' b'<unk>' b',' b'the'
    b'pledge' b'of' b'its' b'softer' b'range' b',' b'origin' b'prostrate' b'before' b'only' b':' b'Katia' b'on' b'10' b'April' b'2012' b',' b'Athene' b'E.' b','
    b'which' b'are' b'8' b'surround' b'diet' b',' b'and' b'caring' b'often' b'collaborated' b'around' b'described' b':' b'00' b',' b'before' b'this' b'may' b'licensed' b'their'
    b'location' b';' b'1942' b';' b'they' b'can' b'be' b'able' b'to' b'handle' b'its' b'true' b'plumage' b';' b'it' b'will' b'be' b'large' b'\xe2\x80\x93' b'longer'
    b'.' b'<eos>' b'Since' b'leaves' b'around' b'a' b'cargo' b"'s" b'gill' b'size' b',' b'every' b'certain' b'dry' b'species' b'of' b'A.' b'N.' b'\xe0\xb9\x8c' b'is'
    b'mainly' b'follows' b'in' b'operations' b'.' b'The' b'Gambia' b'\xe2\x80\x93' b'AIDS' b'starling' b'is' b'dark' b'<unk>' b',' b'but' b'well' b'after' b'an' b'pattern' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.5
    loss: 5.168
    elapsed time (seconds): 148.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  9.668 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
