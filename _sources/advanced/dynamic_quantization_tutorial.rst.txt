.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Brett' b'<unk>' b'to' b'have' b'been' b'bond' b'.' b'The' b'most' b'intelligent' b'character' b',' b'ecosystems' b',' b'is' b'based' b'in' b'North' b'Africa' b'.'
    b'During' b'account' b'of' b'the' b'circumstances' b',' b'<unk>' b',' b'liked' b'a' b'significant' b'planet' b'from' b'history' b',' b'indicates' b'that' b',' b'they' b'family'
    b'comprehensive' b',' b'neither' b'rhythm' b'.' b'He' b'immediately' b'showed' b'up' b'out' b'"' b'too' b'thrive' b'for' b'the' b'family' b',' b'flag' b'or' b'by'
    b'those' b'of' b'interviews' b'"' b'.' b'1663' b'were' b'illuminated' b':' b'the' b'character' b',' b'who' b'is' b'elected' b'a' b'royal' b'section' b'of' b'him'
    b'on' b'documentaries' b'throughout' b'a' b'lord' b',' b'but' b'his' b'<unk>' b'allows' b'a' b'true' b'uranium' b'video' b'instead' b';' b'Gagosian' b'and' b'black' b'Supreme'
    b'Power' b'Woman' b'(' b'or' b'he' b'case' b'at' b'the' b'late' b'end' b'of' b'UHF' b'power' b')' b'indicated' b'that' b'"' b'when' b'you' b'seem'
    b',' b'he' b'turned' b'down' b',' b'and' b'even' b'at' b'450' b'part' b'of' b'Racing' b'and' b'<unk>' b'that' b'Future' b'(' b'I' b'have' b'done'
    b',' b'I' b'first' b'die' b'no' b'a' b'half' b')' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Handwriting' b'=' b'=' b'<eos>' b'<eos>' b'<eos>'
    b'=' b'=' b'=' b'Classification' b'=' b'=' b'=' b'<eos>' b'<eos>' b'In' b'1999' b',' b'the' b'Annals' b'Pope' b'Nicholas' b'Brown' b'(' b'Complete' b'USA'
    b')' b'is' b'an' b'<unk>' b'@-@' b'like' b',' b'Liebmann' b'Theodor' b'(' b'<unk>' b')' b'Geste' b',' b'a' b'federal' b'scripts' b'who' b'has' b'existed'
    b'on' b'Hubbardton' b'(' b'<unk>' b'weed' b')' b'.' b'Jordan' b'lived' b'on' b'lead' b'a' b'series' b'of' b'62' b'years' b'after' b'generated' b'a' b'bright'
    b'range' b'of' b'his' b'family' b'.' b'He' b'led' b'in' b'2004' b'high' b'orbits' b'in' b'2016' b'@-@' b'facing' b'Franchomme' b',' b'on' b'the' b'Father'
    b'<unk>' b'and' b'nominees' b'.' b'The' b'warriors' b'could' b'think' b'that' b'range' b'is' b'"' b'serious' b'life' b'"' b',' b'sometimes' b'observed' b'that' b'designing'
    b'his' b'supernatural' b',' b'peat' b'<unk>' b'<unk>' b'that' b'he' b'has' b'her' b'heir' b'along' b'.' b'As' b'illustrate' b'people' b'in' b'pilots' b',' b'his'
    b'wives' b'commonly' b'attended' b'the' b'cougar' b'during' b'this' b'period' b';' b'she' b'felt' b'that' b'his' b'observations' b'are' b'being' b'freedom' b'of' b'gospel' b'starts'
    b'.' b'Fritt' b'Amla\xc3\xadb' b'recognized' b'her' b'parents' b'on' b'21' b'March' b'<unk>' b'that' b'ruled' b'them' b'far' b'for' b'fewer' b'times' b'and' b'to' b'give'
    b'their' b'column' b'metals' b',' b'to' b'wait' b'them' b'to' b'draw' b'his' b'troubles' b'.' b'Fresh' b'notes' b'in' b'2008' b'is' b'the' b'home' b'of'
    b'UFO' b'in' b'Wonderland' b',' b'and' b'his' b'credit' b'are' b'highly' b'closely' b'@-@' b'rich' b'.' b'It' b'is' b'therefore' b'begun' b'of' b'Latin' b'descent'
    b'.' b'While' b'this' b'bird' b'ammonia' b'a' b'unit' b',' b'he' b'is' b'cured' b'with' b'<unk>' b'and' b'from' b'ghats' b'to' b'work' b'gilded' b'her'
    b'citizens' b'from' b'another' b'severe' b'head' b'after' b'certain' b'or' b'classical' b'crowds' b',' b'although' b'they' b'is' b'dying' b'.' b'<eos>' b'In' b'Lucky' b'Robertson'
    b',' b'Zhou' b'has' b'no' b'chance' b'to' b'alleviate' b'their' b'support' b'and' b'take' b'its' b'blocked' b'situation' b',' b'which' b'display' b'eternal' b'principles' b'at'
    b'different' b'<unk>' b'.' b'Hornung' b'caused' b'the' b'dinosaur' b'Chase' b'that' b'bequeathed' b'in' b'great' b'manga' b',' b'caused' b'by' b'Carleton' b'<unk>' b"'s" b'daughter'
    b'that' b'Stokes' b'neutrino' b'is' b'dealt' b'generally' b'on' b'Director' b'<unk>' b'.' b'charities' b'concepts' b'issued' b'out' b'that' b'Palestinians' b'was' b'also' b'debated' b'to'
    b'piano' b'.' b'Humpty' b'One' b'@-@' b'child' b"'" b'main' b'power' b'has' b'were' b'horror' b'at' b'a' b'lifetime' b'of' b'land' b'.' b'The' b'distinguishing'
    b'proposal' b'Maryland' b'formed' b'a' b'planet' b'with' b'an' b'player' b'\xe2\x80\x94' b'more' b'than' b'having' b'a' b'plane' b'found' b'for' b'a' b'five' b'@-@' b'day'
    b'mechanic' b'.' b'While' b'this' b'defines' b'Occupation' b'met' b'after' b'1500' b'years' b'old' b',' b'they' b'are' b'thought' b'to' b'be' b'a' b'character' b'focusing'
    b'in' b'that' b'episode' b'.' b'Although' b'of' b'them' b',' b'all' b'of' b'his' b'grave' b'resistance' b'in' b'line' b'.' b'One' b'courage' b'contributed' b'to'
    b'about' b'30' b'%' b'to' b'side' b'his' b'life' b'.' b'wider' b'<unk>' b'is' b'either' b'affected' b'by' b'each' b'side' b'which' b'happened' b'up' b'on'
    b'to' b'punt' b'the' b'conclusion' b'of' b'his' b'planet' b',' b'which' b'resulting' b'in' b'his' b'life' b'from' b'<unk>' b'and' b'insist' b'.' b'According' b'to'
    b'<unk>' b',' b'they' b'think' b'that' b'it' b'Revolution' b'are' b'taught' b'by' b'caps' b',' b'and' b'some' b'of' b'them' b'have' b'declined' b'small' b'movement'
    b'.' b'.' b'education' b'have' b'resultant' b'one' b'@-@' b'six' b'females' b'.' b'Some' b'players' b'begin' b'.' b'When' b'blacks' b'a' b'novel' b',' b'the'
    b'first' b'mention' b'told' b'kicked' b'it' b'as' b'a' b'main' b',' b'but' b'it' b'written' b'Game' b'make' b'Ceres' b'when' b'they' b'have' b'zombie' b'distance'
    b'the' b'character' b'of' b'Venus' b'pushed' b'after' b'other' b'multipurpose' b'beloved' b'ara' b'and' b'sometime' b'.' b'Ceres' b'rate' b'occasionally' b'(' b'1857' b')' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Influences' b'=' b'=' b'<eos>' b'<eos>' b'The' b'envelope' b'describes' b'apparent' b'Bhairava' b'to' b'contain' b'designers' b',' b'but' b'<unk>'
    b'identification' b',' b'a' b'other' b'longer' b'regions' b',' b'like' b'only' b'reactions' b'from' b'other' b'unique' b'passengers' b'.' b'Common' b'starlings' b'formed' b'twice' b'in'
    b'German' b'methods' b',' b'and' b'their' b'distinctive' b'function' b'also' b'as' b'workplace' b'as' b'high' b'with' b'<unk>' b',' b'avoiding' b'only' b'disruptive' b'human' b'programs'
    b'.' b'Other' b'natural' b'people' b'are' b'uncertain' b',' b'are' b'put' b'and' b'agricultural' b'or' b'<unk>' b',' b'so' b'this' b'may' b'be' b'as' b'observed'
    b'only' b'to' b'acknowledge' b'<unk>' b'.' b'Europium' b'forms' b'aziridines' b',' b'inn' b'intending' b',' b'and' b'prevent' b'two' b'species' b'.' b'The' b'game' b'increased'
    b'with' b'largely' b'anatomy' b',' b'with' b'a' b'minute' b'of' b'art' b'of' b'10' b'@.@' b'2' b'in' b'(' b'262' b'mm' b')' b'diameter' b'on'
    b'the' b'regions' b'.' b'Because' b'of' b'the' b'eggs' b',' b'Reala' b'becomes' b'a' b'mixture' b'of' b'female' b'taken' b'.' b'They' b'Liszt' b'may' b'be'
    b'able' b'to' b'be' b'exposed' b'to' b'their' b'<unk>' b',' b'comparing' b'thus' b'their' b'house' b'.' b'This' b'increases' b'on' b'points' b'and' b'cites' b'into'
    b'pottery' b'such' b'as' b'Sanz' b'.' b'<eos>' b'Common' b'language' b'threads' b':' b'<eos>' b'"' b'Michael' b'Light' b'it' b'is' b'sometimes' b'deposited' b'when' b'things'
    b'have' b'Saginaw' b'in' b'but' b'some' b'parts' b'of' b'where' b'respect' b'and' b'animals' b'eyes' b'praised' b'.' b'That' b'nothing' b'is' b'eye' b'your' b'.'
    b'Soon' b'(' b'without' b'the' b'sun' b'<unk>' b'<unk>' b'Mare' b'and' b'Mauryas' b'\xe2\x80\x93' b'see' b'the' b'Republic' b',' b'will' b'see' b'to' b'appear' b'in'
    b'a' b'nearby' b'rise' b'or' b'cheap' b'the' b'order' b'of' b'exceed' b'found' b'in' b'a' b'bowls' b'I' b'resulted' b'as' b'you' b'does' b':' b'To'
    b'all' b')' b',' b'killing' b'like' b'that' b'we' b'is' b'excited' b'to' b'come' b'to' b'remedy' b',' b'a' b'side' b':' b'<unk>' b'altering' b'to'
    b'be' b'deleted' b'as' b'he' b'I' b'know' b'Species' b'may' b'always' b'be' b'very' b'different' b'?' b"'" b'"' b'.' b'These' b'features' b'that' b'manages'
    b'to' b'talk' b',' b'is' b'<unk>' b'by' b'the' b'relative' b'of' b'cloth' b'upon' b'their' b'head' b'Nubia' b'to' b'be' b'moving' b'for' b'advantage' b'control'
    b'that' b'plants' b'recorded' b'template' b',' b'when' b'they' b'were' b'asked' b'to' b'eat' b'items' b'and' b'others' b'.' b'This' b'element' b'may' b'be' b'dark'
    b'reborn' b'.' b'Electronic' b'replied' b'that' b'this' b'reason' b"'s" b'an' b'concept' b'around' b'food' b'confirmed' b'only' b'just' b'to' b'Arromanches' b'and' b',' b'they'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.6
    loss: 5.168
    elapsed time (seconds): 164.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  48.668 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
