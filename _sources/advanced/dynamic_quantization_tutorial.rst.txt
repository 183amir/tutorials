.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'released' b'in' b'IPC' b',' b'Turkey' b',' b'and' b'in' b'New' b'Zealand' b'.' b'<eos>' b'With' b'estimated' b'lying' b'about' b'the' b'Ydll' b'people' b'to'
    b'study' b'.' b'The' b'Mycena' b'Goldwyn' b'proposed' b'\xc3\x8dmar' b'much' b'four' b'years' b'from' b'pop' b'origin' b',' b'with' b'his' b'own' b'parents' b'leaders' b'.'
    b'Major' b'Giger' b'has' b'always' b'seeking' b'a' b'exclusive' b'Agreement' b'to' b'land' b'.' b'<eos>' b'Since' b'of' b'his' b'placement' b'gubernatorial' b'leaders' b'from' b'Ceres'
    b',' b'this' b'one' b'of' b'frequent' b'donation' b'lights' b'was' b'found' b'by' b'his' b'work' b';' b'the' b'damage' b'were' b'so' b'further' b'hired' b'.'
    b'However' b',' b'the' b'rest' b'of' b'4' b'@.@' b'4' b'%' b'had' b'continued' b'to' b'have' b'been' b'built' b'by' b'these' b'10' b'%' b','
    b'numbers' b'for' b'London' b'1846' b'to' b'step' b'third' b'with' b'RNF' b'trash' b',' b'also' b'raised' b'to' b'to' b'Earth' b"'s" b'southern' b'to' b'vote'
    b'with' b'the' b'run' b'.' b'daytime' b'fresh' b'observations' b'are' b'set' b'by' b'sampled' b'by' b'a' b'suggestion' b'more' b'than' b'that' b'of' b'<unk>' b','
    b'drafted' b'even' b'falling' b'.' b'Despite' b'18' b'years' b',' b'it' b'stopped' b'further' b'that' b'most' b'different' b'turf' b'donated' b'by' b'either' b'Poole' b'planet'
    b'are' b'reddish' b'with' b'<unk>' b',' b'including' b'any' b',' b'known' b'as' b'Colman' b'.' b'This' b'is' b'the' b'second' b'wife' b'found' b'to' b'be'
    b'thrown' b'south' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legal' b'observations' b'=' b'=' b'<eos>' b'<eos>' b'The' b'mushroom' b'is' b'a' b'practical' b'point' b'and'
    b'known' b'by' b'an' b'base' b'substantial' b',' b'independent' b'concept' b'(' b'Western' b'times' b')' b',' b'and' b'involve' b'opinions' b'or' b'their' b'severe' b'Behavior'
    b'.' b'They' b'are' b'a' b'pair' b'of' b'acute' b',' b'superb' b',' b'and' b'violence' b'<unk>' b',' b'which' b'one' b'limestone' b'culture' b'exist' b','
    b'thus' b'pulling' b'only' b'after' b'in' b'the' b'reaction' b'of' b'helmet' b'.' b'A' b'number' b'of' b'plum' b'pores' b'tensile' b'be' b'formed' b'as' b'the'
    b'most' b'evil' b'.' b'In' b'the' b'12th' b'century' b',' b'it' b'does' b'not' b'play' b'into' b'different' b'areas' b',' b'and' b'off' b'additional' b'starlings'
    b'for' b'being' b'seen' b'by' b'extra' b'.' b'An' b'general' b'ring' b'has' b'an' b'feeling' b'of' b'art' b'and' b'may' b'be' b'remixed' b'by' b'motorised'
    b'.' b'None' b'of' b'its' b'dense' b'plumage' b'can' b'be' b'diameter' b'.' b'In' b'particular' b',' b'mRNA' b'takes' b'binds' b'on' b'the' b'floor' b'of'
    b'modern' b'factors' b'.' b'This' b'is' b'connected' b'to' b'an' b'Roman' b'association' b'with' b'guidelines' b'@-@' b'bearing' b'sex' b',' b'that' b'a' b'measure' b'made'
    b'less' b'high' b'bones' b'.' b'It' b'does' b'not' b'be' b'overcome' b'as' b'or' b'as' b'with' b'the' b'male' b"'s" b'whole' b'senses' b'.' b'It'
    b'can' b'be' b'of' b'display' b',' b'a' b'Darke' b',' b'the' b'1629' b'food' b'and' b'Luoyang' b'<unk>' b'.' b'There' b'are' b'an' b'collection' b'of'
    b'Eleven' b'<unk>' b'environmental' b'females' b'thermal' b'population' b'from' b'Finland' b',' b'more' b'than' b'so' b'than' b'so' b'pest' b'agencies' b'.' b'smear' b'and' b'product'
    b',' b'they' b'get' b'Celtic' b'size' b'for' b'traditional' b'birds' b',' b'writings' b'embellished' b'$' b'9' b'million' b',' b'whereas' b'still' b'open' b'within' b'.'
    b'If' b'about' b'these' b'simultaneously' b'areas' b'do' b'not' b'fare' b'involve' b'there' b',' b'they' b'can' b'wanna' b'undetected' b'off' b'.' b'<unk>' b'they' b'do'
    b'in' b'Blood' b',' b'is' b'only' b'very' b'<unk>' b',' b'may' b'protect' b'a' b'wings' b'.' b'Without' b'sometimes' b',' b'they' b"'d" b'<unk>' b'them'
    b'related' b'to' b'\xc3\x89rard' b'.' b'A' b'female' b'take' b'us' b'fledging' b'within' b'<unk>' b',' b'just' b'their' b'elements' b'<unk>' b',' b'gives' b'enemies' b'to'
    b'help' b'their' b'lead' b'.' b'<eos>' b'The' b'DNA' b'approaches' b'connected' b'16' b'million' b'miles' b'(' b'6' b'in' b')' b'L' b'5' b't' b','
    b'which' b'up' b'known' b'on' b'12' b'April' b',' b'only' b'area' b'when' b'it' b'leaves' b'males' b'(' b'used' b'as' b'food' b'as' b'it' b'Sikh'
    b'can' b'be' b'effective' b')' b'and' b'(' b'most' b'type' b'as' b'the' b'embryos' b';' b'however' b',' b'light' b'Hoysalas' b'/' b'66' b'years' b','
    b'the' b'body' b'of' b'drivers' b'live' b'in' b'size' b'or' b'30' b'ft' b'(' b'2' b'@.@' b'8' b'in' b')' b'sometimes' b'unadorned' b'for' b'any'
    b'of' b'the' b'remaining' b'chicks' b'would' b'be' b'food' b'up' b'.' b'It' b'is' b'intact' b'for' b'thin' b'elevations' b'and' b'likely' b'holding' b'ain' b'acids'
    b'.' b'1' b'.' b'In' b'they' b'are' b'closed' b'up' b'to' b'basket' b'several' b'birds' b'had' b'close' b'property' b',' b'they' b'are' b'necessary' b'to'
    b'attack' b'the' b'scale' b'to' b'yellowish' b',' b'which' b'they' b'could' b'be' b'ornaments' b'tract' b'@-@' b'defined' b',' b'not' b'so' b'overlap' b'or' b'<unk>'
    b'.' b'If' b'they' b'halls' b'pieces' b'can' b'be' b'their' b'kakapo' b'do' b'not' b'occur' b'into' b'them' b'.' b'<eos>' b'Twelve' b'starlings' b',' b'however'
    b',' b'can' b'represent' b'nuisance' b'without' b'the' b'eggs' b'from' b'their' b'male' b'areas' b'.' b'Its' b'starlings' b'were' b'wet' b'in' b'some' b'images' b'of'
    b'some' b'perspective' b'of' b'their' b'export' b'and' b'mitosis' b',' b'which' b'certain' b'consider' b'they' b'are' b'unlocked' b'.' b'Previously' b'they' b'call' b'shaped' b'damage'
    b'during' b'the' b'1940s' b',' b'Homarus' b',' b'they' b'were' b"'s" b'hope' b'cell' b'@-@' b'frequency' b'.' b'As' b'a' b'cargo' b'may' b'be' b'inappropriate'
    b'commercially' b'from' b'Spanish' b',' b'males' b'separated' b'being' b'used' b'by' b'a' b'expressway' b'spontaneous' b',' b'they' b'are' b'often' b'accurate' b'.' b'Each' b'tails'
    b'(' b'CPS' b')' b'saving' b',' b'a' b'shell' b'within' b'further' b'in' b'1945' b',' b'and' b'ate' b'them' b'.' b'If' b'they' b'are' b','
    b'both' b'hanging' b'white' b'obtain' b'down' b'similar' b'to' b'their' b'gravitational' b'roosts' b'.' b'Furthermore' b',' b'or' b'relayed' b',' b'he' b'lacked' b'Terrapins' b'a'
    b'motion' b'jam' b'.' b'Prey' b'chicks' b'are' b'beneficial' b'.' b'The' b'next' b'night' b',' b'where' b'respect' b',' b'as' b'each' b'bird' b'suggests' b'or'
    b'to' b'begin' b'term' b'to' b'find' b'luminosity' b'all' b'to' b'eucalypts' b'they' b'parted' b'their' b'alder' b'.' b'They' b'makes' b'.' b'Hundreds' b',' b'tightly'
    b',' b'predicted' b'that' b'that' b'Ceres' b'can' b'be' b'too' b'easy' b',' b'he' b'joins' b'so' b'demonstrations' b'such' b'as' b'<unk>' b',' b'<unk>' b','
    b'<unk>' b'"' b'and' b'<unk>' b'"' b'.' b'The' b'<unk>' b'curve' b'may' b'occur' b'in' b'California' b',' b'12' b'\xe2\x80\x93' b'2' b'intergrades' b',' b'Size'
    b'most' b'patch' b',' b'so' b'some' b'severely' b'were' b'probably' b'<unk>' b'.' b'Development' b'have' b'been' b'fleas' b'iTunes' b'brown' b',' b'which' b'the' b'kakapo'
    b'feared' b'that' b'they' b'female' b'"' b'habitats' b'"' b'.' b'They' b'also' b'wears' b'on' b'a' b'large' b'range' b'of' b'proteins' b'between' b'Mars' b'and'
    b'113' b'in' b'modification' b'.' b'Their' b'pre' b'@-@' b'female' b'populations' b'are' b'sharp' b'north' b'of' b'high' b',' b'multiple' b'rickshaws' b'no' b'<unk>' b','
    b'much' b'official' b'<unk>' b'.' b'Like' b'example' b',' b'these' b'astronomers' b'are' b'incredible' b'.' b'<eos>' b'There' b'are' b'one' b'of' b'the' b'larger' b'snake'
    b'goes' b'for' b'Koopa' b'to' b'the' b'quarry' b'of' b'gunners' b',' b'using' b':' b'I' b'hope' b'if' b'it' b'can' b'be' b'added' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Offensive' b'=' b'=' b'<eos>' b'<eos>' b'The' b'sweet' b'starling' b'has' b'precipitation' b'proposed' b'in' b'alert' b',' b'so' b'other' b'mass'
    b',' b'other' b'hot' b'stories' b',' b'the' b'UP' b'Sun' b'(' b'worms' b':' b'ticks' b')' b',' b'written' b'close' b'to' b'his' b'<unk>' b'<unk>'
    b'\xe2\x80\x94' b'<unk>' b',' b'<unk>' b',' b'pictured' b'them' b',' b'machinery' b',' b'and' b'habitats' b'who' b'had' b'thunder' b'their' b'function' b'.' b'That' b'year'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.4
    loss: 5.168
    elapsed time (seconds): 148.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  15.113 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
