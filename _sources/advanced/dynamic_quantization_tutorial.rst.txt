.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'radar' b'.' b'The' b'largest' b'remains' b'storyline' b'at' b'Hornung' b"'" b'Test' b'characters' b'with' b'the' b'approval' b'of' b'prognosis' b'with' b'NCAA' b'"' b'<unk>'
    b'"' b',' b'in' b'a' b'collection' b'of' b'gaze' b'especially' b'to' b'protect' b'early' b'relief' b'.' b'But' b'this' b'is' b'Felicia' b"'s" b'"' b'Hobbit'
    b'Wenlock' b'"' b'and' b'"' b'The' b'<unk>' b'of' b'e' b'"' b'commenced' b'in' b'the' b'early' b'19th' b'century' b'and' b'dissipated' b'as' b'the' b'Four'
    b'track' b',' b'28' b'.' b'The' b'love' b'Jos' b'I' b'dead' b'Protesters' b'in' b'the' b'territory' b',' b'and' b'due' b'to' b'Rowland' b'scenes' b'about'
    b',' b'information' b',' b'and' b'various' b'pseudoephedrine' b',' b'as' b'a' b'source' b'of' b'Storm' b'<unk>' b'.' b'Raphael' b'inverted' b'influences' b'were' b'being' b'scathing'
    b'pieces' b'.' b'In' b'what' b'could' b'be' b'generated' b'with' b'H' b',' b'the' b'Dubliners' b'feels' b'alien' b'as' b'Work' b'toward' b'a' b'solar' b','
    b'ligature' b'of' b'her' b'fear' b'.' b'It' b'is' b'a' b'common' b'nature' b'that' b'the' b'little' b'weary' b'on' b'with' b'the' b'information' b'contain' b'about'
    b'Yohn' b'and' b'killer' b'relating' b'.' b'<eos>' b'For' b'example' b'and' b'decade' b'of' b'gulf' b',' b'and' b'informal' b',' b'<unk>' b'treason' b',' b'but'
    b'not' b'requires' b'a' b'PDB' b'with' b'G' b'check' b',' b'it' b'should' b'attacks' b'his' b'own' b'strength' b'.' b'Still' b',' b'they' b'am' b'a'
    b'ability' b'in' b'the' b'firearms' b'@-@' b'indicator' b'that' b'always' b'.' b'Some' b'of' b'the' b'male' b',' b'including' b'example' b'the' b',' b'recent' b'asteroid'
    b'than' b'them' b',' b'is' b'Bunny' b'@-@' b'associated' b'.' b'<eos>' b'From' b'June' b'11' b',' b'2006' b',' b'it' b'was' b'across' b'its' b'since'
    b'role' b'on' b'Rose' b'member' b'in' b'the' b'United' b'States' b',' b'a' b'meeting' b'.' b'The' b'actual' b'title' b'of' b'the' b'American' b'Sea' b'which'
    b'129' b'<unk>' b'is' b'more' b'over' b'11' b'feet' b'(' b'5' b'ft' b')' b'tall' b',' b'half' b'of' b'the' b'30' b'Count' b'also' b'introduced'
    b'every' b'vast' b'species' b'of' b'being' b'10M' b'.' b'The' b'Freyberg' b'Project' b'is' b'mostly' b'found' b'of' b'the' b'Altar' b'of' b'Ireland' b'.' b'The'
    b'earliest' b'cool' b'species' b'of' b'Ireland' b'will' b'then' b'be' b'mentioned' b':' b'twenty' b'per' b'due' b'to' b'1912' b'(' b'1960' b')' b',' b'all'
    b'of' b'which' b'are' b'common' b',' b'county' b',' b'Zimbabwe' b'or' b'have' b'its' b'connection' b'with' b'2' b'Conditions' b',' b'and' b'still' b'continuously' b'fits'
    b'or' b'Clown' b'infections' b'Published' b'as' b'a' b'<unk>' b'.' b'These' b'large' b'foals' b'measuring' b'involve' b'preserved' b'rodents' b'during' b'these' b'directions' b',' b'with'
    b'fries' b'and' b'greater' b'oxide' b'with' b'both' b'<unk>' b'.' b'The' b'winning' b'agarics' b'will' b'be' b'harassed' b'in' b'reality' b'.' b'The' b'snakes' b'are'
    b'based' b'around' b'rural' b'maintenance' b'Orioles' b'with' b'a' b'Aramaic' b'device' b'.' b'The' b'fall' b'of' b'Ceres' b'thereafter' b'Makovicky' b'has' b'played' b'in' b'2006'
    b'and' b'original' b'similarities' b'.' b'This' b'sector' b'has' b'risen' b'into' b'Zoological' b'<unk>' b',' b'an' b'<unk>' b'field' b'of' b'Plus' b',' b'on' b'Asia'
    b'17' b'by' b'1956' b',' b'although' b'in' b'2010' b'it' b'was' b'better' b'was' b'passed' b'by' b'a' b'plane' b'of' b'runners' b'with' b'the' b'Republic'
    b'plum' b'Leonard' b'(' b'now' b'named' b'Free' b'Arab' b'Church' b')' b'.' b'Similarly' b',' b'Iago' b'Baptist' b'levels' b'damage' b'from' b'about' b'flows' b'in'
    b'1908' b'.' b'The' b'university' b'and' b'Mogadishu' b'mold' b'will' b'be' b'improved' b'until' b'part' b'of' b'Greece' b'and' b'copulation' b'Nordic' b'1976' b'.' b'Precipitation'
    b'continued' b'to' b'indicate' b'that' b'posters' b'had' b'not' b'been' b'of' b'<unk>' b',' b'as' b'they' b'used' b'as' b'they' b'feed' b'on' b'black' b'conditions'
    b',' b'so' b'these' b'winning' b'divides' b'believed' b'if' b'it' b'has' b'user' b'contraception' b'to' b'be' b'abolished' b'.' b'This' b'type' b'its' b'observations' b'from'
    b'<unk>' b',' b'1963' b',' b'temperate' b'species' b'were' b'depend' b'in' b'weekend' b',' b'while' b'drug' b'plum' b'Hill' b'Hall' b'(' b'<unk>' b'\xe0\xa5\x8d' b'June'
    b',' b'the' b'5th' b'2nd' b'Regiment' b'and' b'Australian' b'368' b'version' b')' b'suggests' b'that' b'Odaenathus' b'are' b'redundant' b'.' b'Additionally' b',' b'unlike' b'slang'
    b',' b'most' b'of' b'Spanky' b"'s" b'victory' b'were' b'.' b'<eos>' b'The' b'island' b'thought' b'that' b'Ravana' b'had' b'some' b'other' b'as' b'retro' b','
    b'without' b'numerous' b'full' b'hop' b'vessels' b'as' b'an' b'net' b'are' b'very' b'<unk>' b'.' b'<eos>' b'A' b'planet' b'in' b'which' b'Operation' b'<unk>' b'stages'
    b'of' b'MW' b'dominated' b'Philadelphia' b'or' b'possibly' b'burned' b'as' b'Director' b'of' b'their' b'Steeger' b'.' b'However' b',' b'there' b'are' b'generally' b'<unk>' b'plans'
    b'to' b'hunt' b'mass' b'chromosomal' b'monuments' b'between' b'1649' b'and' b'similar' b'milk' b'<unk>' b'@-@' b'like' b'predators' b',' b'sometimes' b'as' b'to' b'lay' b','
    b'they' b'are' b'afraid' b'of' b'rifle' b',' b'food' b',' b'enclosed' b',' b'more' b'rock' b',' b'lifelong' b',' b'so' b'property' b'they' b'electrically' b','
    b'usually' b'which' b'roost' b'to' b'do' b'so' b'or' b'other' b'islands' b'.' b'However' b',' b'it' b'is' b'evidence' b'that' b'The' b'planet' b"'s" b'northern'
    b'planet' b'is' b'garnered' b'@-@' b'recorded' b'(' b'exclusively' b'as' b')' b'developed' b'lets' b'30' b'by' b'4' b'\xc2\xb0' b'F' b'(' b'3' b'\xc2\xb0' b'F'
    b')' b'per' b'per' b'in' b'the' b'<unk>' b',' b'so' b'by' b'the' b'sundial' b'Mycena' b'<unk>' b'is' b'officially' b'found' b'played' b'stout' b'in' b'the'
    b'same' b'region' b'.' b'In' b'Arizona' b',' b'predator' b'purpose' b'enrolled' b'on' b'a' b'village' b'of' b'750' b'%' b'of' b'Madison' b'host' b'.' b'Almost'
    b'example' b'some' b'yellow' b'small' b'birds' b'became' b'for' b'to' b'remove' b'them' b'back' b'to' b'this' b'size' b',' b'and' b'they' b'do' b'also' b'become'
    b'a' b'group' b'with' b'rapid' b'or' b'food' b'220' b'books' b',' b'or' b'as' b'an' b'symmetrical' b'variation' b'.' b'The' b'basidia' b'are' b'currently' b'considered'
    b'by' b'Lanois' b';' b'most' b'of' b'which' b'might' b'be' b'so' b'angry' b'.' b'They' b'require' b'handling' b'prey' b'@-@' b'shaped' b'(' b'now' b'24'
    b'\xe2\x80\x93' b'15' b'1854' b')' b',' b'wide' b'abundance' b'accounts' b'(' b'5' b'sq' b'metres' b')' b';' b'another' b'of' b'about' b'any' b'other' b'innovative'
    b'season' b'in' b'manufacturing' b'areas' b',' b'sometimes' b'expecting' b'the' b'lens' b'foraging' b'by' b'Catholic' b'legs' b',' b'each' b'of' b'which' b'are' b'particularly' b'8'
    b'@.@' b'5' b'metres' b'(' b'2' b'@.@' b'5' b'in' b')' b'at' b'<unk>' b'when' b'old' b'birds' b'occur' b'during' b'the' b'<unk>' b',' b'and'
    b'a' b'62' b'@-@' b'nuclei' b'up' b'out' b'of' b'males' b'.' b'<unk>' b'for' b'young' b'birds' b'rose' b'in' b'a' b'show' b'during' b'Transportation' b','
    b'which' b'can' b'deposit' b'<unk>' b'to' b'do' b'so' b'.' b'This' b'species' b'increased' b'for' b'little' b'dwarfs' b'across' b'an' b'cave' b'or' b'of' b'their'
    b'<unk>' b'.' b'Upon' b'most' b'example' b'being' b'plagued' b',' b'there' b'are' b'a' b'range' b'of' b'minor' b',' b'open' b'(' b'matter' b')' b'having'
    b'been' b'a' b'<unk>' b'to' b'song' b'with' b'mushroom' b'trees' b'in' b'many' b'islands' b'.' b'When' b'this' b'bird' b'is' b'beside' b',' b'it' b'can'
    b'be' b'nominated' b'.' b'As' b'they' b'may' b'regain' b'signature' b'plants' b',' b'food' b'or' b'require' b'many' b'inhabitants' b'themselves' b',' b'<unk>' b',' b'humans'
    b',' b'<unk>' b',' b'Jean' b',' b'XeO' b',' b'and' b'the' b'ocean' b',' b'<unk>' b'grass' b'.' b'convenient' b'spore' b'sites' b'amounted' b'to' b'<unk>'
    b',' b'proteins' b',' b'continuing' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'Japan' b',' b'<unk>' b',' b'Philosophy' b',' b'brain' b',' b'and'
    b'migratory' b',' b'Carey' b'flies' b'them' b'to' b'their' b'kakapo' b',' b'but' b'<unk>' b'into' b'it' b',' b'allowing' b'many' b'<unk>' b'.' b'In' b'addition'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 236.4
    loss: 5.168
    elapsed time (seconds): 164.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  45.899 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
