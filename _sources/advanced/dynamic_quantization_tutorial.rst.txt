.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'while' b'her' b'hometown' b'<unk>' b'from' b'the' b'rebellious' b'convict' b'is' b'a' b'platypus' b'.' b'About' b'a' b'average' b'of' b'stibnite' b'games' b','
    b'Rose' b'hearth' b'issued' b'sociology' b'of' b'students' b',' b'they' b'were' b'not' b'noticeable' b'@-@' b'torn' b',' b'but' b'by' b'its' b'final' b'paratroopers' b'of'
    b'its' b'range' b'1710' b'in' b'The' b'events' b'.' b'<eos>' b'The' b'writer' b'of' b'Dench' b'achieved' b'Ceres' b'as' b'James' b'Giant' b',' b'a' b'writer'
    b'that' b'Sitriuc' b'became' b'likely' b'to' b'anesthetic' b'the' b'spouting' b'law' b'rather' b'than' b'discovering' b'more' b'much' b'priority' b';' b'but' b'by' b'the' b'coven'
    b'that' b'Ceres' b'drew' b'the' b'more' b'elaborate' b'heir' b'of' b'Masters' b',' b'players' b'forward' b'to' b'implement' b'bad' b',' b'to' b'how' b'Mode' b'can'
    b'be' b'works' b'.' b'<eos>' b'The' b'amount' b'of' b'first' b'institution' b'in' b'video' b'sessions' b'is' b'an' b'issue' b'which' b'a' b'planet' b'Magdalen' b','
    b'giving' b'by' b'too' b'certain' b'when' b'of' b'all' b'<unk>' b',' b'so' b'a' b'bird' b'is' b'not' b'a' b'hub' b'that' b'he' b'weakened' b'through'
    b'academics' b'who' b'was' b'so' b'satisfying' b'to' b'reach' b'the' b'asteroid' b'shop' b'in' b'a' b'symbol' b'necropolis' b'worldwide' b'.' b'It' b'also' b'campaigned' b'up'
    b'campaigning' b',' b'but' b'this' b'has' b'published' b'traditional' b'consumed' b'and' b'opposing' b'masonry' b'teams' b'by' b'hill' b'<unk>' b'(' b'indeed' b'grasped' b'as' b'EU'
    b'/' b'93' b')' b'for' b'his' b'87th' b'dollar' b'and' b'dying' b'honor' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Programme' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'country' b'(' b'Karnataka' b')' b'is' b'by' b'upright' b'has' b'sold' b'about' b'10' b'%' b'of' b'a' b'relatively' b'one' b'@-@' b'scale' b'family'
    b'(' b'also' b'difficult' b'only' b')' b',' b'one' b'Branch' b',' b'and' b'display' b'numbers' b'.' b'England' b'researchers' b'and' b'birds' b'as' b'expensive' b','
    b'sickle' b',' b'lacking' b'into' b'four' b'or' b'four' b'times' b'.' b'The' b'erect' b'sacristy' b'(' b'Still' b'that' b'Qedar' b'looks' b'straightforward' b'greater' b'females'
    b',' b'/' b'2' b'New' b'4' b'exceptional' b')' b',' b'as' b'4' b'%' b'of' b'1' b'@.@' b'3' b'.' b'In' b'Mogadishu' b',' b'this'
    b'of' b'the' b'creation' b'of' b'small' b',' b'New' b'Zealand' b'features' b'caesium' b'conventions' b'(' b'<unk>' b'and' b'Uyghur' b'up' b',' b'with' b'either' b'measured'
    b'with' b'200' b'of' b'@-@' b'pound' b',' b'and' b'Hampshire' b'1' b')' b'undergo' b'a' b'more' b'brilliant' b'characteristic' b'in' b'well' b'.' b'The' b'kakapo'
    b'tends' b'to' b'be' b'even' b',' b'make' b'an' b'game' b'to' b'hangs' b',' b'and' b'the' b'hope' b'with' b'which' b'no' b'Secretary' b'in' b'Venus'
    b'feeds' b'onto' b'the' b'dodo' b'was' b'put' b'only' b'as' b'.' b'Teams' b'areas' b'should' b'be' b'contracted' b'by' b'others' b'to' b'residents' b',' b'as'
    b'being' b'prevent' b'as' b'limited' b'.' b'charging' b'does' b'not' b'contribute' b'hard' b'flocks' b'as' b'pure' b'starlings' b'.' b'A' b'function' b'of' b'specific' b'structures'
    b'when' b'by' b'this' b'other' b'core' b',' b'it' b'does' b'not' b'mean' b'yew' b'species' b'of' b'the' b'<unk>' b'ice' b'listed' b'directly' b'.' b'Five'
    b'effort' b',' b'such' b'from' b'undirected' b'insectivorous' b',' b'they' b'<unk>' b'association' b'the' b'another' b'side' b'when' b'they' b'supports' b'through' b'an' b'phenomenon' b'to'
    b'produce' b'their' b'numbers' b',' b'to' b'<unk>' b',' b'probably' b'caused' b'by' b'some' b'others' b'outlaws' b'.' b'Throughout' b'other' b'other' b'theory' b',' b'nor'
    b'the' b'Itzam' b'arbitrary' b'genitive' b'was' b'desired' b'.' b'<eos>' b'Hudaydah' b',' b'today' b'affected' b'by' b'publishers' b',' b'have' b'an' b'village' b',' b'and'
    b'Stillwater' b'.' b'However' b',' b'a' b'five' b'@-@' b'predator' b'mention' b'<unk>' b'invertebrates' b'and' b'has' b'cheesy' b'of' b'males' b'how' b'also' b'lives' b'several'
    b'per' b'distribution' b':' b'they' b'think' b',' b'living' b'on' b'the' b'morning' b',' b'arms' b'for' b'branched' b',' b'and' b'there' b'is' b'an' b'tied'
    b'of' b'they' b'totaled' b'small' b'spots' b'to' b'fly' b'for' b'one' b'in' b'the' b'destruction' b'of' b'Universities' b'.' b'<eos>' b'For' b'example' b',' b'presses'
    b',' b'predation' b',' b'or' b'an' b'sharp' b'or' b'dressings' b'inhabit' b'.' b'<eos>' b'In' b'the' b'other' b'4He' b'apprehends' b'the' b'crest' b'or' b'recall'
    b',' b'however' b',' b'Habermas' b'jumps' b',' b'as' b'well' b'as' b'off' b'ranges' b'and' b'are' b'associated' b'every' b'increasingly' b'better' b'<unk>' b'who' b'left'
    b'a' b'bird' b'.' b'Their' b'travels' b'of' b'1891' b'is' b'quite' b'torn' b'.' b'In' b'virtually' b'these' b'.' b'<unk>' b'trees' b'often' b'involve' b'their'
    b'wings' b',' b'Canaan' b',' b'and' b'uterine' b'headpiece' b'.' b'He' b'then' b'toys' b'grows' b',' b'so' b'provided' b'structures' b'to' b'undergo' b'large' b'the'
    b'oxen' b',' b'even' b'stretching' b'into' b'a' b'extra' b'distance' b'.' b'Overall' b',' b'it' b'enters' b'pairs' b'of' b'a' b'eye' b'that' b'receives' b'sexes'
    b'above' b'them' b'some' b'always' b'.' b'If' b'this' b'suggests' b'may' b'be' b'found' b'after' b',' b'lamps' b'clothes' b'towards' b'Cabildo' b'Agron' b'killed' b'a'
    b'body' b'for' b'scaled' b'.' b'They' b'are' b'common' b'when' b'they' b'speak' b'to' b'induce' b'the' b'island' b',' b'and' b'does' b'not' b'produce' b'to'
    b'attract' b'the' b'inner' b'behavior' b'.' b'Common' b'body' b'sex' b'are' b'unknown' b'from' b'250' b'\xe2\x80\x93' b'4' b'the' b'main' b'species' b',' b'with' b'those'
    b'sole' b'factors' b'for' b'a' b'average' b'.' b'The' b'neck' b'fuses' b'most' b'of' b'them' b',' b'and' b'more' b'Carty' b'commonly' b'recommended' b'up' b'%'
    b'from' b'a' b'male' b'or' b'a' b'female' b'or' b'and' b'can' b'be' b'dark' b'for' b'a' b'pipes' b'in' b'Glastonbury' b'and' b'extending' b'as' b'destroyed'
    b'.' b'nocturnal' b'worms' b'killed' b'of' b'increased' b'986' b'population' b'trees' b'are' b'more' b'operas' b'.' b'These' b'species' b'are' b'influence' b'but' b'fuse' b'or'
    b'restrictions' b',' b'rather' b'than' b'80' b'kilometres' b',' b'four' b'grayish' b'or' b'chicks' b'.' b'Kody' b'first' b'westerlies' b',' b'and' b'if' b',' b'down'
    b'them' b'they' b'get' b',' b'even' b'people' b'and' b'a' b'mark' b'fibers' b'columnist' b'raised' b'hue' b'(' b'does' b'any' b'body' b'other' b'or' b'scientific'
    b'.' b'The' b'house' b'has' b'initially' b'nothing' b'5' b'\xe2\x80\x93' b'5' b')' b'lived' b'in' b'front' b'of' b'other' b'males' b'(' b'e.g.' b'either' b'shown'
    b',' b'which' b'no' b'calcium' b'sections' b',' b'such' b'as' b'poles' b')' b'.' b'On' b'a' b'large' b'tandem' b',' b'she' b'declared' b'lawyers' b'from'
    b'original' b'or' b'high' b'in' b'New' b'Zealand' b'.' b'There' b'are' b'no' b'number' b'of' b'nestlings' b'in' b'any' b'consort' b'(' b'nine' b'as' b'French'
    b'<unk>' b')' b',' b'during' b'one' b'Experimental' b'Conservation' b"'" b'(' b'advance' b'gani' b')' b'.' b'The' b'communal' b'churches' b'of' b'four' b'more' b'longer'
    b'breeding' b'compounds' b'\xe2\x80\x93' b'are' b'breaking' b'more' b'than' b'5' b'@.@' b'5' b'.' b'<eos>' b'masses' b'indicate' b'that' b'groups' b'are' b'often' b'plausible' b'to'
    b'muster' b'its' b'prosperity' b'.' b'<eos>' b'Treaty' b"'s" b'imperfections' b'were' b'the' b'0' b'fingers' b'from' b'three' b'movement' b',' b'although' b'the' b'kakapo' b'increases'
    b'directly' b'bear' b'observations' b'within' b'remarkable' b'decline' b'.' b'The' b'clan' b'of' b'collecting' b'gryllotalpa' b'are' b'slightly' b'more' b'exceptional' b'.' b'As' b'prone' b'to'
    b'wind' b'size' b',' b'they' b'will' b'be' b'possibly' b'known' b'.' b'When' b'the' b'inhalation' b'at' b'night' b',' b'they' b'leave' b'unveiled' b'them' b'into'
    b'(' b'spore' b'DAG' b')' b',' b'a' b'female' b'<unk>' b'venom' b'starling' b',' b'and' b'Scorsese' b'soon' b'numbered' b'cruzi' b'/' b'has' b'it' b'low'
    b'How' b'shp' b'or' b'explain' b'leaves' b'much' b'time' b',' b'so' b'it' b'does' b'"' b'live' b'so' b',' b'with' b'a' b'desire' b'of' b'methods'
    b'to' b'way' b'there' b',' b'they' b'like' b'like' b'great' b'or' b'also' b'Low' b'sex' b'"' b'.' b'upwards' b'is' b'also' b'widespread' b'with' b'foraging'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.8
    loss: 5.168
    elapsed time (seconds): 154.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  25.931 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
