.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'The' b'implements' b'was' b'unknown' b'by' b'ranked' b'by' b'75' b'blockade' b'\xe2\x80\x94' b'however' b'.' b'<eos>' b'While' b'it' b'was' b'identified' b',' b'there'
    b'are' b'no' b'evidence' b'in' b'society' b'by' b'historical' b'game' b',' b'along' b'with' b'him' b'that' b',' b'She' b'flows' b'in' b'submission' b'across' b'the'
    b'belly' b'in' b'temperate' b'locations' b'.' b'Recent' b'culture' b'may' b'be' b'seen' b'as' b'they' b'appreciate' b'service' b'once' b'on' b'<unk>' b',' b'alder' b','
    b'rump' b',' b'and' b'<unk>' b'or' b'Important' b'election' b'.' b'Later' b'in' b'Germany' b',' b'the' b'fact' b'of' b'Assouline' b',' b'and' b'some' b'violations'
    b'each' b'be' b'on' b'the' b'same' b'original' b'starling' b'for' b'once' b'trauma' b'.' b'In' b'this' b'image' b',' b'it' b'could' b'be' b'access' b'to'
    b'fate' b'that' b'make' b'up' b'to' b'the' b'river' b'as' b'they' b'lose' b'staying' b'competing' b'in' b'about' b'2' b'or' b'a' b'orbit' b'each' b'to'
    b'documented' b'across' b'highway' b'will' b'be' b'honorable' b'.' b'<eos>' b'\xe2\x80\x9d' b'faced' b'the' b'kakapo' b'for' b'their' b'scope' b',' b'tying' b'the' b'Presentation' b'of'
    b'John' b',' b'and' b'are' b'as' b'the' b'most' b'naturally' b'planet' b'.' b'O' b"'Malley" b'is' b'aspect' b'of' b'eggs' b':' b'the' b'other' b'being'
    b'a' b'gill' b'planet' b',' b'and' b'contains' b'12th' b'mentioned' b'in' b't' b'and' b'give' b'the' b'Olympic' b'childcare' b'.' b'In' b'the' b'case' b'of'
    b'winter' b',' b'it' b'will' b'manage' b'innovator' b'and' b'the' b'Luoyang' b'Kingdom' b'outnumbered' b'their' b'reduction' b'.' b'<unk>' b'Hobson' b'might' b'be' b'had' b'bound'
    b'5' b'in' b'(' b'2' b'@.@' b'5' b'points' b')' b'forward' b',' b'or' b'a' b'southwest' b'of' b'main' b'plant' b'birds' b'in' b'any' b'groups'
    b'.' b'The' b'female' b'broke' b'inland' b',' b'but' b'ultimately' b'in' b'her' b'gamma' b'diameter' b'until' b',' b'at' b'peak' b':' b'20' b'.' b'30'
    b'eggs' b'are' b'also' b'known' b'at' b'least' b'every' b'dark' b'winter' b'.' b'The' b'deal' b'is' b'until' b'sight' b'of' b'those' b'fledging' b',' b'in'
    b'case' b'having' b'stirred' b'or' b'within' b'a' b'short' b'litter' b'system' b'.' b'A' b'trade' b'spinal' b',' b'which' b'now' b'usually' b'directly' b'been' b'made'
    b'by' b'mushroom' b',' b'organic' b',' b'and' b'interstellar' b'dust' b'.' b'They' b'may' b'adopt' b'that' b'such' b'a' b'eye' b'would' b'also' b'be' b'fusing'
    b'to' b'elevate' b'birds' b',' b'most' b'of' b'the' b'other' b'mountain' b'tanks' b',' b'typically' b'expensive' b',' b'therefore' b'was' b'arising' b'.' b'When' b'for'
    b'example' b',' b'it' b'was' b'gradually' b'down' b'Western' b'peaks' b'of' b'sentence' b'farms' b'.' b'<eos>' b'stalks' b'returns' b'into' b'common' b'starlings' b'to' b'pluralism'
    b',' b'feed' b'trim' b'for' b'structural' b'vegetation' b'of' b'some' b'brownish' b'behaviour' b'of' b'Vermont' b',' b'retains' b'<unk>' b'on' b'Sanskrit' b',' b'sheep' b','
    b'dig' b'by' b'cavalry' b'ions' b'and' b'neon' b'offering' b'roundabout' b'.' b'<eos>' b'Since' b'tail' b',' b',' b'they' b'types' b'of' b'male' b'aphorisms' b'have'
    b'their' b'other' b'target' b'greater' b'cycle' b'.' b'<unk>' b',' b'<unk>' b',' b'dimorphic' b',' b'ignorance' b',' b'Chandra' b',' b'camouflaged' b'<unk>' b'@-@' b'green'
    b',' b'Via' b',' b'symbolically' b'and' b'burned' b',' b'depict' b'the' b'seated' b'kneeling' b'beak' b'and' b'their' b'decisions' b'are' b'once' b',' b'most' b'birds'
    b'(' b'template' b'long' b',' b'etc' b')' b',' b'age' b'images' b'and' b'D.C.' b'scholars' b'and' b'communications' b',' b'and' b'monitored' b'significantly' b'radiation' b'.'
    b'These' b'planet' b',' b'strong' b'heritage' b'living' b'as' b',' b'from' b'an' b'moment' b'mind' b'or' b'molecules' b',' b'sometimes' b'its' b'affects' b'powers' b','
    b'and' b'weapons' b'it' b'measures' b'for' b'the' b'male' b'.' b'From' b'its' b'description' b',' b'Old' b'Power' b'(' b'Elo' b')' b'Bruyn' b'Dragons' b','
    b'sometimes' b'to' b'computation' b'by' b'downright' b'brown' b'species' b'back' b'to' b'Russia' b'.' b'Common' b'herding' b'scales' b'suggests' b'that' b'powerful' b'bodies' b'in' b'clutch'
    b'habitats' b'are' b'inspiring' b',' b'so' b'their' b'better' b'idea' b'are' b'cakes' b'Command' b',' b'including' b'their' b'lack' b'of' b'other' b'populations' b'\xe2\x80\x94' b'between'
    b'Formula' b'Power' b'and' b'girlfriends' b',' b'to' b'convert' b'parts' b'of' b'among' b'plasma' b'proteins' b'.' b'The' b'Pictish' b'language' b'consists' b'of' b'their' b'<unk>'
    b'open' b',' b'lined' b'the' b'even' b'nest' b'examples' b'of' b'180' b'\xe2\x80\x93' b'5' b'in' b'(' b'48' b'mm' b')' b'or' b'a' b'village' b'Di\xe1\xbb\x87m'
    b'.' b'When' b'it' b'is' b'possible' b'to' b'be' b'distinguished' b'on' b'October' b'2' b',' b'2007' b',' b'when' b'it' b'time' b'in' b'about' b'20'
    b'%' b'of' b'the' b'year' b'.' b'<eos>' b'In' b'2004' b',' b'at' b'a' b'center' b'which' b'throughout' b'<unk>' b',' b'Florida' b',' b'producing' b'similar'
    b'chemical' b'skeletons' b',' b'NC' b'\xce\xbaB' b'does' b'not' b'be' b'affected' b'by' b'<unk>' b'imperialism' b'.' b'Chen' b'first' b'falls' b'from' b'sea' b'throughout' b'multiple'
    b'stages' b',' b'but' b'may' b'be' b'close' b'to' b'Feigenbaum' b'and' b'assemble' b'by' b'silver' b'trees' b'and' b'fissures' b'.' b'Since' b'they' b'treat' b'over'
    b'a' b'specific' b',' b'agricultural' b',' b'Axis' b'may' b'be' b'shot' b'into' b'that' b'typical' b'esteem' b',' b'and' b'using' b'global' b'reports' b',' b'the'
    b'parasite' b'spend' b'the' b'165' b'hours' b'by' b'around' b'14' b'days' b'.' b'It' b'provides' b'other' b'expressed' b'to' b'an' b'older' b'complement' b',' b'with'
    b'one' b'experiences' b'meanwhile' b'(' b'channel' b'genuine' b')' b',' b'as' b'Outer' b'as' b'B' b'beings' b',' b'and' b'flightless' b'Crowns' b'and' b'females' b'such'
    b'as' b'black' b',' b'with' b'other' b'low' b'quantity' b'and' b'measuring' b'less' b'significant' b'import' b'.' b'Yellowstone' b'can' b'be' b'only' b'carved' b'as' b'to'
    b'have' b'spread' b'bestow' b'and' b'contracting' b'as' b'it' b'is' b'SIA' b'.' b'Later' b'of' b'that' b'bird' b',' b'all' b'other' b'islands' b'drove' b'by'
    b'stands' b',' b'and' b'male' b'Pantocrator' b'would' b'be' b'distinguished' b'by' b'or' b'vulgar' b',' b'until' b'they' b'prevented' b'smoke' b'under' b'being' b'Jolliet' b'.'
    b'The' b'trek' b'where' b'calls' b'may' b'have' b'their' b'known' b'food' b'lives' b',' b'who' b'should' b'lead' b'up' b'a' b'race' b'250' b'months' b'before'
    b'they' b'may' b'be' b'physically' b'in' b'gene' b'periods' b',' b'Soval' b',' b'job' b',' b'Neversoft' b',' b'<unk>' b',' b'juice' b',' b'Hove' b'or'
    b'Aitape' b'.' b'Carcetti' b'usually' b'occur' b'into' b'an' b'American' b'decline' b'from' b'<unk>' b'and' b'begin' b'involving' b'into' b'their' b'work' b'as' b'it' b'is'
    b'trying' b'to' b'looking' b'to' b'form' b'Sitriuc' b',' b'may' b'encourage' b'an' b'link' b'@-@' b'up' b'building' b'.' b'The' b'Aramaic' b'sequence' b'differs' b'alone'
    b'about' b'the' b'peak' b'of' b'wrong' b',' b'including' b'irregular' b'subtypes' b'from' b'the' b'country' b',' b'which' b'may' b'be' b'until' b'increasing' b'fresh' b'assumption'
    b'.' b'However' b',' b'he' b'becomes' b'on' b'this' b'general' b'eye' b',' b'even' b'at' b'its' b'mating' b'body' b'classroom' b'(' b'very' b'than' b'spirit'
    b')' b'.' b'In' b'these' b'regions' b',' b'populations' b'can' b'have' b'been' b'introduced' b'to' b'this' b'passing' b'or' b'accumulate' b'vineyards' b'that' b'be' b'<unk>'
    b'or' b'open' b'.' b'Large' b'chicks' b'include' b'them' b'as' b'Dr.' b'runways' b'.' b'<eos>' b'Anek\xc4\x81ntav\xc4\x81da' b':' b'20' b'or' b'95' b'females' b',' b'20'
    b'.' b'5' b'under' b'Matagorda' b"'s" b'kakapo' b',' b'which' b'prevents' b'el' b'gastrointestinal' b'as' b'its' b'planet' b'alone' b'.' b'A' b'unsuccessful' b'cover' b','
    b'males' b',' b'highlights' b'nothing' b'or' b'their' b'legs' b',' b'represents' b'communications' b'replication' b',' b'also' b'associated' b'in' b'about' b'2' b'million' b'workers' b'after'
    b'it' b'are' b'to' b'steps' b'at' b'least' b'more' b',' b'to' b'matter' b',' b'when' b'by' b'he' b'all' b'only' b'transports' b'of' b'1834' b'.'
    b'"' b'psychology' b',' b'many' b'of' b'which' b'are' b'relation' b'to' b'the' b'prized' b'native' b'sequence' b'but' b'travel' b'appearance' b'has' b'their' b'fruit' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.3
    loss: 5.168
    elapsed time (seconds): 144.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  10.294 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
