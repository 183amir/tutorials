.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Fans' b'for' b'amateur' b'or' b'red' b'stories' b'.' b'With' b'other' b'of' b'was' b'the' b'event' b',' b'it' b'does' b'not' b'occasionally' b'so' b'disrupt'
    b'Agni' b'Studios' b',' b'not' b'about' b'over' b'21' b'%' b',' b'and' b'how' b'they' b'tried' b'much' b'fire' b',' b'Dwight' b'O' b"'Malley" b'was'
    b'able' b'to' b'find' b'\xe2\x80\x93' b'hosting' b'missions' b'(' b'equivalent' b'to' b'each' b'other' b'22' b'to' b'600' b'lb' b';' b'the' b'Pirates' b"'" b'potential'
    b'source' b'of' b'$' b'4' b'@,@' b'000' b'thousand' b'miles' b'497' b'today' b')' b'and' b'a' b'(' b'1' b'@,@' b'000' b'ft' b')' b'can'
    b'have' b'been' b'divisions' b'.' b'However' b',' b'Ross' b'ruled' b'a' b'convoy' b',' b'arguing' b'that' b'"' b'It' b'must' b'be' b'interesting' b'only' b'distal'
    b'than' b'all' b'enough' b'\xe2\x80\x94' b'the' b'point' b'of' b'most' b'man' b',' b'or' b'an' b'moves' b',' b'the' b'votes' b'of' b'this' b'last' b'stage'
    b'[' b'But' b']' b'McDonald' b'adventure' b'"' b',' b'while' b'Don' b"'Malley" b'argued' b'the' b'"' b'prolonged' b'verbal' b'Raiden' b';' b'pleasure' b'in' b'Nellie'
    b'and' b'/' b'never' b'is' b'a' b'binomial' b'allegory' b'"' b',' b'was' b'Brother' b'.' b'"' b'Film' b'rough' b'Edition' b'"' b'is' b'introduced' b'by'
    b'words' b'of' b'earlier' b'Loftleidir' b',' b'then' b'as' b'by' b'him' b'of' b'its' b'heads' b'(' b'later' b'known' b'to' b'growing' b':' b'his' b'internal'
    b'financing' b'source' b'of' b'139' b'\xe2\x80\x93' b'1960' b')' b':' b'The' b'crater' b'of' b'al' b'Beach' b'is' b'feature' b'for' b'a' b'long' b',' b'Dream'
    b'@-@' b'<unk>' b'designed' b'meaning' b',' b'Ceres' b'free' b'art' b',' b'and' b'tentative' b'plumage' b'that' b'Lindelof' b'fills' b'Alice' b"'" b'as' b'as' b'"'
    b'hers' b'up' b'by' b'an' b'funeral' b'"' b'.' b'The' b'2006' b'race' b'has' b'pointed' b'from' b'a' b'other' b'of' b'the' b'game' b'<unk>' b','
    b'causing' b'a' b'field' b'supply' b'of' b'Louisville' b',' b'work' b'.' b'When' b'the' b'kakapo' b'produces' b'his' b'ability' b'to' b'take' b'their' b'another' b'growth'
    b',' b'Illinois' b'said' b'that' b'after' b',' b'spes' b'put' b'to' b'develops' b'media' b'sex' b',' b'"' b'gala' b'@-@' b'degree' b'and' b'naked' b'"'
    b'aimed' b'with' b'meaning' b'themselves' b'replace' b'the' b'1860s' b';' b'because' b'there' b'are' b'no' b'character' b'easily' b',' b'by' b'being' b'of' b'Raffles' b'they'
    b'relied' b'and' b'better' b'minor' b'%' b'.' b'When' b'they' b'translate' b'water' b'themselves' b'and' b'until' b'they' b',' b'there' b'an' b'<unk>' b'to' b'retreat'
    b',' b'fit' b',' b'but' b'you' b"'ve" b'apparently' b'raised' b'.' b'This' b"'d" b'certainly' b'her' b'shoulders' b'is' b'@-@' b'Transylvania' b'.' b'The' b'Illinois'
    b'progression' b'Owen' b'shrine' b'also' b'cited' b'more' b'attractive' b'elements' b',' b'and' b'described' b'a' b'number' b'of' b'objects' b'.' b'<eos>' b'In' b'the' b'eighth'
    b'and' b'early' b'1980s' b',' b'the' b'<unk>' b'focus' b'in' b'the' b'same' b'name' b'where' b'<unk>' b'.' b'He' b'tries' b'to' b'expand' b'to' b'develop'
    b'the' b'law' b'to' b'have' b'their' b'solve' b'chin' b'.' b'"' b'We' b'has' b'lost' b'<unk>' b'young' b'difficulty' b'by' b'wonderful' b'exciting' b',' b'page'
    b'some' b'specifically' b',' b'and' b'a' b'post' b'@-@' b'do' b'@-@' b'welding' b'"' b'that' b'means' b'the' b'effects' b'of' b'Joe' b'Underwood' b"'s" b'fret'
    b'compared' b'to' b'the' b'right' b'divinely' b'in' b'one' b'life' b'Argentina' b'.' b'The' b'FIA' b'translation' b'addresses' b'the' b'theme' b'of' b'film' b'Walpole' b','
    b'and' b'snout' b'usually' b'Reyes' b'Christina' b'<unk>' b'magazine' b',' b'a' b'potential' b'video' b'farmer' b',' b'conductor' b'dimension' b'(' b'1992' b')' b',' b'and'
    b'<unk>' b'program' b',' b'"' b'glass' b',' b'generous' b'<unk>' b'"' b',' b'and' b'<unk>' b'layers' b'of' b'the' b'title' b'operation' b'and' b'written' b'the'
    b'spelling' b'of' b'the' b'expansion' b'beyond' b'a' b'selects' b'es' b'programme' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Prior'
    b'to' b'Flow' b',' b'CEO' b'McRae' b'of' b'The' b'Paul' b'Tribune' b'Army' b'noted' b'that' b'"' b'mobile' b'advertisement' b'like' b'smart' b'worse' b'stellar' b'presence'
    b'ever' b'continue' b'to' b'photograph' b'a' b'manuscript' b'"' b'.' b'Despite' b'an' b'array' b'of' b'historians' b'work' b',' b'the' b'number' b'of' b'competition' b'in'
    b'European' b'society' b'were' b'"' b'injured' b'"' b'with' b'"' b'long' b'"' b'that' b'combined' b'their' b'semi' b'@-@' b'final' b'work' b'was' b'"' b'reviews'
    b'or' b'fine' b'of' b'protesters' b'"' b'.' b'Regarding' b'Oxford' b'in' b'the' b'series' b'include' b'its' b'most' b'result' b'to' b'friends' b'that' b'has' b'campaigned'
    b'the' b'"' b'mountains' b'of' b'Gabon' b'imposed' b'full' b'.' b'"' b'Doctor' b'Mosley' b'supported' b'Peter' b'Yu' b"'" b'<unk>' b'Mormon' b'Ceres' b',' b'who'
    b'asked' b'comments' b'as' b'his' b'assessment' b'resident' b'as' b'One' b'as' b'the' b'other' b'short' b'Mint' b'in' b'cousins' b'.' b'The' b'<unk>' b'initially' b'claims'
    b'that' b'this' b'Miyazaki' b'Chen' b'becomes' b'a' b'membrane' b'pit' b'descends' b'and' b'even' b'with' b'its' b'Johns' b'Called' b'Hairan' b',' b'operatic' b'wards' b'of'
    b'boxing' b'.' b'The' b"'" b'king' b'of' b'Surrender' b"'" b'singing' b'died' b',' b'because' b'of' b'the' b'king' b'.' b'This' b'will' b'be' b'influenced'
    b'by' b'<unk>' b'<unk>' b'III' b',' b'which' b'has' b'on' b'the' b'third' b'floor' b'at' b'a' b'large' b'public' b'school' b'whose' b'decrease' b'in' b'the'
    b'Takes' b"'" b'"' b'The' b'mad' b'"' b'(' b'/' b'<unk>' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Charts' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'character' b'built' b'seasonally' b'by' b'Charles' b'K.' b'R.' b'Tufaro' b',' b'and' b'apparently' b'used' b'enough' b'to' b'make' b'multipurpose' b'values' b'to' b'be'
    b'the' b'supreme' b'spike' b'.' b'But' b'the' b'impurity' b'they' b'think' b'Kauffman' b'H' b'(' b'Shoop' b'o.' b'Leading' b')' b',' b'they' b'could' b'cause'
    b'three' b'racist' b'or' b'secular' b'stories' b'depending' b'on' b'the' b'retraction' b'to' b'take' b'longevity' b'.' b'About' b'two' b'years' b'old' b',' b'and' b'exists'
    b'at' b'report' b'on' b'the' b'map' b',' b'the' b'phone' b'is' b'<unk>' b'view' b';' b'Ruler' b'Mfume' b'spent' b'place' b'in' b'Franz' b'atherfieldensis' b','
    b'former' b',' b'lacking' b'Dylan' b',' b'his' b'mortal' b'desk' b'and' b'narrative' b'for' b'him' b'to' b'achieve' b'<unk>' b',' b'which' b'could' b'be' b'made'
    b'when' b'unmarried' b'running' b'to' b'his' b'prominence' b'.' b'When' b'being' b'able' b'to' b'secure' b'compartments' b',' b'they' b'knew' b'anger' b'after' b'being' b'"'
    b'destroyed' b'"' b'pm' b'.' b'<eos>' b'The' b'Catechism' b'depicted' b'legislation' b'and' b'limestone' b'stories' b',' b'appearing' b'in' b'Legends' b'in' b'Paris' b',' b'a'
    b'voice' b'that' b'tamp' b'the' b'role' b'of' b'a' b'beautiful' b'service' b'.' b'<unk>' b'"' b'weekly' b'"' b'executives' b'Springsteen' b'threw' b'newer' b'critics' b'to'
    b'increase' b'back' b'request' b',' b'having' b'some' b'adequate' b'without' b'1925' b',' b'such' b'as' b'"' b'Lat' b',' b'<unk>' b',' b'Harrisburg' b',' b'Gaskell'
    b',' b'and' b'classical' b'@-@' b'feminist' b'.' b'In' b'the' b'Kingdom' b'characterized' b'it' b'control' b'few' b'times' b'that' b'I' b'has' b'received' b'it' b'the'
    b'more' b'unsure' b'and' b'the' b'bad' b'proving' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'FISA' b'=' b'=' b'<eos>' b'<eos>' b'The' b'remake' b'ends'
    b'for' b'the' b'letters' b'Magazine' b'was' b'included' b'in' b'the' b'late' b'<unk>' b'.' b'This' b'archaeologist' b'sparked' b'as' b'being' b'possible' b'for' b'ice' b'"'
    b'slightly' b'marking' b'other' b'student' b'working' b'for' b'these' b'class' b'neutralize' b'Strickland' b'"' b',' b'although' b'<unk>' b'points' b'that' b'its' b'account' b'were' b'able'
    b'to' b'be' b'explored' b'by' b'expose' b'his' b'fall' b',' b'indicating' b'for' b'the' b'Sacred' b'Castle' b'to' b'a' b'measure' b'to' b'seize' b'in' b'size'
    b'.' b'The' b'Phoenician' b'is' b'recorded' b'after' b'step' b'to' b'<unk>' b'and' b'by' b'a' b'accomplice' b'@-@' b'bearing' b'examination' b'of' b'Mann' b'and' b'has'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.5
    loss: 5.168
    elapsed time (seconds): 148.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  15.868 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
