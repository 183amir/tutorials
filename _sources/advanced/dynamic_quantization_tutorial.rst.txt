.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'with' b'a' b'probable' b'Watershed' b'library' b'\xe2\x80\x94' b'which' b'may' b'not' b'cause' b'an' b'<unk>' b'capable' b'of' b'the' b'books' b'and' b'the' b'knowing' b'script'
    b'give' b'the' b'container' b',' b'scare' b'on' b'their' b'axis' b'.' b'The' b'sound' b'payments' b'will' b'have' b'to' b'be' b'members' b'of' b'his' b'next'
    b'innocence' b',' b'in' b'which' b'they' b'was' b'oni' b'.' b'The' b'all' b'FIA' b'recorded' b'the' b'<unk>' b'churches' b'to' b'face' b'a' b'pupil' b'.'
    b'The' b'playing' b'image' b'is' b'shorter' b'stipulated' b'in' b'humans' b'and' b'Rashid' b'in' b'India' b'to' b'have' b'the' b'starling' b"'s" b'wives' b"'s" b'kingdom'
    b'.' b'<eos>' b'The' b'<unk>' b'notes' b'blowing' b'Ceres' b'at' b'top' b'locations' b'or' b'<unk>' b'.' b'It' b'moves' b'back' b'to' b'roles' b'as' b'of'
    b'light' b'and' b'109' b'years' b'burned' b'.' b'Lasker' b'argued' b'is' b'found' b'by' b'that' b'of' b'the' b'final' b'bylaw' b'world' b'.' b'<eos>' b'Neighbors'
    b'has' b'not' b'been' b'known' b'as' b'recognition' b'of' b'athletics' b',' b'temperate' b',' b'I' b'he' b'caught' b'in' b'Funerary' b'Services' b'and' b'well' b'worms'
    b'Middle' b'earnest' b'section' b'by' b'firing' b'his' b'spouse' b'.' b'It' b'is' b'more' b'electronegative' b'involved' b'in' b'this' b'period' b',' b'most' b'figures' b'with'
    b'Fourteen' b'it' b',' b'or' b',' b'over' b'<unk>' b'.' b'victim' b'Keats' b'decided' b'to' b'have' b'lauded' b'the' b'party' b'@-@' b'shape' b'amongst' b'bohemica'
    b',' b'and' b'are' b'generally' b'known' b'.' b'Ceres' b'carried' b'them' b'to' b'crops' b'became' b'heavily' b'dead' b'.' b'When' b'these' b'<unk>' b'is' b'those'
    b'of' b'their' b'male' b',' b'pre' b'@-@' b'tailed' b'miner' b'bodies' b'solidified' b',' b'within' b'example' b',' b'hands' b',' b'<unk>' b',' b'and' b'potatoes'
    b',' b'featuring' b'Matagorda' b'\xe2\x80\x94' b'feed' b'during' b'the' b'1912' b'Crusaders' b'.' b'These' b'starlings' b'make' b'cover' b'problems' b'as' b'a' b'ordinary' b'tool' b'of'
    b'a' b'barrels' b',' b'and' b'as' b'an' b'asteroid' b'study' b'and' b'<unk>' b',' b'ripped' b'call' b'up' b'.' b'They' b'model' b'juveniles' b',' b'taking'
    b'the' b'case' b'to' b'continue' b'pattern' b'.' b'Once' b'they' b'acknowledged' b'only' b'an' b'little' b'acyclic' b'desires' b',' b'just' b'still' b'deity' b'.' b'Some'
    b'GTX' b'officials' b'are' b'low' b'from' b'the' b'chest' b'and' b'probably' b'delightful' b'.' b'The' b'male' b'of' b'Kawai' b"'ll" b'"' b'small' b'freedom' b'should'
    b'mount' b'coffeehouse' b'Stegosauridae' b'"' b',' b'with' b'conjunction' b'by' b'oxide' b',' b'withdrawing' b'her' b',' b'taking' b'all' b'over' b'which' b'may' b'have' b'Fay'
    b'Crash' b'Omar' b'.' b'They' b'yet' b'gave' b'in' b'the' b'wooing' b'regions' b'that' b'play' b'though' b'treaties' b',' b'providing' b'them' b'to' b'prevent' b'them'
    b'.' b'While' b'this' b'bird' b'is' b'induce' b'they' b'knew' b'they' b'are' b'having' b'research' b'.' b'<eos>' b'In' b'the' b'six' b'high' b'layers' b','
    b'common' b'starlings' b'was' b'due' b'to' b'related' b'species' b'in' b'the' b'<unk>' b',' b'with' b'only' b'15' b'steals' b'.' b'Extensive' b'donations' b'are' b'well'
    b'resurrected' b',' b'as' b'opposed' b'it' b'that' b'they' b'were' b'Oasis' b'model' b'in' b'tale' b'.' b'They' b'measure' b'outer' b'female' b'plant' b',' b'talents'
    b'for' b'their' b'access' b'to' b'agaric' b'.' b'Once' b'so' b'other' b',' b'they' b'continued' b'to' b'gain' b'face' b'.' b'O' b'One' b'labor' b'is'
    b'edited' b'by' b'Puritans' b'before' b'they' b'.' b'This' b'character' b'larvae' b'is' b'measure' b'other' b'flame' b'damage' b'\xe2\x80\x94' b'with' b'many' b'white' b'such' b'for'
    b'letters' b',' b'either' b'standing' b'times' b'.' b'Furthermore' b',' b'they' b'may' b'be' b'collected' b'at' b'a' b'estimated' b'sea' b'possible' b'flight' b'.' b'<eos>'
    b'Civilian' b'quotes' b'observations' b'are' b'increasingly' b'similar' b'to' b'any' b'eye' b"'s" b'<unk>' b',' b'opening' b'Haymarket' b'@-@' b'shaped' b'trees' b',' b'since' b'others'
    b'are' b'useful' b'to' b'constantly' b'an' b'break' b'.' b'A' b'wife' b'not' b'participate' b'on' b'the' b'first' b'three' b'other' b'spots' b'in' b'adults' b','
    b'its' b'well' b'relative' b',' b'Louisiana' b',' b'<unk>' b',' b'renting' b':' b'Large' b'males' b',' b'police' b'depth' b',' b'of' b'cells' b',' b'some'
    b'common' b'casts' b'short' b'than' b'.' b'Its' b'common' b'starling' b',' b'(' b'i.e.' b'@-@' b'Heinrich' b')' b',' b'represents' b'without' b'humans' b',' b'can'
    b'be' b'consistent' b'for' b'any' b'more' b'short' b'prey' b'or' b'martial' b'starlings' b'.' b'Until' b'spring' b'efforts' b',' b'it' b'had' b'no' b'ceremonial' b'convection'
    b'and' b'fixed' b'sponsorship' b'to' b'adults' b'riding' b'a' b'research' b'with' b'Scully' b'may' b'only' b'undergo' b'his' b'position' b'.' b'<unk>' b'as' b'they' b'feed'
    b'throughout' b'one' b'childhood' b',' b'<unk>' b'for' b'her' b'surface' b'white' b'system' b'.' b'There' b'are' b'also' b'a' b'tracts' b'about' b'hasten' b'.' b'Despite'
    b'this' b'same' b'example' b',' b'they' b'will' b'return' b'to' b'as' b'it' b'plants' b',' b'a' b'<unk>' b"'awiil" b',' b'and' b'<unk>' b'@-@' b'rich'
    b'union' b'.' b'<eos>' b'Moreover' b',' b'the' b'kakapo' b'characteristics' b'too' b'moderate' b'during' b'over' b'War' b'I' b',' b'taking' b'a' b'mild' b'document' b'of'
    b'#' b'10' b'on' b'the' b'pulling' b'or' b'ground' b'hand' b'.' b'accelerating' b'are' b'<unk>' b'.' b'It' b'carbonate' b'\xe2\x86\x92' b'Brown' b',' b'which' b'may'
    b'have' b'are' b'carved' b'in' b'fixtures' b',' b'often' b'occasionally' b'<unk>' b'"' b'Bocks' b'"' b',' b'and' b'they' b'may' b'have' b'yields' b'wings' b'to'
    b'make' b',' b'be' b'introduced' b'to' b'star' b'trees' b'in' b'her' b'Renaissance' b'.' b'As' b'any' b'technique' b'usually' b'resolved' b',' b'Ancona' b'may' b'be'
    b'nuclei' b'in' b'Africa' b',' b'as' b'it' b"'re" b'<unk>' b'for' b'that' b',' b'very' b'to' b'Semaphore' b',' b'<unk>' b',' b'<unk>' b'(' b'Slovenes'
    b')' b',' b'hoc' b'to' b'produce' b',' b'power' b'except' b',' b'storage' b'or' b'dark' b'broods' b'.' b'If' b'Historians' b'eat' b',' b'they' b'tell'
    b'to' b'be' b'used' b',' b'or' b'even' b'instead' b'bruising' b'through' b'864' b'.' b'In' b'the' b'Southeast' b'chromosomes' b',' b'construction' b'products' b'down' b'as'
    b'they' b'may' b'have' b'phylogeny' b'towards' b'length' b'by' b'parts' b'of' b'birds' b',' b'as' b'they' b'can' b'be' b'south' b'looks' b'in' b'relation' b'.'
    b'<unk>' b'digging' b'in' b'various' b'densely' b'growth' b'from' b'Mars' b',' b'when' b'defense' b'reveals' b'common' b'wheatgrass' b'hours' b'which' b'mice' b'also' b'accounts' b'that'
    b'a' b'male' b'energy' b'leaves' b'into' b'the' b'spectroscopic' b'territories' b'.' b'The' b'eggs' b'damage' b'do' b'not' b'eat' b'results' b'.' b'Large' b'starlings' b'must'
    b'be' b'seen' b'to' b'be' b'known' b'to' b'cause' b'items' b'in' b'their' b'tree' b',' b'while' b'they' b'could' b'defended' b'it' b'in' b'a' b'barrier'
    b'after' b'they' b'possesses' b'in' b'.' b'They' b'of' b'nest' b'outlets' b'were' b'seen' b',' b'running' b'for' b'similar' b'food' b'alone' b'during' b'the' b'nuclear'
    b'pore' b',' b'around' b'which' b'they' b'bearing' b'attention' b'to' b'landowner' b'within' b'occupied' b'.' b'Even' b'though' b'they' b'do' b'no' b'bronze' b',' b'they'
    b'may' b'eat' b'many' b'weight' b',' b'as' b'instead' b'of' b'the' b'punishment' b'of' b'Tennessee' b'.' b'Only' b'this' b'female' b',' b'centers' b'may' b'occur'
    b'in' b'Neversoft' b'to' b'procure' b'because' b'the' b'food' b'mercury' b'is' b'unclear' b'.' b'The' b'eggs' b'were' b'one' b'of' b'the' b'old' b'<unk>' b'changes'
    b',' b'and' b'the' b'island' b'has' b'ecological' b'glucose' b',' b'a' b'adolescent' b'(' b'affecting' b'aristocratic' b'feathers' b')' b'that' b'are' b'cleared' b'to' b'produce'
    b'hundreds' b'of' b'interviews' b'.' b'If' b'<unk>' b'all' b'them' b'involving' b'<unk>' b',' b'populations' b'applied' b'in' b'blood' b'and' b'G' b'for' b'the' b'other'
    b'other' b'description' b',' b'and' b'they' b'have' b'no' b'diameter' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Ancient' b'authors'
    b'federations' b'the' b'Pontprennau' b'populations' b'(' b'adjacent' b'paramount' b'spine' b'serve' b'as' b'belongs' b'to' b'distinctive' b'cats' b'of' b'magnificent' b'such' b'as' b'artistic' b'Moon'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.5
    loss: 5.168
    elapsed time (seconds): 146.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  7.762 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
