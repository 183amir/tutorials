.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'David' b'The' b'Captain' b"'s" b'biographer' b'Routes' b'D.C.' b',' b'and' b'the' b'3' b'@,@' b'440' b'in' b'brightest' b'and' b'a' b'turning' b'carriage' b'tuned'
    b'to' b'trance' b'the' b'team' b"'s" b'own' b',' b'and' b'extinct' b'religious' b'opportunities' b',' b'a' b'fibrous' b'threat' b'pertaining' b'to' b'convince' b'$' b'2'
    b'@,@' b'000' b'.' b'East' b'eSport' b'complete' b'was' b'engaged' b'in' b'the' b'Presidential' b'Apocalypse' b',' b'which' b'was' b'based' b'on' b'the' b'23' b'Juliet'
    b'<unk>' b'House' b'True' b'Race' b';' b'it' b'appears' b'an' b'detailed' b'mixture' b'of' b'natural' b'or' b'commercial' b'traffic' b'.' b'He' b'Muhammad' b'only' b'the'
    b'natural' b'attendees' b'or' b'Buffy' b'a' b'bonus' b'texture' b'firmly' b'including' b'Portable' b'lips' b'dust' b',' b'meaning' b'B' b'from' b'NATO' b',' b'on' b'the'
    b'Zeitung' b'from' b'the' b'guerrilla' b'pew' b'.' b'In' b'1534' b',' b'she' b'exploit' b'the' b'first' b'<unk>' b'Biology' b',' b'having' b'elevated' b'shelters' b':'
    b'On' b'25' b'March' b'1874' b',' b'to' b'6' b'@.@' b'53' b'degrees' b'and' b'Pat' b'Stereum' b'(' b'69' b'March' b'2008' b')' b',' b'<unk>'
    b'<unk>' b',' b'and' b'mistakenly' b'@-@' b'gravity' b'(' b'police' b',' b'1911' b')' b',' b'and' b'Reality' b'.' b'These' b'works' b'make' b'for' b'fewer'
    b'damaging' b'levels' b'in' b'the' b'region' b',' b'as' b'significant' b'information' b'are' b'dedicated' b'to' b'do' b'so' b'hero' b'his' b'rigging' b'.' b'He' b'insisted'
    b'its' b'counterpart' b'as' b'of' b'vice' b',' b'which' b'lives' b'impressive' b'to' b'Tiberias' b':' b'Born' b',' b'or' b'cares' b'they' b'are' b'being' b'unused'
    b',' b'though' b'he' b'would' b'pitch' b'to' b'deteriorate' b'as' b'he' b'fall' b'on' b'a' b'affiliates' b'to' b'end' b'.' b'I' b'canons' b',' b'for'
    b'example' b',' b'on' b'throne' b'.' b'The' b'bird' b'was' b'<unk>' b'with' b'his' b'owner' b',' b'Strange' b'@-@' b'CCTV' b'@-@' b'old' b'Police' b'exploited'
    b'by' b'<unk>' b'in' b'the' b'Walsh' b'<unk>' b'Nettles' b',' b'which' b'with' b'his' b'car' b'will' b'also' b'"' b'think' b'her' b'"' b'wording' b'only'
    b'known' b'as' b'feared' b'the' b'other' b'or' b'a' b'worried' b'<unk>' b'and' b'even' b'offer' b'with' b'patients' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Location'
    b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'The' b'The' b'Annals' b'of' b'Politics' b',' b'about' b'10' b'%' b'in' b'the' b'Victorian' b'stations' b'has'
    b'a' b'siege' b'of' b'six' b'short' b'ranks' b'education' b'.' b'As' b'repaid' b'his' b'length' b',' b'he' b'still' b'featured' b'worshipped' b'life' b',' b'France'
    b',' b'have' b'been' b'traditionally' b'donations' b'that' b'holy' b'.' b"'" b'One' b'common' b'settlements' b'are' b'a' b'confirmed' b'@-@' b'good' b'"' b'posthumous' b'"'
    b'church' b'body' b';' b'it' b'is' b'also' b'surprised' b'for' b'double' b',' b'<unk>' b'genealogical' b'Malahide' b'or' b'Ishmael' b'.' b'He' b'brown' b'?' b'Dunbar'
    b',' b'which' b'is' b'doubts' b'that' b'Tennyson' b'the' b'skeleton' b'begins' b'to' b'be' b'divided' b'for' b'Chant' b'than' b'the' b'designate' b'that' b'do' b'not'
    b'marry' b'other' b'.' b'The' b'fiftieth' b'cause' b'of' b'such' b'origin' b'were' b'bound' b'down' b'that' b'other' b'other' b'@-@' b'term' b'talents' b'hit' b'around'
    b'him' b'from' b'severed' b'young' b'sources' b'such' b'as' b'<unk>' b'<unk>' b'.' b'When' b'gathering' b',' b'even' b'he' b'gets' b'as' b'the' b'clear' b'world'
    b'about' b'the' b'meat' b'.' b'When' b'there' b'were' b'no' b'knowledge' b'a' b'month' b',' b'it' b'has' b'said' b'that' b',' b'them' b'hypotheses' b'resulted'
    b'in' b'@-@' b'yourself' b'in' b'his' b'political' b'decoration' b'of' b'male' b'cruzi' b'in' b'turn' b'to' b'play' b'.' b'He' b'is' b'swept' b'in' b'a'
    b'translation' b'of' b'knowledge' b',' b'as' b'"' b'Joe' b'Chapter' b'"' b'.' b'He' b'struggled' b'to' b'have' b'captured' b'for' b'the' b'next' b'season' b'when'
    b'the' b'Diamond' b'farmers' b'select' b'itself' b'.' b'The' b'eyes' b'with' b'themselves' b'is' b'addiction' b'and' b'even' b'being' b'exposed' b'to' b'a' b'benefit' b'@-@'
    b'shaped' b'tool' b'horizontal' b',' b'and' b'are' b'even' b'comment' b'of' b'supporting' b'trombone' b'.' b'They' b'may' b'be' b'distinguished' b'by' b'female' b'patterns' b','
    b'which' b'3' b'@.@' b'32' b'%' b'burns' b'will' b'leave' b'them' b'through' b'their' b'kingdom' b':' b'Escape' b',' b'and' b'replayed' b'internal' b'plums' b'and'
    b'behind' b'trouble' b'.' b'If' b'it' b'occurs' b',' b'when' b'at' b'least' b'he' b'could' b'be' b'or' b'somewhat' b'metal' b'running' b'out' b',' b'breaking'
    b'by' b'doing' b'.' b'Z.' b'starlings' b'are' b'more' b'unlikely' b'so' b'that' b'the' b'actual' b'raising' b'they' b'rate' b',' b'so' b'Tennyson' b'is' b'able'
    b'to' b'produce' b',' b'Brilliant' b'depend' b'on' b'an' b'body' b'by' b'their' b'intelligence' b'inside' b'their' b'third' b'planet' b'.' b'abdomen' b'jersey' b'with' b'both'
    b'moult' b'determine' b'erosion' b',' b'instead' b'of' b'a' b'narrow' b'Essex' b'which' b'life' b'alludes' b'to' b'organization' b'.' b'These' b'birds' b'separated' b'in' b'the'
    b'simultaneous' b'works' b'of' b'Basanti' b',' b'which' b'may' b'be' b'calculated' b'by' b'cap' b'<unk>' b'although' b'they' b'were' b'obsolete' b'.' b'O' b'One' b'can'
    b'undergo' b'communication' b'that' b'naked' b'array' b'of' b'nature' b'is' b'removed' b':' b'he' b'resolved' b'more' b'tall' b',' b'<unk>' b'and' b'<unk>' b',' b'and'
    b'3' b'hours' b'to' b'regard' b',' b'so' b'they' b'did' b'constantly' b'from' b'bacteria' b'.' b'As' b'they' b'188' b'Counterfeit' b'altitudes' b'only' b'stick' b','
    b'this' b'mercenaries' b'Faculty' b'or' b'cell' b'how' b'they' b'need' b'any' b'other' b',' b'even' b'when' b'yourself' b'can' b'mean' b'it' b'inform' b'if' b'There'
    b'will' b'be' b'specifically' b'.' b'If' b'such' b',' b'they' b'do' b'gradually' b'document' b',' b'they' b'do' b'use' b'print' b'a' b'combination' b'of' b'shapes'
    b'out' b'.' b'There' b'are' b'no' b'effect' b'that' b'other' b'journalists' b'remain' b'with' b'no' b'bird' b'threatened' b'minute' b'astronomers' b'.' b'If' b'if' b','
    b'they' b'requires' b'the' b'god' b'of' b'Ceres' b',' b'<unk>' b'might' b'be' b'loyalist' b'to' b'be' b'prohibited' b'on' b'grass' b'.' b'that' b'showing' b'an'
    b'eye' b',' b'it' b'provides' b'their' b'way' b'from' b'blood' b'modes' b'of' b'body' b'abnormal' b'<unk>' b'accompanied' b'in' b'extreme' b'areas' b'.' b'They' b"'d"
    b'end' b'being' b'good' b',' b'but' b'even' b'they' b'hate' b',' b'including' b'an' b'non' b'@-@' b'actin' b'that' b'can' b'be' b'obliged' b'.' b'Eventually'
    b',' b'they' b'assigned' b'to' b'the' b'accusation' b'of' b'accordance' b'for' b'northward' b',' b'close' b'to' b'this' b'second' b'separating' b'.' b'Also' b'tend' b'to'
    b'be' b'a' b'software' b'Easy' b',' b'it' b'does' b'be' b'used' b'to' b'calculate' b'causes' b'.' b'They' b'distance' b'it' b'at' b'establish' b'six' b'replies'
    b'.' b'In' b'particular' b',' b'only' b'nobody' b'joins' b'food' b',' b'give' b'less' b'tough' b'Ithaca' b'from' b'<unk>' b'\xe2\x80\x94' b'wrong' b'some' b'of' b'the'
    b'<unk>' b'hitting' b'<unk>' b'and' b'eucalypts' b',' b'so' b'unlike' b'other' b'Crash' b'randomly' b'interactions' b'.' b'The' b'<unk>' b'soon' b'occurs' b'520' b'times' b'in'
    b'other' b'habitat' b'level' b',' b'<unk>' b'reel' b'\xe2\x80\x93' b'nonetheless' b',' b'in' b'which' b'a' b'minimum' b'function' b'of' b'man' b'may' b'be' b'privately' b'.'
    b'The' b'males' b'led' b'on' b'battles' b'in' b'either' b'populations' b',' b'and' b'to' b'provide' b'human' b'colour' b'flight' b'speckles' b',' b'that' b'its' b'nest'
    b'is' b'lacking' b'.' b'Judas' b'records' b'may' b'be' b'based' b'to' b'one' b',' b',' b'the' b'feathers' b'headed' b'upon' b'at' b'least' b'150' b'or'
    b'more' b'meeting' b'from' b'they' b'was' b'further' b'able' b'to' b'lead' b'.' b'Like' b'the' b'nest' b'hand' b',' b'about' b'10' b'%' b'of' b'fewer'
    b'earlier' b'bird' b'can' b'continue' b'to' b'begin' b'into' b'female' b',' b'so' b'when' b'they' b'sexually' b'solidify' b'eggs' b'about' b'their' b'technologically' b'bird' b','
    b'they' b'disappearing' b',' b'even' b'Domonia' b'could' b'be' b'Gaeltacht' b'by' b'Danny' b'.' b'In' b'2006' b',' b'feathers' b'emerged' b'throughout' b'those' b'analysis' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 236.1
    loss: 5.168
    elapsed time (seconds): 167.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  48.495 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
