.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'1666' b'.' b'In' b'1858' b'such' b'as' b'resultant' b'James' b"'" b'rockabilly' b',' b'one' b'of' b'a' b'three' b'@-@' b'year' b'@-@' b'old' b'Roman'
    b'translation' b',' b'round' b'another' b'population' b'of' b'28' b'\xe2\x80\x93' b'8' b'centimetres' b'(' b'50' b'kg' b')' b'and' b'the' b'worst' b'door' b'of' b'130'
    b'@.@' b'six' b'in' b'all' b'.' b'Despite' b'the' b'34' b'@.@' b'95' b'seconds' b',' b'it' b'is' b'possible' b'since' b'2009' b'to' b'extend' b'their'
    b'gills' b'until' b'at' b'least' b'eight' b'propulsive' b'areas' b',' b'two' b'of' b'the' b'surface' b',' b'when' b'to' b'the' b'extreme' b'world' b'.' b'As'
    b'the' b'Play' b'promised' b'missing' b',' b'the' b'"' b'War' b'Isesi' b'thus' b'enjoyed' b'well' b'a' b'partial' b'motor' b'@-@' b'developed' b'cap' b':' b'one'
    b'games' b'"' b',' b'and' b'comparing' b'active' b'weather' b'standards' b'.' b'In' b'2012' b',' b'Patrick' b'rewarded' b'Kh\xc3\xa1nh' b'as' b'the' b'"' b'horns' b'"'
    b',' b'which' b'enjoyed' b'a' b'bright' b'deal' b'for' b'only' b'of' b'their' b'mind' b'from' b'the' b'sea' b',' b'and' b'the' b'police' b'storyline' b'his'
    b'at' b'@-@' b'<unk>' b"'" b'island' b'Mercer' b',' b'before' b'so' b'to' b'be' b'a' b'highly' b'<unk>' b'victim' b'.' b'The' b'fish' b'uses' b'its'
    b'superficial' b'to' b'damaged' b'the' b'matter' b'as' b'is' b'given' b'it' b'a' b'<unk>' b'or' b'their' b'mothers' b',' b'and' b'he' b'observed' b'the' b'legal'
    b'fox' b',' b'a' b'planet' b"'s" b'layer' b'(' b'although' b'it' b'is' b'a' b'independent' b'phenomenon' b'(' b'Poet' b')' b',' b'reaching' b'age' b'belief'
    b'.' b'He' b'\xe2\x80\xa6' b'\xe2\x80\x99' b'previous' b'ing' b'of' b'Itchy' b'as' b'an' b'convict' b'and' b'<unk>' b'.' b'While' b'realizing' b'each' b'side' b'of' b'her'
    b'humans' b',' b'(' b'28' b'or' b'in' b'1885' b',' b'pushing' b'105' b'target' b'appeal' b')' b'to' b'that' b'moves' b'.' b'Tawny' b'artifacts' b'scholar'
    b',' b'Lovers' b'1981' b',' b'and' b'forfeits' b'Jenice' b',' b'printed' b'an' b'auto' b'.' b'This' b'well' b'while' b'or' b'as' b'breeding' b'as' b'one'
    b'of' b'a' b'generation' b'known' b'as' b'the' b'most' b'small' b'organic' b'pattern' b'.' b'Prehistoric' b'returns' b'the' b'natural' b'boyfriend' b'of' b'constructing' b'Hunt' b'.'
    b'Furthermore' b',' b'Te' b'Boom' b',' b'the' b'Viscount' b'of' b'<unk>' b'(' b'bikini' b')' b',' b'his' b'final' b'food' b'visual' b'ability' b'to' b'true'
    b'.' b'In' b'American' b'American' b'1940s' b',' b'the' b'show' b'begins' b'by' b'a' b'bowls' b'of' b'nearly' b'20' b'votes' b'.' b'<eos>' b'Works' b'by'
    b'a' b'<unk>' b'real' b'<unk>' b'probability' b',' b'determining' b'11' b'%' b'amongst' b'a' b'book' b'of' b'<unk>' b'for' b'even' b'tricolour' b'can' b'do' b'deny'
    b'less' b'than' b'4' b'a.m.' b',' b'or' b'then' b'am' b'sheer' b'as' b'such' b'.' b'It' b'assumed' b'the' b'show' b'of' b'joy' b'with' b'a'
    b'enriched' b'<unk>' b'which' b'does' b'not' b'be' b'happy' b'for' b'weapons' b'.' b'The' b'Head' b'its' b'behaviour' b'is' b'tending' b'of' b'animals' b'.' b'Once'
    b'there' b'is' b'an' b'seventh' b'distinct' b'pair' b'of' b'individual' b'countless' b'.' b'He' b'introduced' b'a' b'dull' b'or' b'throwing' b'son' b'teeth' b',' b'halted'
    b'lives' b'into' b'injuries' b'beyond' b'the' b'Italians' b',' b'or' b'moving' b'up' b'.' b'Meanwhile' b',' b'he' b'have' b'since' b'glucose' b'by' b'him' b'.'
    b'<unk>' b'Meter' b'joins' b'him' b'in' b'the' b'outside' b'Georgia' b'lines' b'and' b'rose' b'into' b'Galloway' b'and' b"'" b'wants' b'to' b'believe' b'that' b','
    b'when' b'it' b'occurs' b'is' b'not' b',' b'and' b'that' b'its' b'gift' b'seems' b'employing' b'it' b'are' b'all' b'different' b'large' b'.' b'It' b'is'
    b'well' b'placed' b'of' b'Jesus' b'to' b'cook' b',' b'<unk>' b',' b'Sola' b'and' b'redesigned' b'Gene' b'William' b'Gabriel' b'<unk>' b'(' b'<unk>' b'Today' b')'
    b'Guinness' b'Watson' b'(' b'<unk>' b'.' b')' b'\xe2\x80\x93' b'which' b'faceless' b'its' b'good' b'wife' b',' b'as' b'her' b'argument' b'is' b'composed' b'.' b'They'
    b'only' b'have' b'a' b'true' b'impact' b'of' b'an' b'ship' b'color' b',' b'and' b'receive' b'him' b'a' b'magician' b'(' b'"' b'Beni' b'Challenge' b'"'
    b')' b'.' b'<eos>' b'intends' b'to' b'leave' b'<unk>' b'remains' b'in' b'Ireland' b',' b'as' b'eight' b'of' b'those' b'consistently' b'consulted' b'or' b'more' b'splicing'
    b'prototypes' b',' b',' b'trunks' b'was' b'being' b'eliminated' b'.' b'In' b'removal' b',' b'<unk>' b'describes' b'other' b'pre' b'@-@' b'American' b',' b'topmost' b'Fortress'
    b';' b'but' b'other' b'forgotten' b'institutions' b'are' b'proposed' b'to' b'depend' b'a' b'blue' b'offspring' b'like' b'performing' b'by' b'argue' b'as' b'is' b',' b'just'
    b'Blaine' b'@-@' b'chasing' b'implications' b'government' b',' b'like' b'ice' b'@-@' b'degree' b',' b'feeding' b',' b'fare' b',' b'leaf' b',' b'erratic' b',' b'<unk>'
    b',' b'and' b'tail' b'.' b'Many' b'of' b'these' b'names' b'of' b'umpire' b'2ID' b'out' b'pet' b'instruction' b'<unk>' b'Bah\xc3\xada' b'as' b'well' b'as' b'the'
    b'external' b';' b'which' b'do' b'not' b'desired' b'on' b'a' b'eggs' b'or' b'their' b'support' b';' b'when' b'they' b'evolved' b'well' b'to' b'Montenegro' b','
    b'is' b'dismantled' b'by' b'some' b'people' b',' b'rather' b'than' b'those' b'.' b'<unk>' b'is' b'a' b'hero' b'@-@' b'like' b'.' b'Mycena' b'<unk>' b'('
    b'Mughal' b'ambitions' b')' b'occupied' b'it' b'the' b'children' b'at' b':' b'"' b'I' b'falls' b'more' b'considered' b'.' b'"' b'Jifna' b'says' b'that' b'this'
    b'difference' b'(' b'<unk>' b')' b'aids' b'that' b'fledglings' b'have' b'changed' b'about' b'14' b'species' b'in' b'dried' b'times' b',' b'and' b'soon' b',' b'barely'
    b'in' b'the' b'animal' b',' b'may' b'enter' b'place' b',' b'because' b'to' b'easily' b'operate' b'.' b'Thus' b',' b'it' b'may' b'be' b'"' b'very'
    b'LeSportsac' b'in' b'tomb' b'flags' b',' b'all' b'metabolism' b'of' b'over' b'a' b'million' b'"' b'.' b'<eos>' b'Each' b'bird' b'is' b'made' b'to' b'be'
    b'exclusively' b'described' b'by' b'boring' b'revolutionary' b'by' b'over' b'3' b'years' b',' b'many' b'children' b'performed' b'at' b'her' b'bat' b':' b'1827' b'and' b'shocking'
    b'Kellman' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'and' b'Ceratopsidae' b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'also' b'Hornung' b'about' b'the' b'core'
    b'of' b'0600' b'is' b'formed' b'with' b'a' b'repeated' b'number' b'of' b'contraception' b',' b'it' b'has' b'been' b'described' b'and' b'Bassin' b'Smith' b'chloride' b'patterns'
    b'include' b'Krishna' b',' b'when' b'the' b'witness' b'through' b'Miranic' b'seeks' b'a' b'magical' b'body' b'for' b'the' b'head' b'in' b'the' b'form' b'of' b'prey'
    b'narrow' b',' b'sometimes' b'megawatts' b'.' b'The' b'dropping' b'kings' b'passed' b'by' b'the' b'other' b'effects' b'hostile' b'fret' b'@-@' b'grey' b'(' b'grey' b','
    b'done' b')' b'and' b'new' b'approach' b'to' b'1932' b'.' b'If' b'it' b'is' b'a' b'short' b'Maximum' b'spear' b'connecting' b'a' b'duff' b'calculations' b'from'
    b'the' b'dam' b'to' b'happen' b',' b'if' b'it' b'appears' b'for' b'their' b'seemingly' b'rosary' b',' b'he' b'was' b'written' b'by' b'taxis' b'.' b'parallels'
    b'for' b'these' b'winters' b',' b'the' b'eggs' b'is' b'often' b'too' b'open' b'as' b'.' b'The' b'best' b'effort' b'I' b'says' b'just' b'to' b'be'
    b'frequent' b'by' b'electricity' b',' b'headed' b'even' b'spread' b'.' b'If' b'they' b'would' b'Tancher\xc3\xaas' b'dry' b',' b'a' b'merciless' b'limits' b'was' b'rarely' b'acceptable'
    b'.' b'Young' b'peer' b'(' b'e.g.' b'boy' b"'s" b'bodies' b'are' b'the' b'accidents' b',' b'ordering' b'them' b'to' b'her' b'<unk>' b'chapel' b')' b','
    b'puzzle' b'<unk>' b',' b'though' b'a' b'narrative' b'sound' b'.' b'This' b'process' b'it' b'undertook' b'many' b'minor' b'irregular' b'groups' b'and' b'have' b'stopped' b'to'
    b'prepare' b'about' b'Classics' b'.' b'contracting' b',' b'the' b'head' b'has' b'their' b'swamphen' b'and' b'contains' b'it' b',' b'"' b'several' b'sonne' b'when' b'exemplifies'
    b',' b'they' b'don' b"'t" b'think' b'that' b'chandeliers' b',' b'that' b'immersion' b'anyone' b'<unk>' b'when' b'even' b'adopt' b'an' b'average' b'makes' b'.' b'And'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 209.5
    loss: 5.168
    elapsed time (seconds): 140.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  55.903 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
