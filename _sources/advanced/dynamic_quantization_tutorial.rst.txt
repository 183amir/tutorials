.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'<unk>' b'cooperative' b'@-@' b'made' b'lengths' b'in' b'North' b'Africa' b'in' b'English' b'.' b'By' b'one' b'that' b'emerged' b'member' b'to' b'help' b'on'
    b'the' b'ground' b'at' b'<unk>' b',' b'in' b'1804' b',' b'it' b'believed' b'it' b'was' b'Labour' b'that' b'"' b'one' b'of' b'his' b'most' b'probably'
    b'<unk>' b'.' b'"' b'It' b'was' b'cancelled' b'for' b'\xe2\x80\xb2' b'birds' b'as' b'follows' b'since' b'satisfy' b'jetty' b',' b'with' b'many' b'box' b'or' b'white'
    b'principally' b'.' b'In' b'the' b'manuscript' b',' b'the' b'priority' b'launched' b'by' b'Iago' b'include' b'willows' b'in' b'bold' b',' b'and' b'the' b'male' b'became'
    b'part' b'of' b'the' b'product' b"'s" b'country' b'.' b'At' b'1841' b',' b'Archer' b"'s" b'feeling' b'on' b'battle' b',' b'in' b'reference' b'to' b'Shakespeare'
    b'studies' b'in' b'as' b'large' b'as' b'the' b'"' b'seats' b'of' b'Melancholy' b'"' b',' b'but' b'this' b'is' b'also' b'going' b'to' b'be' b'played'
    b'.' b'These' b'are' b'reputed' b'exploited' b'as' b'much' b'.' b'It' b'covers' b'ways' b'to' b'be' b'completely' b'down' b'in' b'a' b'orbit' b'video' b'during'
    b'the' b'night' b'.' b'This' b'period' b'contributed' b'to' b'the' b'first' b'time' b',' b'running' b'page' b'so' b'good' b',' b'but' b'none' b'for' b'influence'
    b'will' b'be' b'heard' b'.' b'In' b'the' b'2006' b'election' b',' b'Broom' b'is' b'Armageddon' b'roughly' b'her' b'next' b'light' b',' b'when' b'it' b'is'
    b'Khan' b'is' b'killed' b'it' b'for' b'a' b'heaviest' b'cult' b'.' b'The' b'pattern' b'of' b'adding' b'therapy' b':' b'yields' b'net' b',' b'or' b'/'
    b'permanence' b',' b'indicate' b'that' b'there' b'are' b'not' b'finds' b'to' b'be' b'back' b'in' b'some' b'English' b'German' b'communities' b',' b'not' b'large' b'damage'
    b'and' b'laity' b',' b'so' b'it' b'may' b'be' b'romantically' b'regarded' b'that' b'it' b'was' b'about' b'head' b'why' b'they' b'do' b'before' b'far' b'being'
    b'and' b'eucalypts' b'.' b'The' b'Son' b'concludes' b'that' b'their' b'estimated' b'Assi' b'increase' b'around' b'Javanese' b',' b'being' b'quoted' b'as' b'<unk>' b',' b'and'
    b'produced' b'a' b'situation' b'in' b'case' b'shrine' b'that' b'mode' b'is' b'regularly' b'.' b'If' b'the' b'fittoni' b'begins' b'straight' b'for' b'the' b'<unk>' b'24'
    b',' b'Omar' b'has' b'no' b'spores' b'of' b'further' b'planets' b'towards' b'the' b'stem' b'to' b'wastewater' b'.' b'Another' b'Irish' b'character' b'is' b'986' b'from'
    b'2' b'm' b'(' b'76' b'@.@' b'5' b'per' b'79' b'miles' b'(' b'28' b'ft' b')' b'deep' b'and' b'that' b'the' b'female' b'only' b'fired'
    b'his' b'prizes' b'.' b'That' b'same' b'is' b'the' b'worst' b'sound' b'.' b'In' b'flight' b',' b'ibotenic' b'praetervisa' b'is' b'reintroduced' b'toward' b'A.' b'<unk>'
    b'through' b'another' b',' b'dating' b'to' b'a' b'angle' b'of' b'her' b'side' b'.' b'<eos>' b'associations' b'on' b'the' b'kakapo' b'include' b'astonishing' b'"' b'are'
    b'his' b'clinical' b'translation' b'of' b'carbon' b',' b'and' b'broods' b'<unk>' b'chops' b',' b'a' b'dead' b'"' b'six' b'or' b'even' b',' b'the' b'line'
    b'.' b'The' b'remnant' b'predators' b'"' b'can' b'be' b'derived' b'to' b'Sun' b'spelling' b'<unk>' b'...' b'which' b'might' b'be' b'distinguished' b'after' b'it' b'could'
    b'be' b'shut' b'of' b'other' b',' b'perhaps' b'aged' b'<unk>' b'"' b'.' b'The' b'snakes' b'believes' b'that' b'this' b'will' b'have' b'no' b'days' b'by'
    b'it' b';' b'the' b'night' b'the' b'most' b'other' b'man' b'are' b'very' b'sudden' b'from' b'a' b'<unk>' b'tree' b'.' b'The' b'collar' b'towards' b'all'
    b'average' b'plant' b'farming' b'is' b'currently' b'due' b'to' b'Waterway' b'.' b'<eos>' b'In' b'1864' b',' b'<unk>' b'many' b'one' b'watches' b',' b'forward' b','
    b'cellular' b'and' b'very' b'electromagnetic' b'membrane' b'.' b'Unlike' b'the' b'other' b'changes' b',' b'<unk>' b'and' b'<unk>' b',' b'the' b'male' b'where' b'Chen' b'treated'
    b'offspring' b'in' b'1931' b',' b'featured' b'brown' b'nearest' b"'Las" b'on' b'each' b'booms' b'.' b'<eos>' b'alarms' b'with' b'irregular' b'310' b'\xe2\x80\x93' b'33' b'years'
    b'<unk>' b'groups' b',' b'back' b'up' b'over' b'the' b'opposite' b'of' b'other' b'other' b'or' b'white' b',' b'male' b'or' b'so' b'major' b'with' b'it'
    b'oldest' b'than' b'2' b'@.@' b'5' b'million' b'Ma' b'(' b'60' b'm' b')' b',' b'dark' b'males' b',' b'and' b'effective' b'planets' b',' b'a'
    b'variety' b'being' b'cured' b',' b'but' b'over' b'at' b'least' b'33' b'or' b'say' b'.' b'Its' b'abuse' b'330' b'@.@' b'5' b'a.m.' b'are' b'estimated'
    b'from' b'France' b'are' b'rather' b'polished' b'by' b'four' b'types' b';' b'it' b'is' b'found' b'by' b'nestlings' b'at' b'seat' b',' b'with' b'a' b'pair'
    b'of' b'mantle' b'faulty' b'brightest' b'.' b'"' b'The' b'small' b'(' b'2' b'Count' b')' b'of' b'All\xc4\x81h' b'leads' b'to' b'its' b'reality' b'alert' b','
    b'or' b'they' b'comparison' b'like' b'with' b'a' b'same' b'laboratory' b'Ones' b'.' b'"' b'Through' b'the' b'bred' b'in' b'a' b'<unk>' b'system' b',' b'they'
    b'produces' b'reason' b'after' b'a' b'disc' b'vision' b'and' b'even' b"'d" b'feed' b'to' b'mislead' b',' b'h' b'when' b'it' b'does' b'not' b'support' b'enables'
    b'them' b'.' b'They' b'rate' b'of' b'their' b'first' b'two' b'years' b'there' b'are' b'technical' b'evidence' b'that' b'the' b'male' b'differs' b'around' b'by' b'urine'
    b'.' b'This' b'collects' b'the' b'nest' b'will' b'one' b'or' b'become' b',' b'and' b'attractive' b'or' b'experienced' b'them' b'to' b'death' b'.' b'They' b'often'
    b'have' b'a' b'lesser' b'male' b'(' b'bats' b')' b',' b'a' b'male' b'parrot' b'(' b'1' b'@.@' b'2' b'metres' b')' b'5' b'@.@' b'7'
    b'predators' b';' b'six' b'eggs' b'Galilee' b',' b'and' b'endemic' b'as' b'borderline' b'<unk>' b'at' b'an' b'belly' b'.' b'When' b'texture' b'largely' b'cost' b'Ben'
    b'Twelve' b',' b'males' b'may' b'be' b'present' b'(' b'on' b'which' b'there' b'are' b'up' b'itself' b'\xe2\x80\x93' b'or' b'very' b'greater' b'attempts' b',' b'and'
    b'they' b'rarely' b'crossed' b'open' b',' b'and' b'opposing' b'it' b'with' b'towns' b'.' b'If' b'consist' b'are' b'still' b'covered' b',' b'it' b'puts' b'favor'
    b'of' b'several' b'bird' b'dark' b'spiders' b',' b'such' b'as' b'ribosomes' b',' b'Scandinavia' b',' b'hope' b',' b'and' b'thin' b'Locke' b',' b'which' b'they'
    b'accumulate' b'highest' b'or' b'more' b'rarely' b'.' b'Males' b'are' b'reasonable' b'18' b'days' b',' b'of' b'the' b'standard' b'validity' b'upon' b'16' b'\xce\xbcm' b','
    b'and' b'subsequent' b'females' b'are' b'readily' b'differentiated' b'.' b'As' b'they' b'be' b'more' b'small' b',' b'there' b'are' b'no' b'computational' b'predators' b'for' b'less'
    b'than' b'man' b',' b'especially' b'or' b'the' b'widespread' b'manufactured' b'from' b'pink' b'or' b'circumstantial' b'and' b'<unk>' b'.' b'The' b'New' b'Zealand' b'starling' b'has'
    b'six' b'bowls' b'in' b'substrates' b'for' b'one' b'male' b'generated' b'on' b'the' b'gill' b'bird' b'at' b'all' b'@-@' b'nature' b',' b'and' b'a' b'lapse'
    b'female' b',' b'such' b'as' b'drifting' b'rule' b',' b'is' b'also' b'interpreted' b'with' b'tissue' b'and' b'thin' b'as' b'.' b'In' b'North' b'America' b','
    b'when' b'their' b'soup' b'does' b'not' b'follow' b'into' b'perception' b'of' b'predators' b'.' b'Each' b'ice' b'species' b'occurs' b'on' b'protein' b'Regard' b'typically' b'figures'
    b'there' b'(' b'e.g.' b'male' b'Crash' b')' b':' b'.' b'~' b'crake' b'(' b'EuS' b'\xe2\x80\x93' b'uninhabited' b'cm' b')' b'is' b'near' b'a' b'twenty'
    b'@-@' b'dictatorship' b'at' b'cooler' b'in' b'the' b'Republic' b'of' b'Ireland' b'and' b'mosaic' b'the' b'large' b'distinctive' b'supply' b'project' b',' b'<unk>' b',' b'and'
    b'bird' b'characters' b'.' b'When' b'it' b'is' b'one' b'of' b'an' b'few' b'higher' b'beak' b'or' b'elect' b'every' b'bow' b',' b'deep' b'stands' b','
    b'after' b'female' b'.' b'A' b'creatures' b'are' b'a' b'sacred' b'variant' b'of' b'which' b'was' b'beginning' b'at' b'the' b'core' b'.' b'In' b'nucleated' b'cases'
    b'nebula' b',' b'it' b'can' b'be' b'described' b'for' b'Data' b',' b'an' b'large' b'discredited' b'outfitting' b'closure' b'or' b'brown' b'body' b'individuals' b'\xe2\x80\x94' b'and'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 239.2
    loss: 5.168
    elapsed time (seconds): 169.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  54.415 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
