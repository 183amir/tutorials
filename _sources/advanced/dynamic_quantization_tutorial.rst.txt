.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'to' b'seeing' b'Julius' b'<unk>' b',' b'and' b'convicted' b'Arm' b'in' b'order' b'to' b'continue' b'to' b'turn' b'on' b'their' b'displacement' b'until' b'they'
    b'disrupted' b'half' b'of' b'school' b'males' b'.' b'However' b',' b'no' b'design' b',' b'Douglas' b'v.' b'chailletii' b'Ultimately' b'refuses' b'on' b'a' b'platform' b'in'
    b'a' b'mortar' b'phase' b'that' b'discovered' b'riders' b'.' b'As' b'harm' b'of' b'Jig' b',' b'it' b'was' b'a' b'"' b'grey' b'visual' b',' b'setting'
    b'theme' b'penalties' b',' b'greatly' b'"' b'.' b'Brother' b'aptitude' b'claim' b'a' b'number' b'of' b'wines' b',' b'towed' b',' b'in' b'Patty' b'Boland' b'.'
    b'Both' b'species' b'of' b'other' b'locations' b'well' b'as' b'taking' b'reports' b'with' b'common' b'steps' b'in' b'courses' b',' b'a' b'new' b'family' b'that' b'they'
    b'do' b'not' b'feed' b'on' b'the' b'canopy' b'of' b'<unk>' b'<unk>' b'The' b'species' b'.' b'<eos>' b'In' b'a' b'2012' b'essay' b'cross' b'by' b'measuring'
    b'10' b'@.@' b'7' b'%' b'in' b'which' b'it' b'has' b'found' b'access' b'it' b'is' b'that' b'it' b'is' b'still' b'a' b'dead' b'.' b'Its'
    b'center' b'were' b'possible' b'by' b'a' b'lesser' b'problem' b'than' b'many' b'literary' b'caps' b'.' b'Later' b'with' b'eight' b'other' b'flame' b'groups' b',' b'both'
    b'bright' b'attacks' b'came' b'out' b'at' b'periods' b'.' b'The' b'meat' b'colour' b'plasma' b'outraged' b'a' b'10' b'\xe2\x80\x93' b'7' b'lead' b'run' b'but' b'16'
    b'\xe2\x80\x93' b'9' b'@.@' b'4' b'mph' b'(' b'62' b'cm' b')' b'of' b'energy' b',' b'size' b'for' b'Jupiter' b'.' b'Stars' b'of' b'590' b'mph'
    b'(' b'23' b'ft' b')' b'steadily' b',' b'reduces' b'a' b'number' b'of' b'large' b'females' b',' b'such' b'as' b'Nachtigall' b'and' b'Tong' b'.' b'<eos>'
    b'With' b'pink' b',' b'even' b'Ingrid' b'were' b'still' b'hinted' b'for' b'it' b'.' b'Cholera' b'include' b'Pongola' b'<unk>' b',' b'D\xc3\xa1il' b'Schuester' b'in' b'2006'
    b',' b'travel' b'to' b'isolated' b'plans' b'throughout' b'the' b'Lower' b'Ocean' b'.' b'It' b'is' b'literal' b'@-@' b'coloured' b',' b'and' b'often' b'belonged' b'to'
    b'Outer' b'acid' b',' b'raisins' b',' b'Finland' b',' b'<unk>' b',' b'W.' b'gallinae' b',' b'and' b'Ince' b'for' b'readily' b'authorization' b',' b'which' b'must'
    b'be' b'established' b'to' b'limit' b'that' b'the' b'African' b'antelope' b'is' b'now' b'the' b'<unk>' b'owned' b'in' b'hay' b'and' b'removes' b',' b'Viking' b','
    b'or' b'<unk>' b'from' b'that' b'time' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Exploration' b'=' b'=' b'<eos>' b'<eos>' b'The' b'practice' b'of' b'Cambridge' b'is'
    b'often' b'found' b'in' b'1991' b'.' b'However' b',' b'Nevada' b'(' b'820' b'CE' b')' b'appears' b'to' b'be' b'divided' b'by' b'Ireland' b'.' b'Art'
    b'Supplement' b',' b'and' b'other' b'fields' b'may' b'be' b'tied' b'from' b'when' b'they' b'may' b'indicate' b'the' b'size' b'of' b'such' b'.' b'They' b'have'
    b'yellow' b'bacteria' b'back' b'to' b'electronic' b'groups' b',' b'resulting' b'on' b'6' b'@.@' b'70' b'in' b'(' b'North' b'umbrella' b')' b',' b'Mysore' b'raising'
    b'stegosaurid' b',' b'so' b'one' b'specific' b'symbol' b'of' b'An' b'stellar' b'bird' b'ratio' b',' b'which' b'is' b'present' b'shaped' b'and' b'still' b',' b'low'
    b'for' b'areas' b'such' b'as' b'rains' b',' b'thieves' b',' b'76' b'@,@' b'000' b'birds' b',' b'and' b'52' b'small' b',' b'8' b'@,@' b'000'
    b'wild' b'dollars' b'and' b'other' b'populations' b'.' b'<eos>' b'In' b'2012' b',' b'they' b'stood' b'in' b'density' b'of' b'expulsion' b'in' b'Australia' b'and' b'exposed'
    b'150' b'eggs' b',' b'one' b'other' b'of' b'these' b'smaller' b'islands' b',' b'and' b'calls' b'significantly' b',' b'which' b'were' b'built' b'in' b'1869' b'marshes'
    b',' b'a' b'excessive' b'bodies' b'that' b'proceeded' b'as' b'stint' b'fatigue' b'.' b'According' b'to' b'<unk>' b'@-@' b'Kamil' b',' b'Weinstein' b'simultaneously' b'promised' b'its'
    b'violacea' b'how' b'on' b'into' b'Uljin' b',' b'when' b'there' b'are' b'5' b'general' b'originated' b'about' b'the' b'Frenchmen' b'of' b'Easter' b'.' b'It' b'swept'
    b'associations' b',' b'unlike' b'Vaishnava' b'capitals' b',' b'the' b'fruit' b',' b'dark' b',' b'and' b'public' b'Celts' b'from' b'rams' b',' b'including' b'vacations' b';'
    b'which' b'can' b'be' b'completed' b'by' b'the' b'eggs' b'.' b'A' b'passage' b'of' b'jet' b'chromosomes' b',' b'Japan' b',' b'low' b',' b'and' b'thermal'
    b'piano' b',' b'has' b'increased' b'names' b'well' b'as' b'due' b'to' b'a' b'lighter' b',' b'<unk>' b'opt' b'and' b'cross' b',' b'for' b'their' b'cooking'
    b'lunar' b'items' b'in' b'light' b'vegetation' b'plane' b',' b'help' b'in' b'bellcote' b'they' b'thought' b'through' b'population' b'plants' b'and' b'even' b'.' b'If' b'there'
    b'are' b'no' b'evidence' b',' b'they' b'gained' b'"' b'wings' b'"' b',' b'admits' b'to' b'their' b'dressings' b'.' b'Some' b'sites' b'making' b'amplified' b'nesting'
    b'areas' b'in' b'areas' b'<unk>' b'.' b'In' b'both' b',' b'they' b'are' b'dead' b',' b'as' b'they' b'were' b'eligible' b'to' b'have' b'two' b'ascending'
    b'chains' b'was' b'used' b'via' b'suffering' b'a' b'opera' b'celebrities' b'.' b'<eos>' b'Throughout' b'the' b'early' b'19th' b'century' b',' b'the' b'kakapo' b'is' b'beautiful'
    b'if' b'the' b'bird' b'is' b'Cole' b'fatal' b'under' b'their' b'own' b'body' b',' b'and' b'reburied' b'its' b'experiences' b'on' b'the' b'snakes' b'in' b'conditions'
    b'.' b'It' b'usually' b'occurs' b'with' b'three' b'foals' b'of' b'common' b'starling' b'pipes' b'.' b'In' b'this' b'genealogical' b'edition' b',' b'an' b'etymology' b'by'
    b'sending' b'a' b'drinking' b'pulp' b'battle' b'today' b'for' b'alcohol' b',' b'which' b'is' b'given' b'it' b'became' b'burned' b'.' b'In' b'addition' b'to' b'Agricultural'
    b'outcome' b'supported' b'Scotland' b'telescopes' b',' b'in' b'association' b'with' b'the' b'control' b'of' b'organelle' b',' b'during' b'contrast' b',' b'they' b'can' b'fly' b'with'
    b'each' b'other' b'and' b'<unk>' b'metaphor' b'.' b'The' b'Body' b'further' b'legs' b'indulgence' b'out' b',' b'only' b'break' b'on' b'age' b',' b'(' b'during'
    b'backward' b'have' b'seen' b'down' b'with' b'full' b'other' b'scale' b'Korea' b'\xe2\x80\x93' b'now' b'at' b'night' b'Day' b')' b'and' b'at' b'least' b'one' b'temperature'
    b'of' b'55' b'%' b'.' b'This' b'exists' b'into' b'a' b'85' b'@-@' b'level' b'Piano' b',' b'which' b'uses' b'two' b'muses' b',' b'her' b'dark'
    b'head' b'degenerate' b'.' b'The' b'representations' b'of' b'religion' b'are' b'hindered' b'by' b'food' b',' b'attempting' b'to' b'exist' b'to' b'send' b'them' b'across' b'Loose'
    b'and' b'breaking' b'for' b'fresh' b'dry' b'than' b'.' b'Later' b'can' b'be' b'rarely' b'Banai' b'<unk>' b',' b'they' b'a' b'long' b'@-@' b'sharp' b'length'
    b',' b'and' b'even' b'just' b'refer' b'to' b'the' b'<unk>' b',' b'Novoselic' b'libel' b',' b'popularity' b',' b'uptempo' b'eye' b'particles' b'and' b'one' b'witchcraft'
    b'.' b'Once' b'they' b'genuinely' b'undeniably' b',' b'when' b'they' b'then' b'return' b'to' b'directly' b',' b'Robyn' b'consequently' b'mind' b'a' b'factor' b'to' b'cytoplasm'
    b'in' b'its' b'place' b'.' b'The' b'non' b'@-@' b'scholars' b'bathing' b'Kimi' b'Ferdinand' b'<unk>' b'describes' b'spokesman' b'grounded' b'to' b'<unk>' b',' b'<unk>' b','
    b'<unk>' b'and' b'Goldman' b',' b'sitting' b'inside' b'marines' b',' b'and' b'there' b'is' b'only' b'a' b'touch' b'between' b'G' b'bird' b'to' b'move' b'the'
    b'species' b'.' b'If' b'they' b'live' b'them' b'through' b'naked' b'words' b',' b'in' b'Rosey' b',' b'only' b'open' b'trees' b'.' b'They' b'<unk>' b'bird'
    b',' b'such' b'to' b'the' b'state' b',' b'rich' b',' b'withdraws' b'in' b'pursue' b'locations' b'such' b'as' b'meaningful' b'Europe' b'as' b'white' b',' b'during'
    b'that' b'they' b'allow' b'any' b'Marcos' b'reluctance' b'top' b'to' b'<unk>' b'with' b'the' b'other' b'four' b'times' b'.' b'<eos>' b'The' b'common' b'starling' b'has'
    b'the' b'small' b'graphic' b'harvest' b'as' b'muscle' b'species' b';' b'the' b'other' b'ceramics' b'produces' b'them' b'to' b'find' b'them' b'zombie' b'.' b'Each' b'destinations'
    b'were' b'first' b'somebody' b'of' b'small' b'common' b'starlings' b'and' b'as' b'as' b'appropriate' b'.' b'Such' b'@-@' b'free' b'reasons' b'can' b'be' b'discernible' b'by'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 237.5
    loss: 5.168
    elapsed time (seconds): 165.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  48.448 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
