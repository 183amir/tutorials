.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Tong' b'.' b'Although' b'John' b'Tower' b'<unk>' b'<unk>' b'opined' b'an' b'"' b'start' b'"' b'for' b'flawed' b'or' b'efficient' b'graphics' b'.' b'<unk>' b'is'
    b'also' b'ideal' b'as' b'to' b'campaign' b'.' b'The' b'advance' b'were' b'to' b'find' b'depth' b'.' b'For' b'example' b'replacement' b'suggested' b'that' b'some' b'of'
    b'the' b'case' b"'s" b'sequence' b'was' b'seen' b'that' b'"' b'the' b'most' b'generous' b'thing' b'is' b'the' b'truth' b'with' b'Jesus' b'"' b',' b'in'
    b'spite' b'of' b'tax' b',' b'prot\xc3\xa9g\xc3\xa9' b',' b'and' b'sends' b'his' b'wives' b'.' b'In' b'1917' b',' b'American' b'eagles' b'and' b'dissenting' b'planets' b'were'
    b'cancelled' b'.' b'As' b'of' b'2006' b',' b'the' b'new' b'starling' b'Icarus' b"'\xc3\xad" b'style' b'laid' b'a' b'period' b'for' b'$' b'75' b'million' b'('
    b'$' b'173' b'@.@' b'55' b'million' b'USD' b')' b',' b'in' b'seven' b'countries' b'.' b'It' b'was' b'recorded' b'at' b'Cambridge' b',' b'Survey' b'of'
    b'Andrew' b'Agnes' b'and' b'Bonaparte' b'G.' b'horsemanship' b'.' b'Lieutenant' b'<unk>' b'Subhash' b'Wainwright' b'statues' b'to' b'promote' b'a' b'powerful' b'plan' b'\xe2\x80\x93' b'this' b'season'
    b'was' b'longtime' b'by' b'shots' b'.' b'The' b'bird' b"'s" b'large' b'driver' b',' b'Charles' b'Miyamoto' b',' b'end' b'in' b'November' b'4' b',' b'1931'
    b',' b'listed' b'cake' b'from' b'gown' b'following' b'the' b'Sun' b'of' b'Mera' b'and' b'Leinster' b',' b'by' b'planet' b'until' b'The' b'other' b'Europe' b','
    b'a' b'entirely' b'grid' b'Pop' b'Amateur' b'book' b'Our' b'IRA' b',' b'and' b'who' b'was' b'denying' b'its' b'final' b'season' b'.' b'The' b'journey' b'was'
    b'collected' b'in' b'1860' b',' b'(' b'general' b',' b'<unk>' b')' b',' b'was' b'scheduled' b'for' b'1966' b'.' b'At' b'Jupiter' b',' b'Jordan' b'had'
    b'defeated' b'power' b'dynamic' b',' b'as' b'he' b'reached' b'its' b'box' b'since' b'2005' b'.' b'Ibn' b'chicks' b'has' b'prevented' b'control' b'as' b'they' b'were'
    b'unsure' b'.' b'<eos>' b'Stefani' b'was' b'a' b'member' b'of' b'the' b'public' b'by' b'crime' b',' b'but' b'dates' b'because' b'he' b'had' b'found' b'an'
    b'estrogen' b'degree' b'(' b'<unk>' b')' b'.' b'Until' b'distinct' b'matches' b'he' b'performs' b'Unwilling' b'strikes' b'from' b'her' b'involvement' b'outside' b'and' b'after' b'an'
    b'monument' b',' b'can' b'not' b'collect' b'behalf' b'of' b'Sacred' b',' b'dead' b'of' b'their' b'pursuers' b',' b'he' b'were' b'<unk>' b'as' b'"' b'rather'
    b'deterioration' b'including' b'the' b'kakapo' b'in' b'centuries' b'McLaren' b'"' b'.' b'<eos>' b'In' b'his' b'final' b'performance' b'of' b'Japan' b'Walpole' b'in' b'The' b'<unk>'
    b'River' b'was' b'ordered' b'of' b'the' b'four' b'<unk>' b'and' b'booked' b'the' b'1991' b'entry' b'.' b'Franz' b'Clark' b'often' b'found' b'the' b'form' b'of'
    b'Ceres' b'redrawn' b'by' b'Mary' b'police' b'(' b'The' b'<unk>' b'<unk>' b')' b'.' b'<eos>' b'That' b'year' b',' b'emphasized' b'funds' b',' b'including' b'<unk>'
    b',' b'and' b'historian' b'Mosley' b'<unk>' b'.' b'While' b'Ceres' b"'s" b'other' b'teams' b',' b'the' b'Sons' b'was' b'still' b'married' b'by' b'aiming' b'to'
    b'lend' b'<unk>' b'with' b'the' b'<unk>' b',' b'Leon' b'O' b'Burton' b'as' b'<unk>' b',' b'and' b'could' b'have' b'been' b'the' b'story' b'of' b'newer'
    b'public' b'Palmyra' b'in' b'1910' b'.' b'In' b'1909' b',' b'with' b'his' b'<unk>' b'<unk>' b'on' b'Walpole' b"'s" b'parents' b'do' b'not' b'investigate' b'to'
    b'gambling' b'<unk>' b',' b'who' b'remained' b'3100' b'College' b',' b'The' b'Roman' b'Market' b'of' b'Charmed' b'(' b'representative' b'of' b'Respers' b'<unk>' b')' b'in'
    b'Greek' b'.' b'<eos>' b'The' b'rocky' b'kingship' b'was' b'more' b'successful' b'I.' b'Ren\xc3\xa9' b'.' b'The' b'<unk>' b'model' b'of' b'Morton' b'returned' b'to' b'cross'
    b',' b'but' b'the' b'Temple' b'president' b'represented' b'his' b'major' b'Democratic' b'Party' b'then' b'subject' b'to' b'manuals' b'south' b'Owl' b'<unk>' b'talked' b'in' b'Gilda'
    b'.' b'In' b'Adventure' b',' b'months' b'Copulation' b'attached' b'to' b'critical' b'jealous' b'punishment' b'but' b'commented' b'that' b'<unk>' b'was' b'embroidered' b'.' b'"' b'King'
    b'Airport' b'[' b's' b'I' b"'re" b'dispersed' b'again' b',' b'they' b'may' b'be' b'seen' b'preparation' b'in' b'a' b'less' b'recent' b'position' b',' b'of'
    b'physics' b'.' b'"' b'Later' b'it' b'reality' b'on' b'July' b'22' b',' b'battle' b'team' b'conference' b'Hibiscus' b'on' b'his' b'arm' b'cars' b'revealed' b':'
    b'<eos>' b'They' b',' b'one' b'who' b'is' b'<unk>' b',' b'<unk>' b'demons' b'in' b'games' b'(' b'win' b'?' b'<unk>' b')' b'is' b'so' b'given'
    b'such' b'large' b'Homeland' b',' b'trusted' b'his' b'MDS' b'and' b'phrase' b'by' b'Rare' b'and' b'Twenty' b'monarch' b',' b'"' b'Twice' b',' b'Ti' b'('
    b'see' b'2016' b')' b'government' b'at' b'dockyard' b'.' b'"' b'The' b'Pagan' b'Herald' b'(' b'Richardson' b')' b'public' b'is' b'in' b'financial' b'trouble' b'among'
    b'which' b'relationship' b'with' b'pictures' b'having' b'a' b'almami' b'Corporation' b'who' b'have' b'normally' b'mentioned' b'enemy' b'opera' b',' b'some' b'of' b'which' b'fits' b'the'
    b'year' b'by' b'World' b'War' b'I' b'.' b'<eos>' b'Crash' b'Baker' b'(' b'Paul' b'<unk>' b')' b'is' b'formed' b'by' b'an' b'biography' b'of' b'Rome'
    b'in' b'1913' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Playing' b'summary' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Design' b'programme' b'='
    b'=' b'=' b'<eos>' b'<eos>' b'Banksia' b'Baltimore' b'Superman' b'is' b'known' b'as' b'The' b'title' b'of' b'his' b'father' b'but' b'wrote' b'that' b'it' b'is'
    b'"' b'attractive' b',' b'and' b'National' b'Celtic' b'Church' b'could' b'things' b'but' b'rather' b'<unk>' b'or' b'there' b'is' b'no' b'biological' b'American' b'challenge' b','
    b'our' b'remarkable' b'ceased' b'of' b'faced' b'education' b'"' b'.' b'<unk>' b',' b'their' b'conformation' b'to' b'preserve' b'the' b'reality' b'of' b'disassembly' b',' b'was'
    b'vetoed' b'by' b'David' b'Hubbard' b',' b'releasing' b'them' b'to' b'negotiate' b'information' b'from' b'vision' b',' b':' b'a' b'Roman' b'rails' b'about' b':' b'<unk>'
    b'since' b'Sometimes' b'for' b'the' b'766th' b',' b'enhanced' b'Leon' b'chancel' b',' b'Sinner' b'Bird' b'<unk>' b',' b'at' b'Isesi' b',' b'and' b'in' b'the'
    b'latter' b'retrospective' b'possible' b'.' b'As' b'they' b'show' b'their' b'power' b'began' b',' b'by' b'this' b'point' b'he' b'couldn' b"'t" b'written' b'by' b'one'
    b'speculation' b'.' b'The' b'sexual' b'antelope' b'deals' b'in' b'the' b'sequence' b'in' b'1973' b'and' b'grow' b'on' b'his' b'own' b'film' b',' b'a' b'lecturer'
    b'of' b'"' b'Ceres' b',' b'food' b',' b'and' b'Greek' b'@-@' b'engined' b'starlings' b'that' b'don' b"'t" b'recommend' b'the' b'same' b'strategy' b'"' b'.'
    b'The' b'author' b'was' b'recited' b'in' b'the' b'second' b'@-@' b'term' b'penalties' b',' b'described' b'by' b'<unk>' b'Rodr\xc3\xadguez' b'for' b'McCarthy' b',' b'Witness' b'Boom'
    b'Bang' b'!' b'as' b'"' b'the' b'Gross' b';' b'<unk>' b'<unk>' b'net' b'Water' b'Parade' b',' b'<unk>' b'<unk>' b'@-@' b'<unk>' b'novelist' b'"' b'sports'
    b'<unk>' b'punted' b'on' b'overpainted' b'the' b'year' b'some' b'five' b'years' b'later' b'.' b'Old' b'One' b'is' b'also' b'impressed' b'by' b'usury' b'in' b'Threatened'
    b'until' b'being' b'carried' b'from' b'intermittent' b',' b'although' b'removed' b'is' b'spillway' b'.' b'<eos>' b'The' b'change' b'was' b'created' b'on' b'July' b'2' b','
    b'1999' b',' b'defeating' b'Thiele' b'guarding' b'an' b'novel' b'around' b'<unk>' b'<unk>' b'Media' b'.' b'The' b'Boat' b'Telegraph' b'bought' b'the' b'election' b'in' b'on'
    b'18' b'September' b'2001' b'by' b'it' b'professed' b'Benny' b'Joshua' b"'s" b'rival' b'woman' b'to' b'"' b'master' b'Tell' b'Round' b'"' b'of' b'the' b'small'
    b'African' b'American' b'player' b'.' b'This' b're' b'@-@' b'two' b'response' b'indicate' b'was' b'also' b'a' b'barred' b'game' b'in' b'a' b'Kannada' b'grain' b'Extra'
    b'League' b',' b'"' b'Glorious' b'of' b'and' b'Rights' b'of' b'King' b'"' b'to' b'promote' b'a' b'series' b'of' b'album' b'<unk>' b'houses' b'.' b'The'
    b'record' b'between' b'delay' b'executed' b'in' b'a' b'American' b'manner' b'@-@' b'announcing' b',' b'featuring' b'the' b'Loose' b'on' b'its' b'<unk>' b'block' b',' b'and'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.8
    loss: 5.168
    elapsed time (seconds): 147.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  14.071 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
