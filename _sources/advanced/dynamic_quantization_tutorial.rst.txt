.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'%' b'to' b'17' b'%' b',' b'<unk>' b',' b'David' b'<unk>' b',' b'and' b'is' b'probably' b'Porto' b'than' b'their' b'coronation' b'.' b'When' b'<unk>'
    b'used' b',' b'Polehinke' b'ordered' b'it' b'a' b'big' b'Christian' b'art' b';' b'including' b'his' b'<unk>' b'block' b'and' b'his' b'chat' b'disadvantages' b'would' b'be'
    b'Slavonia' b'.' b'The' b'commonly' b'feared' b'@-@' b'PlayStation' b'to' b'all' b'@-@' b'Star' b'Game' b'funk' b'Walpole' b'invested' b'in' b'<unk>' b',' b'Dominic' b'<unk>'
    b'and' b'Sicily' b'and' b'as' b'a' b'tattoo' b'at' b'the' b'Cadets' b'.' b'<eos>' b'The' b'most' b'lost' b'prize' b'length' b'of' b'Crash' b'in' b'Joseph'
    b'Side' b'in' b'Vault' b'reported' b'that' b'images' b'why' b'show' b'is' b'left' b'to' b'a' b'planet' b'of' b'doubt' b'into' b'Crash' b'Awards' b'Trophy' b','
    b'was' b'dispersed' b'in' b'2010' b'.' b'By' b'then' b'been' b'known' b'until' b'a' b'short' b'interview' b'into' b'its' b'large' b'relative' b'years' b'over' b'the'
    b'period' b'of' b'marker' b'tour' b'by' b'contentment' b'stechowi' b'.' b'Chen' b"'" b'death' b'on' b'his' b'wife' b'and' b'pass' b'video' b',' b'insurgent' b','
    b'and' b'spitting' b'new' b'@-@' b'based' b'emergency' b'basis' b'to' b'Delhi' b'or' b'hypothetical' b'racing' b'presence' b'.' b'The' b'Alabama' b'More' b'"' b'Moth' b'duel'
    b'in' b'a' b'custom' b'class' b'"' b'which' b'should' b'be' b'used' b'to' b'shift' b'longer' b'at' b'to' b'make' b'again' b'opposition' b'class' b'when' b'DRC'
    b'played' b'why' b'this' b'Bj\xc3\xb8rn' b'pointer' b'who' b'began' b'down' b'.' b'<eos>' b'The' b'beginning' b'of' b'his' b'decline' b'had' b'greatly' b'indicated' b'seeing' b'stories'
    b'of' b'Pioneer' b'who' b'hinted' b'Luz' b'.' b'According' b'to' b'relive' b'accusing' b'fallen' b'about' b'Habroptila' b',' b'he' b'and' b'it' b'has' b'caused' b'in'
    b'the' b'illustrate' b'Mortal' b'1914' b'declared' b'modern' b'sons' b'from' b'Princeton' b',' b'and' b'seeing' b'it' b'the' b'5th' b'National' b'century' b'at' b'his' b'four'
    b'@-@' b'year' b'run' b',' b'Pig' b'said' b'it' b'might' b'send' b'another' b'to' b'take' b'more' b'days' b'for' b'him' b'so' b'.' b'One' b'aspect'
    b'was' b'the' b'game' b'that' b'Per\xc3\xb3n' b'may' b'be' b'normally' b'amended' b'satisfied' b'.' b'He' b'enters' b'powerful' b'support' b'by' b'Doyle' b"'s" b'biographer' b'in'
    b'general' b'spite' b',' b'towers' b',' b'sending' b'her' b'demise' b'by' b'McCartney' b'and' b'Pasupathy' b'.' b'Risk' b'candidates' b'or' b'dignity' b'have' b'since' b'approached'
    b'at' b'2009' b'.' b'<eos>' b'Walpole' b'is' b'also' b'important' b'of' b'the' b'provinces' b'of' b'cars' b',' b'as' b'well' b'as' b'a' b'museum' b'between'
    b'Rear' b'Snow' b'\xe2\x80\x99' b's' b'<unk>' b'<unk>' b'.' b'In' b'an' b'attempt' b'to' b'convicted' b'of' b'the' b'240' b'@-@' b'bed' b'to' b'"' b'R'
    b'One' b',' b'and' b'[' b'of' b']' b'another' b'lifelong' b'team' b'"' b',' b'"' b'O' b"'t" b'have' b'I' b'a' b'idea' b']' b'['
    b'I' b'Barghash' b'<unk>' b'to' b'present' b'feels' b'for' b'I' b'should' b'say' b'patterns' b'that' b'must' b'wait' b'with' b'you' b'short' b'.' b'"' b'When'
    b'an' b'non' b'@-@' b'proclaimed' b'contemporary' b'brutally' b'object' b'failed' b'to' b'give' b'over' b'to' b'decline' b'they' b'rushed' b'with' b'Midlothian' b'.' b'The' b'<unk>'
    b'European' b'general' b'race' b'has' b'temperature' b'rates' b'of' b'Fresnel' b'comeback' b'following' b'appease' b'Henry' b'played' b'at' b'2' b'%' b'of' b'a' b'transit' b'.'
    b'Sometimes' b'most' b'internal' b'Neptune' b'wash' b'four' b'students' b',' b'ordinarily' b',' b'<unk>' b',' b'Whitney' b'<unk>' b'and' b'T' b'wrongdoing' b'so' b'occasionally' b'Hoyt'
    b'yielding' b'canals' b'to' b'first' b'seem' b'three' b'stories' b'from' b'nor' b'in' b'children' b';' b'Flower' b'<unk>' b'enrolment' b'confession' b"'s" b'comrades' b'written' b'Keamy'
    b'on' b'er' b'.' b'Tessa' b'released' b'Moltke' b'on' b'the' b'basis' b'and' b'on' b'its' b'barrow' b'Either' b'older' b'.' b'The' b'surviving' b'federations' b'troops'
    b'stand' b'in' b'1788' b'.' b'Neither' b'women' b'took' b'begun' b'inscriptions' b'to' b'allow' b'sure' b'they' b'were' b'a' b'conservation' b',' b'grain' b'mortal' b'funds'
    b'.' b'Project' b'pursuers' b'positively' b'were' b'<unk>' b',' b'averaging' b'the' b'hint' b'party' b'.' b'The' b'IBC' b'glue' b'for' b'Best' b'One' b'@-@' b'i'
    b'appropriate' b'partners' b'in' b'players' b'and' b'friendly' b'items' b'points' b'paying' b'O' b"'Malley" b'.' b'The' b'last' b'move' b'of' b'steady' b'management' b'was' b'developed'
    b'ending' b'by' b'wrinkled' b'to' b'12' b'\xe2\x80\x93' b'30' b'@.@' b'8' b'in' b'2002' b'.' b'<eos>' b'The' b'short' b'people' b'required' b'just' b'in' b'August'
    b',' b'1986' b',' b'several' b'sort' b',' b'Anatomy' b',' b'Offensive' b',' b'and' b'police' b'.' b'O' b'miners' b'fled' b'for' b'a' b'special' b'universe'
    b'may' b'undergo' b'%' b'side' b'of' b'evacuate' b'firing' b'correct' b'critics' b'for' b'its' b'regular' b'season' b'bowl' b'station' b'.' b'In' b'Langstaff' b"'s" b'racing'
    b'competition' b'and' b'book' b',' b'Ceres' b'obtained' b'critical' b'support' b',' b'leading' b'from' b'1943' b'to' b'playing' b'rehabilitation' b'in' b'support' b'and' b'friend' b'"'
    b'selection' b'"' b'on' b'episodic' b'troubles' b'.' b'He' b'also' b'involved' b'a' b'mini' b'@-@' b'story' b'journal' b'of' b'lip' b'interest' b'against' b'Wales' b'as'
    b'co' b'@-@' b'<unk>' b'as' b'a' b'forward' b'score' b'.' b'This' b'characters' b'visitors' b'tended' b'to' b'<unk>' b'proportional' b'data' b'in' b'the' b'world' b','
    b'so' b'several' b'massive' b'directors' b'are' b'intervened' b'if' b'Ostend' b'took' b'place' b',' b'pigs' b'core' b'Z.' b'Inez' b',' b'at' b'whether' b'eleven' b'females'
    b'were' b'sometimes' b'lost' b'in' b'266' b'games' b'.' b'<unk>' b'reproduction' b'Walpole' b'remained' b'in' b'a' b'optimism' b'that' b'he' b'wrote' b'at' b'66' b':'
    b'15' b',' b'Italian' b'and' b'Cod' b'Rogan' b'.' b'Mexican' b'characters' b'were' b'halted' b'for' b'Operation' b'<unk>' b'Dax' b'and' b'<unk>' b'General' b'Dennis' b'Mead'
    b',' b'while' b'not' b'successfully' b'a' b'game' b'whose' b'decision' b'rose' b'.' b'According' b'to' b'boredom' b',' b'it' b'would' b'be' b'without' b'security' b'Born'
    b'mindless' b'for' b'any' b'night' b'with' b'a' b'historical' b'deal' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Metropolis' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'In' b'1988' b',' b'Mosley' b'served' b'as' b'most' b'variations' b'for' b'traditional' b'Kody' b',' b'a' b'Air' b'@-@' b'Roman' b'basketball' b'javelin' b'from' b'Celia'
    b',' b'in' b'his' b'Systema' b'Hall' b',' b'Ford' b'.' b'Final' b'Ireland' b'on' b'a' b'October' b'anniversary' b',' b'mainly' b'of' b'Port' b"'Africaine" b','
    b'said' b'that' b'because' b'of' b'these' b'teams' b'who' b'would' b'imagines' b'the' b'Soviets' b'was' b'offered' b'good' b',' b'securing' b'how' b'he' b'actually' b'enjoyed'
    b'it' b'a' b'<unk>' b'.' b'At' b'that' b'year' b',' b'Ava' b'began' b'a' b'heavily' b'down' b',' b'but' b'extra' b'officials' b'.' b'When' b'the'
    b'planet' b'deemed' b'to' b'Tintin' b',' b'they' b'will' b'be' b'sad' b'to' b'have' b'been' b'taught' b'in' b'archaeologists' b'.' b'<eos>' b'The' b'first' b'counterpart'
    b',' b'University' b'designed' b'to' b'Captain' b'I' b',' b'and' b'there' b'was' b'no' b'legal' b'mighty' b'into' b'the' b'Annals' b'that' b'it' b'might' b'be'
    b'alive' b',' b'as' b'it' b"'s" b'<unk>' b'.' b'Along' b'for' b'watching' b'ver' b',' b'Ceres' b"'s" b'first' b'brother' b'level' b'experience' b'<unk>' b','
    b'completely' b'becoming' b'individually' b'Nogi\xc4\x87' b'.' b'The' b'estimate' b'of' b'Judas' b'are' b'warmly' b'negative' b'.' b'Hornung' b'approved' b'not' b'a' b'moment' b'of' b'reported'
    b'race' b',' b'possibly' b'Swansea' b'may' b'interpreted' b'long' b'to' b'that' b'third' b'.' b'In' b'his' b'final' b'game' b'he' b'explicitly' b'criticizes' b'serve' b'with'
    b'his' b'effect' b'over' b',' b'but' b'then' b'after' b'Zhou' b"'" b'successor' b'Soundscan' b'his' b'scholarship' b'until' b'2006' b'.' b'He' b'said' b'<unk>' b'uses'
    b'details' b'O' b"'Malley" b',' b'urged' b'it' b'"' b"'" b'I' b"'s" b'not' b'just' b'a' b'stole' b'shame' b'"' b'.' b'<unk>' b'commented' b','
    b'"' b'The' b'mother' b'of' b'<unk>' b'never' b'announced' b'cliff' b'.' b'National' b'speaking' b'your' b'newest' b'death' b'are' b'at' b'our' b'"' b'.' b'Mosley'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 237.1
    loss: 5.168
    elapsed time (seconds): 168.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  50.833 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
