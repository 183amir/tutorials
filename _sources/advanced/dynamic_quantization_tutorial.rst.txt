.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'In' b'addition' b',' b'the' b'administration' b'spent' b'place' b'upon' b'entirely' b'due' b'to' b'promoting' b'information' b'from' b'contact' b':' b'"' b'O' b"'t"
    b'read' b'it' b'as' b'of' b'the' b'other' b'Palestinian' b'Peninsula' b'.' b'The' b'worst' b'bell' b'and' b'sinner' b'concerned' b'it' b'Chairman' b'of' b'my' b'tomb'
    b'.' b'There' b'is' b'than' b'every' b'less' b'short' b'novel' b',' b'it' b'had' b'the' b'desire' b'pilot' b',' b'from' b'a' b'floor' b'more' b'inscription'
    b'that' b'it' b'was' b'lost' b'because' b'Rihanna' b'asserts' b'aside' b'at' b'these' b'or' b'taste' b',' b'fourth' b'on' b'served' b'by' b'an' b'small' b'school'
    b'and' b'true' b'@-@' b'tapping' b'force' b'"' b'.' b'Despite' b'shipments' b'of' b'no' b'commanders' b',' b'Designer' b'Teams' b'exhibits' b'"' b'woodlands' b'and' b'house'
    b'"' b'.' b'Development' b'stated' b'that' b'employment' b'led' b'herself' b'from' b'their' b'playing' b'cap' b',' b'but' b'as' b'they' b'occur' b'in' b'the' b'same'
    b'group' b'that' b'both' b'him' b'Advisory' b'regulations' b'seems' b'to' b'happen' b'.' b'"' b'Maarten' b'"' b'takes' b'place' b'at' b'mass' b'protests' b'and' b'Poetry'
    b'children' b',' b'which' b'were' b'known' b'in' b'<unk>' b'Suicide' b',' b'his' b'third' b'report' b',' b'an' b'hour' b'at' b'a' b'month' b'in' b'Game'
    b'v.' b'<unk>' b'as' b'presumed' b'as' b'the' b'first' b'"' b'List' b'art' b'"' b'system' b'to' b'be' b'introduced' b'on' b'November' b'12' b',' b'2006'
    b'.' b'After' b'July' b'5' b',' b'2005' b',' b'Oakley' b'turned' b'with' b'a' b'all' b'@-@' b'time' b'variety' b'on' b'39' b'November' b'2005' b'.'
    b'The' b'book' b'became' b'official' b'for' b'the' b'prior' b'vivo' b'slapping' b'<unk>' b'Adrien' b'!' b'Dress' b':' b'the' b'university' b"'s" b'more' b'novel' b'first'
    b'surname' b'<unk>' b',' b'whose' b'time' b'woman' b'in' b'his' b'final' b'time' b'on' b'the' b'third' b'ratings' b'alone' b',' b'but' b'this' b'was' b'approximately'
    b'until' b'the' b'release' b'of' b'a' b'collection' b'called' b'The' b'Quite' b'Guest' b'EP' b'(' b'Live' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Resignation'
    b'and' b'synopsis' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Great' b'Tide' b'become' b'a' b'primary' b'screened' b'in' b'characters' b'by' b'<unk>' b'depicting' b'Loud' b'in'
    b'May' b'2006' b'.' b'(' b'2013' b')' b'oversaw' b'its' b'father' b'<unk>' b'with' b'Brown' b',' b'having' b'a' b'duration' b'to' b'play' b'that' b'records'
    b'compared' b',' b'though' b'in' b'the' b'final' b'day' b'they' b'are' b'to' b'take' b'year' b'suffering' b'to' b'The' b'strength' b'of' b'<unk>' b"'s" b'release'
    b'.' b'Hamels' b'also' b'cited' b'the' b'Dark' b'Soundtrack' b'in' b'2015' b',' b'and' b'also' b'completed' b'financial' b'backgrounds' b'and' b'globe' b',' b'featuring' b'Columbia'
    b'Burnley' b',' b'<unk>' b'Boom' b'!' b',' b'Best' b'Race' b',' b'Joyful' b'Management' b',' b'The' b'Waldemar' b'Mason' b'and' b'Monash' b'Night' b'in' b'1212'
    b'.' b'<eos>' b'SG' b'starlings' b'<unk>' b'Youth' b'Vinci' b'as' b'being' b'a' b'gill' b'@-@' b'Chief' b'<unk>' b'or' b'the' b'Bell' b'theatre' b'show' b','
    b'Stewart' b'<unk>' b'and' b'The' b'Morey' b'Programme' b'pulled' b'.' b'The' b'other' b'With' b'the' b'story' b'for' b'Raffles' b'.' b'As' b'shop' b',' b'amongst'
    b'of' b'similarities' b'into' b'disaster' b'for' b'their' b'Desire' b'in' b'the' b'2009' b'season' b',' b'Matt' b'loves' b'a' b'wide' b'appearance' b'after' b'her' b'pair'
    b'.' b'A' b'public' b'"' b'domain' b'"' b'was' b'caused' b'by' b'Tower' b'Jones' b',' b'a' b'critic' b'who' b'commented' b'Carey' b"'" b'breakdown' b'needed'
    b'on' b'a' b'track' b'of' b'exclusive' b'contact' b',' b'"' b'I' b'don' b"'t" b'wish' b'by' b'eyes' b'and' b'thousands' b'of' b'an' b'game' b','
    b'really' b'on' b'23' b'November' b'2008' b'published' b'from' b'their' b'petition' b'in' b'1850' b'.' b'"' b'D' b'tries' b'was' b'also' b'released' b'to' b'accurately'
    b"'s" b'again' b'as' b'Paul' b'Tzu' b'.' b'The' b'lease' b'was' b'conducted' b'by' b'Nick' b'anime' b',' b'while' b'the' b'sold' b'industry' b'be' b'not'
    b'obsolete' b'by' b'<unk>' b'the' b'desert' b',' b'thanks' b'to' b'a' b'name' b'<unk>' b'Him' b'on' b'the' b'February' b'31' b',' b'2006' b'Critic' b'"'
    b'The' b'Gray' b'Laud' b'"' b',' b'featuring' b'our' b'rough' b'signature' b'when' b'casting' b'implied' b'March' b'Ceres' b'had' b'been' b'allowed' b'to' b'leave' b'the'
    b'24th' b'score' b'for' b'him' b'.' b'<eos>' b'In' b'1810' b',' b'the' b'season' b'is' b'called' b'possible' b'as' b'Butterfly' b"'s" b'own' b'@-@' b'sized'
    b'car' b'.' b'The' b'association' b'on' b'the' b'character' b'was' b'docked' b'on' b'September' b'10' b'in' b'patriarchal' b'intensity' b',' b'following' b'much' b'of' b'these'
    b'cover' b'by' b'God' b'Morris' b"'s" b'cease' b'of' b'remixes' b'.' b'<eos>' b'Walpole' b'received' b'Gil' b'reviews' b'from' b'critics' b'who' b'learned' b'his' b'phrase'
    b'following' b'his' b'members' b'where' b'his' b'thesis' b'"' b'there' b'may' b'have' b'plagued' b'.' b'You' b'see' b'isn' b"'t" b"'t" b'be' b'a' b'child'
    b'"' b'.' b'The' b'General' b'<unk>' b'David' b'Goose' b'distributes' b'the' b'crescendo' b'in' b'2001' b'.' b'<unk>' b'.' b'<eos>' b'Before' b'Hornung' b'debuted' b'and'
    b'from' b'his' b'motion' b',' b'he' b'was' b'first' b'governed' b'on' b'a' b'200' b'@-@' b'minute' b'novel' b'erected' b'at' b'2' b':' b'24' b'p.m.'
    b'(' b'<unk>' b')' b':' b'the' b'Maryland' b'Hall' b'of' b'America' b'(' b'No' b'Iroquois' b',' b'later' b'shoot' b')' b'.' b'<unk>' b'also' b'played'
    b'as' b'Francis' b'of' b'North' b'Carolina' b',' b'where' b'they' b'can' b'be' b'able' b'to' b'go' b'to' b'close' b'.' b'Allmusic' b'go' b'the' b'school'
    b'banking' b'for' b'<unk>' b'(' b'57' b'%' b'based' b'from' b'NHA' b'with' b'highest' b')' b'approximately' b'many' b'years' b'.' b'One' b'of' b'the' b'money'
    b'really' b'offers' b'Kody' b'from' b'the' b'Westinghouse' b'Basketball' b'Yuan' b'Hall' b'of' b'Pitlake' b'.' b'In' b'1845' b',' b'hundreds' b'of' b'all' b'remix' b'including'
    b'1' b'%' b'of' b'Malay' b'%' b'.' b'The' b'eight' b'or' b'four' b'second' b'works' b'were' b'reported' b'.' b'The' b'latter' b'was' b'named' b'a'
    b'cameo' b'majority' b'for' b'a' b'star' b'as' b'a' b'sixth' b'full' b',' b'better' b'and' b'boyfriend' b',' b'on' b'December' b'1' b',' b'2006' b'.'
    b'A' b'PlayStation' b'4' b'hardcover' b'from' b'Metallica' b'was' b'titled' b'It' b'was' b'as' b'"' b'gold' b'patterns' b'and' b'commercial' b'fans' b'of' b'aspects' b'from'
    b'a' b'entertaining' b'planet' b'funfair' b'.' b'"' b'"' b'The' b'Moment' b'"' b'premiered' b'on' b'November' b'15' b',' b'2009' b'.' b'The' b'designer' b'Amylostereaceae'
    b'Mandel' b'formation' b'elements' b'in' b'this' b'way' b'to' b'be' b'found' b'in' b'Japan' b',' b'starting' b'in' b'2006' b'.' b'Peshkin' b'was' b'called' b'to'
    b'the' b'American' b'race' b'to' b'storytelling' b'her' b'of' b'Raffles' b"'s" b'disturbances' b'as' b'"' b'probably' b'still' b'in' b'a' b'scaled' b'head' b',' b'something'
    b'in' b'feels' b'to' b'come' b'down' b'along' b'something' b'.' b'"' b'Adult' b'dragon' b'.' b'Throughout' b'13' b'weeks' b'in' b'their' b'<unk>' b'were' b'printed'
    b'on' b'October' b'13' b',' b'1999' b'.' b'Turner' b'won' b'it' b'<unk>' b',' b'spiritual' b',' b'<unk>' b'while' b'clapping' b',' b'earning' b'to' b'victory'
    b'three' b'years' b',' b'and' b'return' b'to' b'an' b'devastating' b'amount' b'in' b'subversion' b'television' b'stories' b'.' b'When' b'WRU' b'was' b'more' b'warm' b'for'
    b'their' b'statement' b',' b'with' b'the' b'<unk>' b'exclusive' b',' b'Raffles' b'Fish' b'narrowly' b'released' b'its' b'early' b'pro' b'@-@' b'star' b'workforce' b',' b'denoting'
    b'an' b'header' b'to' b'a' b'freshwater' b'car' b',' b'that' b'its' b'82' b'points' b',' b'dated' b'of' b'Washington' b'and' b'12' b'.' b'In' b'the'
    b'final' b'years' b'he' b'contributed' b'to' b'Meyers' b'for' b'their' b'rectified' b'in' b'<unk>' b',' b'developed' b'laughter' b'on' b',' b'expected' b',' b'The' b'meta'
    b'conferences' b'of' b'Mars' b'were' b'did' b'not' b'write' b'those' b'with' b'old' b'behaviour' b'.' b'According' b'to' b'<unk>' b'concentrate' b'on' b'four' b'Sunday' b'rates'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.1
    loss: 5.168
    elapsed time (seconds): 149.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.530 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
