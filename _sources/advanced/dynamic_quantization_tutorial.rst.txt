.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'and' b'published' b'a' b'shelter' b'vying' b'around' b'Palmer' b'.' b'There' b'is' b'first' b'evidence' b'of' b'experience' b'available' b'in' b'the' b'state' b'onwards'
    b';' b'they' b'were' b'surgical' b'into' b'a' b'gold' b'series' b',' b'with' b'which' b'their' b'meaning' b'requires' b',' b'"' b'baht' b'Robot' b'"' b','
    b'"' b'Andrew' b'Joel' b'"' b'People' b'(' b'2007' b')' b'.' b'In' b'1877' b',' b'the' b'Man' b'Committee' b'called' b'"' b'It' b"'s" b'the'
    b'final' b'traditional' b'woman' b'"' b'song' b'Duke' b',' b'The' b'noted' b'Revival' b'Party' b',' b'Canada' b'(' b'was' b'<unk>' b'as' b'possible' b'as' b'"'
    b'man' b'<unk>' b'"' b')' b'.' b'<eos>' b'Some' b'of' b'these' b'players' b'were' b'regularly' b'published' b'.' b'<unk>' b'cohesion' b'in' b'popular' b'combat' b'exercises'
    b'was' b'found' b'by' b'reached' b'exposures' b'and' b'the' b'magazines' b'made' b'back' b'back' b'to' b'crime' b'by' b'Alan' b'M.' b'stylus' b'.' b'However' b','
    b'it' b'initially' b'featured' b'the' b'pillow' b'over' b'<unk>' b'with' b'Abraham' b'halogenated' b'1155' b'are' b'A4232' b'segregated' b',' b'though' b'their' b'<unk>' b',' b'UNOSOM'
    b'civilizations' b',' b'the' b'Revolution' b'killed' b'that' b'a' b'lawyer' b'such' b'as' b'to' b'contraction' b'for' b'rule' b'and' b'making' b'his' b'great' b'stomach' b'.'
    b'Once' b'the' b'first' b'two' b'diverse' b'century' b'paintings' b'in' b'the' b'mode' b'over' b'Migration' b'or' b'early' b'elsewhere' b',' b'their' b'official' b'physics' b'premiere'
    b'the' b'<unk>' b'is' b'sent' b'by' b'prevailed' b'with' b'a' b'modern' b',' b'books' b'Palestine' b'commonly' b'then' b'created' b'as' b'a' b'test' b'used' b'for'
    b'their' b'game' b'or' b'finding' b'its' b'title' b'between' b'transitioning' b'.' b'It' b'Human' b"'t" b'guy' b'increasing' b'freshmen' b"'" b'275' b'.' b'If' b'their'
    b'pathway' b'are' b'screened' b'as' b'it' b'is' b'lacking' b'to' b'occur' b',' b'(' b'due' b'to' b'its' b'502nd' b'Rasbach' b',' b'is' b'the' b'most'
    b'than' b'longer' b'time' b'at' b'locals' b',' b'either' b'with' b'parrot' b'Earth' b'were' b'Hauser' b'out' b')' b',' b'that' b'changes' b'away' b'from' b'dark'
    b'that' b'or' b'effects' b'nature' b'by' b'things' b'or' b'difficulty' b'AD' b'when' b'they' b'are' b"'s" b'longer' b',' b'philosophy' b'criticism' b'achieved' b'an' b'eclipse'
    b'.' b'<eos>' b'Low' b'quantity' b'allows' b'an' b'number' b'of' b'bird' b'records' b',' b'he' b'<unk>' b'to' b'protect' b'a' b'minor' b'to' b'left' b'characters'
    b'just' b'be' b'comprised' b'.' b'Apart' b',' b'if' b'it' b'culture' b'wife' b'II' b'have' b'thoughts' b':' b'<eos>' b'<unk>' b':' b'in' b'12th' b'Queensland'
    b',' b'and' b'achieved' b'responds' b'to' b'the' b'mayor' b'behind' b'<unk>' b',' b'Cornhill' b'at' b'<unk>' b'.' b'In' b'The' b'fourth' b',' b'it' b'is'
    b'generally' b'very' b'vertically' b'on' b'flightless' b'left' b',' b'gods' b'can' b'sometimes' b'accompany' b'the' b'cause' b'of' b'her' b'boyfriend' b'taxa' b'and' b'.' b'Any'
    b'wording' b'they' b'have' b'<unk>' b'Kawartha' b'bodies' b',' b'images' b'of' b'the' b'sheep' b'obligation' b',' b'"' b'relating' b'to' b'recording' b'to' b'it' b'guns'
    b'in' b'stem' b'to' b'darkness' b',' b'cool' b'<unk>' b'critics' b'and' b'abuse' b'.' b'"' b'<eos>' b'Among' b'a' b'long' b'these' b'person' b'was' b'mentioned'
    b'shortly' b'before' b'Sundance' b"'s" b'vision' b',' b'the' b'alpha' b'(' b'segments' b'@-@' b'long' b',' b'or' b'railhead' b')' b'is' b'a' b'Outer' b'discus'
    b'crust' b'of' b'hunted' b'religious' b'areas' b'and' b'his' b'many' b'resources' b'.' b'Both' b'<unk>' b'are' b'paler' b',' b'surrounded' b'by' b'<unk>' b'27' b'\xe2\x80\x93'
    b'186' b'@-@' b'acre' b'(' b'15' b'km' b'/' b'h' b')' b'and' b'the' b'Revolver' b',' b'consisting' b'(' b'range' b')' b'is' b'draught' b'of'
    b'natural' b'viaduct' b'and' b'were' b'originated' b'down' b'though' b'the' b'female' b'is' b'original' b'out' b'on' b',' b'nose' b',' b'<unk>' b'and' b'<unk>' b'.'
    b'A' b'continual' b'greenish' b'occurs' b'diagram' b'of' b'any' b'pink' b'BMW' b',' b'it' b'contains' b'<unk>' b',' b'and' b'form' b'her' b'head' b'surface' b'into'
    b'her' b'head' b'Files' b'.' b'<eos>' b'Predators' b',' b'minute' b',' b'and' b'common' b'concentrations' b'structures' b',' b'breeding' b'displays' b',' b'are' b'named' b'compulsory'
    b',' b'neutrons' b'and' b'escape' b'.' b'Then' b'in' b'the' b'solved' b'eukaryotic' b'diameter' b',' b'radioactive' b'sexpunctatus' b'alarm' b'.' b'<eos>' b'In' b'the' b'spring'
    b'of' b'Antigua' b',' b'in' b'its' b'100th' b'room' b',' b'the' b'rest' b'of' b'Starfleet' b'show' b'the' b'current' b'nature' b'of' b'Ceres' b',' b'which'
    b'northerly' b'by' b'the' b'late' b'Intermediate' b'practice' b'was' b'so' b'found' b'a' b'focus' b'at' b'its' b'death' b'.' b'Common' b'scales' b'should' b'be' b'distinguished'
    b'by' b'Jain' b'birds' b',' b'rather' b',' b'89' b'@-@' b'or' b'@-@' b'stains' b'or' b'a' b'egg' b'.' b'As' b'asteroids' b'have' b'result' b','
    b'they' b'are' b'one' b'of' b'the' b'most' b'problematic' b'unstable' b'herbivorous' b'male' b'when' b'they' b'am' b'in' b'the' b'Week' b',' b'and' b'so' b'even'
    b'or' b'<unk>' b'several' b'different' b'broods' b'.' b'As' b'adult' b'domains' b'if' b'symbolic' b'common' b'starling' b'types' b',' b'to' b'take' b'Break' b',' b'the'
    b'kakapo' b'is' b'mobilized' b'to' b'either' b'Fiji' b'or' b'up' b'in' b'Runway' b',' b'but' b'concentrate' b'up' b'.' b'<eos>' b'Within' b'the' b'other' b'levels'
    b'of' b'wood' b'records' b',' b'they' b'are' b'occasionally' b'try' b'by' b'transcription' b',' b'so' b'the' b'kakapo' b'was' b'later' b'encoded' b'.' b'Large' b'cause'
    b',' b'however' b',' b'are' b'responsible' b'for' b'nestlings' b'so' b'at' b'least' b'"' b'prolific' b'"' b'Pisolithus' b',' b'so' b'she' b'is' b'often' b'halted'
    b'.' b'According' b'to' b'flocks' b'while' b'by' b'some' b'species' b',' b'simpler' b'combines' b'by' b'honesty' b',' b'Sitriuc' b'finds' b'Sky' b'Jewels' b',' b'usually'
    b'"' b'<unk>' b'<unk>' b'"' b'.' b'Other' b'of' b'these' b'are' b'necessary' b'to' b'appear' b'more' b'also' b'adjacent' b'by' b'pretend' b',' b'and' b'more'
    b'described' b'<unk>' b'of' b'a' b'spatial' b'woody' b'night' b',' b'suggesting' b'using' b'<unk>' b'left' b'turrets' b'of' b'non' b'@-@' b'century' b'males' b'to' b'find'
    b'food' b'to' b'a' b'cellular' b'head' b',' b'leading' b'to' b'be' b'confused' b'.' b'Since' b'this' b'cadmium' b'bunch' b'varieties' b'in' b'Northern' b'Ireland' b'gives'
    b'<unk>' b'or' b'delicate' b'edifice' b'abandoned' b'it' b';' b'this' b'does' b'be' b'mRNA' b',' b'but' b'they' b'have' b'up' b'coalitions' b'the' b'largest' b'Liao'
    b'parts' b'of' b'Ceres' b'.' b'<eos>' b'The' b'Republic' b'of' b'Ireland' b'performed' b'in' b'the' b'aftermath' b'of' b'his' b'possessions' b',' b'each' b'of' b'which'
    b',' b'even' b'as' b',' b'enslaved' b'studies' b'affecting' b'depressions' b',' b'makes' b'down' b'as' b'RNA' b'woodlands' b'and' b'direct' b'them' b'to' b'boys' b','
    b'similar' b'to' b'the' b'hyphae' b'of' b'clouds' b',' b'towers' b'and' b'black' b'starlings' b',' b'neck' b',' b'and' b'trees' b',' b'and' b'found' b'them'
    b'a' b'theory' b'energy' b'involved' b',' b'a' b'natural' b'parrot' b'slowly' b'which' b'they' b'affect' b'a' b'kind' b'of' b'habitat' b'would' b'function' b'out' b'.'
    b'Accordingly' b',' b'this' b'idea' b'when' b'females' b'feeds' b'in' b'practice' b',' b'Dr' b'Hibari' b"'s" b'first' b'End' b'the' b'structure' b'.' b'The' b'prince'
    b'flies' b'to' b'have' b'a' b'"' b'regular' b'"' b'large' b',' b'white' b'by' b',' b'<unk>' b'fresh' b',' b'theoretical' b',' b'and' b'poignant' b'eggs'
    b'from' b'owenii' b'.' b'These' b'male' b'one' b'says' b'during' b'Sudan' b',' b'knowing' b'urban' b'membrane' b'food' b',' b'develop' b'Normandie' b'seen' b',' b'fractured'
    b'and' b'disk' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Lupton' b'=' b'=' b'<eos>' b'<eos>' b'<unk>' b',' b'known' b'is' b'said' b'for' b'their' b'arrival'
    b',' b'as' b'for' b'most' b'possible' b'lakes' b'.' b'1982' b'(' b'or' b'Greek' b'Blue' b')' b'includes' b'that' b'humans' b'are' b'a' b'Cobain' b'series'
    b'who' b'was' b'capable' b'of' b'predators' b':' b'"' b'they' b'have' b'hoped' b'to' b'be' b'agrees' b'to' b'start' b'affected' b'a' b'four' b'to' b'strike'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.0
    loss: 5.168
    elapsed time (seconds): 150.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  21.950 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
