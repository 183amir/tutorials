.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'<unk>' b',' b'number' b'investigates' b'in' b'New' b'Zealand' b',' b'where' b'with' b'participating' b'on' b'to' b'speak' b'.' b'Ghats' b'in' b'reappears' b'is'
    b'fit' b'in' b'1905' b',' b'but' b'after' b'the' b'first' b'party' b',' b'Ingrid' b'expected' b'that' b'it' b'would' b'<unk>' b'it' b'to' b'use' b'use'
    b'inverted' b'@-@' b'Mayer' b'production' b'.' b'cultures' b'and' b'154' b'lines' b'occur' b'(' b'30' b'to' b'18' b'ft' b')' b'in' b'selling' b'a' b'new'
    b'point' b'.' b'It' b'is' b'sometimes' b'required' b'because' b'"' b'It' b'is' b'Tribble' b'innovative' b'or' b'rice' b'and' b'perfect' b'fermentation' b'Even' b'yes' b','
    b'and' b'the' b'<unk>' b'iron' b'dead' b'are' b'now' b'tightly' b'striking' b'to' b'land' b'off' b'bodies' b'.' b'After' b'they' b'don' b"'t" b'look' b'on'
    b'a' b'one' b'of' b'land' b'years' b'to' b'express' b'a' b'NBA' b'or' b'fighting' b'them' b'.' b'location' b'can' b'be' b'satisfied' b'close' b'to' b'August'
    b'1' b',' b'1999' b'.' b'There' b'cannot' b'be' b'in' b'a' b'few' b'years' b'troop' b'sequence' b'can' b'have' b'been' b'heard' b'from' b'Arkansas' b','
    b'<unk>' b'Go\xc3\xa2ve' b'\xe2\x80\x93' b'are' b'close' b'<unk>' b'body' b'.' b'The' b'latter' b'maintains' b'yards' b'and' b'NCAP' b',' b'may' b'be' b'defined' b'to' b'all'
    b'very' b'establishes' b',' b'with' b'<unk>' b'Groups' b'.' b'Paul' b'Hamilton' b'is' b'invested' b'"' b'.' b'Extensive' b'track' b'of' b'a' b'width' b'of' b'fresh'
    b'risk' b'can' b'be' b'closed' b'.' b'<eos>' b'In' b'computers' b',' b'the' b'kakapo' b'for' b'security' b'in' b'application' b'may' b'be' b'good' b',' b'while'
    b'the' b'wolf' b'pitching' b'their' b'additional' b'horizontal' b'cargo' b'she' b'is' b'being' b'responsible' b'from' b'the' b'eggs' b'.' b'It' b'has' b'four' b'separate' b'pairs'
    b'of' b'astronomers' b'shotguns' b'orders' b'on' b'active' b'threat' b'that' b'it' b'is' b'the' b'fastest' b'consumed' b'pain' b',' b'which' b'eventually' b'is' b'Tuojiangosaurus' b'.'
    b'One' b'signings' b'were' b'by' b'other' b'ways' b'in' b'Japan' b'.' b'<eos>' b'<unk>' b'that' b'they' b'are' b'higher' b',' b'there' b'are' b'<unk>' b'that'
    b'may' b'be' b'seen' b'by' b'gills' b',' b'but' b'others' b'may' b'have' b'long' b'proud' b'of' b'food' b'and' b'even' b'equally' b'faculty' b'.' b'If'
    b'some' b'birds' b'exist' b'<unk>' b'to' b'humans' b',' b'such' b',' b'or' b'they' b'have' b'"' b'<unk>' b'better' b'@-@' b'seam' b'"' b'.' b'<unk>'
    b'Slams' b'but' b'sudden' b'damage' b'of' b'rats' b'might' b'be' b'obtained' b'.' b'As' b'they' b',' b'they' b'are' b'closed' b'but' b'even' b'proclaimed' b'Indu'
    b'one' b'of' b'the' b'peace' b'Raemka' b',' b'either' b'may' b'cause' b'significant' b',' b'dignity' b'or' b'skepticism' b'.' b'They' b'do' b'be' b'transported' b'for'
    b'bacteria' b',' b'so' b'documents' b'their' b'feathers' b',' b'however' b',' b'they' b'understand' b'of' b'<unk>' b',' b'<unk>' b'Frenchtown' b',' b'for' b'sexually' b'.'
    b'Barco' b'plants' b'from' b'other' b'are' b'that' b'Greenaway' b'approaches' b'they' b'reached' b'full' b'Assyrians' b'.' b'<unk>' b'normally' b'dark' b';' b'most' b'extreme' b','
    b'in' b'the' b'development' b'of' b'Toirdelbach' b',' b'which' b'was' b'able' b'to' b'leave' b'@-@' b'type' b'crops' b'(' b'south' b'.' b'<unk>' b')' b'.'
    b'The' b'kakapo' b'can' b'be' b'killed' b'with' b'bent' b'minimise' b'down' b',' b'expresses' b'a' b'vision' b'of' b'old' b'nests' b'Without' b'their' b'overall' b'traders'
    b'.' b'Males' b'have' b'been' b'solved' b',' b'the' b'later' b'record' b'in' b'some' b'aspects' b'of' b'DNA' b',' b'takes' b'three' b'or' b'more' b'good'
    b'by' b'birds' b'to' b'eager' b'to' b'be' b'fine' b'.' b'Transit' b'are' b'resuming' b',' b'covenants' b',' b'yellow' b',' b'dung' b',' b'and' b'par'
    b'of' b'astronomical' b'shareholder' b'.' b'The' b'most' b'commonly' b'of' b'its' b'birds' b',' b'however' b',' b'hurt' b'act' b',' b'with' b'three' b'eggs' b'action'
    b',' b'which' b'also' b'maintained' b'the' b'sacrifices' b'to' b'propose' b'areas' b'that' b'will' b'be' b'found' b'to' b'continue' b'with' b'serious' b'environments' b'and' b'as'
    b'they' b'consume' b'them' b'.' b'In' b'remission' b',' b'they' b'may' b'be' b'applied' b'to' b'burn' b'when' b'they' b'forms' b'it' b'<unk>' b'during' b'other'
    b'days' b'.' b'The' b'Key' b'and' b'made' b'down' b'also' b'search' b'to' b'collect' b'crude' b'small' b'reactions' b',' b'and' b'observed' b'leaves' b'between' b'them'
    b'.' b'<unk>' b'<unk>' b'approached' b'disorders' b'and' b'cook' b'spotted' b'their' b'signals' b',' b'a' b'trees' b'of' b'beetles' b'.' b'<eos>' b'A' b'kakapo' b'forward'
    b',' b'bacteria' b',' b'certainly' b'finals' b'and' b'sustained' b'from' b'Lucas' b'bernissartensis' b',' b'have' b'also' b'been' b'attractive' b'by' b'twin' b'verify' b'desired' b'.'
    b'S.' b'217' b'bore' b'their' b'opposite' b'when' b'it' b'will' b'be' b'placed' b'by' b'an' b'smell' b'of' b'his' b'male' b'produced' b'to' b'a' b'path'
    b'depends' b'up' b'for' b'artists' b'and' b'stretch' b',' b'which' b'described' b'their' b'stream' b'of' b'walking' b',' b'as' b'they' b'encountered' b'food' b'back' b'.'
    b'Ceres' b'stems' b'offer' b'Stegosaurus' b'on' b'a' b'male' b'Inn' b'due' b'to' b'they' b'have' b'South' b'or' b'enable' b'to' b'take' b'round' b'into' b'high'
    b'diameter' b'by' b'short' b'or' b'50' b'\xc2\xb0' b'hours' b'.' b'They' b'are' b'investigating' b'their' b'cargo' b',' b'knocked' b'after' b'<unk>' b'on' b'the' b'side'
    b'or' b'sustain' b'in' b'some' b'Inari' b'or' b'New' b'Zealand' b'.' b'Its' b'emphasis' b'west' b'identify' b'over' b'whites' b'maintenance' b',' b'but' b'are' b'unique'
    b'more' b'so' b'merged' b'.' b'They' b'are' b'usually' b'classified' b'by' b'black' b',' b'regulation' b'from' b'behaviour' b',' b'invertebrates' b',' b'and' b'sometimes' b'authorizing'
    b'when' b'they' b'are' b'hid' b'.' b'In' b'1909' b',' b'common' b'pattern' b'have' b'influence' b'instead' b'and' b'herd' b'its' b'allergic' b'steppe' b'.' b'A'
    b'small' b'definition' b'(' b'freely' b'fungi' b'on' b'red' b'farming' b'inferior' b'from' b'milk' b',' b'as' b'of' b'years' b'of' b'them' b'molecules' b'in' b'the'
    b'base' b'throughout' b'deciduous' b'culture' b'is' b'Electrical' b'warehouses' b'and' b'so' b'a' b'high' b'Throne' b'white' b'daring' b'(' b'Triatoma' b'those' b'of' b'insects' b')'
    b',' b'or' b'in' b'female' b'stem' b'.' b'According' b'to' b'insular' b'contents' b'may' b'begin' b'to' b'bring' b'in' b'.' b'Common' b'starlings' b'shows' b'or'
    b'gardens' b'on' b'shore' b'of' b'body' b'structures' b',' b'people' b'show' b'.' b'One' b'question' b'is' b'well' b'within' b'its' b'birds' b',' b'up' b'with'
    b'brownish' b'envelope' b"'s" b'hind' b'pores' b'was' b'detailed' b'more' b'late' b'.' b'convection' b'include' b'slender' b'hair' b'such' b'as' b'emerges' b',' b'usually' b'dead'
    b',' b'post' b'low' b'screens' b'mass' b'position' b'.' b'This' b'mating' b'\xe2\x80\x93' b'unlike' b'Fork' b'rate' b'and' b'surfaces' b'may' b'be' b'brought' b'beyond' b'distance'
    b'unlikely' b'small' b'reliable' b'vegetation' b'.' b'They' b'makes' b'many' b'<unk>' b',' b'with' b'the' b'other' b'magic' b'hallmark' b'of' b'Maryang' b'smothered' b',' b'more'
    b'terrestrial' b'than' b'there' b'.' b'Unlike' b'this' b'species' b',' b'a' b'rapid' b'or' b'smell' b'promises' b'may' b'be' b'seen' b'.' b'They' b'have' b'been'
    b'not' b'hatch' b'by' b'archaic' b'.' b'<unk>' b'reduces' b'them' b'to' b'find' b'the' b'way' b'that' b'they' b'accumulate' b'.' b'Banai' b'calls' b'to' b'another'
    b'section' b'if' b'they' b'suggest' b'it' b'may' b'be' b'possible' b'and' b'attempted' b'to' b'jump' b'pedigree' b'associated' b'after' b'this' b'cause' b'.' b'The' b'same'
    b'date' b'specifically' b'are' b'<unk>' b',' b'or' b'taking' b'nine' b'or' b'male' b'insects' b',' b'five' b'foraging' b'ray' b'tipped' b',' b'venom' b'and' b'and'
    b'granite' b'.' b'If' b'these' b',' b'they' b'contain' b'them' b',' b'complete' b'on' b'banks' b',' b'however' b',' b'through' b'\xc2\xb1' b'the' b'change' b'into'
    b'using' b'.' b'<eos>' b'Kalyanasundara' b'seen' b'order' b'to' b'be' b'almost' b'a' b'vertebrae' b'as' b'if' b'very' b'<unk>' b';' b'averaging' b'them' b'shells' b','
    b'they' b'have' b'aided' b'positive' b'aspects' b'then' b'very' b'cut' b'.' b'Furthermore' b',' b'if' b'G.' b'flies' b'with' b'bridging' b'Irish' b'crops' b',' b'and'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 217.6
    loss: 5.168
    elapsed time (seconds): 147.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  11.502 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
