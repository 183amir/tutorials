.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'which' b'would' b'be' b'based' b'in' b'<unk>' b'on' b'the' b'enlightened' b'emulate' b'of' b'Norges' b'doctors' b'.' b'With' b'literary' b'air' b',' b'it'
    b'also' b'@-@' b'breaking' b'starlings' b'sing' b'<unk>' b',' b'with' b'to' b'him' b'not' b'filled' b'.' b'They' b'indicate' b'that' b'they' b'were' b'.' b'Prior'
    b'to' b'resignation' b',' b'it' b'is' b'unlikely' b'they' b'could' b'continue' b'as' b'the' b'"' b'technically' b'planet' b'"' b'for' b'Europe' b'.' b'<eos>' b'transplantation'
    b'suggested' b'the' b'species' b'of' b'"' b'spiritual' b'expressiveness' b'the' b'population' b'extremely' b'clever' b'as' b'immature' b'as' b'a' b'little' b'messenger' b'bodies' b'about' b'<unk>'
    b',' b'so' b'elected' b'that' b'God' b'Again' b'up' b'in' b'a' b'Birmingham' b'@-@' b'phosphate' b'Sub' b'<unk>' b'"' b'.' b'The' b'claims' b'was' b'around'
    b'1879' b'<unk>' b'(' b'2001' b')' b'and' b'a' b'third' b'@-@' b'south' b'(' b'results' b'late' b')' b',' b'which' b'is' b'replaced' b'by' b'racquets'
    b'as' b'a' b'expression' b'of' b'Keys' b'.' b'There' b'are' b'cost' b'from' b'his' b'species' b'from' b'a' b'two' b'@-@' b'arena' b'period' b',' b'for'
    b'32' b'to' b'4' b'a.m.' b',' b'including' b'Earth' b'I' b'on' b'a' b'metre' b'of' b'660' b'vipers' b'on' b'the' b'base' b'of' b'their' b'season'
    b'.' b'Based' b',' b'it' b'has' b'been' b'third' b'recorded' b'on' b'them' b',' b'which' b'is' b'generally' b'found' b'by' b'Rowley' b'for' b'the' b'Banyuls'
    b'is' b'having' b'their' b'flow' b'when' b'they' b'have' b'<unk>' b'nonoxynol' b'Woman' b'.' b'Even' b'writing' b'that' b'they' b'focused' b'in' b'flight' b',' b'reduced'
    b',' b'certain' b',' b'and' b'air' b"'re" b'shot' b'in' b'pest' b'.' b'They' b'are' b'lacking' b'in' b'anticipation' b'of' b'their' b'memoirs' b'to' b'fly'
    b'advising' b'and' b'eventually' b'<unk>' b'the' b'type' b'of' b'type' b'.' b'Only' b',' b'Ceres' b'attached' b'across' b'other' b'or' b'five' b'more' b'months' b'a'
    b'sub' b'@-@' b'ditch' b'location' b'supposed' b'by' b'creating' b'Mars' b'.' b'The' b'other' b'sales' b'of' b'Australia' b',' b'its' b'<unk>' b',' b'is' b'a'
    b'Rolls' b'degree' b'and' b'on' b'enemy' b',' b'the' b'<unk>' b'rounded' b',' b'as' b'they' b'are' b'very' b'accurate' b'before' b'a' b'native' b'engine' b'they'
    b'can' b'sound' b'the' b'spores' b'of' b'CAT' b'Earth' b'.' b'On' b'crashed' b',' b'the' b'leaping' b'Logic' b'is' b'not' b'embellished' b'with' b'5' b'@.@'
    b'8' b'in' b'(' b'48' b'mm' b')' b'per' b'length' b'of' b'diameter' b',' b'which' b'is' b'a' b'male' b'ecological' b',' b'which' b'introduced' b','
    b'or' b'so' b'on' b'Swedish' b'woodland' b'in' b'particular' b'.' b'They' b'can' b'approach' b'to' b'begin' b'unemployed' b',' b'with' b'the' b'eggs' b'of' b'thousands'
    b'As' b'during' b'<unk>' b'.' b'Each' b'bird' b'is' b'high' b'after' b'female' b',' b'such' b'as' b'740' b'<unk>' b',' b'slightly' b'shout' b',' b'or'
    b'parliament' b'feel' b'of' b'the' b'firstly' b'fusion' b',' b'which' b'flies' b'three' b'other' b'dead' b'species' b'each' b'year' b'by' b'1' b'\xce\xbcm' b'left' b'in'
    b'1881' b'.' b'If' b'males' b'do' b'not' b'pull' b'in' b'their' b'head' b',' b'they' b'allow' b'the' b'basidia' b'to' b'Mont' b'pathways' b',' b'drain'
    b'several' b'or' b'impure' b'or' b'other' b'males' b'were' b'vague' b'around' b'a' b'more' b'lower' b'voice' b'.' b'This' b'process' b'is' b'unclear' b'Soviet' b','
    b'even' b'too' b'more' b'regularly' b'aback' b'than' b'their' b'other' b'.' b'This' b'meets' b'etymology' b'is' b'just' b'temporarily' b'tentative' b',' b'and' b'their' b'rear'
    b'flock' b'will' b'be' b'carved' b'.' b'They' b'does' b'not' b'unite' b'about' b'Cass' b'Day' b'because' b'their' b'fall' b'is' b'required' b'to' b'repel' b'them'
    b',' b'the' b'eukaryotic' b'element' b'of' b'honey' b'when' b'they' b'do' b'no' b'core' b'.' b'When' b'they' b'are' b'known' b',' b'they' b'are' b'there'
    b'to' b'grow' b'a' b'slow' b'advance' b'or' b'Lohan' b'phylogenetic' b'flowers' b'being' b'well' b'.' b'Therefore' b',' b'which' b'would' b'not' b'be' b'established' b'to'
    b'have' b'been' b'on' b'hand' b',' b'they' b'may' b'be' b'therefore' b'depressed' b'to' b'hide' b'.' b'According' b'to' b'populations' b'because' b'India' b'wore' b'choral'
    b'infiltrated' b'legs' b'.' b'peasant' b'his' b'eye' b',' b'which' b'had' b'sporadically' b'high' b'prey' b'women' b'Zealand' b'in' b'many' b'groups' b',' b'three' b'or'
    b'involving' b'fields' b'with' b'noisy' b'Mode' b'.' b'Common' b'starlings' b'occur' b'down' b',' b'while' b'the' b'favored' b'degree' b'method' b'of' b'their' b'oar' b'near'
    b'prognosis' b'.' b'However' b',' b'it' b'is' b'high' b'colour' b'\xe2\x80\x93' b'viewing' b'between' b'rapid' b'sed' b'disappearance' b'.' b'A' b'study' b'which' b'they' b'feed'
    b'to' b'occupy' b'them' b'to' b'provoke' b'her' b'tongue' b'and' b'birds' b',' b'where' b'young' b'or' b'little' b'structures' b'can' b'bind' b'between' b'their' b'fisheries'
    b'and' b'sometimes' b'<unk>' b'.' b'When' b'common' b'starlings' b'is' b'greatly' b'resemble' b'more' b'light' b'and' b'brownish' b',' b'a' b'feeding' b'classification' b'occur' b'on'
    b'its' b'own' b'head' b'front' b'.' b'spurs' b'forward' b',' b'the' b'kakapo' b'displaced' b'up' b'blue' b'as' b'they' b'then' b'prefer' b'like' b'their' b'pleasing'
    b'contrast' b',' b'for' b'example' b'and' b'annex' b'cytogenetics' b'.' b'They' b'states' b'that' b'they' b'must' b'be' b'seen' b'in' b'<unk>' b',' b'causing' b'swells'
    b'in' b'Ecology' b'and' b'movement' b',' b'and' b'Martinez' b'officials' b'can' b'restrict' b'its' b'north' b'effective' b'season' b'.' b'The' b'kakapo' b'is' b'known' b'at'
    b'"' b'tightly' b'1130' b',' b'area' b',' b'so' b'not' b'food' b'now' b'spawning' b'their' b'discovery' b'and' b'can' b'well' b'been' b'immense' b',' b'dark'
    b',' b'irregular' b',' b'crown' b',' b'information' b',' b'and' b'many' b'other' b'sequence' b',' b'but' b'one' b'argument' b'and' b'by' b'its' b'keeper' b'who'
    b'don' b"'t" b'be' b'rounded' b'@-@' b'alone' b'\xe2\x80\x94' b'so' b'each' b'move' b'to' b'each' b'traditional' b'point' b'of' b'their' b'cobra' b'.' b'"' b'Hence'
    b',' b'it' b'may' b'be' b'found' b'by' b'For' b'Greek' b',' b'decreasing' b'that' b'it' b'been' b'trapped' b'while' b'when' b'they' b'hope' b',' b'mutualistic'
    b'.' b'<eos>' b'During' b'Dev' b"'s" b'formation' b',' b'Briggs' b'spoken' b'and' b'bright' b'hair' b'between' b'any' b'other' b'to' b'have' b'a' b'longer' b'fission'
    b'space' b'near' b'all' b'.' b'A' b'horizontal' b'eye' b'holds' b'it' b'to' b'be' b'given' b'@-@' b'eye' b'parasites' b',' b'but' b'are' b'still' b'the'
    b'head' b'may' b'be' b'"' b'credited' b'up' b'@-@' b'by' b'@-@' b'gray' b'comrades' b'"' b'due' b'to' b'methods' b'off' b'how' b'they' b'are' b'no'
    b'Nielsen' b'and' b'mites' b'.' b'Even' b'they' b"'re" b'verdict' b',' b'it' b'may' b'their' b'longer' b'or' b'number' b'can' b'be' b'uncommon' b',' b'even'
    b'via' b'<unk>' b',' b'may' b'be' b'decorated' b'with' b'greater' b'differentiation' b'.' b'In' b'2007' b',' b'<unk>' b'may' b'be' b'abandoned' b'from' b'one' b'2008'
    b'for' b'the' b'presence' b'of' b'raw' b'females' b',' b'so' b'sometimes' b'and' b'proposed' b'to' b'produce' b'them' b'.' b'<eos>' b'Ceres' b'room' b'and' b'Triceratops'
    b'were' b'red' b',' b'and' b'there' b'are' b'no' b'drivers' b'about' b'starling' b'from' b'the' b'attract' b'or' b'Welsh' b'gene' b',' b'so' b'they' b'are'
    b'given' b'a' b'means' b'of' b'habitat' b'.' b'Females' b'as' b'the' b'general' b'Payette' b"'s" b'body' b'are' b'a' b'measure' b'for' b'veil' b'when' b'they'
    b'have' b'altered' b'fond' b'.' b'One' b'increase' b'running' b'from' b'layers' b'of' b'trees' b'.' b'The' b'common' b'starlings' b'of' b'Jainism' b',' b'similar' b'to'
    b'thousands' b'of' b'Mithravinda' b',' b'five' b'or' b'three' b'prominent' b'stories' b'were' b'being' b'concluded' b'to' b'be' b'used' b'.' b'However' b',' b'rarely' b'may'
    b'first' b'be' b'completed' b';' b'one' b'of' b'the' b'other' b'probably' b'afternoon' b'by' b'Isa' b'.' b'According' b'to' b'gas' b'Super' b'antimonide' b'may' b'also'
    b'be' b'powered' b'by' b'his' b'assumption' b'.' b'Further' b',' b'because' b'it' b'is' b'blames' b'that' b'he' b'is' b'not' b'.' b'Kreeft' b'was' b'belonged'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 242.1
    loss: 5.168
    elapsed time (seconds): 168.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  55.933 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
