.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'Unfortunately' b'in' b'<unk>' b'and' b'<unk>' b'via' b'<unk>' b'(' b'head' b'of' b'"' b'WB' b'"' b')' b',' b'retractable' b'usage' b'below' b'the'
    b'law' b'.' b'The' b'1839' b'game' b'was' b'led' b'by' b'The' b'<unk>' b'Telescope' b'and' b'had' b'been' b'avoid' b'on' b'7' b'December' b'2006' b'.'
    b'<eos>' b'Hornung' b'was' b'buried' b'by' b'the' b'502nd' b'State' b',' b'a' b'distinctive' b'hypothesis' b'against' b'Alternative' b'6B' b',' b'platforms' b',' b'and' b'1221'
    b'in' b'MLB' b'.' b'The' b'route' b'came' b'to' b'this' b'script' b'again' b'a' b'mixture' b'for' b'Sir' b'I' b'in' b'poll' b'yearly' b'Drive' b'component'
    b'on' b'a' b'date' b'to' b'Mozart' b'.' b'Little' b'planet' b'class' b'became' b'a' b'village' b'of' b'its' b'<unk>' b'anti' b'@-@' b'thirds' b'of' b'other'
    b'marrow' b'J.' b'IV' b'@.@' b'2' b'million' b'(' b'2014' b')' b',' b'a' b'flight' b'of' b'four' b'in' b'2003' b'.' b'This' b'leads' b'to'
    b'a' b'follow' b'varied' b'at' b'a' b'peak' b'date' b',' b'fly' b'over' b'18' b'%' b'of' b'130' b'years' b',' b'and' b'chose' b'30' b'%'
    b'that' b'later' b'rarely' b'done' b'as' b'the' b'first' b'to' b'be' b'quoted' b'as' b',' b'during' b'a' b'article' b'for' b'Metro' b'stallions' b',' b'so'
    b'they' b'were' b'experiencing' b'on' b'contemporary' b'styles' b'.' b'As' b'of' b'December' b'27' b',' b'2015' b',' b'the' b'names' b'spread' b',' b'stating' b'that'
    b'"' b'there' b'are' b'little' b'\xe2\x82\xb9' b'48' b'million' b'be' b'to' b'Yours' b'our' b'body' b',' b'her' b'decision' b'was' b'it' b':' b'<unk>' b"'s"
    b'right' b',' b'so' b'said' b'after' b'though' b'so' b'the' b'intensity' b'of' b'organisers' b'is' b'just' b'<unk>' b'BS' b'me' b'to' b'their' b'kind' b','
    b'disenfranchised' b'or' b'Demokraten' b'one' b'coaching' b'people' b'wait' b'into' b'so' b'having' b'lost' b'one' b'of' b'these' b'magnitude' b'of' b'watch' b'\xe2\x80\x94' b'[' b'it'
    b'was' b'formed' b',' b'and' b'on' b'a' b'striking' b'passenger' b'"' b'by' b'health' b'butyl' b'@-@' b'spy' b'.' b'In' b'2007' b'Hornung' b'was' b'recorded'
    b'for' b'facilities' b'.' b'Together' b'that' b'easy' b'Chronicles' b'I.' b'recorded' b',' b'Juan' b'Jordan' b'was' b'educated' b'were' b'dissolved' b',' b'frequently' b'is' b'very'
    b'rapid' b',' b'receiving' b'or' b'Corythosaurus' b'more' b'like' b'outside' b'memorable' b'legitimacy' b',' b'and' b'the' b'player' b'teaches' b'Waymon' b'combined' b'into' b'.' b'With'
    b'other' b'Mary' b'long' b'fiercely' b'Moore' b',' b'on' b'October' b'8' b',' b'2006' b',' b'Human' b'Eug\xc3\xa8ne' b'voted' b'their' b'female' b'career' b'.' b'MacLeod'
    b're' b'@-@' b'released' b'at' b'number' b'18' b',' b'having' b'the' b'final' b'series' b'entering' b'<unk>' b'for' b'roost' b'.' b'Ara' b"'s" b'bonus' b'third'
    b'rumors' b'included' b'its' b'than' b'precise' b'positively' b'track' b'.' b'<eos>' b'The' b'unofficial' b'view' b'of' b'Ceres' b'gradually' b'published' b'in' b'versions' b'of' b'the'
    b'fret' b'negative' b'1693' b'islands' b'for' b'"' b'insights' b'@-@' b'like' b',' b'making' b'live' b'or' b'experimental' b'sections' b'Ibrahima' b'Besant' b'"' b'.' b'Playing'
    b'Andy' b'Ellis' b'arranged' b'the' b'story' b'in' b'Computer' b'10' b'and' b'14' b'%' b'gave' b'the' b'game' b'to' b'be' b'a' b'tiny' b'mention' b','
    b'at' b'a' b'April' b'15' b',' b'2009' b'.' b'Shearman' b'scored' b'in' b'sessions' b'into' b'annually' b'or' b'breakfast' b';' b'it' b'is' b'announced' b'for'
    b'the' b'story' b'concerts' b':' b'it' b'said' b',' b'"' b'Warne' b'does' b'no' b'"' b'.' b'He' b'wishes' b'on' b'a' b'Shinto' b'first' b'length'
    b'to' b'compete' b'out' b'of' b'R\xc3\xa9union' b'directly' b'.' b'To' b'1622' b',' b'the' b'development' b'of' b'Crash' b'Biogenesis' b'is' b'two' b'books' b'for' b'its'
    b'best' b'child' b',' b'winning' b'@-@' b'medley' b'from' b'raped' b'to' b'release' b'a' b'young' b'bassline' b'.' b'There' b'have' b'been' b'evidence' b'that' b'Ceres'
    b'<unk>' b'heterogeneous' b'traverse' b'if' b'"' b'It' b'is' b'<unk>' b'or' b'a' b'low' b'of' b'earlier' b'images' b'system' b'should' b'not' b'be' b'killed' b','
    b'making' b'him' b'to' b'the' b'player' b'<unk>' b',' b'or' b'brown' b'cruelty' b'to' b'look' b'through' b'a' b'planet' b'of' b'lament' b'with' b'guaranteed' b'avoids'
    b'@-@' b'improved' b'background' b'top' b'.' b'When' b'they' b'have' b'written' b'five' b'or' b'up' b'out' b'parked' b'of' b'sinks' b',' b'meaning' b'it' b"'ll"
    b'be' b'something' b'modern' b'and' b'the' b'most' b'pairs' b'in' b'wrist' b'constantly' b'Patent' b'(' b'<unk>' b')' b'.' b'"' b'One' b'of' b'whom' b'he'
    b'is' b'marks' b'in' b'as' b'1063' b'or' b'Stage' b',' b'and' b'that' b'O' b'One' b'might' b'kill' b'a' b'egg' b'<unk>' b'after' b'<unk>' b'.'
    b'He' b'then' b'started' b'as' b'Herodianus' b'lies' b'in' b'breaker' b'.' b'In' b'the' b'scene' b'in' b'uncommon' b',' b'the' b'book' b"'s" b'original' b'form'
    b'of' b'Destiny' b'II' b'eight' b'attempts' b',' b'pointed' b'to' b'its' b'R\xc3\xa9union' b'Bandcamp' b'that' b'was' b'one' b'of' b'the' b'game' b"'s" b'reasons' b'.'
    b'Because' b'criticized' b'the' b'return' b'of' b'insecurity' b':' b'42' b'p.m.' b',' b'the' b'judge' b"'s" b'5th' b'@-@' b'Star' b'Conflict' b'Final' b'Stone' b','
    b'Lens' b'(' b'Grace' b')' b',' b'Eu' b'(' b'Mitch' b"'Malley" b')' b',' b'and' b'the' b'Johnny' b'(' b'Argosy' b')' b',' b'God' b'('
    b'BU' b')' b',' b'\xe2\x80\x9c' b'Light' b'Division' b'species' b'(' b'produced' b'to' b'1653' b')' b'.' b'The' b'papyri' b'have' b'only' b'a' b'piece' b'spanning'
    b'showing' b'mimic' b'a' b'same' b'name' b'prior' b'to' b'an' b'sudden' b'planet' b'.' b'Two' b'European' b'lawful' b'characters' b'are' b'rarely' b'cited' b'out' b','
    b'makes' b'a' b'sector' b'of' b'grayish' b'in' b'the' b'narrative' b'or' b'lineup' b'at' b'any' b'other' b'yards' b'.' b'Once' b'<unk>' b'see' b'first' b'to'
    b'assist' b',' b'or' b'annoying' b'off' b',' b'consuming' b'with' b'their' b'hold' b'his' b'roll' b'they' b'must' b'happen' b'up' b'since' b'a' b'period' b'than'
    b'.' b'It' b'has' b'frequency' b'that' b'critics' b'eradication' b'greater' b'variable' b'@-@' b'green' b'meat' b'in' b'the' b'<unk>' b',' b'meaning' b'R\xc3\xa9union' b',' b'"'
    b'The' b'Parks' b'"' b'.' b'A' b'debt' b'called' b'an' b'exam' b'"' b'with' b'so' b'a' b'other' b'and' b'deep' b'siblings' b'with' b'grasses' b'with'
    b'Arabs' b'"' b'.' b'This' b'hoped' b'they' b'wanted' b'to' b'speak' b'out' b'of' b'Activision' b'to' b'the' b'orbit' b'of' b'love' b'.' b'"' b'Marilyn'
    b':' b'"' b'Despite' b'a' b'nature' b'to' b'become' b'enough' b'to' b'keep' b'barons' b'and' b'carefully' b'will' b'deal' b',' b'there' b'have' b'been' b'one'
    b'fast' b'or' b'forth' b'of' b'a' b'planet' b'opponent' b'to' b'changes' b'before' b'they' b'cannot' b'perform' b'their' b'way' b';' b'this' b'will' b'simply' b'be'
    b'able' b'to' b'be' b'forelimbs' b'.' b'When' b',' b'though' b'there' b'was' b'no' b'unclear' b',' b'he' b'Beni' b'go' b'up' b'.' b'They' b'seems'
    b'breaks' b'on' b'his' b'facelock' b'while' b'while' b'they' b'do' b'for' b'this' b'other' b'other' b'achievement' b',' b'which' b'made' b'no' b'a' b'scenes' b'of'
    b'things' b'usually' b'.' b'Condoms' b'suitable' b'all' b'a' b'songs' b'when' b'connectionism' b'jump' b'.' b'The' b'One' b'are' b'facing' b'night' b'exposure' b'and' b'curse'
    b',' b'unsure' b'is' b'a' b'village' b'would' b'play' b'at' b'a' b'basal' b'end' b'.' b'When' b'the' b'group' b'is' b'engines' b'to' b'enough' b'their'
    b'usefulness' b'from' b'their' b'Nehardea' b',' b'its' b'father' b'felt' b'himself' b'old' b'tradition' b'up' b'very' b'exposed' b'.' b'The' b'though' b'it' b'is' b'two'
    b'years' b'old' b';' b'it' b'needs' b'it' b'<unk>' b'on' b'chapter' b'of' b'any' b'fears' b'of' b'their' b'sets' b'and' b'the' b'head' b'engaged' b'from'
    b'.' b'According' b'to' b'<unk>' b',' b'they' b'can' b'believe' b'even' b'Paranthodon' b'to' b'add' b'down' b'with' b'duty' b'or' b'replacing' b'new' b'serve' b'breeding'
    b'@-@' b'down' b'stories' b'.' b'<eos>' b'the' b'bird' b'of' b'ancient' b'starlings' b'has' b'a' b'two' b'@-@' b'range' b'separately' b'of' b'1977' b'and' b'clinical'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.2
    loss: 5.168
    elapsed time (seconds): 146.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  12.482 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
