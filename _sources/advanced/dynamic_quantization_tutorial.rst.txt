.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'the' b'Erythraean' b'Coast' b'@-@' b'i' b'Register' b'and' b'the' b'Arbeiderblad' b'had' b'achieved' b'many' b'spar' b'voters' b'.' b'Of' b'large' b'production' b',' b'many'
    b'are' b'panel' b'<unk>' b'and' b'lacking' b'dug' b'to' b'several' b'other' b'mayors' b',' b'and' b'in' b'comprising' b'spiral' b'classmate' b'Bishopric' b',' b'who' b'scored'
    b'no' b'a' b'variety' b'of' b'Coleman' b':' b'"' b'The' b'<unk>' b'968' b'taste' b'of' b'grayish' b'expressions' b'TJ' b'<unk>' b',' b'kept' b'merengue' b'here'
    b',' b'and' b'shilling' b'28' b'Patrol' b',' b'of' b'the' b'air' b'themselves' b';' b'Skye' b'Leinster' b'"' b',' b'wrote' b'that' b'"' b'there' b'are'
    b'no' b'daughter' b'man' b'picked' b'up' b'to' b'his' b'previous' b',' b'and' b'even' b'have' b'"' b',' b'and' b'they' b'preferred' b'women' b'to' b'soil'
    b'the' b'issues' b'such' b'as' b'harder' b'of' b'courses' b'.' b'Despite' b'their' b'January' b'Kombat' b'adventure' b'during' b'the' b'1930s' b',' b'where' b'several' b'archaeologist'
    b'animators' b'had' b'be' b'just' b'visiting' b'CPS' b'longer' b',' b'though' b'a' b'apparent' b'Christian' b'ratio' b'makes' b'her' b'president' b'to' b'be' b'interested' b'.'
    b'As' b'a' b'whole' b',' b'<unk>' b',' b'a' b'<unk>' b'work' b',' b'will' b'portray' b'no' b'<unk>' b'in' b'Memphis' b',' b'<unk>' b'<unk>' b','
    b'Left' b'vintner' b'constructed' b'by' b'exhausting' b'his' b'own' b'friend' b'pending' b'John' b'intercity' b'restrictions' b'to' b'Walter' b'<unk>' b'.' b'The' b'class' b'and' b'owing'
    b'to' b'a' b'handling' b'vocal' b'character' b'of' b'Writing' b'invest' b'@-@' b';' b'Kenai' b'atom' b'gospel' b'd' b'Bauer' b'dedicating' b'260' b'@-@' b'Lisbon' b';'
    b'they' b'resemble' b'Cigars' b'appears' b'a' b'alterations' b'on' b'October' b'4' b',' b'2012' b'.' b'The' b'reviewer' b'Singers' b'instead' b'on' b'one' b'side' b':'
    b'two' b'hundred' b'years' b'on' b'the' b'12th' b'skin' b',' b'refusing' b'to' b'be' b'units' b'expected' b'against' b'Hilberg' b'stories' b'that' b'competed' b'in' b'Scouts'
    b'should' b'not' b'lead' b'part' b'of' b'wounding' b'atmosphere' b'.' b'Also' b',' b'Islanders' b'ruled' b'in' b'the' b'clay' b'lesson' b'while' b'"' b'<unk>' b'a'
    b'Korsvoll' b'amateur' b'@-@' b'jam' b'will' b'Adams' b'bad' b'Dheera' b'translating' b'reading' b'his' b'Palmyrene' b'aging' b'version' b'immediately' b'<unk>' b'worldwide' b'"' b'or' b'"'
    b'something' b'lost' b'only' b'$' b'50' b'"' b'.' b'The' b'FIA' b'passes' b'as' b'a' b'transcriptional' b'symbol' b'after' b'his' b'final' b'game' b'.' b'It'
    b'also' b'rushed' b'however' b'to' b'make' b'a' b'one' b'@-@' b'hour' b'goals' b'.' b'Milbrook' b'was' b'awarded' b'to' b'mandible' b'a' b'map' b'when' b'he'
    b'stood' b'on' b'a' b'<unk>' b'at' b'Zach' b'and' b'theatre' b'.' b'<eos>' b'Because' b'Walpole' b'did' b'not' b'enter' b'his' b'rigor' b',' b'after' b'sentence'
    b',' b'he' b'spent' b'his' b'nomination' b'from' b'a' b'very' b'unique' b'surname' b'<unk>' b'.' b'large' b'only' b'procured' b'is' b'a' b'from' b'@-@' b'game'
    b'statue' b'company' b'to' b'ensure' b'that' b'the' b'titles' b'solicited' b'in' b'an' b'emphasis' b'on' b'that' b'morning' b'Woodfull' b"'" b'Moderate' b'effort' b',' b'and'
    b'their' b'inconsistencies' b'were' b'surrounded' b'by' b':' b'"' b'<unk>' b'"' b'the' b'story' b'"' b'hosts' b'changed' b'Junction' b'playing' b'.' b'/' b'he' b'made'
    b'do' b'Looking' b'confiscate' b'<unk>' b'Khouw' b'Rio' b'Tong' b'and' b'father' b'I' b'don' b"'t" b'believe' b'charges' b'you' b'think' b'there' b'the' b'usual' b'crime'
    b'court' b'in' b'...' b"'" b'females' b'...' b'I' b'circulated' b'it' b'simply' b'asking' b'so' b'quoting' b'things' b'.' b'"' b'<eos>' b'<eos>' b'=' b'='
    b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'archive' b'in' b'woodland' b'welding' b'alike' b'included' b'about' b'2' b'@,@' b'000' b'copies' b',' b'mainly' b'larger' b'attacks'
    b'in' b'their' b'book' b'@-@' b'mixture' b'.' b'Kh\xc3\xa1nh' b'recorded' b'Mosley' b'with' b'his' b'candidacy' b'.' b'Partisan' b'organizations' b'were' b'the' b'third' b'winter' b'of'
    b'mothers' b'"' b'(' b'Humanities' b')' b'"' b'.' b'Joseph' b'Harris' b"'" b'was' b'the' b'head' b'of' b'Cilicia' b'.' b'Crash' b'enjoyed' b'"' b'And'
    b'it' b'is' b'a' b'whole' b'commercial' b'husband' b'from' b'[' b'Ecclestone' b']' b'in' b'Hollywood' b',' b'however' b'.' b'Then' b'quite' b'constructed' b'to' b'try'
    b'it' b'has' b'written' b'.' b'I' b'don' b"'t" b'.' b'We' b'is' b'all' b'talented' b'@-@' b'like' b',' b'and' b'that' b'followed' b'it' b'was'
    b'stumbled' b'up' b'so' b'to' b'find' b'less' b'persistence' b'game' b'but' b'it' b'soon' b'spent' b'Plans' b'it' b'by' b'.' b'"' b'But' b'it' b'was'
    b'noticed' b'that' b'it' b'was' b'not' b'believed' b'that' b'he' b'helped' b'known' b'a' b'additional' b'relationship' b'that' b'it' b'would' b'be' b'"' b'killed' b'by'
    b'some' b'De' b'Bandicoot' b'honesty' b'from' b'Generals' b'"' b'.' b'<eos>' b'examines' b'it' b'point' b'following' b'1' b'years' b',' b'at' b'its' b'lifetime' b'at'
    b'Pearl' b'household' b',' b'darkening' b'on' b'October' b'19' b',' b'2009' b',' b'Hannah' b'Glitter' b'with' b'the' b'422nd' b'Courant' b'(' b'previously' b'called' b'Lamar'
    b')' b'premiered' b'to' b'Ways' b',' b'which' b'was' b'published' b'at' b'Poehler' b'in' b'worst' b'images' b'by' b'purely' b'one' b'charges' b',' b'and' b'cut'
    b'for' b'other' b'illness' b'.' b'If' b'he' b'style' b'additionally' b'for' b'this' b'while' b'to' b'aid' b'Mr' b'Directing' b'@-@' b'TV' b',' b'stardom' b'and'
    b'English' b'garnered' b'760' b'Feldman' b'.' b'In' b'2015' b',' b'RedOctane' b'<unk>' b'secretary' b'Guru' b'IV' b'NCAA' b'and' b'Robert' b'Robinson' b'(' b'2010' b')'
    b'allowing' b'in' b'in' b'the' b'first' b'consecutive' b'game' b'in' b'1946' b'.' b'<eos>' b'The' b'Royal' b'Battle' b'of' b'Leinster' b'came' b'into' b'Ceres' b'after'
    b'the' b'flight' b'historian' b'M\xc4\x81ori' b'PCG' b'that' b'commented' b'was' b'Eilean' b'completely' b'by' b'three' b'non' b'@-@' b'Christian' b'War' b'staff' b'WHO' b'welfare' b'character'
    b'(' b'Banksia' b'cemetery' b')' b'.' b'In' b'spite' b'of' b'Sholay' b',' b'the' b'planet' b'remained' b'reducing' b'the' b'writing' b'of' b'Richard' b'Game' b','
    b'a' b'Swiss' b'leader' b'sparked' b'niece' b'essentially' b'in' b'Belgium' b'.' b'<eos>' b'O' b"'Malley" b'was' b'also' b'performed' b'in' b'1939' b'through' b'the' b'Rover'
    b'Stakes' b',' b'in' b'1919' b',' b'although' b'Stevens' b"'s" b'death' b'ended' b'currently' b'after' b'of' b'his' b'episode' b'was' b'strongly' b'preferred' b'at' b'900'
    b'@-@' b'age' b'art' b'.' b'Once' b'while' b'dee' b'1890' b'walked' b'into' b'the' b'Test' b',' b'the' b'hairline' b'Network' b'8th' b'and' b'Somerset' b'rises'
    b'a' b'version' b'from' b'The' b'peerage' b'by' b'Otter' b'.' b'discourse' b'also' b'said' b'his' b'biggest' b'son' b'"' b'forgettable' b'Palacios' b'between' b'Abietinae' b'"'
    b'.' b'The' b'chapter' b',' b'Bridges' b'inhibit' b',' b'was' b'beaten' b'by' b'the' b'Ticonderoga' b',' b'and' b'Washington' b',' b'as' b'he' b'were' b'having'
    b'powers' b'from' b'"' b'We' b'"' b'who' b'left' b'<unk>' b'or' b'his' b'presidency' b'in' b'Comair' b'.' b'Following' b'the' b'Wasson' b"'s" b'ultimate' b'brother'
    b'cauldron' b'in' b'Baltimore' b',' b'his' b'ex' b'@-@' b'final' b'father' b'is' b'designated' b'from' b'a' b'stand' b'of' b'90' b'@-@' b'year' b'<unk>' b','
    b'48' b'in' b'<unk>' b',' b'over' b'18' b'%' b'.' b'The' b'loss' b'of' b'the' b'two' b'concept' b'were' b'then' b'brought' b'in' b'the' b'searing'
    b'reason' b'some' b'years' b',' b'giving' b'evidence' b'co' b'@-@' b'unfair' b',' b'Rook' b'kicked' b'to' b'her' b'political' b'<unk>' b'and' b'third' b'Blacks' b'.'
    b'The' b'directors' b'lies' b'with' b'1651' b'since' b'his' b'ideas' b'.' b'After' b'angry' b'figure' b'<unk>' b'continued' b'to' b'be' b'spoken' b'to' b'Indonesian' b'tradition'
    b',' b'Friedrich' b'corruption' b'was' b'absolutely' b'more' b'successful' b'.' b'<eos>' b'his' b'mastery' b'over' b'him' b'also' b'his' b'victory' b'between' b'000' b'writings' b','
    b'Claire' b',' b'among' b'Greil' b'Ohlone' b'asks' b'a' b'weekly' b'Tsugumi' b'named' b"'Malley" b'under' b'<unk>' b',' b'Manuel' b',' b'Brothers' b',' b'Maurice' b'Kaida'
    b',' b'John' b'moaning' b'James' b',' b'and' b'Business' b'Knowles' b'.' b'<eos>' b'For' b'thirty' b'games' b',' b'they' b'reached' b'eight' b'degree' b'years' b'a'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.1
    loss: 5.168
    elapsed time (seconds): 148.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  14.500 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
