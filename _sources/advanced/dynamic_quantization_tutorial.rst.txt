.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'"' b'fashioned' b'stuff' b'"' b',' b'but' b'is' b'more' b'described' b'by' b'<unk>' b';' b'to' b'Allies' b'the' b'flaws' b'or' b'Dubliners' b'on'
    b'in' b'long' b'combat' b',' b'<unk>' b'enter' b'large' b'seas' b'.' b'Outside' b',' b'two' b'more' b'jewel' b'comprised' b'major' b'areas' b'has' b'retained' b'a'
    b'large' b'roof' b'in' b'Sirex' b'ideology' b',' b'sea' b'to' b'refer' b'for' b'Planet' b'control' b'of' b'rectory' b',' b'Massachusetts' b',' b'Hong' b'graceful' b','
    b'etc' b',' b'Homarus' b',' b'Finland' b',' b'and' b'redeem' b'nodes' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'titular' b'union' b'=' b'<eos>' b'<eos>' b'The'
    b'Leverett' b'of' b'the' b'8' b'to' b'4' b'@.@' b'5' b'km' b'(' b'5' b'@.@' b'3' b'mi' b')' b'of' b'the' b'sponsoring' b'cause' b'of'
    b'Wild' b'culture' b'has' b'a' b'base' b'well' b'by' b'Algernon' b'Pereyns' b',' b'initially' b'said' b',' b'10' b'@,@' b'500' b'in' b'Tavern' b'.' b'deposits'
    b',' b'the' b'means' b'record' b'in' b'2008' b',' b'was' b'discovered' b'in' b'Ireland' b'and' b'was' b'listed' b'on' b'15' b'April' b'1867' b'.' b'That'
    b'point' b'in' b'1963' b'lay' b',' b'though' b'the' b'reviewer' b'always' b'scheduled' b'in' b'2009' b'.' b'The' b'Washington' b'Astronomical' b'Congo' b'who' b'were' b'unclear'
    b'to' b'have' b'been' b'taken' b'with' b'showbiz' b'generals' b',' b'allowing' b'its' b'lengths' b'against' b'free' b'eye' b'hand' b'.' b'footballer' b'called' b'"' b'a'
    b'state' b'of' b'stellar' b',' b'local' b'people' b'bin' b'Bracknell' b',' b'watching' b'Raffles' b'\xc3\xa0' b'!' b'<unk>' b'pilots' b',' b'"' b'in' b'The' b'provided'
    b'of' b'the' b'contestants' b'traits' b'of' b'"' b'Subsequent' b'self' b'@-@' b'Notts' b'"' b',' b'upset' b'how' b'characters' b'were' b'found' b'by' b'a' b'lesser'
    b'specialists' b'grant' b'.' b'<eos>' b'Following' b'graduating' b',' b'there' b'were' b'distract' b'focusing' b'for' b'spending' b'three' b'months' b';' b'over' b'30' b'%' b'of'
    b'the' b'GameRankings' b',' b'at' b'#' b'12' b'Area' b'(' b'completing' b'10' b'mph' b')' b'in' b'the' b'city' b',' b'such' b'as' b'Palicki' b'gentlemen'
    b'in' b'the' b'"' b'Jewish' b'epithet' b'"' b'hundred' b'level' b'of' b'contemporary' b',' b'imprisoned' b',' b'divided' b'mouth' b'suit' b',' b'isolated' b'officiating' b','
    b'"' b'novelty' b'"' b'a' b'small' b'deal' b'between' b'airfields' b',' b'on' b'width' b'into' b'their' b'homes' b'.' b'Recent' b'literary' b'purpose' b'were' b'in'
    b'this' b'youth' b'led' b'as' b'ankylosaurian' b'.' b'Though' b'the' b'State' b'falls' b',' b'which' b'offers' b'two' b'or' b'fit' b',' b'they' b'running' b'a'
    b'white' b'eye' b'"' b'assumes' b'and' b'loaf' b',' b'cartoon' b',' b'most' b'cart' b'fruit' b'metal' b'type' b'with' b'water' b'home' b'at' b'Wembley' b'when'
    b'killing' b',' b'where' b',' b'until' b'his' b'absence' b'they' b"'ve" b'been' b'looking' b'had' b'tried' b'to' b'get' b'on' b'a' b'signal' b'ball' b','
    b'all' b'<unk>' b',' b'too' b'Course' b'about' b'a' b'sign' b'species' b'that' b'were' b'put' b'to' b'west' b'more' b'well' b'theories' b'...' b'its' b'stone'
    b'are' b'put' b',' b'attacked' b'captivity' b'into' b'wavelength' b'pop' b'lines' b'as' b'towers' b'and' b'humanity' b'with' b'his' b'sense' b'of' b'love' b'swap' b'.'
    b'After' b'not' b',' b'this' b'claim' b'be' b'<unk>' b'that' b'they' b'do' b'playing' b'a' b'lot' b'questioning' b'[' b'of' b'it' b'"' b'.' b'The'
    b'character' b'<unk>' b'Central' b'Economic' b'Books' b',' b'a' b'path' b'about' b'St' b'Baldwin' b'(' b'most' b'exhausted' b'as' b'1st' b')' b',' b'They' b'as'
    b'word' b'to' b'receive' b'over' b'a' b'minor' b'church' b'\xe2\x80\x94' b'each' b'of' b'which' b'was' b'walked' b'to' b'Finger' b',' b'<unk>' b'the' b'amphibious' b'majority'
    b'of' b'certain' b'grounds' b'and' b'friends' b'.' b'In' b'the' b'middle' b',' b'Orwell' b'(' b'his' b'alternate' b'thesis' b',' b'perpetuating' b'the' b'wealthiest' b'<unk>'
    b'of' b'James' b'of' b'ribosomes' b'and' b'<unk>' b')' b'became' b'about' b'a' b'game' b'"' b'in' b'any' b'crime' b'"' b'.' b'It' b'cannot' b'pitch'
    b'as' b'he' b'are' b'one' b'of' b'a' b'shocking' b'@-@' b'like' b'character' b'10' b'years' b',' b'including' b'the' b'efforts' b'of' b'"' b'whitish' b'"'
    b'covered' b'(' b'330' b'after' b'girl' b')' b'and' b'features' b'Pilgrim' b"'s" b'territory' b'would' b'be' b'seen' b'.' b'However' b',' b'they' b'are' b'also'
    b'!' b'(' b'an' b'"' b'<unk>' b'"' b')' b'called' b'"' b'One' b'of' b'this' b'game' b"'s" b'or' b'fast' b',' b'which' b']' b'planets'
    b'"' b')' b'wrote' b'that' b'he' b'build' b'its' b'idea' b'.' b'Yu' b'says' b'not' b'always' b'run' b'in' b'several' b'locations' b'.' b'regurgitation' b'the'
    b'two' b"'" b'binding' b'books' b'pieces' b'included' b':' b'The' b'Industrial' b'!' b';' b'an' b'stalk' b'in' b'his' b'set' b'at' b'the' b'debate' b'system'
    b'levels' b'they' b'might' b'let' b'doubt' b',' b'when' b'he' b'would' b'<unk>' b'seeing' b'deep' b'life' b'.' b'"' b'80s' b',' b'<unk>' b'word' b'includes'
    b'an' b'link' b'@-@' b'up' b'to' b'cordon' b'aliens' b'of' b'these' b'people' b',' b'grass' b'abilities' b'and' b'leaves' b'sand' b'churchwardens' b'of' b'within' b'marriage'
    b',' b'/' b'meaning' b'verses' b'anywhere' b',' b'social' b',' b'and' b'circle' b'all' b'over' b'again' b'.' b'"' b'censors' b'from' b'618' b',' b'and'
    b'regards' b'in' b'C.R.U.S.H.' b'after' b'she' b'was' b'set' b'for' b'the' b'originals' b'regarding' b'COMADRES' b'Ceres' b'.' b'In' b'262' b',' b'colorful' b'@-@' b'TV'
    b'discovered' b'amidships' b'.' b'He' b'is' b'voiced' b'by' b'<unk>' b'Euro' b',' b'feeling' b'that' b'he' b'\xe2\x80\x94' b'ideas' b'about' b'41' b'years' b',' b'will'
    b'be' b'intent' b'or' b'only' b'necessarily' b'for' b'.' b'Additionally' b',' b'the' b'<unk>' b'discuss' b'Mulder' b'with' b'another' b'claims' b'because' b'many' b'works' b'lights'
    b'of' b'food' b',' b'almost' b'into' b'the' b'human' b'command' b'and' b'it' b'how' b'of' b'his' b'will' b'after' b'it' b'as' b',' b'they' b'wrote'
    b'that' b',' b'when' b'often' b'she' b'might' b'throw' b'healthy' b',' b'you' b'"' b'would' b'have' b'never' b'contracted' b'that' b'have' b'dismissed' b'Branch' b'@-@'
    b'scale' b'crime' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Microscopic' b'time' b'=' b'=' b'<eos>' b'<eos>' b'The' b'$' b'cold' b'million' b'22' b'are'
    b'from' b'expert' b',' b'compared' b'<unk>' b',' b'and' b'(' b'30' b',' b'algae' b',' b'and' b'has' b'been' b'reported' b'that' b'"' b'under' b'their'
    b'hatred' b'it' b'connects' b'moulded' b'consisting' b'of' b'a' b'<unk>' b'paranormal' b'eccentric' b',' b'and' b'sunk' b'the' b'bride' b'"' b')' b'.' b'After' b'his'
    b'parent' b'nuclei' b'in' b'the' b'prosecution' b'of' b'his' b'century' b'film' b'Franz' b'M.' b'Roosevelt' b'gendarmes' b'pointed' b'protesters' b'.' b'His' b'first' b'frontage' b','
    b'symbolizing' b'a' b'exhibition' b'of' b'nine' b'minutes' b'Shaolin' b'Colm' b'King' b'hear' b'both' b'screen' b'relatives' b',' b'said' b'it' b'seems' b'his' b'ability' b'to'
    b'be' b'(' b'a' b'source' b'bat' b'from' b'364' b')' b',' b'where' b'he' b'notes' b'"' b'all' b'of' b'his' b'Mosley' b'subtly' b'comic' b','
    b'too' b'terrestrial' b'and' b'less' b'suffering' b'lands' b',' b'Therefore' b'to' b'me' b'audience' b'.' b'I' b'hope' b'they' b'don' b"'t" b'think' b'how' b'to'
    b'Tribulations' b'on' b'him' b'.' b'If' b'this' b'is' b'hard' b'or' b'seduction' b',' b'but' b'at' b'a' b'level' b'wing' b'be' b'.' b'The' b'saint'
    b'sad' b'after' b'I' b'know' b'But' b'[' b'fossils' b']' b'no' b',' b'we' b'kind' b'of' b'something' b'the' b'Elsinore' b"'ve" b'trouble' b'intrigue' b'.'
    b'And' b'<unk>' b'and' b'<unk>' b'were' b'able' b'to' b'say' b'that' b'these' b'or' b'magical' b'an' b'allergic' b'"' b',' b'collapses' b'in' b'the' b'match'
    b'or' b'the' b'exploitation' b'of' b'the' b'own' b'scar' b'.' b'<eos>' b'The' b'evidence' b'of' b'telegraph' b'around' b'Odaenathus' b"'s" b'tomb' b'may' b'be' b'appropriate'
    b'in' b'terms' b'formed' b'on' b'their' b'goal' b')' b'.' b'Before' b'his' b'death' b'against' b'a' b'group' b'of' b'<unk>' b'excavation' b'reflected' b'outside' b'breaking'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 239.1
    loss: 5.168
    elapsed time (seconds): 166.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  50.991 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
