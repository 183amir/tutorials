.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Kong' b',' b'the' b'first' b'eight' b'minigames' b'that' b'are' b'<unk>' b'of' b'fine' b'techniques' b'.' b'In' b'then' b'speaking' b'they' b'said' b'they' b'wanted'
    b'to' b'make' b'the' b'computer' b'of' b'specific' b'comparison' b'to' b'YouTube' b'"' b'TOT' b'Firth' b'"' b'.' b'In' b'the' b'fourth' b',' b'beast' b'released'
    b'years' b'that' b'when' b'the' b'fraction' b')' b'succeeded' b'was' b'compatible' b'to' b'considerable' b'boxes' b'(' b'such' b'as' b'McGlashan' b')' b',' b'and' b'the'
    b'eggs' b'were' b'canceled' b'for' b'the' b'stage' b'.' b'Prior' b'to' b'standard' b',' b'previous' b'combat' b'Bair' b',' b'must' b'be' b'typographical' b';' b'however'
    b',' b'contracted' b'prosecution' b'lambeosaurine' b'instead' b'were' b'the' b'lowest' b'drainage' b'forces' b'is' b'large' b'despite' b'political' b'individual' b'.' b'As' b'not' b'matter' b'of'
    b'in' b'their' b'rise' b'between' b'a' b'native' b'level' b',' b'and' b'they' b'have' b'no' b'abilities' b',' b'many' b'planet' b'bread' b'patterns' b'were' b'also'
    b'about' b'as' b'they' b'pinnacle' b'all' b'before' b'the' b'Pulse' b'of' b'Venus' b'.' b'The' b'production' b'in' b'rotation' b'of' b'homophobia' b'usually' b'laid' b'on'
    b'its' b'chicks' b'<unk>' b'or' b'cavalry' b',' b'but' b'those' b'insane' b'uses' b'the' b'Agricultural' b'Islands' b'.' b'Other' b'birds' b'also' b'normally' b'stored' b'the'
    b'ring' b',' b'making' b'one' b'receiving' b'because' b'their' b'significant' b'eye' b'is' b'flattening' b'.' b'There' b'is' b'only' b'only' b'over' b'touchdown' b',' b'such'
    b'as' b'<unk>' b',' b'or' b'approaches' b',' b'only' b'.' b'Mansfield' b'<unk>' b'takes' b'54' b'%' b'of' b'a' b'variety' b'of' b'@-@' b'third' b'.'
    b'unfounded' b'characters' b'blacksmiths' b'a' b'little' b'disguised' b'video' b'or' b'to' b'head' b'after' b'the' b'eleventh' b'or' b'<unk>' b'headwaters' b'on' b'Mars' b"'s" b'organization'
    b'.' b'Enterprises' b'Sharif' b'(' b'Coastal' b'starling' b')' b'and' b'the' b'Hunt' b"'" b'Russian' b'presence' b'(' b'later' b'based' b'on' b'its' b'alkali' b'Afro'
    b'shot' b')' b'is' b'a' b'large' b'@-@' b'polygamist' b'manga' b'(' b'Manders' b')' b',' b'a' b'470' b'\xe2\x80\x93' b'4' b'@.@' b'7' b'professor' b','
    b'bicycle' b'yellow' b'tubes' b',' b'usually' b'convert' b'by' b'Kodipetta' b'contaminated' b',' b'pale' b',' b'red' b'@-@' b'brown' b',' b'and' b'component' b'instead' b'of'
    b'tightly' b'or' b'trust' b'.' b'One' b'West' b',' b'nine' b'in' b'the' b'intermittently' b'(' b'face' b')' b'is' b'a' b'variety' b'with' b'somewhat' b'Raw'
    b'more' b'than' b'1' b'hectare' b'<unk>' b'from' b'nitrate' b',' b'which' b'there' b'may' b'require' b'way' b'saving' b'magnetic' b'appearance' b'.' b'Each' b'other' b'@-@'
    b'profile' b'climate' b'was' b'grows' b'to' b'make' b'it' b'protected' b'in' b'263' b'.' b'One' b'distinguish' b'prey' b'booms' b'include' b'Herd' b',' b'brass' b','
    b'and' b'nostrils' b',' b'similar' b',' b'<unk>' b',' b'and' b'other' b'Lombardi' b'grey' b'function' b'.' b'Once' b'seen' b'on' b'handedness' b',' b'one' b'waterfall'
    b'finds' b'it' b'indicated' b'that' b'there' b'are' b'lower' b'a' b'potential' b'100' b'effort' b'much' b'to' b'speak' b'for' b'their' b'solar' b'bird' b'.' b'He'
    b'receives' b'entirely' b'typically' b'controversial' b'to' b'any' b'other' b',' b'when' b'the' b'recommend' b'symptom' b'moves' b'into' b'other' b'paradox' b'.' b'Over' b'12' b'females'
    b',' b'or' b'largely' b'long' b',' b'is' b'blue' b'.' b'<eos>' b'Incubation' b'of' b'dwarf' b'males' b'has' b'also' b'been' b'closed' b'by' b'For' b'two'
    b'birds' b',' b'but' b'the' b'basis' b'varies' b'forward' b'.' b'Common' b'starlings' b'are' b'accessing' b'to' b'Baby' b'spiky' b'.' b'Also' b'was' b'abundant' b','
    b'and' b'even' b'at' b'which' b'it' b'has' b'been' b'adapted' b',' b'with' b'some' b'birds' b'and' b'walls' b',' b'introns' b',' b'direction' b'and' b'is'
    b'soon' b'the' b'fact' b'to' b'exquisitely' b'prey' b'.' b'Numerous' b'areas' b'are' b'found' b'to' b'be' b'considered' b'by' b'food' b'by' b'30' b'seconds' b','
    b'a' b'6' b'/' b'10' b'racing' b'bar' b'.' b'They' b'domestically' b'relief' b'trim' b'dating' b'down' b'on' b'a' b'average' b'and' b'an' b'watch' b'on'
    b'serialisation' b',' b'after' b'falcons' b'High' b'acids' b',' b'without' b'an' b'variable' b'call' b'existing' b'slowly' b'and' b'escape' b'them' b'.' b'Small' b'and' b'Xuan'
    b'nm' b'are' b'faced' b',' b'and' b'as' b'they' b'falls' b'with' b'the' b'dark' b'light' b',' b'when' b'while' b'smell' b'brigades' b'prey' b',' b'wind'
    b'iconography' b'may' b'be' b'separated' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Innocent' b'similarities' b'about' b'elaborate' b'Silverman' b'with'
    b'organic' b'crop' b',' b'suggesting' b'to' b'neighboring' b'agricultural' b'mess' b'and' b'soil' b'<unk>' b'.' b'In' b'alarm' b'laboratory' b',' b'common' b'species' b'are' b'convicted'
    b'when' b'the' b'other' b'common' b'woodlands' b'are' b'connected' b'.' b'However' b',' b'the' b'limit' b'of' b'field' b'birds' b'find' b'them' b'as' b'they' b'consists'
    b'of' b'keel' b'possessed' b'and' b'bowls' b'.' b'However' b',' b'one' b'male' b',' b'increasing' b'other' b'from' b'other' b'rat' b'depressions' b'and' b'often' b'identify'
    b'that' b'they' b'are' b'once' b'<unk>' b'.' b'In' b'the' b'Republic' b'of' b'mercy' b',' b'it' b'may' b'be' b'seen' b'to' b'be' b'attributed' b'to'
    b'its' b'banks' b'.' b'<eos>' b'The' b'male' b'of' b'non' b'@-@' b'bright' b'milestones' b'door' b'tourists' b'occurring' b'bootleg' b'trees' b'and' b'slower' b'eggs' b','
    b'at' b'2' b'\xe2\x80\x93' b'2' b'@.@' b'39' b'\xce\xbcm' b'in' b'Lost' b'.' b'Common' b'average' b'for' b'with' b'two' b'birds' b'have' b'gone' b'prior' b'to'
    b'pale' b'frequency' b'.' b'The' b'first' b'running' b'parasites' b'are' b'a' b'single' b'allies' b'.' b'The' b'other' b'common' b'spots' b'are' b'very' b'very' b'developed'
    b'.' b'<eos>' b'Constabulary' b'in' b'1930' b',' b'common' b'manufacturers' b'thick' b'by' b'differentiation' b',' b'<unk>' b'(' b'strongly' b'and' b'diversion' b',' b'transparent' b'one'
    b'long' b'a' b'heavily' b'<unk>' b'army' b',' b'non' b'@-@' b'short' b'or' b'fine' b',' b'and' b'2' b'@-@' b'egg' b')' b',' b'which' b'causes'
    b'spots' b'of' b'prey' b'.' b'They' b'may' b'be' b'sensitive' b'.' b'traumatic' b'oxymoron' b'convey' b'550' b'or' b'vary' b'in' b'relief' b'.' b'He' b'only'
    b'reaches' b'them' b'to' b'restore' b'watching' b'connections' b',' b'<unk>' b',' b'LSU' b',' b'and' b'<unk>' b'.' b'Each' b'female' b'finds' b'known' b'as' b'unacceptable'
    b',' b'that' b'may' b'be' b'dissolved' b'(' b'close' b'by' b'tendons' b')' b'and' b'some' b'proteins' b'returning' b'to' b'be' b'soon' b'physically' b'difficult' b'.'
    b'They' b'can' b'have' b'stood' b'as' b'IDF' b'images' b'from' b'other' b'locations' b'while' b'as' b'it' b'mates' b'1' b'gun' b',' b'while' b'will' b'follow'
    b'them' b'to' b'feed' b'as' b'one' b'@-@' b'longer' b'of' b'rocky' b'rosary' b'.' b'While' b'other' b'are' b'first' b'burned' b',' b'they' b'are' b'predators'
    b'that' b'are' b'1824' b'@-@' b'style' b'or' b'removed' b'.' b'It' b'may' b'be' b'good' b'at' b'top' b'and' b'underwater' b'any' b'other' b'legs' b'('
    b'see' b'environments' b'9' b'%' b'of' b'50' b'km' b'(' b'3' b'@.@' b'7' b'mi' b')' b'.' b'Cemetery' b'has' b'also' b'fail' b'to' b'have'
    b'males' b'offered' b'with' b'achieving' b'significant' b'nest' b'spores' b'as' b'they' b'grow' b'give' b'to' b'legal' b',' b'with' b'<unk>' b'decreased' b'down' b'down' b'.'
    b'A' b'female' b'generally' b'wasps' b'(' b'mammalian' b'with' b'these' b'females' b')' b',' b'on' b'the' b'seven' b'or' b'two' b'@-@' b'minute' b'birds' b'.'
    b'A' b'flamboyant' b'kakapo' b'is' b'rounded' b'to' b'a' b'relative' b'ratio' b',' b'corresponding' b'to' b'to' b'the' b'Greens' b'Age' b';' b'they' b'may' b'use'
    b'us' b'.' b'The' b'northern' b'pain' b'suggests' b'a' b'species' b'of' b'domestic' b',' b'crested' b'or' b'dung' b'spores' b',' b'they' b'will' b'be' b'hanging'
    b'.' b'If' b'females' b'roost' b'dodos' b'for' b'male' b'eggs' b'by' b'oil' b',' b'The' b'batsman' b'is' b'witness' b'.' b'In' b'this' b'way' b','
    b'its' b'dominant' b'feeding' b'eye' b'would' b'be' b'estimated' b'by' b'other' b'purposes' b'of' b'<unk>' b',' b'but' b'winter' b'technique' b'has' b'their' b'male' b'nest'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.6
    loss: 5.168
    elapsed time (seconds): 149.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  8.763 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
