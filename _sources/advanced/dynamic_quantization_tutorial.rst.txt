.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'aptitude' b'and' b'almost' b'reported' b'that' b'small' b'starlings' b'have' b'been' b'shown' b'by' b'257' b',' b'a' b'constant' b'animal' b'.' b'In' b'some' b'other'
    b'London' b'countries' b',' b'while' b'Madison' b'Tapes' b'semi' b'@-@' b'111' b'found' b'are' b'probably' b'because' b'they' b'were' b'concentrated' b';' b'young' b'pitches' b','
    b'Q' b',' b'burrows' b',' b'witches' b',' b'\xe2\x80\x91' b'eggs' b',' b'and' b'Hawaiians' b',' b'and' b'355' b'control' b'.' b'<eos>' b'This' b'makes' b'an'
    b'optimistic' b'pattern' b'to' b'cheering' b'sinister' b'.' b'After' b'coming' b'into' b'14' b'kilometres' b'(' b'4' b'@.@' b'5' b'ft' b')' b'long' b',' b'to'
    b'find' b'Sports' b'City' b'for' b'boys' b'for' b'high' b',' b'and' b'when' b'they' b'"' b'today' b'<unk>' b',' b'and' b'even' b'close' b'to' b'any'
    b'kinds' b'of' b'129I' b',' b'fine' b',' b'motion' b'and' b'all' b'of' b'them' b'disease' b'cult' b'will' b'be' b'killed' b'"' b'.' b'These' b'splendid'
    b'bodies' b'have' b'formed' b'their' b'body' b'into' b'8' b'minutes' b'per' b'year' b',' b'with' b'over' b'4' b'million' b'birds' b',' b'while' b'90' b'%'
    b'games' b'had' b'extend' b'off' b'their' b'568' b'line' b'Madagascar' b',' b'otherwise' b'though' b'Shapur' b'can' b'exist' b'throughout' b'a' b'significant' b'spot' b'of' b'raising'
    b'worth' b'\xe2\x80\x94' b'though' b'a' b'one' b'@-@' b'length' b'series' b'is' b'compared' b'.' b'Another' b'architectural' b'astronomer' b'rose' b'Citra' b',' b'a' b'male' b'slip'
    b'by' b'a' b'special' b'logo' b',' b'each' b'to' b'form' b'Arkansas' b'.' b'Soon' b',' b'it' b'can' b'be' b'found' b'to' b'hold' b'the' b'term'
    b'do' b'not' b'participate' b'up' b'.' b'Since' b'there' b'is' b'16' b'females' b'to' b'case' b'males' b'are' b',' b'limiting' b'71' b'or' b'eight' b'species'
    b'old' b',' b'only' b'moving' b'their' b'numbers' b'.' b'It' b'demonstrates' b'any' b'conical' b'layers' b'of' b'any' b'high' b'spear' b'.' b'Another' b'dark' b'tracks'
    b'was' b'in' b'Mostar' b'.' b'In' b'all' b'the' b'sixth' b'7' b'@.@' b'5' b'demographic' b',' b'the' b'birds' b'are' b'known' b'to' b'reuse' b'screening'
    b'Elijah' b'around' b'her' b'in' b'search' b';' b'this' b'may' b'be' b'varied' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Jeffries' b'=' b'=' b'='
    b'<eos>' b'<eos>' b'In' b'1880' b',' b'it' b'is' b'first' b'known' b'as' b'unprecedented' b'forms' b',' b'most' b'and' b'scripts' b',' b'these' b'or' b'dark'
    b'unitary' b'sculptures' b'.' b'At' b'it' b',' b'red' b'birds' b'assigned' b'to' b'found' b'and' b'<unk>' b'condoms' b',' b'then' b',' b'uses' b'about' b'a'
    b'period' b'of' b'even' b'vein' b'(' b'size' b'classic' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'In' b'metal' b'costs' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'Eu2O3' b'of' b'common' b'population' b'of' b'Broadcasting' b'@,@' b'birth' b'may' b'be' b'found' b'by' b'Antietam' b'.' b'dominant' b'violated' b'in' b'an' b'severe'
    b'landscape' b'(' b'<unk>' b'<unk>' b')' b'organizations' b'dense' b'methods' b'like' b'All' b'of' b'Boise' b'@-@' b'based' b'bird' b',' b'as' b'small' b'grassland' b'water'
    b'are' b'Herbie' b'and' b'swamps' b',' b'although' b'one' b'of' b'the' b'potential' b'residents' b'associated' b'by' b'high' b',' b'in' b'unlimited' b'areas' b',' b'in'
    b'footsteps' b';' b'rough' b',' b'beak' b'and' b'Manila' b',' b'may' b'become' b'traits' b'that' b'I' b'call' b'both' b'further' b'or' b'heirs' b'.' b'It'
    b'recognizes' b'common' b'violacea' b':' b'"' b'Was' b'birth' b'collapsed' b'before' b'this' b'Bahamas' b',' b'beyond' b'normal' b'hill' b'such' b'as' b'partial' b'forests' b'\xe2\x80\x94'
    b'fine' b'or' b'interactive' b',' b'or' b',' b'which' b'he' b'is' b'<unk>' b'\xe2\x80\x93' b'blossom' b'a' b'close' b'volume' b',' b'was' b'a' b'cheap' b'loud'
    b',' b'possibly' b'by' b'its' b'body' b',' b'down' b'a' b'decent' b'accuracy' b'has' b'Eberg\xc3\xb6tzen' b',' b'go' b'off' b'to' b'its' b'manufacture' b'.' b'Many'
    b'English' b'starlings' b'are' b'called' b'talents' b',' b'and' b'coming' b'to' b'offers' b'air' b',' b'without' b'the' b'<unk>' b'<unk>' b'golden' b',' b'<unk>' b'Points'
    b',' b'pack' b',' b'melodrama' b'and' b'his' b'made' b'to' b'their' b'snake' b',' b'strength' b'wearing' b'absolute' b'atmospheres' b'to' b'apply' b'.' b'"' b'<eos>'
    b'To' b'create' b'their' b'Pusan' b'laws' b'on' b'first' b'when' b'it' b'generally' b'may' b'have' b'closely' b'flock' b',' b'they' b'are' b'from' b'a' b'frontal'
    b'pest' b'who' b'one' b'of' b'of' b'the' b'general' b'or' b'outer' b'melancholic' b'voltage' b'.' b'His' b'head' b'mantle' b'is' b'involves' b'he' b'still' b'their'
    b'ability' b',' b'first' b'day' b'.' b'Instead' b',' b'birds' b'is' b'reside' b'for' b'wizard' b'.' b'There' b'are' b'also' b'reports' b'an' b'symbol' b'or'
    b'<unk>' b'its' b'mate' b'was' b'of' b'about' b'3' b'hours' b',' b'with' b'three' b'pair' b'studied' b'or' b'three' b'males' b'.' b'Several' b'fauna' b'can'
    b'be' b'waited' b'to' b'be' b'<unk>' b'back' b'<unk>' b'.' b'<eos>' b'High' b'starlings' b'feed' b'between' b'to' b'2' b'@.@' b'10' b'million' b',' b'which'
    b'eventually' b'is' b'detected' b'in' b'Ireland' b',' b'since' b'which' b'night' b',' b'extreme' b'or' b'greater' b'birds' b',' b'does' b'not' b'work' b'when' b'they'
    b'usually' b'migrate' b'to' b'Criticism' b'.' b'In' b'some' b'times' b',' b'they' b'begin' b'to' b'their' b'highly' b'strong' b'neutralize' b',' b'by' b'minor' b'contexts'
    b'such' b'as' b'<unk>' b',' b'controlling' b'tension' b'as' b'a' b'way' b'to' b'be' b'similar' b'to' b'jeopardize' b'size' b'and' b'(' b"'" b'antique' b'<unk>'
    b'(' b'description' b'of' b'<unk>' b'\xe2\x80\x93' b'broken' b')' b'.' b'Because' b'they' b'leave' b'"' b'the' b'matter' b'of' b'<unk>' b'impossible' b'at' b'a' b'bigger'
    b'and' b'more' b'short' b',' b'less' b'different' b'or' b'reasonable' b'those' b'to' b'a' b'different' b'spillways' b'of' b'<unk>' b'@-@' b'grey' b',' b'and' b'almost'
    b'goes' b'back' b'from' b'places' b'as' b'endangered' b'in' b'the' b'same' b'whole' b'very' b'leaving' b'.' b'"' b'The' b'overall' b'limits' b'of' b'a' b'color'
    b'identity' b',' b'dedicated' b'to' b'a' b'sappers' b'that' b'is' b'Spike' b'called' b'"' b'Security' b'"' b',' b'(' b'tender' b'from' b'117' b'by' b'24'
    b'thousand' b'and' b',' b'old' b',' b'C' b',' b'and' b'24' b')' b'joystick' b'element' b',' b'while' b'its' b'wings' b',' b'very' b'palette' b'with'
    b'serve' b',' b'blue' b'quality' b',' b'so' b'as' b'dark' b'fiesta' b'and' b',' b'he' b'is' b'dark' b'for' b'that' b'"' b'need' b'to' b'be'
    b'Christian' b'and' b'accurate' b',' b'and' b'Chen' b'keeping' b'two' b'or' b'wild' b'species' b',' b'often' b'a' b'abdomen' b'connecting' b'typical' b'astronomical' b',' b'but'
    b'a' b'body' b'of' b'cinemas' b'submitted' b'him' b',' b'this' b'turned' b'stature' b'.' b'Then' b'this' b'extent' b'to' b'be' b'kind' b'of' b'those' b'the'
    b'stem' b'"' b'.' b'One' b'schools' b'form' b'this' b'name' b',' b'but' b'one' b'Guinness' b'areas' b'also' b'and' b'translate' b'to' b'legibility' b'.' b'For'
    b'example' b'this' b'may' b'take' b'more' b'than' b'came' b'back' b'intruder' b'to' b'mating' b',' b'should' b'leave' b'defensive' b'predator' b'poisoning' b',' b'fuel' b'nucleoplasm'
    b',' b'or' b'1700' b'.' b'There' b'are' b'obvious' b'distances' b'from' b'0600' b',' b'Poland' b',' b'degraded' b'males' b'such' b'as' b'<unk>' b',' b'<unk>'
    b',' b'Whereas' b'sexpunctatus' b',' b'and' b'even' b'becoming' b'picked' b'forward' b'as' b'in' b'development' b'.' b'2O' b'cloth' b'derivation' b"'s" b'ability' b'to' b'gain'
    b'males' b',' b'sparse' b',' b'patrols' b',' b'rats' b',' b'and' b'twigs' b'.' b'<eos>' b'Damage' b',' b'in' b'this' b'period' b',' b'can' b'be'
    b'left' b'or' b'even' b':' b'it' b'taught' b'other' b'kinds' b'or' b'so' b'one' b'of' b'the' b'island' b',' b'with' b'designing' b'loud' b',' b'menacing'
    b'under' b'quintessential' b'behaviour' b'that' b'other' b'measurement' b'of' b'<unk>' b'schooner' b'are' b'Colby' b'eat' b'.' b'For' b'two' b'<unk>' b',' b'it' b'has' b'shown'
    b'long' b',' b'but' b'threatened' b'section' b'up' b'on' b'a' b'larger' b'.' b'He' b'grows' b'on' b'a' b'zero' b'variety' b'of' b'small' b'birds' b';'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 236.4
    loss: 5.168
    elapsed time (seconds): 162.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  43.972 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
