.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'Mariana' b'(' b'they' b'is' b'made' b'due' b'to' b'barley' b')' b'.' b'<eos>' b'Throughout' b'this' b'period' b',' b'James' b'Culture' b'entered' b'its'
    b'public' b'peak' b'with' b'43' b'@.@' b'20' b'%' b'per' b'in' b'@-@' b'length' b'Somerset' b',' b'a' b'record' b'arid' b'texture' b'(' b'Jason' b'Longoria'
    b')' b',' b'which' b"'s" b'All' b'@-@' b'third' b'number' b'are' b'"' b'pretty' b'50' b'miles' b'europium' b'"' b'.' b'By' b'the' b'mid' b'shortly'
    b',' b'an' b'number' b'put' b'in' b'the' b'following' b'year' b',' b'strongest' b'of' b'B.' b'Moresby' b'died' b'in' b'transitive' b'cultures' b',' b'along' b'with'
    b'Houston' b"'s" b'label' b',' b'and' b'stated' b':' b'"' b'A' b'leaf' b'is' b'an' b'young' b'route' b'"' b'.' b'In' b'The' b'sustaining' b'winter'
    b',' b'it' b'was' b'recorded' b'on' b'August' b'17' b',' b'2006' b',' b'at' b'the' b'South' b'Council' b'All' b'@-@' b'selling' b'Game' b'II' b'.'
    b'Ceres' b'was' b'named' b'to' b'Lydney' b'MacDonald' b'as' b'themes' b'condoms' b'for' b'the' b'company' b'"' b'accomplice' b'Library' b'"' b'to' b'Superman' b'game' b'thing'
    b'for' b'the' b'Hurricane' b'Mode' b'.' b'<eos>' b'The' b'church' b"'s" b'story' b'Health' b'appears' b'on' b'October' b'31' b'of' b'television' b'best' b',' b'among'
    b'extended' b'a' b'decisive' b'majority' b'along' b'with' b'Kody' b'Foreign' b'umpire' b'II' b'and' b'a' b'flag' b'for' b'a' b'mine' b'that' b'an' b'universal' b'American'
    b'citizen' b'was' b'rejected' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Development' b'=' b'=' b'<eos>' b'<eos>' b'The' b'designer' b'received' b'mixed' b'reviews' b'from' b'critics'
    b'from' b'critics' b'and' b'Kody' b'David' b'Davies' b'.' b'In' b'The' b'second' b'journal' b',' b'according' b'to' b'Ernst' b'Bandicoot' b'F.' b'Taylor' b',' b'knew'
    b'that' b'"' b'The' b'Nazi' b'proposal' b'enough' b',' b'to' b'start' b'down' b'thus' b'titled' b'"' b'I' b'deemed' b'dark' b'more' b'Immortal' b',' b'if'
    b'the' b'history' b',' b'and' b'a' b'schools' b'\xe2\x80\x93' b'a' b'hits' b'Years' b',' b'rather' b'utterly' b'(' b'genuine' b'kind' b'where' b'of' b'the' b'God'
    b'of' b'the' b'two' b'American' b'.' b')' b'ends' b'in' b'devastating' b'Walpole' b',' b'a' b'player' b'they' b'am' b'"' b'$' b'2' b'million' b'years'
    b'.' b'-' b'during' b'a' b'one' b'@-@' b'hand' b'bomb' b',' b'intruders' b'should' b'be' b'walk' b'"' b'(' b'1859' b')' b',' b'with' b'the'
    b'role' b'of' b'Scarlet' b'(' b'especially' b'known' b'as' b'sentenced' b'to' b'her' b'bottle' b'and' b'two' b'players' b')' b';' b'as' b'and' b'four' b'different'
    b'scenes' b'have' b'received' b'some' b'moves' b'.' b'The' b'contents' b'of' b'the' b'<unk>' b'entertainment' b',' b'or' b'"' b'alternate' b'<unk>' b'"' b'for' b'the'
    b'game' b'suggests' b'they' b'were' b'unknown' b',' b'trying' b'to' b'the' b'fame' b'@-@' b'under' b'@-@' b'CBS' b'spirit' b'.' b'Carpenter' b'received' b'universities' b'as'
    b'the' b'"' b'string' b'possession' b'that' b'<unk>' b'a' b'short' b'button' b'"' b',' b'and' b'the' b'"' b'difference' b'"' b'put' b'the' b'region' b'early'
    b'at' b'its' b'longtime' b'age' b'out' b'fringe' b'by' b'Kirk' b',' b'Indonesia' b',' b'and' b'FIES' b'.' b'<unk>' b'Heads' b'of' b'Bilderbogen' b'until' b'his'
    b'first' b'1999' b'season' b'under' b'Virginia' b'Bank' b';' b'<unk>' b'commented' b'that' b'"' b'If' b'there' b'is' b'last' b'short' b'expectations' b',' b'many' b'nations'
    b'sing' b'.' b'"' b'With' b'January' b'20' b',' b'this' b'character' b'written' b'was' b'subject' b'to' b'London' b',' b'2009' b',' b'screened' b'in' b'October'
    b'1986' b',' b'adding' b'it' b'"' b'too' b'possible' b'of' b'rewards' b'"' b'.' b'The' b'reviewer' b'illustrated' b'Older' b'damages' b',' b'indicating' b'praise' b'as'
    b'"' b'brilliant' b'or' b',' b'coming' b'into' b'fast' b'singers' b'and' b'kind' b',' b'even' b'safety' b'"' b'.' b'<unk>' b'technically' b'Gardens' b'that' b'he'
    b'had' b'previously' b'started' b'from' b'the' b'show' b'but' b'do' b'not' b'or' b'succeed' b'wrong' b'or' b',' b'though' b'admirable' b'over' b'package' b'and' b'Nick'
    b'Reagan' b'importantly' b'into' b'obligation' b'1875' b'.' b'At' b'recalled' b'all' b'@-@' b'time' b'African' b'warships' b',' b'<unk>' b'<unk>' b':' b'<eos>' b'I' b'rest'
    b'the' b'organizers' b'of' b'1.c4' b'"' b'The' b'South' b'Stone' b'.' b'The' b'Graham' b'Vessel' b'(' b'The' b'nomination' b'Junyi' b',' b'The' b'UFO' b'Herald'
    b')' b'and' b'the' b'saxophone' b'@-@' b'Davis' b'was' b'one' b'of' b'the' b'justice' b'of' b'this' b'book' b'.' b'In' b'his' b'interview' b'he' b'found'
    b'his' b'host' b'teenager' b'in' b'a' b'row' b'two' b'games' b'later' b'.' b'The' b'event' b'includes' b'trouble' b'Saiban' b'Todd' b'<unk>' b'and' b'Mandi' b'<unk>'
    b'in' b'handheld' b'two' b'times' b',' b'hit' b'three' b'heavy' b'stories' b';' b'Danny' b'<unk>' b'<unk>' b'dismissed' b'The' b'issue' b'to' b'portray' b'Iago' b'for'
    b'hard' b'letters' b'in' b'London' b'.' b'When' b'at' b'a' b'successful' b'level' b'with' b'the' b'two' b'future' b'short' b'stories' b',' b'The' b'series' b'was'
    b'beheaded' b'with' b'Raffles' b'written' b'but' b'even' b'announced' b'his' b'organization' b'Corporation' b'.' b'<eos>' b'Hornung' b'also' b'Townships' b'as' b'Jack' b'O' b'Isaiah' b','
    b'the' b'Baseball' b'clear' b'Association' b'of' b'Oxford' b'Corps' b'as' b'parodied' b'being' b'we' b'bought' b'into' b'April' b'which' b'it' b'was' b'discovered' b'that' b'2010'
    b',' b'Bill' b'Finley' b'commented' b'that' b'Bleiler' b'announced' b'"' b'Barbarian' b'from' b'TV' b'"' b'.' b'In' b'the' b'Adult' b'James' b',' b'Tracy' b'admitted'
    b'for' b'story' b',' b'2012' b'\xe2\x80\x93' b'over' b'the' b'opening' b'classes' b'that' b'were' b'able' b'to' b'dominate' b'the' b'game' b'a' b'cushion' b'spoken' b'understand'
    b'from' b'Kinnear' b'in' b'the' b'Australian' b'Legend' b'because' b'of' b'urged' b'a' b'"' b'overturned' b',' b'<unk>' b'Slayer' b'.' b'"' b'In' b'2005' b'the'
    b'Observer' b'was' b'credited' b'to' b'aiming' b'those' b'using' b'it' b'over' b'getting' b'Greg' b"'Malley" b'.' b'McGurk' b'had' b'suggested' b'three' b'possible' b'bones' b'in'
    b'Chains' b'at' b'Sandy' b'Manuela' b'Hornung' b',' b'although' b'shares' b'that' b'applicants' b'have' b'to' b'become' b'well' b'"' b'Sajid' b'The' b'<unk>' b'"' b','
    b'to' b'be' b'based' b'for' b'the' b'game' b'.' b'The' b'remix' b'in' b'which' b'despite' b'even' b'an' b'first' b'rest' b',' b'aren' b"'Malley" b'has'
    b'previously' b'played' b'in' b'lamenting' b'story' b'skills' b',' b'a' b'law' b'who' b'feels' b'previously' b'lacks' b',' b'thought' b',' b'"' b'I' b'think' b'what'
    b',' b'they' b'cost' b'Phil' b'jimmadseni' b'.' b'"' b'In' b'the' b'UK' b',' b'Michael' b'Tucker' b'Dam' b'wants' b'him' b'to' b'say' b"'s" b'musical'
    b'support' b',' b'<unk>' b'assisted' b'as' b'"' b'honor' b'"' b',' b'as' b'well' b'as' b'or' b'"' b'<unk>' b'Vikings' b'for' b'years' b'"' b'.'
    b'The' b'book' b'offense' b'wrote' b'the' b'story' b'"' b'training' b'"' b'when' b'"' b'We' b'or' b'finally' b'ready' b'my' b'presence' b'.' b'"' b'Brown'
    b'noted' b'that' b'his' b'bonus' b'ability' b'was' b'to' b'be' b'moved' b'to' b'Communists' b'.' b'According' b'to' b'his' b'cutter' b',' b'speaking' b'new' b'writer'
    b'stated' b'that' b'"' b'"' b'O' b"'t" b'ambition' b'to' b'not' b'think' b'that' b'they' b"'ll" b'be' b'a' b'<unk>' b'post' b'\xe2\x80\x93' b'7' b'to'
    b'hear' b'without' b'funding' b'.' b'"' b'Following' b'its' b'first' b'season' b',' b'Jordan' b'acquired' b'Soviet' b'Columbia' b'Minneapolis' b'in' b'the' b'Women' b"'" b'Cross'
    b',' b'and' b'vineyards' b'and' b'1772' b'each' b'of' b'questions' b'.' b'In' b'Garland' b',' b'the' b'Stetson' b'Show' b'claimed' b'that' b'the' b'band' b'could'
    b'be' b'fully' b'familiar' b',' b'even' b'the' b'artists' b'versus' b'which' b'The' b'book' b'@-@' b'called' b'era' b'nineteenth' b'parts' b'of' b'play' b'were' b'activated'
    b'.' b'Hornung' b'remained' b'a' b'new' b'reception' b'in' b'a' b'television' b'review' b'<unk>' b'"' b'<unk>' b'"' b'Museum' b'that' b'starred' b'to' b'its' b'to'
    b'state' b'play' b'rallied' b'.' b'The' b'Grand' b'Developers' b'Mail' b'is' b'also' b'released' b'as' b'manufacturing' b',' b'and' b'great' b',' b'as' b'part' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.5
    loss: 5.168
    elapsed time (seconds): 139.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  1.198 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
