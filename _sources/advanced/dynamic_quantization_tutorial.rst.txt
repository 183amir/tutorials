.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'and' b'served' b'on' b'the' b'Northern' b'Song' b',' b'Japanese' b'children' b'influenced' b'every' b'concentration' b'of' b'deceit' b',' b'<unk>' b',' b'virtual' b'in'
    b'Italy' b',' b'in' b'New' b'York' b',' b'Ontario' b',' b'Anzac' b'Africa' b',' b'and' b'Europe' b',' b'most' b'official' b'<unk>' b'3' b'@.@' b'57'
    b'cm' b'(' b'70' b'ft' b')' b'.' b'The' b'Pampa' b'failure' b'assigned' b'straight' b',' b'and' b'from' b'every' b'Kartikeya' b'of' b'St' b'Friedrich' b'Places'
    b'supporting' b'al' b'Abraham' b'for' b'IGN' b'(' b'<unk>' b')' b',' b'obstacles' b'(' b'al' b'Democrat' b')' b',' b'intervened' b',' b'mediate' b'Sarasota' b'from'
    b'Philip' b'<unk>' b'as' b'a' b'elderly' b'planet' b',' b'and' b'the' b'most' b'successful' b'denounced' b'authorities' b',' b'Dover' b',' b'<unk>' b',' b'and' b'Petra'
    b',' b'due' b'to' b'Pido' b'damage' b'and' b'feed' b'heavily' b'to' b'refer' b'the' b'major' b'decorative' b'state' b'of' b'Republic' b'refer' b'to' b'the' b'bird'
    b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'trustees' b'(' b'Michael' b'Every' b'<unk>' b')' b'=' b'<eos>' b'<eos>' b'Critical' b'Carolina' b',' b'in' b'charge' b'of'
    b'torrential' b'province' b',' b'lives' b')' b'is' b'sometimes' b'of' b'genus' b'@-@' b'<unk>' b'decayed' b'or' b'the' b'sexually' b'partners' b'of' b'which' b'was' b'typical'
    b'.' b'Another' b'Pusan' b'organized' b'well' b'east' b'always' b'extended' b'to' b'Scandinavia' b',' b'about' b'4' b'@.@' b'5' b'centimetres' b'(' b'2' b'@.@' b'0'
    b'ft' b')' b',' b'so' b'of' b'many' b'derivatives' b'the' b'eggs' b'of' b'Venus' b'who' b'was' b'equally' b'loud' b',' b'at' b'a' b'<unk>' b'@-@'
    b'<unk>' b'McAllister' b'with' b'a' b'electron' b'nest' b'of' b'ores' b'drill' b'.' b'When' b'there' b'is' b'individual' b'evidence' b':' b'An' b'spores' b'continue' b'form'
    b'this' b'night' b'of' b'any' b'can' b'with' b'one' b'or' b'<unk>' b'for' b'any' b'other' b'combinations' b'of' b'offenders' b'and' b'airfields' b'.' b'By' b'1820s'
    b',' b'a' b'excellent' b'study' b'of' b'the' b'kakapo' b'that' b'has' b'packaged' b',' b'Shiva' b'rises' b'Mitch' b'<unk>' b'to' b'be' b'determined' b'to' b'be'
    b'blocked' b'by' b'components' b'of' b'a' b'examination' b'of' b'Kilid' b'copulation' b'.' b'They' b'have' b'deliberately' b'escaped' b'a' b'eye' b'picture' b'by' b'"' b'steadily'
    b'"' b',' b'having' b'reached' b'range' b',' b'with' b'security' b'and' b'upper' b'that' b'may' b'be' b'typical' b',' b'or' b'genera' b'.' b'It' b'is'
    b'Catherine' b'<eos>' b'13' b',' b'68' b'is' b'different' b'when' b'compared' b'have' b'been' b'decried' b'simply' b'as' b'sometime' b'in' b'useless' b'that' b'might' b'be'
    b'storylines' b'in' b'crushed' b'body' b'villages' b'.' b'A' b'large' b'cloud' b'layer' b'for' b'preceded' b'the' b'g' b'club' b'reach' b'by' b'<unk>' b'@-@' b'Denis'
    b'.' b'These' b'exposures' b'can' b'be' b'Media' b'math' b'.' b'As' b'help' b'thousands' b'of' b'females' b'on' b'the' b'island' b',' b'it' b'leaves' b'cellular'
    b'nuclei' b',' b'direct' b'lighting' b'<unk>' b'or' b'naturally' b'woodland' b',' b'and' b'able' b'are' b'if' b'inference' b'during' b'the' b'nestling' b"'s" b'beak' b'in'
    b'Geastrum' b'.' b'<eos>' b'<unk>' b'(' b'presently' b')' b'has' b'a' b'"' b'fledged' b'specific' b'sight' b'of' b'10' b'pairs' b'of' b'prey' b'affected' b'it'
    b'without' b'bid' b',' b'<unk>' b'discerning' b'not' b'thin' b',' b'and' b'amazing' b'is' b'Dutch' b'looking' b'on' b'a' b'single' b'black' b'manner' b'.' b'935928'
    b'bulbous' b'through' b'forbidden' b'a' b'fresh' b'winning' b'ranging' b'food' b'for' b'example' b'.' b'Other' b'flow' b'caught' b'full' b'of' b'one' b'households' b'in' b'most'
    b'place' b',' b'and' b'this' b'is' b'a' b'Younger' b'on' b'it' b'tied' b'on' b'Venus' b'water' b',' b'learning' b';' b',' b'that' b'they' b'could'
    b'once' b'easily' b'think' b'.' b'She' b'is' b'also' b'<unk>' b'more' b'fundamental' b',' b'and' b'so' b',' b'most' b'of' b'these' b'birds' b'ver' b'to'
    b'be' b'their' b'skin' b',' b'is' b'appropriate' b',' b'over' b'fine' b'exposure' b'when' b'My' b'evolution' b'are' b'not' b'heard' b'to' b'them' b'or' b'reading'
    b'nothing' b',' b'"' b'play' b'that' b'perhaps' b'orbit' b',' b'their' b'businesses' b'opposite' b'this' b'wall' b'alif' b'.' b'The' b'respond' b'eyes' b'@-@' b'up'
    b'such' b'as' b'<unk>' b',' b'physical' b',' b'"' b'leachi' b'"' b'\xe2\x80\x94' b'was' b'brought' b'to' b'9' b'@.@' b'4' b'mi' b'(' b'2' b'@.@'
    b'5' b'mi' b')' b'long' b',' b'and' b'even' b'a' b'wide' b'Pictures' b'in' b'front' b'of' b'Sb' b'(' b'1933' b')' b'from' b'two' b'are'
    b'13' b'km' b'per' b'spaced' b'.' b'Other' b'a' b'occurrence' b'by' b'sheds' b'@-@' b'cover' b'@-@' b'night' b'feathers' b'(' b'Those' b'algae' b')' b','
    b'the' b'surface' b"'s" b'maternal' b'Inocybe' b'School' b'(' b'once' b'powder' b',' b'formed' b'out' b'known' b'from' b'Shiva' b')' b'can' b'be' b'reduced' b'.'
    b'The' b'red' b'membrane' b'is' b'often' b'considered' b'easier' b'without' b',' b'red' b',' b'type' b'Pippen' b',' b'(' b'Hanna' b')' b'and' b'with' b'the'
    b'head' b',' b'visit' b'spores' b"'s" b'Rupert' b',' b'mid' b'hours' b',' b'and' b'Dubois' b',' b'with' b'a' b'hat' b'@-@' b'control' b'Judas' b','
    b'which' b'has' b'its' b'own' b'gate' b',' b'and' b'smelling' b'(' b'G.' b'Mandir' b')' b',' b'shooting' b'the' b'head' b'with' b'her' b',' b'which'
    b'face' b'as' b'"' b'triumph' b'subject' b'and' b'a' b'planet' b',' b'and' b'an' b'eye' b'of' b'ESPN.com' b'.' b'"' b'When' b'it' b'originally' b'inspired'
    b'Oh' b'Nasor' b'the' b'first' b'<unk>' b'approaches' b'in' b'Motion' b',' b'it' b'is' b'the' b'only' b'@-@' b'specific' b'sophisticated' b'masculine' b'isotope' b'player' b'released'
    b'by' b'different' b'native' b'metal' b'pine' b',' b'which' b'led' b'transported' b'around' b'grandiosity' b'of' b'inventions' b'not' b'in' b'a' b'"' b'Sentence' b'of' b'Dhangar'
    b'"' b'accompanied' b'by' b'massive' b'Champlain' b'demons' b'.' b'Generally' b'while' b'it' b'seems' b'the' b'island' b"'s" b'processes' b'of' b'returning' b'patterns' b'believed' b'that'
    b'due' b'to' b'food' b',' b'they' b'then' b'cause' b'internal' b'special' b'displays' b'.' b'It' b'is' b'honored' b'by' b'RNA' b'and' b'attractions' b';' b'in'
    b'19th' b'century' b',' b'it' b'is' b'important' b'for' b'source' b'as' b'it' b'is' b'unknown' b'and' b'white' b'throughout' b'the' b'year' b',' b'sending' b'a'
    b'higher' b'@-@' b'time' b'cargo' b'\xe2\x80\x93' b'horn' b'Europium' b'.' b'<eos>' b'Because' b'of' b'multiple' b'species' b',' b'that' b'the' b'shrine' b'is' b'pressured' b'close'
    b'to' b'their' b'eggs' b'nature' b',' b'it' b'is' b'accompanied' b'by' b'the' b'first' b'water' b'medley' b'to' b'"' b'attribute' b'a' b'sun' b'"' b'('
    b'bearing' b'nature' b')' b'.' b'The' b'original' b'female' b'is' b'rare' b'by' b'carbon' b'<eos>' b'<eos>' b'=' b'=' b'Origins' b'Lloyd' b'fruiting' b'=' b'='
    b'<eos>' b'<eos>' b'The' b'eukaryotic' b'snake' b',' b'with' b'texture' b',' b'seriously' b'shaped' b',' b'nurses' b',' b'is' b'Geastrum' b'by' b'mg' b'<unk>' b'which'
    b'cannot' b'be' b'transcription' b'in' b'common' b'areas' b',' b'such' b'as' b'Panzer' b'rock' b',' b'they' b'have' b'banks' b'in' b'site' b',' b'exist' b'or'
    b'reddish' b'demand' b',' b'while' b'the' b'pre' b'@-@' b'frequency' b',' b'nutrients' b'or' b'wild' b'gratitude' b',' b'were' b'lowered' b'until' b'November' b'22' b','
    b'2006' b',' b'at' b'Amanita' b'Canyon' b'.' b'A' b'small' b'starling' b'called' b'libretti' b'of' b'Ceres' b'will' b'have' b'been' b'mentioned' b'by' b'Richard' b'<unk>'
    b'.' b'Standing' b'a' b'<unk>' b'puddings' b'flanked' b'in' b'shape' b',' b'mirrored' b'isolated' b'<unk>' b',' b'the' b'<unk>' b',' b'and' b'royalty' b'animals' b','
    b'and' b'a' b'place' b'from' b'plain' b'part' b'of' b'the' b'personification' b'that' b'ensuring' b'the' b'Mount' b'DNA' b'province' b',' b'which' b'were' b'open' b'by'
    b'fish' b',' b'they' b'macrophages' b'the' b'strategy' b'part' b'of' b'corruption' b'and' b'squirrels' b'.' b'A' b'adult' b'chorus' b'assigned' b'to' b'either' b'a' b'large'
    b'angle' b'on' b'the' b'complete' b'anonymously' b'Killing' b'v.' b'Ahk' b',' b'which' b'went' b'to' b'her' b'specific' b'labour' b'translation' b'>' b'that' b'wrote' b'may'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.7
    loss: 5.168
    elapsed time (seconds): 165.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  49.739 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
