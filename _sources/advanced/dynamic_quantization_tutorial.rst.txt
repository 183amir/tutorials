.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'...' b'but' b'it' b'is' b'not' b'a' b'non' b'@-@' b'proclaimed' b'<unk>' b',' b'and' b'or' b'the' b'fact' b'of' b'social' b'.' b'This' b'led'
    b'it' b'to' b'the' b'original' b'defensive' b'arena' b'programme' b'.' b'The' b'beak' b'is' b'fairly' b'heavy' b'but' b'if' b'the' b'birds' b'feared' b'in' b'native'
    b'way' b'in' b'<unk>' b',' b'they' b'are' b'now' b'undoubtedly' b'in' b'a' b'large' b'sense' b',' b'while' b'NATO' b'had' b'probably' b'demonstrated' b'serving' b'his'
    b'first' b'experience' b'.' b'subspecies' b'remarked' b'that' b'one' b'of' b'the' b'young' b'forces' b'of' b'this' b'date' b'have' b'gone' b'far' b'to' b'terms' b','
    b'and' b'others' b'have' b'looked' b'his' b'own' b'company' b',' b'believing' b'it' b'might' b'be' b'to' b'mention' b'that' b'Somehow' b'it' b'because' b'a' b'longer'
    b'giant' b'mushroom' b'should' b'be' b'recreated' b'.' b'As' b'of' b'June' b'29' b',' b'2006' b',' b'it' b'is' b'able' b'to' b'respond' b'to' b'dots'
    b'at' b'NSB' b'.' b'It' b'began' b'to' b'be' b'classified' b'as' b'a' b'private' b'barrier' b'for' b'Nevermind' b'after' b'the' b'hyphen' b'of' b'what' b'it'
    b'revivals' b'extending' b'at' b'sea' b';' b'to' b'live' b'the' b'attack' b'it' b'often' b'operatic' b'sorcerer' b'for' b'historical' b',' b'raised' b'policies' b'.' b'<eos>'
    b'IAAF' b'is' b'also' b'abolished' b'or' b'small' b',' b'and' b'the' b'ball' b'of' b'thousands' b'is' b'a' b'origins' b'beneath' b'<unk>' b'in' b'1829' b','
    b'and' b'the' b'scattered' b'small' b'structure' b'of' b'Ceres' b'are' b'later' b'entirely' b'rare' b'.' b'At' b'the' b'end' b'of' b'its' b'respective' b'name' b','
    b'the' b'player' b'record' b'completely' b'convinced' b'the' b'Times' b'as' b'possible' b'to' b'make' b'Crash' b'fascinating' b',' b'which' b'broadcast' b'close' b'to' b'it' b'post'
    b'times' b'.' b'This' b'intended' b'quality' b'may' b'run' b'CB' b'and' b'leave' b'a' b'rapid' b'view' b'in' b'different' b'characters' b'.' b'Each' b'other' b'realize'
    b'mild' b'attacks' b'for' b'army' b'and' b'<unk>' b'down' b'duets' b'.' b'After' b'this' b'other' b'overlord' b',' b'lacking' b'occurrence' b'as' b'located' b'up' b'of'
    b'<unk>' b"'i" b'to' b'produce' b'a' b'<unk>' b'or' b'crown' b'down' b'off' b'grandchildren' b':' b'"' b'offered' b'a' b'institution' b'they' b'could' b'be' b'aesthetic'
    b'.' b'"' b'\xe2\x80\x93' b'60' b'%' b'regarding' b'a' b'penal' b'depression' b'will' b'be' b'follows' b'to' b'find' b'another' b'when' b'they' b'are' b'destroyed' b'.'
    b'But' b'they' b'approaches' b'<unk>' b',' b'once' b'they' b'are' b'also' b'uncovered' b',' b'but' b'another' b'transferring' b'amounting' b',' b'with' b'of' b'also' b'Mallisena'
    b',' b'her' b'impact' b'is' b'worshipped' b';' b'there' b'are' b'only' b'shown' b'that' b'they' b'are' b'within' b'growing' b',' b'though' b'their' b'eggs' b'be'
    b'less' b'cal' b'.' b'These' b'land' b'may' b'pave' b'on' b'a' b'affinity' b'greater' b'.' b'There' b'are' b'unclear' b'@-@' b'sanctioned' b'manner' b'@-@' b'up'
    b'supply' b'that' b'even' b'created' b',' b'dawn' b'filled' b'light' b',' b'fed' b'by' b'way' b'river' b'or' b'domestic' b'uses' b'.' b'As' b'they' b'return'
    b'to' b'the' b'South' b'Korean' b'principles' b',' b'every' b'pit' b'planet' b'or' b'populations' b'can' b'be' b'little' b'.' b'<eos>' b'Production' b'(' b'"' b'solid'
    b'~' b'"' b')' b'H.' b'it' b'Kurt' b'sic' b'\xe2\x80\x94' b'titled' b'up' b'unacceptable' b'for' b'a' b'lesser' b'<unk>' b'attraction' b',' b'but' b'short' b'biochemical'
    b'foods' b'emerged' b'in' b'the' b'medicine' b'.' b'Clancy' b'has' b'played' b'link' b'30' b'states' b'of' b'an' b'181' b'net' b',' b'especially' b'according' b'to'
    b'(' b'5' b'@.@' b'76' b'metres' b')' b'thick' b'or' b'is' b'to' b'be' b'observed' b'by' b'protection' b'.' b'In' b'adjacent' b'.' b'Monsen' b'has'
    b'been' b'modified' b'as' b'an' b'asteroids' b'for' b'a' b'probably' b'device' b'.' b'Another' b'robed' b'@-@' b'best' b'hypothesis' b'is' b'near' b'not' b'nine' b'on'
    b'2' b'\xe2\x80\x93' b'13' b'hours' b'.' b'These' b'may' b'be' b'expanding' b'Parasaurolophus' b'before' b'carved' b'a' b'colour' b'tree' b'between' b'Ceres' b'and' b'effective' b'blood'
    b'trees' b',' b'seated' b'on' b'their' b'cellular' b'question' b'or' b'toxins' b'.' b'Large' b'helps' b'nuclei' b'may' b'be' b'smaller' b',' b'required' b'or' b'so'
    b'successfully' b'to' b'be' b'humiliation' b'.' b'Despite' b'some' b'individuals' b'rather' b'<unk>' b',' b'some' b'extra' b'males' b'may' b'be' b'well' b'in' b'turn' b'.'
    b'Where' b'<unk>' b',' b'some' b'eggs' b'be' b'the' b'same' b'ongoing' b'eyes' b',' b'oneself' b'in' b'native' b',' b'way' b',' b'towards' b'his' b'respective'
    b'<unk>' b'breaking' b'parts' b'of' b'their' b'predators' b'.' b'Males' b'L.' b'Schrute' b'flee' b'further' b'and' b'extend' b'down' b'their' b'signature' b'eggs' b'.' b'He'
    b'also' b'ne' b'status' b'up' b'as' b'teaching' b'to' b'like' b'it' b'width' b'views' b'.' b'With' b'other' b'produce' b',' b'they' b"'m" b'used' b'concrete'
    b'when' b'they' b'<unk>' b'into' b'the' b'wind' b',' b'which' b'they' b'treating' b'.' b'Also' b'on' b'that' b'year' b',' b'it' b'needs' b'around' b'significantly'
    b'with' b'their' b'male' b'colors' b'and' b'females' b',' b'pretended' b'to' b'be' b'substantially' b'.' b'<eos>' b'Like' b'the' b'other' b'breeding' b',' b'female' b'parrot'
    b'notes' b'that' b'both' b'transmissions' b'nervous' b'by' b'Ceres' b'(' b'were' b'greater' b'brown' b'\xe2\x80\x93' b'bird' b')' b',' b'in' b'another' b'diet' b'contact' b'to'
    b'?' b',' b'by' b'1234' b'or' b'rows' b'or' b'navigating' b'into' b'a' b'<unk>' b'and' b'traditional' b'high' b'.' b'Batou' b'regard' b'a' b'variety' b'of'
    b'passing' b'finalists' b'with' b'parrots' b'and' b'oxygen' b',' b'often' b'even' b'their' b'wish' b'not' b'airport' b'.' b'Fixed' b'areas' b'have' b'the' b'perihelion' b'paper'
    b'and' b'higher' b'offspring' b'.' b'As' b'it' b'does' b'another' b'happened' b',' b'birds' b'are' b'cousin' b'<unk>' b'abolitionist' b'<eos>' b'In' b'the' b'Republic' b','
    b'outgrowth' b'or' b'simultaneously' b'by' b'light' b',' b'probably' b'is' b'present' b'<unk>' b'through' b'the' b'masses' b'of' b'planners' b'across' b'it' b'as' b'developing' b'for'
    b'explosive' b'fruit' b'flocks' b'to' b'find' b'their' b'past' b'.' b'Students' b'have' b'no' b'sacrament' b'burned' b'in' b'the' b'areas' b'with' b'the' b'trees' b'genital'
    b'signaling' b',' b'the' b'young' b'smell' b',' b'though' b'promises' b'it' b'they' b'will' b'be' b'to' b'generate' b'them' b'when' b'they' b'might' b'be' b'heard'
    b'.' b'When' b'they' b'attempts' b'first' b'to' b'photograph' b',' b'most' b'it' b'is' b'outfitted' b'as' b'allow' b'as' b'when' b',' b'when' b'they' b'must'
    b'scare' b'perfect' b',' b'more' b'confident' b'is' b'crazy' b'to' b'feed' b'OK' b'back' b',' b'and' b'as' b'they' b'symptoms' b'that' b'they' b'become' b'he'
    b'.' b'They' b'riding' b'the' b'domain' b'of' b'another' b'rotation' b'as' b'they' b'licensed' b'it' b',' b'because' b'it' b'sometimes' b'foraging' b'or' b'usually' b'looking'
    b'like' b'.' b'<eos>' b'Some' b'All\xc4\x81h' b'dust' b'spots' b'are' b'reduced' b'.' b'<eos>' b'DNA' b'records' b'below' b'adjoining' b'war' b'interstellar' b'or' b'enzymes' b'such'
    b'as' b'<unk>' b'(' b'spruces' b')' b'.' b'In' b'the' b'minerals' b'further' b',' b'they' b'have' b'elements' b'of' b'Europos' b'when' b'they' b'lived' b'.'
    b'About' b'its' b'first' b'survival' b'of' b'their' b'rubber' b'side' b',' b'sharp' b'@-@' b'scale' b'dark' b'eggs' b'are' b'<unk>' b'protection' b'\xe2\x80\x94' b'reality' b','
    b'and' b'vomiting' b',' b'naturally' b'in' b'be' b'prone' b'to' b'rotating' b'breed' b'.' b'<eos>' b'A' b'spiritual' b'and' b'minor' b'Llangaffo' b'may' b'be' b'necessary'
    b'to' b'be' b'killed' b';' b'<unk>' b'is' b'coalitions' b'to' b'be' b'abruptly' b'.' b'This' b'specimen' b'might' b'be' b'scrapped' b'by' b'vicious' b',' b'<unk>'
    b',' b'and' b'sed' b'.' b'In' b'particular' b',' b'antimonides' b',' b'its' b'hands' b'are' b'transported' b'by' b'much' b'frenzied' b'so' b',' b'allowing' b'the'
    b'extensive' b'transcription' b'of' b'contracting' b'type' b'of' b'low' b'bird' b',' b'but' b'they' b'choose' b'away' b'near' b'a' b'high' b'columns' b'.' b'Its' b'neck'
    b'may' b'be' b'positioned' b'and' b'was' b'widely' b'preserved' b'from' b'food' b'.' b'This' b'behaviour' b'allowed' b'in' b'his' b'booms' b'denying' b'heavy' b'litter' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.6
    loss: 5.168
    elapsed time (seconds): 151.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  28.488 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
