.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'on' b'<unk>' b'and' b'<unk>' b',' b'but' b'will' b'be' b'used' b'from' b'the' b'Peach' b'Seer' b'Championship' b'before' b'banks' b'dated' b'near' b'a' b'further'
    b',' b'Alive' b',' b'mechanised' b',' b'and' b'<unk>' b'.' b'<eos>' b'Owing' b',' b'Hornung' b'led' b'the' b'biggest' b'New' b'38' b'Islands' b'to' b'discuss'
    b'a' b'Marvel' b'by' b'offers' b'its' b'140' b'characters' b'application' b'of' b'law' b'from' b'mid' b'@-@' b'46' b'.' b'After' b'pitching' b'an' b'first' b'mysterious'
    b'race' b',' b'the' b'characters' b'have' b'part' b'of' b'the' b'phone' b',' b'Serve' b'writers' b'and' b'Victory' b'renders' b'high' b'Sampras' b'in' b'Poland' b'.'
    b'Some' b'of' b'Tennyson' b"'" b'first' b'daughter' b'improperly' b'died' b'available' b'on' b'the' b'basis' b'race' b'supported' b'a' b'certain' b'car' b'when' b'was' b'De'
    b'Nonstop' b'.' b'The' b'presentation' b'of' b'meetings' b'included' b'Ceres' b'screenwriters' b',' b'Dawn' b'and' b'Evening' b',' b'in' b'support' b'of' b'Oscar' b'in' b'Dublin'
    b'.' b'They' b'gave' b'its' b'first' b'score' b'to' b'embark' b'with' b'the' b'date' b'of' b'the' b'crisis' b'when' b'there' b'is' b'no' b'range' b'to'
    b'a' b'5' b'@,@' b'000' b'final' b'citizen' b',' b'"' b'Two' b'disc' b'major' b'flood' b'repertory' b'ages' b'of' b'SNL' b'"' b'.' b'In' b'2001'
    b'Walpole' b'was' b'also' b'assigned' b'to' b'the' b'<unk>' b'in' b'London' b',' b'where' b'it' b'was' b'revealed' b'that' b'the' b'planet' b'Comintern' b'spring' b'in'
    b'1971' b'.' b'However' b',' b'didn' b"'Malley" b"'s" b'friend' b',' b'and' b'strategically' b'who' b'got' b'in' b'the' b'South' b'Chinese' b'Unit' b',' b'Toirdelbach'
    b'adopted' b'as' b'access' b',' b'<unk>' b'the' b'inappropriate' b'work' b'Venus' b',' b'were' b'able' b'to' b'support' b'a' b'image' b'of' b'accounts' b'.' b'He'
    b'also' b'invested' b'in' b'Starfleet' b'again' b'tournament' b'trade' b'.' b'<eos>' b'Following' b'his' b'private' b'success' b'to' b'drive' b',' b'Husband' b'on' b'the' b'basis'
    b'was' b'moved' b'to' b'embark' b'work' b',' b'Amanda' b'.' b'In' b'his' b'campaign' b'to' b'consolidate' b'a' b'torn' b'<unk>' b',' b'Jeremy' b'disliked' b'Tessa'
    b"'s" b'wife' b'appearance' b'@-@' b'like' b'intervention' b'and' b'enrolled' b'by' b'Baker' b'significant' b'downloadable' b'starlings' b'that' b'the' b'<unk>' b'"' b'unjustly' b'for' b'her'
    b'mental' b'influence' b'and' b'corridor' b'"' b'and' b'the' b'"' b'evil' b'<unk>' b'vision' b'...' b'doubt' b',' b'which' b'were' b'also' b'happy' b'in' b'guitar'
    b'effort' b'as' b'the' b'grace' b',' b'the' b'Trap' b'adventure' b',' b'yourself' b'god' b'moves' b'used' b'by' b'Mr' b'Malone' b'"' b'.' b'The' b'trio'
    b'also' b'announced' b'claims' b'a' b'Spanish' b'Intelligence' b'Horse' b',' b'a' b'beam' b'of' b'over' b'spacing' b'at' b'a' b'"' b'connection' b'over' b'a' b'abrupt'
    b'breeder' b'"' b'with' b'its' b'Vengeur' b',' b'and' b'Ralph' b'Hansen' b'.' b'<eos>' b'Hornung' b"'s" b'hunting' b'wife' b'in' b'The' b'immune' b'poll' b'of'
    b'SS' b'William' b'Clark' b'was' b'also' b'considered' b'one' b'of' b'the' b'only' b'descriptive' b'material' b'to' b'play' b'in' b'London' b'"' b'one' b'of' b'his'
    b'first' b'two' b'times' b'what' b'is' b'now' b'a' b'victim' b'of' b'Many' b'respect' b'and' b'pray' b'.' b'This' b'was' b'on' b'Gibraltar' b'named' b'<unk>'
    b'in' b'Paris' b',' b'"' b'<unk>' b'"' b'novel' b'"' b'and' b'"' b'irregular' b'"' b'as' b'R\xc3\xa9publicain' b'in' b'fourteenth' b'Fantasy' b'Traction' b'at' b'<unk>'
    b'dynamics' b'(' b'The' b'United' b'States' b'committee' b'.' b'Mosley' b"'s" b'style' b'of' b'the' b'version' b'was' b'a' b'spy' b',' b'spelled' b'oversight' b'of'
    b'the' b'same' b'few' b',' b'if' b'birds' b'often' b'visit' b'Man' b'Larssen' b'as' b'a' b'source' b'of' b'Peter' b'Whitehead' b'Tokugoro' b'Elliott' b',' b'after'
    b'moving' b'to' b'China' b')' b'Parks' b'College' b'to' b'make' b'this' b'type' b'of' b'producer' b'!' b'<unk>' b',' b'John' b'<unk>' b'.' b'Ryan' b'continued'
    b'as' b'"' b'interesting' b',' b'a' b'smart' b'<unk>' b'"' b',' b'and' b'despite' b'heart' b'of' b'the' b'event' b'he' b'would' b'have' b'pledged' b'him'
    b'many' b'degree' b',' b'and' b'Walpole' b'argued' b'upon' b'teaching' b'the' b'hours' b'that' b'Mercury' b'refuses' b'a' b'story' b'from' b'the' b'guitar' b',' b'saying'
    b'that' b'his' b'game' b'is' b'adopting' b'by' b'the' b'other' b'keen' b'name' b'.' b'The' b'next' b'year' b'they' b'were' b'helped' b'at' b'Mouquet' b'Game'
    b'Square' b'II' b'@-@' b'<unk>' b',' b'<unk>' b'La' b'Bandicoot' b'in' b'The' b'Wind' b',' b'The' b'1998' b'film' b'The' b'2009' b'town' b'after' b'they'
    b'discovered' b'as' b'<unk>' b',' b'from' b'his' b'father' b'legislation' b'at' b'India' b':' b'"' b'I' b"'m" b'seen' b'differed' b',' b'1' b':' b'The'
    b'championship' b'parable' b'is' b'typical' b',' b'and' b'things' b'structures' b'would' b"'t" b'be' b'a' b'seen' b'of' b'time' b',' b'whom' b'...' b'before' b'they'
    b'I' b'first' b'wanted' b'to' b'celebrate' b'it' b',' b'Ruth' b'It' b'is' b'eminently' b'maybe' b'it' b'known' b'to' b'activate' b'them' b'to' b'Ever' b'\xe2\x80\x99'
    b'Tree' b'risks' b'can' b'you' b'now' b',' b'do' b'almost' b'eat' b'on' b'him' b'respectively' b'.' b'"' b'The' b'reviewer' b'"' b'likewise' b'punished' b'like'
    b'his' b'gravity' b'from' b'not' b'far' b',' b'but' b'at' b'about' b'one' b'it' b'derives' b'the' b'deal' b'of' b'many' b'vintage' b'countries' b'\xe2\x80\x94' b'where'
    b'<unk>' b'in' b'his' b'ode' b'down' b'him' b'"' b'.' b'The' b'Bulls' b"'s" b'Yang' b'Under' b'<unk>' b'get' b'into' b'a' b'"' b'Out' b'desire'
    b'"' b'down' b'as' b'the' b'same' b'would' b'be' b'used' b'in' b'the' b'year' b'.' b'Next' b'Stone' b',' b'along' b'with' b'skin' b'the' b'making'
    b'<unk>' b',' b'correspondent' b'"' b'herbivores' b'"' b',' b'similarly' b'Baltimore' b'Presley' b'had' b'the' b'support' b'of' b'"' b'succumbed' b'to' b'innocence' b'"' b'.'
    b'In' b'July' b',' b'good' b'themes' b'were' b'invited' b'to' b'hold' b'in' b'Lycoming' b',' b'and' b'"' b'Barron' b'delivers' b'[' b'FISA' b']' b"'d"
    b'pretty' b'large' b'or' b'is' b'pretty' b'bright' b'.' b'The' b'pore' b'is' b'a' b'free' b'ally' b'at' b'a' b'line' b'in' b'his' b'country' b'"'
    b'.' b'The' b'recent' b'characters' b'were' b'reported' b'toward' b'Lawrence' b'of' b'Henry' b'Hall' b'but' b'they' b'look' b'shortly' b'for' b'its' b'residue' b'for' b'red'
    b'passion' b'for' b'producer' b'Man' b'Steven' b'Adam' b'Wyatt' b"'" b'Xook' b'.' b'Some' b'of' b'his' b'frequent' b'power' b'Jewish' b'influences' b'is' b'poor' b'or'
    b'suggest' b',' b'and' b'because' b'Cantrell' b"'s" b'population' b'is' b'not' b'logical' b'.' b'The' b'flooding' b'being' b'classified' b'by' b'illusions' b'as' b'story' b'as'
    b'a' b'"' b'<unk>' b'"' b'<unk>' b'in' b'what' b'is' b'similar' b'to' b'young' b'"' b'barrier' b'"' b'.' b'Different' b'birds' b'occur' b'on' b'Dagenham'
    b'categories' b'after' b'reclaim' b'around' b'laureate' b'equipment' b'to' b'be' b'inspired' b'by' b'<unk>' b'developer' b'Williams' b'and' b'Signing' b'Lanois' b'Babylon' b'\xe2\x80\x94' b'the' b'missing'
    b'situations' b'to' b'young' b'saptibha\xe1\xb9\x85g\xc4\xab' b'.' b'unexplained' b'Winchell' b'for' b'The' b'2014' b'film' b'Shakespeare' b'<unk>' b'Country' b'petitioned' b'in' b'disgrace' b'for' b'<unk>' b'faggots'
    b',' b'which' b'included' b'Jolliet' b',' b'who' b'had' b'speculated' b'that' b'chorister' b'to' b'can' b'be' b'regarded' b'as' b'the' b'"' b'most' b'kind' b'"'
    b'.' b'The' b'<unk>' b'Hook' b'have' b'traded' b'African' b'aftermath' b'in' b'English' b',' b'and' b'discussed' b'them' b'to' b'show' b'developing' b'Microsoft' b'stars' b','
    b'in' b'this' b'manner' b'.' b'<eos>' b'The' b'Palace' b'is' b'negative' b'from' b'robbing' b'in' b'an' b'variety' b'of' b'action' b'that' b'reportedly' b'"' b'Cloud'
    b'joke' b'picked' b'"' b'and' b'compared' b'to' b'a' b'"' b'full' b'"' b'or' b'"' b'"' b'hoshi' b'art' b'"' b'of' b'her' b'"' b'husband'
    b'"' b'.' b'Christian' b'<unk>' b'treated' b'14' b'%' b'of' b'the' b'comic' b',' b'with' b'winds' b'of' b'oak' b'Raffles' b',' b'but' b'the' b'historical'
    b'comparing' b'ideology' b'help' b'the' b'hill' b'rather' b'.' b'The' b'<unk>' b'<unk>' b'D\xc6\xb0\xc6\xa1ng' b'<unk>' b'Tsugumi' b'sometimes' b'commented' b'that' b'a' b'female' b'race' b'should'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 241.1
    loss: 5.168
    elapsed time (seconds): 168.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  55.332 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
