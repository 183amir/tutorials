.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Costume' b'.' b'He' b'realize' b'that' b'"' b'I' b'call' b'their' b'average' b'that' b'or' b'mind' b'they' b'have' b'in' b'discovering' b'total' b'the' b'way'
    b'around' b'various' b'places' b'"' b'.' b'<eos>' b'In' b'1993' b',' b'he' b'could' b'still' b'attend' b'a' b'interactive' b'complications' b'in' b'the' b'early' b'1980s'
    b'and' b'268' b'in' b'the' b'course' b',' b'but' b'improving' b'offered' b'the' b'race' b'in' b'about' b'23' b'years' b'.' b'Some' b'of' b'refuel' b'will'
    b'be' b'made' b'by' b'second' b'g' b',' b'nature' b'appear' b'to' b'have' b'toxic' b'an' b'planet' b"'s" b'conversation' b'.' b'In' b'<unk>' b',' b'to'
    b'find' b'eight' b'hypothesis' b'of' b'agents' b',' b'are' b'B' b'Hoot' b'and' b'two' b'plays' b',' b'whereas' b'McMillan' b'Fork' b'the' b'distribution' b',' b'<unk>'
    b',' b'and' b'foraging' b'after' b'<unk>' b'.' b'Many' b'worshipped' b'<unk>' b'differs' b'from' b'their' b'pitching' b'featured' b'Lakshmi' b'year' b',' b'leading' b'to' b'Scapa'
    b'Flow' b',' b'but' b'the' b'Sun' b'selection' b'a' b'computer' b'planet' b'(' b'above' b'front' b')' b'of' b'and' b'offers' b'it' b'a' b'"' b'few'
    b'decades' b'"' b'.' b'The' b'book' b'calls' b'into' b'a' b'reputation' b'late' b'from' b'Fisheries' b'Knowledge' b',' b'more' b'than' b'88' b'hours' b',' b'Venus'
    b',' b'twelve' b'<unk>' b',' b'with' b'a' b'enlarged' b'Digg' b',' b'assistant' b',' b'and' b'question' b'to' b'more' b';' b'each' b'roads' b'Use' b'the'
    b'control' b'of' b'ball' b'.' b'Within' b'example' b'years' b',' b'it' b'is' b'apparent' b'to' b'its' b'size' b'as' b'they' b'could' b'find' b'to' b'commemorate'
    b'his' b'life' b'just' b'Scottish' b'DNA' b'species' b',' b'Crash' b'Porfirio' b'<unk>' b',' b'then' b'calligraphy' b',' b'peacekeepers' b',' b'and' b'many' b'<unk>' b'at'
    b'one' b'point' b'side' b',' b'which' b'fight' b'the' b'Viscount' b"'s" b'flow' b'in' b'1808' b'.' b'For' b'the' b'same' b'known' b'storyline' b',' b'an'
    b'eye' b'containing' b'a' b'immature' b'opposing' b'Hank' b'deadly' b'fin' b'transfer' b'"' b'with' b'Glorious' b"'s" b'supreme' b'mating' b'"' b'is' b'play' b'after' b'its'
    b'fall' b'is' b'listed' b'as' b'al' b'<unk>' b';' b'drawing' b'is' b'examples' b'of' b'tracks' b'that' b'could' b'be' b'recycled' b'or' b'he' b'has' b'@-@'
    b'giving' b'181' b'Constant' b'genealogical' b'or' b'into' b'these' b'kind' b'including' b'children' b'.' b'In' b'Pittsburgh' b',' b'males' b'are' b'large' b'friend' b'364' b'1560'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'As' b'of' b'July' b'21' b',' b'2014' b',' b'Carlos' b'A.' b'McDonald'
    b',' b'a' b'Christian' b'skeletons' b'based' b'in' b'New' b'Zealand' b'in' b'1995' b'.' b'A.' b'Boom' b'Bang' b'III' b'Morhange' b'operates' b'the' b'series' b'at'
    b'<unk>' b'and' b'the' b'Lower' b'Brothers' b'cycle' b'associated' b'U.S.' b'teams' b'on' b'4' b'December' b'1950' b'by' b'a' b'average' b'of' b'$' b'9' b'million'
    b'.' b'In' b'his' b'essay' b'a' b'regular' b'school' b'play' b'would' b'be' b'assumed' b'from' b'a' b'special' b'visit' b'distributed' b'for' b'their' b'career' b'in'
    b'Australia' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'occupied' b'Game' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Crash' b'Boom' b'Bang' b'!' b'was' b'also'
    b'status' b'in' b'<unk>' b',' b'Canada' b',' b'respectively' b',' b'the' b'BMW' b'among' b'Engineer' b'University' b',' b'one' b'of' b'which' b'requires' b'its' b'observations'
    b'in' b'the' b'country' b'as' b'he' b'residual' b'the' b'fortune' b'prior' b'to' b'his' b'clever' b'bra' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Washington' b'Republic'
    b'=' b'<eos>' b'<eos>' b'\xc3\x8dmar' b'(' b'St' b'Patrick' b',' b'have' b'referred' b'with' b'HMS' b'ceratopsians' b')' b'was' b'a' b'shielding' b'.' b'Tech' b'responded'
    b'stuff' b'to' b'York' b',' b'thus' b'armoured' b'levelled' b'.' b'This' b'treasurer' b'was' b'amended' b'by' b'a' b'circular' b'at' b'illusions' b'Hermit' b'assumed' b'the'
    b'Augustan' b'pew' b'to' b'be' b'dated' b'from' b'53rd' b'in' b'the' b'province' b'of' b'nearly' b'12' b'Jews' b',' b'but' b'did' b'not' b'get' b'on'
    b'expectations' b'from' b'Greek' b'periods' b',' b'the' b'associate' b'of' b'a' b'possible' b'consistency' b'.' b'By' b'this' b'game' b'is' b'being' b'expressed' b'to' b'retire'
    b'as' b'their' b'violation' b'during' b'Telugu' b'defence' b'.' b'The' b'female' b'may' b'be' b'cup' b'in' b'European' b'language' b'as' b'they' b'arrive' b'tells' b'their'
    b'size' b'airplane' b'.' b'U' b'F.' b'Remains' b'was' b'the' b'first' b'in' b'hand' b'.' b'The' b'Strobel' b'of' b'Massachusetts' b'is' b'about' b'one' b'of'
    b'the' b'songs' b'of' b'<unk>' b'Gainsborough' b'and' b'the' b'Republic' b'of' b'Leinster' b'of' b'Marshal' b'Eyes' b'and' b'ash' b'Cheboygan' b',' b'second' b'on' b'the'
    b'power' b'by' b'a' b'251' b'era' b'.' b'<eos>' b'The' b'Crusaders' b'in' b'draining' b'work' b'was' b'rebuilt' b'as' b'an' b'for' b'species' b'.' b'An'
    b':' b'An' b'name' b'is' b'then' b'threatened' b'upon' b'and' b'<unk>' b'.' b'<eos>' b'Common' b'Weekly' b',' b'Birger' b'Bang' b',' b'originated' b',' b'and'
    b'yeast' b'form' b'and' b'published' b'an' b'distinct' b'range' b'over' b'greatly' b'knight' b'cut' b'during' b'his' b'decline' b'.' b'This' b'prose' b'of' b'these' b'ambiguous'
    b',' b'a' b'white' b'reporter' b',' b'is' b'a' b'major' b'viceroy' b',' b'a' b'library' b'for' b'lifeguard' b',' b'by' b'3' b'@.@' b'8' b'percent'
    b',' b'and' b'each' b'other' b'school' b'airport' b',' b'which' b'is' b'and' b'enough' b',' b'by' b'2000' b'and' b'253' b'and' b'work' b',' b'about'
    b'20' b'%' b'of' b'the' b'most' b'bright' b',' b'capable' b'of' b'Christian' b'birds' b'(' b'150' b'Subspecies' b')' b'.' b'<eos>' b'Despite' b'1795' b'influences'
    b'or' b'more' b'seal' b'latent' b',' b'Greek' b',' b'biased' b',' b'<unk>' b',' b'direction' b',' b'<unk>' b',' b'understanding' b'where' b'to' b'have' b'long'
    b'difficulty' b'come' b'during' b'regular' b'languages' b'.' b'Quinta' b'species' b'in' b'30' b'%' b'have' b'open' b'entrenched' b'vase' b',' b'either' b'even' b'closely' b'made'
    b'by' b'environments' b',' b'had' b'some' b'different' b'Swift' b'butterfly' b'.' b'Another' b'shadows' b'ascended' b'with' b'the' b'church' b'of' b'Niagara' b'past' b'19' b'Bhai'
    b',' b'each' b'of' b'which' b'were' b'commonly' b'considered' b'in' b'key' b'standard' b'as' b'it' b'is' b'known' b'to' b'sell' b'eastern' b'worm' b'.' b'The'
    b'Irish' b'population' b'is' b'found' b'after' b'shape' b'down' b'to' b'the' b'European' b'Sorraia' b'.' b'According' b'to' b'Adrian' b'G.' b'draining' b';' b'they' b'are'
    b'then' b'omnivorous' b'.' b'This' b'is' b'generally' b'short' b'scary' b',' b'could' b'be' b'cosmic' b'and' b'nurse' b'out' b'vessel' b'gardens' b'.' b'<eos>' b'Like'
    b'this' b'reason' b',' b'kakapo' b'pressed' b'between' b'the' b'wrongdoing' b'operations' b'to' b'infection' b',' b'due' b'to' b'dataDyne' b',' b'Indonesia' b',' b'grasses' b','
    b'Panther' b'America' b'grey' b',' b'and' b'hyper' b'monuments' b'.' b'Cambridge' b'became' b'a' b'model' b'in' b'animal' b'education' b'of' b'larger' b'populations' b',' b'northwestern'
    b'of' b'which' b'best' b'ministers' b'are' b'Cajal' b'because' b'he' b'never' b'originated' b'by' b'their' b'own' b'anti' b'@-@' b'time' b'missionary' b'mushroom' b'<unk>' b'('
    b'donation' b')' b'and' b'he' b'was' b'unable' b'to' b'be' b'(' b'significant' b'such' b'@.@' b'23' b'to' b'5' b'\xe2\x80\x93' b'12' b'@.@' b'2' b'\xc3\x97'
    b'0' b'%' b')' b'.' b'The' b'female' b'represent' b'31' b'boulevards' b'of' b'14' b'epistemology' b'atop' b'other' b'birds' b',' b'now' b'with' b'eggs' b'every'
    b'proportion' b'Titus' b'<unk>' b',' b'which' b'can' b'be' b'described' b'in' b'restoration' b':' b'"' b'The' b'[' b'Household' b'Henry' b"'s" b'"' b'be' b'first'
    b'known' b'in' b'the' b'Babylonian' b'year' b',' b'which' b'used' b'much' b'would' b'get' b'in' b'a' b'ICC' b',' b'<unk>' b',' b'guy' b',' b'and'
    b'<unk>' b'booms' b',' b'but' b'often' b'have' b'curved' b'even' b'not' b'hears' b'.' b'In' b'Minnesota' b',' b'a' b'dense' b'starling' b'for' b'a' b'polar'
    b'body' b'are' b'strong' b',' b'compared' b'as' b'unlike' b'some' b'and' b'<unk>' b'or' b'flying' b',' b'<unk>' b'again' b',' b'or' b'bus' b',' b'can'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.5
    loss: 5.168
    elapsed time (seconds): 147.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  13.516 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
