.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'<unk>' b'.' b'<unk>' b'Lillehammer' b'for' b'the' b'show' b"'s" b'<unk>' b'4' b'@.@' b'5' b'%' b'of' b'110' b'and' b'10' b'@,@' b'000'
    b'(' b'76' b'%' b'of' b'sacred' b'females' b')' b'.' b'The' b'calculation' b'of' b'since' b'several' b'countries' b'ran' b'to' b'pairs' b'of' b'odds' b','
    b'consisting' b'of' b'fiestas' b',' b'orange' b'feathers' b'(' b'salt' b'and' b'<unk>' b')' b'apart' b',' b'which' b'heard' b'from' b'the' b'better' b'.' b'The'
    b'2006' b'season' b'is' b'determined' b',' b'and' b'in' b'1926' b'the' b'more' b'recent' b'Sosa' b'distributed' b'in' b'autumn' b'from' b'several' b'commissions' b'.' b'For'
    b'instance' b',' b'residents' b',' b'shifted' b',' b'twenty' b'@-@' b'thirds' b'or' b'male' b'trees' b'is' b'prince' b',' b'Septentrional' b'and' b'tank' b',' b'and'
    b'recorded' b'so' b'reddish' b'throat' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Distribution' b'=' b'=' b'<eos>' b'<eos>' b'The' b'struggling' b'starling' b'was' b'designed' b','
    b'from' b'Michigan' b'Zartan' b'.' b'It' b'features' b'also' b'well' b'or' b'trace' b'both' b'of' b'survivor' b'.' b'The' b'series' b'block' b'Nascarella' b'had' b'rarely'
    b'belonged' b'to' b'Latin' b'birds' b',' b'taking' b'to' b'small' b'votes' b',' b'in' b'path' b'.' b'French' b'rats' b'include' b'their' b'low' b'white' b'logs'
    b'at' b'#' b'22' b'in' b'the' b'country' b';' b'this' b'grows' b'to' b'be' b'still' b'hunt' b'.' b'In' b'particular' b',' b'they' b'present' b'scenic'
    b'proportion' b',' b'not' b'conservation' b',' b'they' b'emerges' b'on' b'their' b'closest' b'while' b'axis' b'suggests' b'that' b'also' b'in' b'males' b'are' b'already' b'until'
    b'<unk>' b'"' b'to' b'uneventful' b'weaponry' b'"' b',' b'and' b'very' b'of' b'a' b'few' b'ocean' b'tunnel' b'trails' b'have' b'broken' b'microscope' b'.' b'They'
    b'have' b'other' b'been' b'carefully' b'<unk>' b'to' b'be' b'repaired' b'\xe2\x80\x94' b'when' b'O' b'Petit' b'Bang' b'culture' b'commissioned' b'the' b'Isles' b'at' b'80' b'times'
    b'of' b'more' b'than' b'20' b'@,@' b'000' b'to' b'bring' b'individual' b'trees' b'.' b'<eos>' b'First' b'observations' b',' b'Return' b'mainly' b'during' b'growing' b','
    b'are' b'failed' b'to' b'fly' b'any' b'other' b'ecosystem' b'Link' b'I' b',' b'<unk>' b'for' b'the' b'age' b'of' b'<unk>' b',' b'is' b'known' b'to'
    b'eliminate' b',' b'they' b'abdomen' b'substances' b'of' b'Mars' b'.' b'Other' b'instances' b'are' b'set' b'even' b'on' b'a' b'family' b'that' b'may' b'be' b'held'
    b'by' b'green' b'wind' b'.' b'Scholar' b'<unk>' b'have' b'increased' b'immunity' b'to' b'Earth' b',' b'Dwight' b'bullet' b',' b'sentencing' b'and' b'Medical' b'environments' b','
    b'watching' b'respected' b'supervision' b',' b'currently' b'standing' b'in' b'some' b'local' b'areas' b'that' b'are' b'spread' b'throughout' b'Scotland' b'.' b'In' b'general' b',' b'only'
    b'<unk>' b'emigrated' b',' b'they' b'imply' b',' b'insignificant' b',' b'to' b'Alexandre' b'frescoes' b'.' b'An' b'closure' b'system' b'on' b'television' b',' b'attending' b'strong'
    b'eastern' b'altercation' b',' b'furnished' b'and' b'watches' b'faced' b'only' b'larger' b'pattern' b'or' b'their' b'respective' b'roosts' b',' b'possibly' b'without' b'less' b'than' b'150'
    b'%' b'by' b'legs' b',' b'minor' b'million' b'dams' b',' b'and' b'barrels' b'Franciscans' b'.' b'The' b'large' b'channel' b'will' b'be' b'seen' b'as' b'scrap'
    b'of' b'3' b'@.@' b'5' b'in' b'(' b'9' b'@.@' b'5' b'in' b')' b'bond' b',' b'with' b'maximum' b'with' b'them' b'or' b'<unk>' b'elaborate'
    b'portray' b'why' b'her' b'surface' b'line' b'.' b'A' b'pair' b'of' b'50' b'@.@' b'5' b'bird' b'on' b'the' b'approximate' b'fourth' b'than' b'Viking' b'ulama'
    b'may' b'arrive' b'at' b'Indonesian' b'forests' b',' b'throat' b',' b'etc' b',' b'the' b'guitar' b'ordained' b'that' b'were' b'measured' b'by' b'nearby' b'predators' b','
    b'and' b'makes' b'Northumbria' b'(' b'although' b'forcing' b'to' b'be' b'dealt' b'the' b'Scottish' b'solution' b'to' b'head' b'of' b'Sorrows' b'on' b'5' b'January' b'2006'
    b')' b'.' b'There' b'was' b'moving' b'to' b'12' b'@.@' b'5' b'million' b'miles' b'(' b'5' b'@.@' b'5' b'to' b'5' b'@.@' b'5' b'by'
    b'2' b'@.@' b'9' b'in' b')' b'hidden' b'from' b'7' b'\xe2\x80\x93' b'3' b'May' b'.' b'It' b'is' b'painted' b'from' b'Corpus' b'Storm' b'Here' b','
    b'which' b'is' b'consumed' b'by' b'both' b'small' b',' b'and' b'with' b'the' b'deep' b'for' b'killing' b'crops' b'girl' b'ground' b',' b'Moses' b'interpreted' b'preparations'
    b'from' b'St' b'Paper' b',' b'to' b'produce' b'breakfast' b'Transjordan' b'.' b'One' b'species' b'of' b'first' b'drive' b'are' b'farther' b',' b'though' b'the' b'other'
    b'threat' b'fleets' b'were' b'common' b',' b'and' b'they' b'may' b'be' b'occasionally' b'isolated' b'at' b'a' b'weight' b'of' b'4' b'@.@' b'3' b'cm' b'('
    b'0' b'@.@' b'24' b'mi' b')' b'blow' b'.' b'Common' b'eggs' b'were' b'permitted' b'to' b'have' b'maintains' b'monazite' b',' b'on' b'12' b'August' b'before'
    b'Nuskhuri' b'influences' b',' b'after' b'favored' b'by' b'other' b'generations' b'to' b'avoid' b'the' b'occurrence' b'of' b'agricultural' b'control' b'.' b'<eos>' b'People' b'occurs' b'six'
    b'months' b'on' b'October' b'5' b',' b'2006' b'.' b'During' b'this' b'period' b'at' b'daylight' b',' b'village' b',' b'as' b'a' b'mixture' b'of' b','
    b'or' b'close' b'toxins' b',' b'below' b'making' b'them' b'to' b'have' b'been' b'built' b'three' b'weeks' b'.' b'In' b'June' b'1934' b',' b'possible' b','
    b'the' b'island' b"'s" b'moved' b'for' b'Irish' b',' b'treatments' b'negatively' b',' b'Post' b'or' b'jealousy' b';' b'director' b',' b'<unk>' b';' b'Shu' b'19'
    b'minority' b'Balestre' b'and' b'seating' b'feed' b'.' b'Known' b',' b'they' b'were' b'treated' b'as' b'the' b'planet' b'from' b'racehorse' b'.' b'Both' b'common' b'populations'
    b'mast' b'encode' b'population' b'and' b'<unk>' b'number' b'and' b'other' b'agricultural' b'buildings' b'migrate' b'to' b',' b'and' b'thus' b'structural' b'authors' b'involved' b'over' b'4'
    b'metres' b'(' b'4' b'kg' b')' b'of' b'solar' b'areas' b'.' b'They' b'are' b'seen' b',' b'so' b'the' b'birds' b'are' b'subjected' b'.' b'Sixty'
    b'hypotheses' b'have' b'no' b'status' b'near' b'certain' b'types' b'<unk>' b'or' b'evolution' b'with' b'all' b'in' b'are' b'once' b'for' b'the' b'state' b'.' b'<eos>'
    b'Gryllotalpa' b'sources' b'occur' b'in' b'the' b'United' b'States' b'China' b'Orchestra' b'is' b'a' b'rugged' b'of' b'admirers' b'.' b'The' b'sarsens' b'tactically' b'after' b'local'
    b'structures' b',' b'which' b'mainly' b'burst' b'between' b'females' b'and' b'compelling' b'gays' b'Pohl' b'.' b'Among' b'minutes' b'must' b'provide' b'diabetes' b'if' b'it' b'typically'
    b'may' b'create' b'to' b'operate' b'up' b'five' b'hours' b'of' b'the' b'crystal' b'island' b',' b'and' b'hundreds' b'of' b'cultural' b'yellow' b'items' b'such' b'as'
    b'<unk>' b'.' b'Four' b'of' b'those' b'Celtic' b'deposits' b',' b'carved' b'@-@' b'dominant' b'(' b'June' b'22' b'to' b'September' b'2' b',' b'2011' b')'
    b')' b'was' b'promptly' b'closely' b'destroyed' b'for' b'the' b'common' b'Anglo' b'@-@' b'parasitic' b'structure' b',' b'which' b'would' b'be' b'notable' b'to' b'cause' b'humans'
    b'.' b'Its' b'review' b'extirpated' b'12' b'@.@' b'5' b'%' b'of' b'105' b'@.@' b'2' b'Jews' b'/' b'4' b'defence' b'are' b'notable' b'by' b'it'
    b'of' b'Ireland' b',' b'1868' b'lane' b',' b'and' b'print' b',' b'daughter' b'@-@' b'green' b'Leone' b',' b'Iceland' b',' b'a' b'mother' b'that' b','
    b'as' b'of' b'January' b'19' b',' b'Males' b',' b'can' b'be' b'classified' b'obstacles' b'from' b'Australia' b'by' b'Mars' b'and' b'hence' b'transported' b'with' b'sufficient'
    b'control' b'.' b'<eos>' b'After' b'common' b'burns' b',' b'the' b'kakapo' b'of' b'bowls' b'breed' b'but' b'by' b'others' b'could' b'be' b'rapidly' b'exported' b'.'
    b'When' b'their' b'first' b'\xe2\x80\x93' b'lowest' b'breeding' b',' b'it' b'have' b'rapid' b'polygyny' b',' b'at' b'least' b'<unk>' b'.' b'<eos>' b'Other' b'parrot' b'may'
    b'be' b'quoted' b'in' b'Mackinaw' b'events' b'and' b'Feel' b'food' b'standards' b'.' b'They' b'normally' b'consist' b'of' b'sea' b'fish' b'activity' b',' b'which' b'indicates'
    b'.' b'<eos>' b'North' b'Island' b'is' b'a' b'pair' b'of' b'weeks' b'production' b'at' b'A' b'community' b'or' b'is' b'connected' b'to' b'10' b'@.@' b'4'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.4
    loss: 5.168
    elapsed time (seconds): 148.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  13.104 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
