.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'<unk>' b'dresses' b'of' b'danger' b'led' b'to' b'loss' b'.' b'\xe2\x80\x93' b'Maria' b'v.' b'on' b'May' b'4' b',' b'1845' b',' b'Deal' b'relocated'
    b'purre' b'to' b'become' b'the' b'first' b'once' b'.' b'The' b'"' b'female' b'planet' b'"' b'attempts' b'to' b'be' b'a' b'mixture' b'of' b'magic' b','
    b'specifically' b'.' b'Argentine' b'areas' b'attended' b'in' b'areas' b'noting' b'assassination' b'in' b'lower' b'jobs' b',' b'as' b'due' b'to' b'six' b'other' b'components' b'of'
    b'the' b'game' b'was' b'used' b'to' b'exist' b'a' b'island' b'that' b'worked' b'short' b'other' b'controllers' b'.' b'<eos>' b'Crash' b'John' b'goes' b'you' b'('
    b'a' b'"' b'disembarking' b'"' b')' b'devised' b'"' b'something' b'acclaim' b'"' b';' b'they' b'were' b'also' b'a' b'intimate' b'strip' b',' b'a' b'amount'
    b'of' b'Nixon' b"'s" b'iguana' b'specific' b'than' b'F' b'length' b',' b'Brody' b'Drax' b',' b'Terra' b'noctilio' b'<unk>' b',' b'Alan' b'Kim' b'wells' b'and'
    b'Taranto' b'graffiti' b';' b'the' b'book' b'has' b'published' b'29' b'@.@' b'5' b'%' b'of' b'the' b'series' b',' b'another' b'console' b'(' b'like' b'representative'
    b'of' b'a' b'natural' b'episcopal' b')' b',' b'won' b'a' b'degree' b'as' b'Ojibwe' b'terminals' b'for' b'18' b'%' b'from' b'growth' b'and' b'nearly' b'one'
    b'revealing' b'platform' b'.' b'His' b'books' b'measure' b'the' b'fieldfare' b'and' b'not' b'distant' b',' b'and' b'also' b'can' b'315' b'thinner' b'animals' b'.' b'According'
    b'to' b'notes' b'they' b'can' b'also' b'help' b',' b'and' b'any' b'things' b'could' b'be' b'ready' b'to' b'be' b'creepy' b',' b'so' b'even' b'they'
    b'are' b'a' b'perfect' b'planet' b'level' b'.' b'As' b'they' b'seek' b'there' b'was' b'no' b'dedicated' b'of' b'wells' b',' b'it' b'is' b'the' b'best'
    b'bird' b'containing' b'if' b'information' b'it' b'can' b'be' b'<unk>' b'either' b'appear' b'down' b'or' b'noting' b'.' b'But' b'though' b'They' b'allowed' b'.' b'These'
    b'left' b'hints' b'by' b'the' b'female' b'on' b'first' b'zombies' b'produces' b'a' b'rough' b'box' b'goal' b'by' b'man' b'coniferous' b'Everett' b'<unk>' b'live' b'ground'
    b'once' b'.' b'In' b'Arabia' b'after' b'audio' b'technique' b',' b'the' b'kakapo' b'concluded' b'they' b'do' b'not' b'stand' b'loneliness' b',' b'though' b'buried' b'smaller'
    b'similarities' b'towards' b'the' b'food' b'boundary' b'to' b'waste' b'Nobel' b'<unk>' b',' b'with' b'Anglican' b'molecules' b'and' b'Ashton' b'content' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'=' b'Christian' b'statistical' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b'(' b'there' b'are' b'one' b'classification' b'of' b'his' b'character' b'.' b'There'
    b'is' b'also' b'reports' b'of' b'diversity' b'on' b'even' b'barrier' b'America' b'(' b'or' b'later' b'<unk>' b')' b'flesh' b',' b'narrow' b'player' b',' b'and'
    b'sat' b'up' b')' b'.' b'Coupled' b'with' b'the' b'cell' b',' b'she' b'introduced' b'an' b'account' b'of' b'Ceres' b'when' b'he' b'reversed' b'it' b'his'
    b'past' b'coin' b'being' b'common' b'for' b'pointing' b'.' b'During' b'the' b'2007' b'character' b',' b'relying' b'on' b'a' b'bird' b',' b'the' b'set' b'the'
    b'story' b'Tyson' b'does' b'also' b'have' b'an' b'small' b'emotional' b'forceful' b'<unk>' b'.' b'The' b'water' b'of' b'sensitive' b',' b'Scotland' b',' b'and' b'word'
    b'of' b'how' b'sand' b'may' b'be' b'solved' b',' b'perfect' b'up' b'to' b'a' b'false' b'constitutional' b'servers' b'.' b'As' b'in' b'the' b'loses' b'video'
    b',' b'the' b'plumage' b'of' b'polygamy' b'may' b'be' b'wrong' b'by' b'the' b'head' b',' b'where' b'the' b'beak' b'affected' b'her' b'to' b'determine' b'lateral'
    b'practice' b'is' b'restricted' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Aramaic' b'planet' b'of' b'33' b'\xe2\x80\x93' b'8'
    b'early' b'1986' b'brought' b'a' b'beak' b'of' b'two' b'Magnussen' b'by' b'Atlit' b'for' b'0' b'minutes' b'of' b'orbit' b'<unk>' b',' b'explained' b'it' b'has'
    b'long' b'some' b'damage' b'monk' b'<unk>' b'death' b'as' b'same' b'community' b'Habits' b'mother' b'(' b'one' b'of' b'the' b'registers' b'scripture' b')' b'and' b'more'
    b'magnitude' b',' b'but' b'"' b'well' b'(' b'i.e.' b')' b'who' b'is' b'never' b'profound' b'and' b'the' b'subtle' b'decay' b'of' b'people' b'I' b'declared'
    b"'s" b'creation' b'...' b'No' b'or' b'<unk>' b',' b'inside' b'their' b'nature' b'with' b'spreading' b'diplomatic' b'Fatimah' b'?' b'<eos>' b'...' b'we' b"'ve" b'possibly'
    b'realized' b'"' b'.' b'Still' b'of' b'boos' b'from' b'Westminster' b',' b'the' b'bird' b'was' b'powered' b'with' b'a' b'son' b'about' b'5' b'for' b'sic'
    b',' b'including' b'an' b'dinner' b'of' b'2' b'@.@' b'4' b'%' b',' b'a' b'8' b'@.@' b'8' b'percent' b',' b'and' b'South' b'ml' b'Sampras'
    b',' b'and' b'few' b'taxa' b'in' b'which' b'humans' b'(' b'in' b'other' b'are' b'distinguished' b',' b'by' b'628' b'and' b'Nuskhuri' b'from' b'those' b'to'
    b'1' b'@.@' b'3' b'kilometres' b')' b'.' b'This' b'species' b'became' b'a' b'very' b'gregarious' b'(' b'e.g.' b'as' b'with' b'Kate' b'Blackie' b')' b','
    b'with' b'a' b'maximum' b'portraits' b'that' b'gives' b'50' b'years' b'by' b'their' b'centrosomes' b'.' b'A' b'female' b'casino' b',' b'approximately' b'the' b'same' b'point'
    b',' b'is' b'one' b'of' b'mines' b'.' b'In' b'addition' b',' b'it' b'has' b'to' b'be' b'proven' b'another' b'portico' b',' b'and' b'try' b'to'
    b'find' b'drills' b'.' b'If' b'they' b'pull' b'for' b'arsenic' b',' b'they' b'know' b'that' b'flotillas' b'contaminated' b'a' b'flock' b'.' b'If' b'there' b'are'
    b'no' b'doubt' b'of' b'decreasing' b'pitching' b'adverse' b',' b'their' b'<unk>' b'will' b'be' b'heard' b'.' b'There' b'is' b'2' b'@-@' b'thickness' b'or' b'<unk>'
    b':' b'one' b'small' b'sex' b'can' b'be' b'rare' b'to' b'one' b'life' b'la' b'Zygoballus' b'(' b'Ingram' b')' b'and' b'formed' b'to' b'win' b'.'
    b'The' b'Union' b'is' b'known' b'only' b'as' b'a' b'distinct' b'piece' b'and' b'does' b'light' b'two' b'vegetation' b'each' b'to' b'be' b'burned' b'.' b'<eos>'
    b'Xenon' b'of' b'<unk>' b'occasionally' b'sang' b'as' b'an' b'way' b'to' b'be' b'beneficial' b'.' b'Such' b'star' b'may' b'not' b'<unk>' b'even' b'tend' b'to'
    b'determine' b'835' b'@-@' b'spored' b'require' b'it' b'.' b'<eos>' b'Males' b'can' b'also' b'move' b'to' b'appeal' b'as' b',' b'their' b'<unk>' b',' b'hits'
    b',' b'after' b'they' b'are' b'not' b'changed' b'to' b'a' b'dance' b'Snake' b';' b'they' b'first' b'do' b'dresses' b'on' b'the' b'other' b'eye' b'.'
    b'<eos>' b'The' b'snake' b'is' b'a' b'component' b'to' b'dies' b',' b'and' b'has' b'its' b'adopted' b'effect' b'over' b'pulling' b'in' b'the' b'two' b'metres'
    b'between' b'detail' b'and' b'one' b'who' b'\xe2\x80\x94' b'Earth' b'finds' b'18' b'years' b',' b'and' b'break' b'the' b'breeding' b'<unk>' b'chest' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Behaviour' b'=' b'=' b'<eos>' b'<eos>' b'Males' b'is' b'found' b'by' b'individuals' b',' b'Ireland' b'<unk>' b'flows' b'as' b'the' b'night' b'of'
    b'fragile' b'is' b'a' b'moment' b'of' b'scale' b',' b'as' b'well' b'as' b'flock' b',' b'occasionally' b'structural' b',' b'usually' b'a' b'<unk>' b'surrounded' b'by'
    b'a' b'pair' b'of' b'screen' b'condoms' b'from' b'July' b'Trondheim' b'.' b'Their' b'supernovae' b'foraging' b'a' b'subtropical' b'@-@' b'century' b'composer' b'or' b'20' b'@-@'
    b'L.' b'Interaction' b'plumage' b'during' b'others' b'.' b'The' b'males' b'features' b'their' b'physician' b'possesses' b'white' b'attention' b'to' b'his' b'cries' b'.' b'<unk>' b'mailings'
    b'that' b'bird' b'has' b'somewhat' b'directly' b'increased' b'as' b'<unk>' b'or' b'forbs' b'.' b'In' b'either' b',' b'discover' b'actual' b'pope' b'bearing' b'protein' b','
    b'when' b'in' b'spruce' b',' b'they' b'cannot' b'depend' b'on' b'environment' b'.' b'These' b'starlings' b'make' b'little' b'moderate' b'@-@' b'island' b',' b'so' b'the'
    b'male' b'possessed' b'a' b'wide' b'storey' b'band' b',' b'holding' b'dark' b'sponsorship' b'typically' b'and' b'slow' b'powdery' b'sounding' b'with' b'food' b',' b'after' b'which'
    b'it' b'is' b'using' b'over' b'one' b'other' b'membrane' b'.' b'They' b'currently' b'have' b'their' b'own' b'male' b'.' b'A' b'final' b'diet' b'bismill\xc4\x81h' b'was'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 248.7
    loss: 5.168
    elapsed time (seconds): 173.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  7.686 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
