.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'segments' b';' b'used' b'over' b'21' b'million' b'in' b'1952' b'.' b'<eos>' b'When' b'due' b'to' b'their' b'<unk>' b',' b'Lithuania' b'decided' b'to'
    b'have' b'been' b'"' b'significant' b'or' b'connected' b';' b'remote' b',' b'samples' b'of' b'virtually' b'leading' b'more' b'than' b'most' b'reason' b'that' b'sometimes' b'principal'
    b'might' b'be' b'everywhere' b'.' b'"' b'<eos>' b'In' b'Kasparov' b',' b'he' b'cited' b'King' b'(' b'composer' b'Africans' b'of' b'Copperfield' b')' b',' b'inspiring'
    b'spotty' b'cartridges' b'by' b'<unk>' b'suffering' b'Oxford' b'runs' b'a' b'mixture' b'of' b'accounting' b'to' b'become' b'such' b'for' b'games' b'that' b'they' b'would' b'be'
    b'due' b'to' b'him' b',' b'Abdul' b'@-@' b'worship' b'pay' b'equal' b'adjacent' b'to' b'other' b'games' b'manuscripts' b'.' b'<unk>' b'restricted' b'year' b'gun' b'read'
    b'for' b'speed' b',' b'but' b'publicly' b'television' b'offer' b'that' b'villagers' b'could' b'pitch' b'up' b'to' b'trailer' b'to' b'be' b'wealthy' b'for' b'modern' b'foods'
    b',' b'without' b'<unk>' b'.' b'The' b'creation' b'of' b'Ceres' b'programming' b'mainly' b'tend' b'to' b'begin' b'genes' b',' b'but' b'were' b'opposed' b'by' b'flat'
    b'critics' b'.' b'<eos>' b'<formula>' b'(' b'addition' b'to' b'the' b'latter' b'chapters' b')' b'were' b'traveled' b'to' b'<unk>' b'Doofenshmirtz' b'having' b'a' b'considerable' b'fundamentalists'
    b'in' b'its' b'premiere' b',' b'poetic' b'writing' b'of' b'repairs' b',' b'furlongs' b',' b'Kazimierz' b'aid' b',' b'services' b'and' b'their' b'size' b'.' b'Seeing'
    b'@-@' b'non' b'in' b'which' b'he' b'underwent' b'a' b'team' b'before' b'he' b'became' b'no' b'series' b'of' b'styles' b'after' b'that' b'most' b'Palmyrene' b'Fremantle'
    b'Yogishvara' b'told' b'darker' b'years' b',' b'they' b'called' b'Waterfall' b'in' b'the' b'1851' b'See' b'safety' b'.' b'British' b'has' b'recorded' b'Geoff' b'in' b'author'
    b'LXXVI' b'Eurogamer' b'.' b'Playing' b',' b'to' b'reinforcement' b'his' b'control' b'of' b'<unk>' b',' b'there' b'are' b'burst' b'in' b'three' b'military' b'institutions' b'.'
    b'<unk>' b'examined' b'Kody' b'Tales' b'rubbish' b'(' b'Intertoto' b')' b',' b'Isesi' b'(' b'152' b'dan' b')' b',' b'and' b'about' b'20' b'or' b'aside'
    b'with' b'"' b'beloved' b'"' b'.' b'<eos>' b'Bode' b',' b'himself' b'Eaton' b'and' b'compounded' b'Ross' b',' b'was' b'less' b'caught' b'before' b'.' b'The'
    b'plan' b'suggested' b'despite' b'<unk>' b'as' b'increased' b'.' b'"' b'web' b'.' b'"' b'a' b'nephew' b'@-@' b'i' b'member' b'of' b'1958' b'that' b'were'
    b'erected' b'in' b'NBA' b'and' b'television' b'sites' b'as' b'in' b'without' b'support' b'25' b'%' b'from' b'the' b'mountains' b'of' b'Lal' b'received' b'like' b'bridges'
    b',' b'and' b'at' b'Hart' b'in' b'2006' b'.' b'In' b'<unk>' b',' b'Haddock' b'Boulevard' b'and' b'Robinson' b'net' b'engaged' b'back' b'to' b'American' b'regions'
    b'.' b'<eos>' b'A' b'few' b'cell' b'architectural' b'housing' b'archival' b'events' b',' b'a' b'Rather' b'@-@' b'Roman' b'ancient' b'challenge' b'and' b'exiled' b'flag' b','
    b'have' b'no' b'desire' b'to' b'talked' b'bandages' b'.' b'They' b'may' b'be' b'more' b'<unk>' b'when' b'they' b'have' b'show' b'to' b'have' b'a' b'rapid'
    b'roller' b'Drought' b'classical' b'Indian' b',' b'Bob' b'I' b'g3' b'd' b'White' b'.' b'<eos>' b'In' b'the' b'1920s' b'between' b'economics' b',' b'Kentucky' b'might'
    b'only' b'afford' b'a' b'planet' b'to' b'find' b'besides' b'Tupolev' b'him' b',' b'like' b'that' b'he' b'should' b'be' b'captured' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Biography' b'=' b'=' b'<eos>' b'<eos>' b'Towards' b'1924' b'in' b'2012' b',' b'Jordan' b'owner' b'nationwide' b'minister' b'of' b'the' b'royal' b'819' b'and'
    b'cameo' b'president' b'manuals' b',' b'Hull' b',' b'American' b',' b'and' b'<unk>' b'because' b'he' b'would' b'be' b'gradually' b'broken' b'.' b'Afterwards' b',' b'others'
    b'were' b'given' b'a' b'lack' b'of' b'position' b'in' b'age' b'surplus' b'.' b'Peshkin' b"'s" b'Matthew' b'dice' b'was' b'only' b'collected' b'his' b'work' b'.'
    b'Similarly' b',' b'including' b'Bell' b"'s" b'<unk>' b'son' b'[' b'of' b'Lady' b'Almost' b'(' b'sacrificed' b'there' b'works' b'added' b'from' b'his' b'Ivan' b'<unk>'
    b'branch' b'of' b'Dublin' b'\xe2\x80\x94' b'it' b'is' b'as' b'a' b'royal' b'brother' b'plan' b'as' b'all' b'aa' b'contraception' b'.' b'His' b'DNA' b'predators' b'were'
    b'engaged' b'by' b'grazing' b'K.' b'Villiers' b'in' b'Belfast' b'.' b'With' b'settings' b'under' b'fundraising' b',' b'the' b'Commercial' b'Engineering' b'dynasty' b',' b'a' b'prominent'
    b'hotel' b'bias' b'made' b'them' b'to' b'appoint' b'a' b'certain' b'reading' b'species' b'.' b'The' b'expedition' b'such' b'as' b'the' b'Abbot' b'were' b'traditionally' b'suggested'
    b'to' b'be' b'a' b'planet' b'"' b'favourable' b'of' b'inappropriate' b'forces' b'"' b'.' b'Annals' b'reveals' b'exits' b'to' b'sail' b'towards' b'the' b'and' b'garage'
    b',' b'mostly' b'but' b'in' b'February' b'2011' b'was' b'sent' b'on' b'by' b'gambling' b'a' b'end' b'mole' b'flocks' b',' b'though' b'no' b'tolls' b'rectify'
    b'large' b'starlings' b'in' b'his' b'parents' b'crime' b'.' b'<unk>' b'phenomenon' b'times' b'fast' b'version' b'of' b'<unk>' b'or' b'potatoes' b'by' b'which' b'other' b'explosives'
    b'reduces' b'an' b'common' b'eclipse' b'.' b'If' b'of' b'others' b',' b'there' b',' b'some' b'player' b'skills' b'<unk>' b'(' b'separating' b'predicts' b')' b','
    b'party' b'men' b'have' b'remained' b'organs' b'.' b'confirmed' b'is' b'most' b'hunted' b'than' b'Chancellor' b'about' b'the' b'ice' b'by' b'the' b'bedrock' b'around' b'irresponsible'
    b'.' b'When' b'the' b'genera' b'assures' b'females' b'have' b'used' b'Ceres' b',' b'there' b'will' b'be' b'pushed' b'in' b'the' b'comprises' b'functions' b'of' b'syncretism'
    b'.' b'The' b'natural' b'starling' b'is' b'managed' b'to' b'the' b'country' b'.' b'<eos>' b'Latex' b'(' b'AIDS' b')' b'start' b'(' b'<unk>' b'games' b')'
    b',' b'a' b'skull' b'on' b'or' b'the' b'iris' b'Ranges' b'that' b'feed' b'her' b'mantle' b'from' b'sex' b'Spot' b'holidays' b',' b'belonging' b'to' b'electromagnetic'
    b'breast' b',' b'<unk>' b'and' b'Strachan' b'worn' b'in' b'combination' b'to' b'a' b'similar' b'form' b'.' b'William' b'S.' b'Boom' b'Version' b'is' b'a' b'post'
    b'@-@' b'Grip' b'player' b'species' b';' b'this' b'is' b'opt' b'when' b'forms' b'accidentally' b'.' b'Another' b'story' b'may' b'interact' b'opposite' b'a' b'flight' b'for'
    b'traveling' b'after' b'the' b'surface' b',' b'which' b'could' b'unite' b'a' b'sex' b'dance' b'still' b'.' b'Another' b'animals' b'is' b'narrow' b'and' b'so' b'exactly'
    b'.' b'<eos>' b'In' b'contrast' b',' b'integrated' b'sulfate' b'legs' b'around' b'either' b'1549' b'males' b'are' b'smell' b'from' b'carbon' b',' b'such' b'as' b'inaugurated'
    b'bright' b'tolerance' b'or' b'comb' b',' b'so' b'one' b'nesting' b'@-@' b'head' b'species' b'are' b'equipped' b'during' b'the' b'gill' b'region' b'.' b'In' b'this'
    b'study' b',' b'this' b'bird' b'increases' b'across' b'eastern' b'liver' b'when' b'however' b',' b'he' b'also' b'confess' b'Z.' b'ammonia' b',' b'then' b'written' b'by'
    b'repeats' b'from' b'the' b'candidates' b'in' b'complementary' b',' b'its' b'father' b',' b'and' b'her' b'<unk>' b'order' b'to' b'drop' b'with' b'any' b'other' b'types'
    b'of' b'slugs' b'.' b'<eos>' b'The' b'Gaboon' b'e4' b'grows' b'via' b'a' b'species' b'of' b'Randolph' b'lighter' b'lower' b'species' b'such' b'as' b'qigong' b'('
    b'recently' b'II' b')' b')' b'<unk>' b'.' b'They' b'are' b'being' b'flame' b'by' b'<unk>' b'powdery' b'or' b'spherical' b'a' b'player' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'The' b'eggs' b'of' b'Despite' b'partial' b'starling' b'armed' b'deeper' b',' b'<unk>' b'(' b'Georgian' b'or'
    b'white' b')' b',' b'have' b'still' b'observed' b'a' b'member' b'of' b'anal' b'eclipse' b',' b'may' b'help' b'UNESCO' b"'s" b'size' b',' b'and' b'eventually'
    b'advocated' b'back' b'in' b'the' b'way' b'of' b'them' b'.' b'Most' b'linear' b'declares' b'winds' b'suggests' b'that' b'an' b'additional' b'bond' b'that' b',' b'according'
    b'to' b'there' b'the' b'evidence' b'more' b'sort' b'of' b'less' b'than' b'one' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>'
    b'<eos>' b'Common' b'starlings' b'who' b'has' b'extended' b'Arsenal' b"'s" b'discovery' b'as' b'common' b',' b'poor' b'and' b'plants' b',' b'with' b'binary' b'objects' b'such'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.2
    loss: 5.168
    elapsed time (seconds): 151.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  22.109 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
