.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'3' b'in' b'any' b'2' b'@-@' b'inch' b'Gun' b'<unk>' b',' b'which' b'was' b'released' b'at' b'790' b'GB' b'20' b'kilometres' b'(' b'0' b'@,@'
    b'200' b'm' b')' b',' b'W.' b'Kooper' b'In' b'<unk>' b',' b'David' b'S.' b'<unk>' b'(' b'1991' b')' b',' b'223' b'S.' b'&' b'B'
    b'al' b'!' b"'s" b'Center' b'(' b'John' b'Corey' b'Biringuccio' b')' b'.' b'The' b'blow' b'of' b'Honduras' b',' b'however' b',' b'is' b'possible' b'as'
    b'a' b'apse' b'on' b'the' b'island' b',' b'and' b'the' b'three' b'branches' b'were' b'found' b'in' b'a' b'sudden' b'fact' b'of' b'the' b'<unk>' b'<unk>'
    b'(' b'<unk>' b')' b',' b'which' b'is' b'dedicated' b'to' b'his' b'main' b'11th' b'Army' b'of' b'English' b'prediction' b'.' b'This' b'kakapo' b'is' b'probably'
    b'used' b'to' b'be' b'said' b'to' b'be' b'"' b'so' b'<unk>' b'a' b'body' b'"' b'.' b'For' b'example' b',' b'their' b'uncle' b'was' b're'
    b'@-@' b'produced' b'in' b'35' b'votes' b',' b'and' b'many' b'more' b'plots' b'have' b'involved' b'by' b'votes' b'.' b'The' b'latter' b'and' b'three' b'protective'
    b'records' b'(' b'metal' b'western' b'\xc2\xb0' b'centuries' b')' b'are' b'also' b'dominated' b'by' b'lines' b'.' b'It' b'has' b'been' b'worshipped' b'as' b'open' b'after'
    b'<unk>' b',' b'a' b'planet' b'in' b'an' b'series' b'that' b'it' b'ceased' b'out' b'House' b'rather' b'than' b'open' b'terms' b'of' b'a' b'unusual' b'.'
    b'Similarly' b',' b'they' b'are' b'less' b'than' b'are' b'called' b'or' b'on' b'this' b'other' b',' b'with' b'a' b'U' b'at' b'National' b'Engineering' b'Forces'
    b'at' b'his' b'all' b'time' b',' b'Forgiveness' b'a' b'building' b'which' b'could' b'be' b'three' b'years' b'after' b'their' b'association' b'.' b'Two' b'used' b'on'
    b'the' b'islands' b',' b'two' b'additional' b'destruction' b'across' b'SPECTRE' b'now' b'will' b'prepare' b'that' b'females' b'did' b'not' b'find' b'emphasis' b'in' b'many' b'of'
    b'which' b'are' b'depicted' b',' b'as' b'more' b'skeletons' b'are' b'minimal' b'.' b'5' b'in' b'into' b'12' b'years' b'they' b'go' b'and' b'avoid' b'it'
    b'overlap' b'until' b'the' b'perception' b'.' b'<eos>' b'Another' b'Varuna' b'is' b'found' b'to' b'be' b'distinguished' b'by' b'moving' b'in' b'cameraman' b'.' b'Stevens' b"'s"
    b'origin' b'is' b'referred' b'to' b'as' b'they' b'the' b'brig' b'All\xc4\x81h' b'and' b'German' b'life' b'such' b'as' b'metallicity' b'<unk>' b'but' b'contracting' b'nest' b'cells'
    b'.' b'in' b'this' b'countries' b',' b'the' b'common' b'parasites' b'prohibited' b'Codfish' b'towards' b'<unk>' b'<eos>' b'The' b'kakapo' b'steamed' b'for' b'a' b'wide' b'spots'
    b'(' b'carved' b'as' b'of' b'its' b'suitable' b'<unk>' b')' b',' b'where' b'she' b'are' b'illuminated' b'after' b'a' b'long' b'asteroid' b'formation' b'being' b'wrapped'
    b'into' b'a' b'267' b'to' b'be' b'seen' b'at' b'weather' b'roosts' b'.' b'This' b'is' b'tightly' b'created' b'by' b'iguanodonts' b',' b'which' b'Residency' b'reviews'
    b'hurdles' b'and' b'even' b'unanimously' b'believe' b'a' b'about' b'latex' b'housing' b'them' b'for' b'interests' b'.' b'They' b'may' b'be' b'so' b'recommended' b'.' b'This'
    b'such' b'immediately' b'will' b'be' b'strongly' b'a' b'cylinder' b'from' b'their' b'inscription' b'Nettles' b'for' b'metres' b'it' b'.' b'<eos>' b'<eos>' b'=' b'=' b'='
    b'Sixth' b'controversy' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'even' b'habitat' b'of' b'vulgaris' b'found' b'conditions' b'with' b'eggs' b',' b'and' b'infinite' b'common'
    b'communities' b'who' b'would' b'work' b'after' b'she' b'differs' b'up' b',' b'domestic' b'Crusher' b'may' b'be' b'heard' b'.' b'Four' b'males' b'and' b'surfaces' b'Trail'
    b'males' b'were' b'decided' b'to' b'pay' b'northeast' b'to' b'sensitivity' b'its' b'layer' b'.' b'Easley' b'predators' b'usually' b'recently' b'ivory' b'musicians' b'are' b'known' b'by'
    b'<unk>' b'or' b'species' b'.' b'As' b'the' b'player' b'became' b'regarded' b',' b'there' b'are' b'no' b'evidence' b'due' b'to' b'evidence' b'how' b'it' b'could'
    b'be' b',' b'only' b'rather' b'surprising' b',' b'such' b'as' b'litter' b'families' b'(' b'such' b'as' b'others' b',' b'their' b'expensive' b'Pilot' b'models' b','
    b'which' b'is' b'present' b')' b'.' b'Males' b'destroy' b'varying' b'wind' b'starlings' b'and' b'lawyers' b'.' b'Whereas' b'activities' b'are' b'connected' b'by' b'humans' b'.'
    b'As' b'flight' b'in' b'his' b'survey' b'must' b'cater' b'to' b'their' b'neck' b',' b'they' b'used' b'<unk>' b',' b'high' b'worse' b'(' b'<unk>' b')'
    b',' b'in' b'the' b'path' b'of' b'Gaelic' b'starlings' b',' b'including' b'female' b'or' b'thin' b'Butterfly' b'.' b'In' b'particular' b',' b'they' b'have' b'allowed'
    b'by' b'leave' b'or' b'alpha' b'that' b'riding' b'without' b'prey' b'Prezan' b',' b'such' b'as' b'small' b'or' b'fewer' b'eclectic' b'starling' b',' b'making' b'athletes'
    b'to' b'be' b'preventing' b'off' b'testing' b'.' b'A' b'other' b'everybody' b'can' b'largely' b'be' b'overlooked' b'down' b'and' b'treasonable' b',' b'occurring' b'theory' b'in'
    b'climbing' b'.' b'gifts' b'couldn' b"'t" b'so' b'this' b'male' b',' b'while' b'on' b'a' b'three' b'@-@' b'year' b'deal' b',' b'they' b'can' b'have'
    b'ruled' b'their' b'behaviour' b'to' b'fly' b'.' b'In' b'horizontal' b',' b'she' b'will' b'face' b'young' b'acts' b',' b'and' b'as' b'they' b'thorium' b'Beyonc\xc3\xa9'
    b',' b'one' b'veil' b'allows' b'<unk>' b'or' b'limiting' b'<unk>' b'or' b'simply' b'Scully' b'.' b'Both' b'populations' b'are' b'usually' b'clusters' b'of' b'birds' b'.'
    b'The' b'priestly' b'exception' b'after' b'changing' b'their' b'outer' b'and' b'extend' b'control' b',' b'it' b'may' b'be' b'more' b'ambiguous' b'to' b'occupy' b'750' b'%'
    b'.' b'Females' b'were' b'fewer' b'in' b'the' b'solar' b'regions' b'they' b'contributed' b'to' b'the' b'Earth' b',' b'where' b'they' b'feed' b',' b'awkward' b'becomes'
    b'recommendations' b'to' b'it' b',' b'<unk>' b'speaker' b',' b'or' b'well' b'leaves' b'together' b'.' b'tire' b'may' b'be' b'dynamic' b',' b'where' b'when' b'they'
    b'are' b'safely' b'likely' b'.' b'Mhalsa' b'expands' b'for' b'common' b'or' b'upper' b'trees' b'entitled' b'<unk>' b',' b'Guillaume' b'averaging' b'and' b'branched' b'struggles' b'.'
    b'It' b'is' b'usually' b'recommended' b'to' b'be' b'enzymes' b'of' b'everyday' b'brownish' b'.' b'It' b'also' b'possess' b'and' b'whenever' b'this' b'will' b'be' b'peach'
    b'on' b'usually' b'their' b'size' b',' b'to' b'prepare' b'rather' b'to' b'have' b'territory' b'.' b'dictated' b',' b'AFC' b',' b'his' b'common' b'legs' b','
    b'<unk>' b'useless' b'poisonous' b'or' b',' b'saved' b'all' b'of' b'.' b'The' b'wax' b'litter' b'wasps' b',' b'57' b'@-@' b'spored' b',' b'are' b'also'
    b'considered' b'by' b'<unk>' b',' b'then' b'investigated' b'131' b'or' b'<unk>' b'Roxas' b',' b'reflecting' b'booms' b'and' b'eggs' b'on' b'native' b'cats' b',' b'such'
    b'as' b'metallic' b'Chaos' b',' b'or' b'so' b'sepulchral' b'by' b'cosmetics' b'.' b'Once' b'it' b'may' b'be' b'on' b'their' b'number' b'of' b'eye' b','
    b'they' b'do' b'be' b'spored' b'.' b'Burns' b'suggests' b'that' b'they' b'have' b'greatly' b'virtually' b'unless' b'enamel' b'due' b'to' b'no' b'imaginary' b'predators' b'and'
    b'they' b'could' b'sometimes' b'not' b'occur' b'to' b'be' b'capable' b'of' b'structural' b'and' b'inadequate' b'deer' b'.' b'This' b'method' b'of' b'Madison' b'<unk>' b'can'
    b'be' b'throat' b',' b'weight' b',' b'and' b'possibly' b'critiques' b'over' b'their' b'behaviour' b'in' b'transforming' b'an' b'crime' b'or' b'dark' b',' b'but' b'it'
    b'does' b'not' b'feed' b'on' b'their' b'own' b'size' b'.' b'navigating' b'usually' b',' b'since' b'the' b'other' b'glucose' b'discovery' b',' b'birds' b'can' b'be'
    b'readily' b'<unk>' b'.' b'In' b'breaker' b',' b'their' b'image' b'suggested' b'that' b'reports' b'of' b'climate' b'sodium' b'or' b'extend' b'inches' b'with' b'Gryzelda' b'.'
    b'With' b'one' b',' b'their' b'demons' b'personally' b'would' b'have' b'experiencing' b'kami' b'FITs' b'to' b'eliminate' b'Ode' b'XIII' b'and' b'but' b'its' b'eukaryotic' b'catch'
    b'and' b'their' b'plumage' b',' b'and' b',' b'although' b'there' b'are' b'no' b'very' b'evidence' b'that' b'they' b'begin' b',' b'since' b'they' b'may' b'be'
    b'entrenched' b',' b'because' b'they' b'sing' b'simply' b'or' b'often' b'that' b'they' b'around' b'the' b'edge' b'old' b'.' b'Lover' b',' b'this' b'remaining' b'option'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 210.3
    loss: 5.168
    elapsed time (seconds): 139.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  56.563 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
