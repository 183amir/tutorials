.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'once' b',' b'and' b'was' b'discovered' b'to' b'be' b'chosen' b'for' b'<unk>' b',' b'making' b'full' b'to' b'ask' b'Mandatory' b'Drew' b'on' b'a' b'bar'
    b'of' b'their' b'contribution' b'by' b'paint' b',' b'<unk>' b'or' b'150' b'%' b'birds' b'.' b'However' b',' b'able' b'to' b'recognize' b'territories' b'after' b'leaving'
    b'part' b'of' b'Edinburgh' b'and' b'<unk>' b'Village' b',' b'events' b'from' b'desire' b',' b'is' b'cella' b'.' b'When' b'seeking' b',' b'Wilfrid' b'put' b'Jeremy'
    b'Green' b'with' b'Cambridge' b',' b'a' b'provoking' b'crime' b'member' b'of' b'Bradman' b'.' b'By' b'June' b',' b'staffs' b'reaching' b'01' b'trains' b'in' b'Bourgmont'
    b'one' b',' b'extraordinary' b'Hoover' b"'s" b'Punch' b'Mirror' b'based' b'in' b'exhibited' b'1920s' b';' b'he' b'ran' b'to' b'Zygoballus' b'Island' b'(' b'died' b'two'
    b')' b'attached' b'to' b'Mark' b'named' b'his' b'work' b'.' b'The' b'resemblance' b'quickly' b'\xe2\x80\x93' b'at' b'18' b'%' b'of' b'total' b'dating' b'in' b'2D'
    b',' b'elected' b'by' b'several' b'of' b'his' b'older' b'novels' b'to' b'"' b'have' b'helped' b'cutting' b'a' b'living' b'city' b';' b'this' b'is' b'not'
    b'acquired' b'Jakarta' b'alone' b'"' b'.' b'Their' b'provincial' b'armament' b'was' b'then' b'deeply' b'used' b',' b'including' b'her' b'intention' b'by' b'the' b'fall' b'of'
    b'his' b'<unk>' b',' b'<unk>' b'@-@' b'officials' b',' b'and' b'grave' b'resisted' b'by' b'their' b'grandfather' b"'s" b'DRS' b'.' b'The' b'struggle' b'for' b'her'
    b'suicide' b'is' b'quite' b'reflected' b'.' b'These' b'finding' b'<unk>' b'accession' b'between' b'ferries' b'and' b'birds' b'such' b'as' b'La' b'<unk>' b',' b'The' b'Kereya'
    b'Ministry' b'of' b'Natural' b'Thorne' b"'s" b'edition' b'(' b'died' b';' b'The' b'3' b'<unk>' b')' b'prostitution' b'by' b'non' b'@-@' b'century' b'its' b'tent'
    b'and' b'embodied' b'behind' b'a' b'"' b'active' b'pattern' b'"' b'the' b'names' b'within' b'no' b'acts' b'.' b'<eos>' b'The' b'competitor' b"'" b'dedication' b'the'
    b'planet' b'wrote' b'an' b'critical' b'character' b'of' b'iron' b'service' b'in' b'Mars' b'.' b'In' b'November' b'Lorraine' b',' b'while' b'under' b'30' b'1938' b','
    b'the' b'hackers' b'hated' b'its' b'effectiveness' b',' b'which' b'was' b'based' b'on' b'Crash' b'of' b'<unk>' b'.' b'<eos>' b'The' b'Foreign' b'Republic' b'of' b'Development'
    b'has' b'stated' b'that' b'debate' b'may' b'be' b'performed' b'in' b'the' b'title' b'of' b'quaint' b'715' b'years' b'ago' b',' b'though' b'they' b'were' b'forced'
    b'to' b'form' b'reading' b'agencies' b'.' b'This' b'scene' b',' b'to' b'be' b'killed' b'today' b',' b'suggest' b'that' b'Gordon' b'Hairan' b'extraction' b'might' b'have'
    b'adopted' b'little' b'aspects' b'for' b'40' b'years' b'at' b'a' b'very' b'<unk>' b',' b'and' b'machismo' b'is' b'shocked' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Death' b'=' b'=' b'<eos>' b'<eos>' b'binomial' b'against' b'high' b'activist' b'Moshenska' b'pagoda' b',' b'it' b'is' b'highly' b'able' b'to' b'have' b'visited' b'the'
    b'deal' b'.' b'The' b'pilots' b'have' b'a' b'single' b'unusual' b',' b'like' b'low' b',' b'so' b'those' b'of' b'quotation' b'can' b'cause' b'after' b'one'
    b'sky' b'and' b'one' b'outlets' b'.' b'There' b'are' b'also' b'known' b'from' b'females' b',' b'which' b'is' b'often' b'out' b'of' b'Madras' b',' b'but'
    b'with' b'their' b'demands' b'on' b'type' b',' b'<unk>' b'.' b'He' b'learned' b'to' b'sleep' b'that' b'if' b'while' b',' b'the' b'inner' b'gesture' b'will'
    b'be' b'suggested' b'out' b'of' b',' b'or' b'on' b'rock' b',' b'they' b'may' b'be' b'the' b'<unk>' b'probable' b'majority' b'.' b'If' b'they' b'agencies'
    b'and' b'prevent' b'how' b'they' b'are' b'played' b'from' b'Ocean' b'sexpunctatus' b'in' b'possession' b'of' b'UN' b'bodies' b',' b'multiple' b'birds' b'are' b'nudes' b'killed'
    b'.' b'eukaryotic' b'values' b'gets' b'into' b'a' b'frequently' b'Ramsey' b'that' b'it' b'is' b'too' b'individual' b'.' b'handcuffs' b'made' b'to' b'Albani' b',' b'secrets'
    b'association' b'by' b'<unk>' b'or' b'genes' b'without' b'athletes' b'such' b'as' b'the' b'Phoenician' b',' b'traversing' b'winged' b'.' b'=' b'Reviewers' b'have' b'sex' b'renovation'
    b'similar' b'by' b'their' b'distinct' b'<unk>' b'leader' b'<unk>' b'due' b'to' b'her' b'Enterprises' b'.' b'These' b'on' b'the' b'male' b'has' b'five' b'days' b'.'
    b'Instead' b',' b'noisy' b'Crowns' b'does' b'continue' b',' b'in' b'those' b'that' b'brings' b'their' b'advance' b'with' b'them' b'.' b'My' b'term' b'size' b'is'
    b'narrow' b'in' b'its' b'"' b'1' b'<unk>' b'"' b'and' b'a' b'sex' b'mob' b',' b'pushing' b'the' b'number' b'of' b'different' b'costs' b',' b'except'
    b'that' b'it' b'will' b'be' b'improved' b'performing' b',' b'among' b'total' b'further' b'belong' b'to' b'pipes' b'who' b'have' b'no' b'shaped' b'bones' b'in' b'having'
    b'a' b'child' b'taken' b'up' b'to' b'apartheid' b',' b'golf' b'days' b'using' b'twigs' b',' b'as' b'may' b'form' b'him' b'.' b'One' b'bird' b'studies'
    b'larger' b'other' b'nomina' b'polytheistic' b'moves' b'at' b'employ' b'calls' b'through' b'<unk>' b',' b'delivering' b'sometimes' b'his' b'orbit' b'reached' b'to' b'control' b'control' b'.'
    b'Only' b'may' b'be' b'measured' b'with' b'supports' b'when' b'they' b'accumulate' b'finding' b'inability' b'to' b'function' b'.' b'Blythe' b'do' b'not' b'close' b'Hang' b'Irish'
    b',' b'not' b'making' b'little' b'surface' b'Fresh' b'.' b'<eos>' b'Common' b'starlings' b'effects' b'when' b'they' b'bind' b'any' b'other' b'nest' b'of' b'wings' b','
    b'by' b'other' b'fatalities' b'its' b'requirement' b'and' b'functional' b'training' b',' b'partly' b'dry' b'as' b'they' b'are' b'intestinal' b'enough' b'.' b'In' b'particular' b','
    b'they' b'usually' b'serve' b'as' b'multinucleated' b',' b'a' b'good' b'sense' b'study' b'of' b'them' b'without' b'strong' b'treating' b'.' b'The' b'sound' b'may' b'be'
    b'probably' b'perhaps' b'made' b'in' b'the' b'cell' b'and' b'<unk>' b'with' b'it' b'of' b'the' b'monuments' b'.' b'<eos>' b'solved' b'a' b'probes' b'carved' b'on'
    b'<unk>' b'specially' b',' b'<unk>' b',' b'if' b'they' b'are' b'approved' b'in' b'breed' b',' b'it' b'can' b'be' b'seen' b'by' b'their' b'ability' b'as'
    b'they' b'otherwise' b'heard' b'.' b'<eos>' b'<unk>' b'of' b'Ireland' b'schedule' b'can' b'vary' b'by' b'threshold' b'when' b'they' b'may' b'be' b'raised' b'for' b'small'
    b'starlings' b'.' b'First' b'crop' b'population' b'leave' b'their' b'Azure' b'as' b'it' b'may' b'be' b'obtained' b'by' b'hatred' b'.' b'He' b'usually' b'discovers' b'a'
    b'low' b'breeding' b'colour' b'office' b',' b'spending' b'into' b'night' b',' b'but' b'because' b'they' b'are' b'sufficiently' b'enclosed' b'down' b'to' b'it' b'.' b'The'
    b'bird' b'maintained' b'that' b'Ceres' b'leave' b'by' b'the' b'good' b'edge' b'is' b'found' b'in' b'open' b'nasal' b'patterns' b',' b'causing' b'strong' b'starlings' b'of'
    b'common' b'significance' b'.' b'<eos>' b'Common' b'starlings' b'may' b'be' b'applied' b'all' b'phase' b',' b'syphilis' b'and' b'girlhood' b'completely' b'making' b'it' b'less' b'so'
    b'as' b"'" b'Venus' b"'" b'means' b'known' b'as' b'\xe2\x80\x93' b'<unk>' b',' b'although' b'may' b'not' b'young' b'<unk>' b'.' b'Males' b'have' b'recorded' b'others'
    b',' b'primarily' b'those' b'that' b'God' b'would' b'occur' b'.' b'Furthermore' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'and' b'migration' b'together' b','
    b'with' b'four' b'<unk>' b'boilers' b',' b'disaster' b'or' b'molecules' b'with' b'their' b'head' b'lifesize' b'.' b'Following' b'no' b'kakapo' b'@-@' b'field' b',' b'it'
    b'is' b'flock' b'by' b'<unk>' b',' b'males' b',' b'angles' b',' b'<unk>' b',' b'and' b'Inari' b',' b'which' b'transported' b'this' b'function' b'that' b'they'
    b'were' b'complete' b'.' b'If' b'they' b'usually' b'do' b'one' b'leave' b'a.m.' b',' b'more' b'compounded' b'when' b'they' b'should' b'always' b'be' b'wrong' b'\xe2\x80\x94'
    b'since' b'hair' b'it' b'does' b'even' b'sound' b'refugees' b',' b'they' b'need' b'to' b'be' b'so' b'high' b'or' b'measured' b'on' b'it' b'.' b'Due'
    b'to' b'different' b'starlings' b',' b'so' b'they' b'can' b'be' b'uncommon' b'upon' b'part' b'of' b'their' b'breeding' b'loss' b'.' b'During' b'the' b'fungus' b','
    b'limiting' b'changes' b'various' b'chemical' b'kakapo' b'courses' b'(' b'they' b'formation' b'over' b'Kavi' b'or' b'record' b'of' b'sentence' b'way' b'of' b'5000' b')' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 265.5
    loss: 5.168
    elapsed time (seconds): 166.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  17.876 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
