.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'with' b'religion' b'<unk>' b'but' b'that' b'his' b'name' b',' b'along' b'with' b'Saint' b'St' b'on' b'their' b'diary' b'annual' b'<unk>' b'"' b'the' b'transition'
    b'slowly' b'of' b'Elsinore' b'"' b'.' b'Denner' b'and' b'a' b'third' b'@-@' b'seller' b'show' b'public' b',' b'most' b'commercials' b'take' b'in' b'the' b'Navy'
    b'and' b'the' b'Hollandia' b'<unk>' b"'" b'greyish' b'discovery' b'making' b'its' b'own' b'home' b'in' b'campaign' b'.' b'Perhaps' b'his' b'view' b',' b'etymologies' b'were'
    b'printed' b'third' b'that' b'year' b'breed' b'was' b'larger' b'.' b'Simmons' b'supported' b'Congregational' b'size' b'Number' b'Hunter' b'and' b'expected' b'a' b'lock' b'to' b'prepare'
    b'a' b'planet' b'came' b'on' b'a' b'person' b'of' b'orbit' b':' b'"' b'1989' b'years' b',' b'an' b'cosmopolitan' b'bowler' b'dirt' b'game' b',' b'was'
    b'so' b'absolutely' b'perhaps' b'.' b'"' b'John' b'Francis' b'criticized' b'Bureau' b"'s" b'true' b'exaggerated' b'system' b'zombies' b'and' b'wrote' b'plays' b'discus' b'and' b'First'
    b'police' b',' b'and' b'the' b'history' b'of' b'water' b',' b'throwing' b',' b'wholly' b'@-@' b'wives' b'were' b'actually' b'widely' b'taken' b'into' b'their' b'confusion'
    b'.' b'In' b'the' b'1980s' b'the' b'vigil' b'is' b'blamed' b'following' b'<unk>' b'1876' b',' b'Echmarcach' b'compares' b'toppling' b'objects' b'to' b'Dole' b'builders' b','
    b'bounced' b'gigalitres' b'down' b'after' b'a' b'failure' b'that' b'she' b'wrote' b'.' b'I' b"'m" b'myself' b'sound' b'injustice' b'and' b'stops' b'off' b'what' b'should'
    b'take' b'a' b'deal' b'and' b'others' b',' b'a' b'overall' b'formula' b';' b'it' b"'s" b'be' b'plentiful' b',' b'girls' b',' b'Giant' b'African' b'leaders'
    b'and' b'Margate' b'pigment' b'.' b'He' b'refers' b'to' b'superior' b'or' b'a' b'game' b'of' b'rapid' b'numbers' b'associated' b'in' b'Alison' b',' b'low' b'New'
    b'York' b'(' b'see' b'to' b'date' b')' b'challenged' b'many' b'archaeological' b'processing' b'.' b'The' b'Type' b'Vanya' b'is' b'armed' b'on' b'early' b'tanks' b'.'
    b'<unk>' b',' b'it' b'is' b'not' b'known' b'on' b'"' b'thick' b'"' b',' b'or' b'occurring' b'it' b'as' b'"' b'2e' b'consist' b'of' b'teaching'
    b'human' b'"' b'.' b'But' b'when' b'it' b'may' b'be' b'hinted' b'to' b'head' b'when' b'Ross' b',' b'and' b'thus' b'heralded' b'Englishmen' b'about' b'Generally'
    b',' b'they' b'enjoyed' b'their' b'Locations' b',' b'<unk>' b',' b'impulse' b',' b'and' b'even' b'explore' b'as' b'they' b'were' b'differ' b'.' b'<eos>' b'At'
    b'a' b'premature' b'fourteen' b'@-@' b'metre' b'period' b'(' b'including' b'creating' b'reduced' b'high' b'@-@' b'range' b',' b'1854' b')' b',' b'Cambridge' b'dwelt' b'moratorium'
    b'with' b'their' b'offspring' b'for' b'any' b'other' b'other' b'spots' b',' b'aged' b'12th' b'L.' b'temperatures' b'than' b'it' b'.' b'This' b'is' b'also' b'an'
    b'planet' b'plant' b'and' b'attracted' b'produce' b'diversity' b'.' b'At' b'this' b'time' b',' b'the' b'influence' b'of' b'birds' b'are' b'the' b'wild' b'capture' b'('
    b'see' b'relationships' b')' b'and' b'Jews' b')' b'such' b'as' b'the' b'beak' b'of' b'spruce' b',' b'or' b'layer' b'of' b'affection' b',' b'and' b'cannot'
    b'be' b'heard' b'in' b'1984' b'.' b'<eos>' b'America' b"'s" b'names' b'are' b'perhaps' b'abandoned' b'.' b'William' b'Ng\xc3\xb4' b'considers' b'7' b'points' b'to' b'a'
    b'cook' b',' b'is' b'more' b'<unk>' b';' b'in' b'1212' b',' b'the' b'other' b'<unk>' b'will' b'improvisation' b'its' b'male' b'love' b'due' b'to' b'these'
    b'other' b'hours' b',' b'leading' b'to' b'sail' b'about' b'and' b'calls' b'when' b'Lennox' b'does' b'not' b'intend' b'.' b'However' b'they' b'become' b'widely' b'<unk>'
    b'.' b'Some' b'common' b'stories' b'do' b'not' b'desire' b'on' b'their' b'sex' b'(' b'not' b'Echinodontium' b'.' b')' b'A' b'specimen' b'"' b'is' b'not'
    b'tough' b'"' b'.' b'The' b'story' b'by' b'fungi' b'is' b'attacked' b'by' b'jumpers' b'by' b'Muslims' b'of' b'a' b'envelope' b'and' b'generally' b'lucaris' b'office'
    b'.' b'The' b'BP' b'can' b'consider' b'a' b'resort' b'and' b'positive' b'splicing' b'artist' b'by' b'310' b'ft' b'(' b'2' b'@.@' b'4' b'in' b')'
    b'wide' b',' b'or' b'mass' b'insects' b'(' b'both' b'her' b'reagent' b')' b'hardened' b'with' b'Hilo' b'.' b'Each' b'kind' b'is' b'quite' b'easily' b'on'
    b'other' b'occasions' b'and' b'really' b'ablutions' b',' b'long' b'in' b'both' b'Tremellogaster' b'.' b'According' b'to' b'unique' b':' b'<unk>' b',' b'which' b'spots' b'in'
    b'some' b'areas' b'they' b'would' b'be' b',' b'as' b'the' b'kakapo' b'uses' b'hunting' b',' b'must' b'make' b'a' b'star' b')' b'as' b'they' b'split'
    b'males' b'.' b'They' b'reserved' b'carbonaria' b'all' b'up' b'enough' b'to' b'achieve' b'birds' b'of' b'encouraging' b'so' b'indecency' b'.' b'Stourton' b'male' b'Anabaptist' b'concern'
    b'like' b'stunned' b'trees' b'(' b'daylight' b')' b',' b'especially' b'inside' b'exons' b'(' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'friary'
    b',' b'India' b',' b'lowers' b'lubricants' b':' b'<eos>' b'"' b'North' b'coal' b',' b'Greek' b',' b'and' b'/' b'Frog' b'specimens' b'of' b'the' b'welfare'
    b'of' b'conviction' b"'" b'-' b'so' b'flies' b']' b'here' b')' b'which' b'drop' b'absolutely' b'.' b'"' b'The' b'time' b'of' b'the' b'<unk>' b'team'
    b'is' b'also' b'very' b'distinguished' b'in' b'order' b'to' b'create' b'it' b'to' b'basketball' b'and' b'feminine' b'laboratory' b'waving' b'.' b'Those' b'are' b'prolonged' b'when'
    b'favor' b'condoms' b'are' b'disputed' b',' b'precise' b'blood' b'or' b'big' b'environmental' b',' b'but' b'in' b'managed' b',' b'bold' b'adults' b'are' b'Interior' b';'
    b'they' b'extend' b'their' b'eggs' b'to' b'GA' b'.' b'Despite' b'some' b'types' b',' b'suggests' b'several' b'parrots' b'and' b'Surrender' b'are' b'found' b'the' b'survival'
    b'of' b'I' b'Fully' b'lodgings' b'.' b'This' b'species' b'is' b'missing' b'share' b'.' b'The' b'phenomenon' b'are' b'<unk>' b'in' b'their' b'single' b'history' b'by'
    b'a' b'\xe2\x80\x98' b',' b'meaning' b'with' b'Capablanca' b'(' b'eradication' b'to' b'low' b'maturity' b'on' b'25' b'cats' b')' b',' b'which' b'can' b'be' b'measured'
    b'by' b'low' b'@-@' b'speaking' b'virus' b'while' b'sometimes' b'essentially' b'buying' b'.' b'These' b'they' b'are' b'unknown' b'on' b'any' b'other' b'herbivorous' b'line' b','
    b'white' b'or' b'limit' b';' b'it' b'may' b'be' b'share' b'after' b'more' b'than' b'neither' b'often' b'fewer' b'<unk>' b'.' b'In' b'this' b'other' b'risk'
    b',' b'many' b'other' b'alternate' b'birds' b'Buddhist' b'weaponry' b'generally' b'existed' b'in' b'the' b'law' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Naming' b'habitat' b'='
    b'=' b'<eos>' b'<eos>' b'\xc3\x8dmar' b'is' b'recommended' b'that' b'it' b'found' b'its' b'eastern' b'campaigns' b'.' b'By' b'these' b'numbers' b'of' b'its' b'successful' b'chloride'
    b',' b'windows' b',' b'Eu' b"'s" b'Banadir' b'(' b'Suvarnabhumi' b')' b',' b'changes' b'.' b'There' b'may' b'be' b'thick' b'minerals' b',' b'the' b'blue'
    b'describe' b'of' b'the' b'fat' b'head' b'(' b'also' b'native' b',' b'detail' b',' b'this' b'species' b'Electricity' b',' b'or' b'phallic' b'a' b'bone' b'Institution'
    b')' b'.' b'loop' b'breaks' b'in' b'their' b'red' b'use' b'of' b'<unk>' b',' b'and' b'are' b'trapped' b'approximately' b'539' b'.' b'This' b'makes' b'structure'
    b'they' b'call' b'a' b'Bucharest' b'can' b'be' b'pitched' b'.' b'It' b'may' b'be' b'other' b'@-@' b'fruit' b'low' b'gas' b',' b'and' b'as' b'they'
    b'are' b'able' b'to' b'have' b'been' b'suffering' b'with' b'nesting' b'food' b'or' b'pain' b'.' b'For' b'example' b',' b'doll' b',' b'Eccleston' b',' b'goes'
    b',' b'and' b'roughly' b'162' b'body' b'tall' b',' b'large' b'or' b'sometimes' b'more' b'purification' b'for' b'each' b'two' b'large' b'islands' b',' b'which' b'enabled'
    b'it' b'as' b'their' b'<unk>' b'or' b'their' b'eyes' b'.' b'In' b'this' b'population' b',' b'this' b'may' b'have' b'emit' b'meetings' b'or' b',' b'even'
    b'successfully' b'return' b'to' b'mediate' b'containers' b'.' b'However' b',' b'when' b'males' b'contains' b'him' b'to' b'shift' b'so' b'they' b'were' b'actually' b'common' b'but'
    b'generally' b'feed' b'for' b'food' b',' b'such' b'as' b'good' b',' b'brownish' b'emit' b'and' b'mites' b'on' b'the' b'island' b'of' b'by' b'the' b'mountains'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 241.2
    loss: 5.168
    elapsed time (seconds): 160.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  47.993 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
