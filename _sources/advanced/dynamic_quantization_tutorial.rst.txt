.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'and' b'on' b'a' b'interpretation' b'of' b'8' b'@.@' b'93' b'%' b'per' b'closer' b',' b'only' b'confident' b'early' b'associated' b'sank' b'in' b'running'
    b'home' b'.' b'One' b'step' b'before' b'showing' b'first' b'far' b'B.' b'Hartman' b"'s" b'experiences' b'.' b'Somerset' b'straight' b'to' b'make' b'large' b'doors' b'only'
    b',' b'leaving' b'an' b'revival' b'of' b'Ganymede' b',' b'<unk>' b'legitimacy' b'rooms' b',' b'and' b'the' b'Theory' b'<unk>' b'journal' b'.' b'<eos>' b'Standing' b'television'
    b'<unk>' b',' b'a' b'maximum' b'composer' b',' b'now' b'first' b'introduced' b'by' b'<unk>' b'a' b'curiosity' b'from' b'the' b'second' b'public' b'and' b'sparrow' b'.'
    b'The' b'decree' b'frequently' b'and' b'decisively' b'produces' b'nearly' b'increased' b'to' b'tourists' b'and' b'numerous' b'skills' b'both' b'making' b'days' b'throughout' b'emergency' b'view' b','
    b'although' b'heavily' b'for' b'severe' b'terms' b'and' b'two' b'birds' b'made' b'to' b'fall' b'them' b'before' b'.' b'O' b"'Malley" b'resumed' b'before' b'choice' b'that'
    b'they' b'do' b'not' b'backup' b'fresh' b'or' b'with' b'Denton' b',' b'who' b'agreed' b'to' b'depend' b'on' b'the' b'gameplay' b'.' b'<unk>' b'would' b'be'
    b'collected' b'in' b'Pascual' b'Power' b'as' b'feathers' b'carried' b'place' b'at' b'an' b'freight' b'of' b'a' b'planet' b',' b'known' b'his' b'will' b',' b'imposed'
    b'for' b'period' b'decided' b'to' b'suspect' b'his' b'actual' b'Raton' b'financial' b'election' b'.' b'At' b'a' b'hunt' b'of' b'the' b'location' b'of' b'<unk>' b','
    b'in' b'order' b',' b'only' b'a' b'real' b'or' b'useful' b'star' b',' b'deter' b'a' b'post' b'@-@' b'time' b'number' b'in' b'Finland' b'.' b'Originally'
    b'sometimes' b'assistants' b',' b'effects' b'are' b'traced' b'to' b'dried' b',' b'or' b'as' b'they' b'thought' b'in' b'longer' b'beach' b'or' b'they' b'is' b'undertakings'
    b',' b'and' b'they' b'need' b'to' b'be' b'targeted' b',' b'and' b'because' b'it' b'is' b'veins' b'for' b'a' b'hot' b'transit' b'and' b'can' b'be'
    b'thin' b'by' b'one' b'hundred' b'<unk>' b'by' b'each' b'side' b'when' b'they' b'questioned' b'it' b'.' b'If' b'could' b'know' b'in' b'the' b'fancy' b','
    b'I' b'suspended' b'under' b'control' b',' b'the' b'solar' b'house' b'might' b'be' b'heavily' b'multipurpose' b'as' b'leading' b'on' b'Lord' b'Wodehouse' b'.' b'<eos>' b'shotguns'
    b',' b'Polynesian' b'cells' b',' b'and' b'rapid' b'sub' b'@-@' b'reading' b'appear' b'not' b'every' b'male' b',' b'hostilities' b',' b'or' b'space' b'out' b','
    b'such' b'as' b'18' b';' b'it' b'is' b'possible' b'a' b'certain' b'run' b'until' b'they' b'are' b'afraid' b'at' b"'" b'The' b'Battle' b'of' b'<unk>'
    b'.' b'The' b'flying' b'force' b'thought' b'that' b'this' b'game' b'is' b'<unk>' b'.' b'However' b',' b'they' b'mock' b'another' b'<unk>' b'campaign' b'for' b'Sumner'
    b',' b'which' b'seems' b'to' b'be' b'.' b'"' b'As' b'of' b'special' b',' b'he' b'more' b'<unk>' b'than' b'periods' b'completely' b'in' b'their' b'last'
    b'thing' b'of' b'these' b'things' b'"' b'.' b'When' b'short' b'partial' b'techniques' b',' b'low' b'or' b'maintain' b'by' b'uneasy' b'and' b'medical' b',' b'none'
    b'of' b'flybys' b'engage' b'as' b'low' b'as' b'they' b'by' b'rented' b'chemical' b'traditions' b'during' b'the' b'homeland' b'.' b'Less' b'large' b'measures' b'in' b'the'
    b'population' b'identify' b'<unk>' b'alone' b',' b'such' b'as' b'the' b'way' b'and' b'degradation' b'of' b'americanus' b'.' b'<unk>' b',' b'coupled' b',' b'with' b'heat'
    b',' b'have' b'Wear' b'phrases' b'of' b'highly' b'creative' b'disguised' b',' b'just' b'affected' b'at' b'their' b'last' b'@-@' b'sense' b'.' b'It' b'is' b'usually'
    b'kept' b'like' b'this' b'eye' b'.' b'The' b'booms' b'are' b'also' b'either' b'very' b'thinking' b'.' b'Thus' b',' b'as' b'well' b',' b'their' b'will'
    b'play' b'@-@' b'<unk>' b',' b'exploding' b',' b'Marketing' b',' b'<unk>' b',' b'telescopes' b',' b'or' b'female' b'collecting' b'eyes' b'.' b'scarring' b'and' b'Scully'
    b'continue' b'to' b'begin' b'down' b'or' b'coalition' b'into' b'any' b'other' b'Fires' b'ones' b',' b'aged' b'86' b',' b'they' b'may' b'just' b'be' b'cared'
    b',' b'which' b'are' b'also' b'distinguished' b'on' b'some' b'kinds' b'.' b'According' b'to' b'tuned' b',' b'they' b'do' b'explicitly' b'exists' b'to' b'help' b'Rose'
    b'nests' b'.' b'<unk>' b'recognises' b'locally' b'were' b'unable' b'to' b'be' b'very' b'excellent' b'-' b'involved' b'on' b'food' b'do' b'not' b'participate' b'before' b'for'
    b'much' b'other' b'other' b'cement' b'levels' b'.' b'On' b'practice' b'they' b'benefited' b'the' b'gleba' b'that' b'they' b'could' b'be' b'accepted' b'by' b'planet' b'uses'
    b'.' b'Once' b'they' b'provide' b'flattened' b'or' b'Santa' b'reports' b'they' b'are' b'deliberately' b'mature' b',' b'9000' b',' b'and' b'control' b'when' b'they' b'pass'
    b'to' b'their' b'planet' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Behaviour' b'=' b'=' b'<eos>' b'<eos>' b'Thomas' b'galericulata' b'is' b'also' b'in' b'Bir' b'Storm'
    b'discovered' b'.' b'Like' b'other' b'low' b'forms' b'flowers' b',' b'it' b'was' b'passed' b'directly' b'on' b'behalf' b'of' b'wives' b'through' b'a' b'purchasing' b'exoplanets'
    b'can' b'use' b'resistant' b',' b'as' b'manage' b'a' b'sword' b',' b'affecting' b'[' b'females' b']' b'be' b'that' b'face' b'supplemented' b'to' b'serve' b'a'
    b'indication' b',' b'find' b'them' b'to' b'pad' b'potentially' b'they' b'are' b'not' b'7' b'\xe2\x80\x93' b'par' b'with' b'these' b'monogamous' b'projections' b'.' b'To' b'continue'
    b',' b'it' b'also' b'arise' b'in' b'mass' b'practices' b'where' b'boom' b'can' b'be' b'sometimes' b'seen' b'by' b'proper' b'hunters' b'.' b'They' b'may' b'meet'
    b'begin' b'for' b'this' b'song' b'\xe2\x80\x94' b'rather' b'than' b'just' b'young' b'measures' b'.' b'Common' b'starlings' b'only' b'attributed' b'to' b'their' b'population' b'of' b'myths'
    b',' b'such' b'as' b'<unk>' b',' b'sector' b',' b'Pat' b'Brown' b'and' b'Neptune' b',' b'or' b'R\xc3\xa9union' b'that' b'adults' b'have' b'fashioned' b'to' b'secure'
    b'control' b'.' b'A' b'large' b'starling' b'consists' b'of' b'lower' b'diversity' b'being' b'dead' b',' b'but' b'therefore' b'also' b'Mandarin' b'binding' b'by' b'her' b'victory'
    b'as' b'possible' b'when' b'they' b'are' b'abnormal' b'to' b'protect' b'the' b'AOL' b'Chambers' b'backwards' b'.' b'The' b'Centurion' b'steamboat' b'forced' b'only' b'less' b'less'
    b'100' b':' b'00' b'.' b'In' b'contrast' b',' b'old' b'kakapo' b'can' b'be' b'heavier' b'strong' b';' b'they' b'may' b'floating' b'the' b'surface' b'between'
    b'Islam' b'and' b'coins' b'of' b'typical' b'factors' b'and' b'wait' b'to' b'permit' b'those' b'.' b'This' b'summer' b'tend' b'to' b'be' b'rivaled' b',' b'can'
    b'be' b'seen' b'until' b'of' b'cardiac' b'colonies' b'.' b'Large' b'then' b'stars' b'from' b'their' b'behaviour' b'under' b'Sidon' b'<unk>' b'or' b'<unk>' b'formed' b'them'
    b'.' b'<eos>' b'As' b'they' b'are' b'dead' b'from' b'wings' b',' b'nocturnal' b'or' b'countries' b'vary' b'in' b'nm' b'until' b'its' b'nearby' b'cell' b','
    b'occasionally' b'a' b'plan' b'from' b'three' b'anxiety' b'in' b'association' b',' b'by' b'extra' b'or' b'<unk>' b'behaviour' b'.' b'That' b'intensity' b'also' b'can' b'be'
    b'rare' b',' b'except' b',' b'and' b'avoid' b'their' b'beak' b'to' b'be' b'wrapped' b'.' b'Mosley' b"'s" b'<unk>' b'turns' b'before' b'purposes' b'for' b'<unk>'
    b'Hills' b'.' b'In' b'particular' b',' b'subspecies' b'receptor' b'terms' b'may' b'be' b'early' b'.' b'Noisy' b'starlings' b'vary' b'differentiation' b'eggs' b',' b'then' b'<unk>'
    b'Tide' b'and' b'<unk>' b'pursuers' b'in' b'order' b'to' b'shaved' b'territory' b'.' b'They' b'exhibit' b'their' b'servant' b'imitate' b'P.' b'<unk>' b'purplish' b'VII' b','
    b'which' b'stretched' b'they' b'stood' b'with' b'the' b'collapsing' b'trees' b'.' b'They' b'can' b'be' b'fed' b'to' b'attract' b'the' b'factor' b'of' b'kitsune' b','
    b'beating' b'small' b'temperatures' b'in' b'Caiaphas' b'until' b'Sierra' b'.' b'There' b'are' b'no' b'reports' b'that' b'variable' b'pressures' b'include' b'well' b'survey' b'of' b'nucleolar'
    b'inputs' b'.' b'Precipitation' b'thereby' b'looked' b'off' b'power' b'bar' b',' b'and' b'there' b'is' b'no' b'scene' b'.' b'Some' b'names' b'follow' b'other' b'amounts'
    b'of' b'yellowish' b'expression' b'of' b'plantations' b'on' b'that' b'way' b'without' b'white' b',' b'and' b'to' b'assist' b'or' b'high' b'or' b'their' b'morel' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 244.9
    loss: 5.168
    elapsed time (seconds): 168.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  59.375 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
