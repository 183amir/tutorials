.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'excessive' b'race' b',' b'trawling' b'which' b'began' b'so' b'his' b'special' b'Franciscan' b'style' b',' b'seeing' b'overall' b'<unk>' b'subjects' b'.' b'Overall' b',' b'their'
    b'6' b'\xe2\x80\x93' b'50' b'shortly' b'left' b'Metallica' b"'s" b'third' b'to' b'maintain' b',' b'but' b'a' b'good' b'one' b'just' b'appeared' b'close' b'to' b'hands'
    b'.' b'On' b'the' b'south' b'side' b',' b'McElroy' b'derives' b'to' b'four' b'games' b',' b'and' b'tied' b'its' b'only' b'preparation' b'by' b'a' b'venom'
    b'unclear' b'if' b'they' b'blew' b'no' b'affair' b'.' b'If' b'when' b'finished' b',' b'there' b'makes' b'53' b'states' b'of' b'six' b'volumes' b',' b'be'
    b'spotted' b'to' b'go' b'in' b'a' b'variety' b'which' b'traded' b'about' b'15' b'%' b'of' b'his' b'children' b'.' b'The' b'placement' b'and' b'permits' b'Tech'
    b'as' b'recovered' b'and' b'electron' b'odoratus' b'favored' b'nationality' b'.' b'The' b'use' b'of' b'Jupiter' b',' b'challenging' b'three' b'scenes' b',' b'can' b'be' b'infrequently'
    b'resemble' b'lookouts' b',' b'and' b'then' b'responded' b'to' b'days' b'when' b'it' b'is' b'and' b'always' b'been' b'Maurice' b'.' b'In' b'riders' b',' b'coal'
    b'turned' b'to' b'President' b'instead' b'in' b'a' b'attempt' b'to' b'seek' b'instead' b'for' b'an' b'team' b'.' b'This' b'was' b'one' b'of' b'the' b'most'
    b'difficult' b'bright' b'season' b'in' b'any' b'parts' b'from' b'specie' b'.' b'When' b'it' b'is' b'a' b'breathing' b'commandments' b'or' b'the' b'locals' b',' b'they'
    b'received' b'it' b'to' b'have' b'serving' b'\xe2\x80\x94' b'who' b'is' b'rich' b'back' b'flocks' b'on' b'their' b'other' b'side' b'of' b'emergency' b'combat' b',' b'rather'
    b'than' b'them' b'.' b'The' b'Pawnee' b'@-@' b'academy' b'breaks' b'for' b'.' b'He' b'looks' b'only' b'by' b'Isle' b'and' b'down' b'to' b'he' b'may'
    b'eat' b'the' b'bouncers' b',' b'and' b'it' b'is' b'in' b'that' b'eye' b',' b'although' b'somewhat' b'daro' b'by' b'other' b'systems' b',' b'because' b'of'
    b'the' b'player' b'can' b'be' b'effective' b'.' b'<eos>' b'Much' b'of' b'the' b'money' b'have' b'effects' b'from' b'different' b'power' b'species' b'events' b',' b'such'
    b'as' b'<unk>' b'(' b'<unk>' b')' b',' b'and' b'<unk>' b',' b'but' b'consumed' b'on' b'a' b'pose' b'of' b'fuel' b'bitter' b'stability' b'for' b'<unk>'
    b'.' b'Its' b'sticks' b'in' b'<unk>' b'is' b'common' b'that' b'barely' b'wide' b',' b'and' b'when' b'Danielle' b'Pouw' b'was' b'doing' b'to' b'organization' b'into'
    b'equivalent' b'similar' b'to' b'that' b'22' b'(' b'<unk>' b')' b'.' b'<eos>' b'Another' b'convention' b',' b'expression' b',' b'is' b'my' b'punching' b'or' b'item'
    b',' b'as' b'they' b'control' b',' b'involved' b'for' b'the' b'same' b'time' b'as' b'a' b'attendants' b'.' b'<eos>' b'Power' b'use' b'herself' b'of' b'their'
    b'patrons' b'of' b'males' b',' b'however' b',' b'mobbing' b'associating' b',' b'around' b'young' b'milestones' b',' b'once' b'features' b'that' b'they' b'are' b'inconclusive' b'by'
    b'any' b'other' b'normally' b'.' b'Once' b'this' b'may' b'be' b'fun' b',' b'they' b'surprisingly' b'necessary' b',' b'when' b'they' b'can' b'gather' b'to' b'allow'
    b'a' b'courtyard' b'without' b'Conservation' b'or' b'Mineral' b'pores' b'(' b'rather' b'known' b'or' b'affect' b'not' b'they' b'exploit' b'for' b'a' b'characteristic' b')' b','
    b'and' b'to' b'be' b'looking' b'before' b'they' b'were' b'disappointed' b'.' b'<unk>' b'plants' b'toward' b'an' b'incomplete' b'figure' b'of' b'cushion' b'backstory' b'is' b'depicted'
    b'to' b'be' b'made' b'or' b'along' b'it' b'.' b'While' b',' b'due' b'to' b'naked' b',' b'American' b',' b'fly' b',' b'to' b'devoid' b'which'
    b'indicate' b'it' b'was' b'Petit' b"'s" b'strong' b'origin' b'.' b'Tennyson' b'\xe2\x80\x99' b's' b'Guitar' b'hooves' b'was' b'aimed' b'with' b'its' b'reason' b'.' b'It'
    b'donated' b'thought' b'to' b'be' b'their' b'specific' b'grandfather' b'because' b'it' b'is' b'a' b'reason' b'to' b'produce' b'that' b'facts' b'"' b'like' b'special' b'or'
    b'only' b'group' b'of' b'Ceres' b'"' b'.' b'These' b'types' b'of' b'types' b'are' b'arranged' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Gameplay' b'=' b'='
    b'<eos>' b'<eos>' b'The' b'name' b'and' b'promote' b'very' b'dark' b'parasite' b'were' b'a' b'natural' b'planet' b'(' b'<unk>' b'figure' b'state' b')' b'.' b'It'
    b'is' b'commonly' b'known' b'to' b'attract' b'in' b'fifteenth' b'Ireland' b',' b'black' b',' b'yellow' b',' b'and' b'venomous' b'ceremonies' b',' b'such' b'as' b'creating'
    b'hosts' b'that' b'<unk>' b',' b'with' b'parliaments' b'European' b'character' b',' b'at' b'<unk>' b'.' b'<eos>' b'Therefore' b',' b'other' b'lovers' b'are' b'onion' b','
    b'Eurasian' b',' b'<unk>' b',' b'pathway' b',' b'etc' b',' b'or' b'Irish' b'with' b'predators' b'of' b'embryonic' b'Word' b'.' b'As' b'such' b',' b'the'
    b'attendant' b'concludes' b'a' b'role' b'or' b'60' b'positional' b'bias' b'per' b'year' b'.' b'<unk>' b'or' b'non' b'@-@' b'having' b'originated' b'for' b'Catholic' b'birds'
    b',' b'with' b'21' b'salvos' b',' b'and' b'horizon' b'trees' b',' b'thus' b'with' b'less' b'once' b'disturbed' b'.' b'Common' b'cells' b'may' b'have' b'uses'
    b'high' b'damage' b',' b'but' b'that' b'they' b'do' b'as' b'they' b'can' b'be' b'set' b'ill' b'.' b'However' b',' b'and' b'their' b'all' b'consecutive'
    b'differs' b'in' b'pursuit' b',' b'they' b'were' b'larger' b'in' b'shape' b',' b'"' b'appointments' b'"' b'Giving' b'dry' b'differences' b'between' b'feeding' b'two' b'hours'
    b'(' b'equivalent' b'to' b'Best' b'identified' b'or' b'non' b'\xe2\x80\x93' b'six' b'minutes' b'regain' b'by' b'groups' b',' b'I' b'yet' b'exist' b'in' b'the' b'ice'
    b'calls' b'.' b')' b'impatient' b'easy' b'slopes' b'form' b'ranges' b'by' b'incompleteness' b'somewhere' b'to' b'that' b'of' b'crevice' b'(' b'wing' b'Uist' b')' b'.'
    b'<eos>' b'The' b'kakapo' b'sodium' b'MSF' b'produced' b'it' b'in' b'1623' b'.' b'The' b'appearance' b'and' b'Titan' b'material' b'of' b'the' b'late' b'New' b'Zealand'
    b'vernacular' b'flocks' b'in' b'both' b'similar' b'gender' b'species' b'(' b'it' b'found' b'God' b'indicates' b'that' b'they' b'were' b'Viola' b'stretched' b'so' b'serialized' b'as'
    b'"' b'neither' b'even' b'confinement' b'"' b')' b'.' b'In' b'response' b'to' b'Miley' b'<unk>' b'of' b'leptophylla' b',' b'a' b'side' b'of' b'<unk>' b'"'
    b'flower' b'"' b'Listed' b',' b'marked' b'power' b'altar' b'ICP' b',' b'along' b'an' b'partial' b'resource' b'for' b'its' b'smooth' b',' b'indicating' b'a' b'tree'
    b'Calendar' b'into' b'a' b'inexperience' b'should' b'be' b'<unk>' b'.' b'<unk>' b'<unk>' b'has' b'Dunham' b'in' b'textiles' b',' b'or' b'as' b'a' b'Puritan' b'viper'
    b'.' b'It' b'was' b'introduced' b'by' b'The' b'book' b'as' b'well' b',' b'and' b'galaxies' b'increases' b'for' b'the' b'Old' b'<unk>' b'kakapo' b'of' b'the'
    b'powder' b'.' b'This' b'bird' b'is' b'supported' b'as' b'they' b'give' b'into' b'other' b'or' b'<unk>' b'authors' b'.' b'In' b'eastern' b'2005' b',' b'or'
    b'that' b'mediate' b'the' b'common' b'species' b'of' b'passports' b'has' b'shown' b',' b'providing' b'they' b'may' b'gain' b'a' b'chemical' b'audience' b',' b'retained' b'small'
    b'numerous' b'other' b'birds' b',' b'despite' b'examples' b'of' b'prey' b'.' b'They' b'continues' b'into' b'the' b'<unk>' b'rally' b',' b'when' b'they' b'were' b'seen'
    b'the' b'window' b'@-@' b'<unk>' b',' b'with' b'Corey' b',' b'Cave' b',' b'Smith' b',' b'Jupiter' b',' b'Burn' b',' b'radioactive' b',' b'Mrs.' b'Rory'
    b'Gervais' b')' b',' b'and' b'Innovation' b'<unk>' b'forests' b'were' b'all' b'300' b'hours' b'old' b'.' b'Two' b'affect' b'languages' b'meals' b'and' b'brood' b'betaine'
    b'are' b'covered' b'by' b'aggressive' b'demons' b'and' b'the' b'somewhat' b'scrapped' b'under' b'their' b'parent' b'appearance' b'.' b'They' b'providing' b'in' b'common' b'tobacco' b','
    b'that' b'are' b'carved' b',' b'as' b'they' b'terms' b'are' b'clerestory' b'.' b'<eos>' b'finisher' b'tendons' b'proved' b'stinkhorn' b',' b'to' b'grow' b'after' b'they'
    b'were' b'diverted' b'to' b'red' b'proteins' b',' b'often' b'even' b'protective' b'them' b'.' b'It' b'stands' b'so' b'hard' b',' b'when' b'some' b'of' b'these'
    b'species' b'may' b'be' b'backwards' b',' b'though' b'themselves' b'explicitly' b'recommended' b'to' b'<unk>' b'.' b'When' b'the' b'night' b',' b'they' b'were' b'usually' b'a'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.7
    loss: 5.168
    elapsed time (seconds): 148.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  13.310 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
