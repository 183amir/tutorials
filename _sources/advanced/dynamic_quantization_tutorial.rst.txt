.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'/' b'EMI' b'<unk>' b'flat' b'place' b'or' b'in' b'on' b'1961' b',' b'due' b'to' b'Friedrich' b'tackle' b'<unk>' b',' b'where' b'.' b'Conversations' b'adopted'
    b'noted' b'whole' b'quests' b'was' b'dismissed' b'by' b'those' b'of' b'mud' b'are' b'terrestrial' b'.' b'Consequently' b',' b'it' b'is' b'often' b'regarded' b'as' b'<unk>'
    b',' b'constant' b'<unk>' b',' b'eaten' b'their' b'works' b'at' b'the' b'19th' b'@-@' b'century' b'backgrounds' b'and' b'<unk>' b'Sari' b'sect' b'.' b'We' b'wrote'
    b'that' b'the' b'flag' b'run' b'is' b'linked' b'on' b'power' b'before' b'shown' b'(' b'a' b'single' b'Peziza' b'proton' b')' b'.' b'<eos>' b'The' b'kakapo'
    b'begins' b'the' b'earth' b'to' b'God' b'of' b'his' b'own' b'species' b'and' b'Cornic' b',' b'and' b'suggest' b'a' b'small' b'essay' b'for' b'Banksia' b'!'
    b'mischievous' b'herbivorous' b'(' b'English' b')' b'.' b'The' b'British' b'bowler' b"'s" b'Weekly' b'is' b'an' b'<unk>' b'of' b'the' b'Tampa' b'Representatives' b'.' b'<eos>'
    b'Northern' b'Ireland' b'became' b'known' b'on' b'she' b'will' b'provide' b'television' b'wet' b'@-@' b'slip' b'triangulation' b',' b'while' b'Bernis' b'may' b'be' b'classified' b'as'
    b'President' b'esterase' b'!' b'.' b'<unk>' b'of' b'different' b'magical' b'methods' b'occur' b'by' b'the' b'Republic' b'of' b'Ireland' b'and' b'<unk>' b',' b'and' b'these'
    b'crushed' b'Christians' b'were' b'not' b'killed' b'.' b'<eos>' b'Local' b'cricket' b'military' b'colonies' b'such' b'as' b'texts' b'were' b'widespread' b'about' b'400' b'%' b','
    b'which' b'found' b'fresh' b'workers' b'from' b'birds' b'that' b'have' b'become' b'relevant' b'to' b'subject' b'to' b'Ceres' b'to' b'improve' b'<unk>' b',' b'taught' b'access'
    b'to' b'Australia' b'.' b'After' b'other' b'action' b',' b'pressures' b'occur' b'between' b'dictatorship' b'and' b'drier' b'birds' b'also' b'presents' b'them' b'to' b'be' b'represented'
    b'from' b'the' b'outreach' b'reworking' b'<unk>' b'.' b'In' b'treatise' b'group' b'in' b'a' b'close' b'story' b',' b'<unk>' b'@-@' b'cake' b'associating' b'seen' b'in'
    b'Y' b'Counties' b',' b'aged' b'Spain' b'through' b'the' b'Anglo' b'@-@' b'<unk>' b'area' b';' b'<unk>' b'Behaviour' b'is' b'bony' b',' b'<unk>' b'and' b'headdress'
    b'from' b'the' b'choir' b'.' b'The' b'oak' b'City' b'is' b'known' b'by' b'assemble' b'beliefs' b'to' b'suggest' b'.' b'In' b'diameter' b',' b'it' b'is'
    b'at' b'least' b'one' b'dirty' b'long' b'for' b'developing' b'rates' b'of' b'long' b'institutions' b'and' b'native' b'networks' b'.' b'When' b'there' b'are' b'little' b'evidence'
    b'that' b'this' b'bird' b'feed' b'for' b'pre' b'groups' b'for' b'eight' b'finalists' b',' b'purportedly' b'it' b'can' b'be' b'<unk>' b'or' b'lasts' b'to' b'move'
    b'.' b'These' b'studies' b'point' b'by' b'<unk>' b'sea' b'nests' b'exclude' b'their' b'nests' b'of' b'people' b',' b'has' b'a' b'food' b'Bormanis' b'.' b'If'
    b'he' b'<unk>' b'Raghuveer' b'<unk>' b'is' b'why' b'it' b'is' b'exhausted' b'atoms' b'applying' b'on' b'a' b'variety' b'of' b'APL' b'that' b'may' b'be' b'of'
    b'theoretically' b',' b'so' b'them' b'is' b'bent' b',' b'such' b'while' b'this' b'may' b'soon' b'satisfy' b'any' b'other' b'bird' b'with' b'their' b'nature' b'.'
    b'<eos>' b'(' b'potential' b')' b'has' b'been' b'supported' b'as' b'many' b'birds' b',' b'with' b'wide' b'pre' b'@-@' b'well' b'depicted' b'back' b'to' b'the'
    b'eggs' b'or' b'<unk>' b'them' b'.' b'Over' b'one' b'literally' b'is' b'very' b'short' b',' b'but' b'it' b'was' b'derived' b'into' b'food' b'that' b'supernova'
    b'it' b'represented' b'or' b'Highbury' b'.' b'Another' b'technique' b'unlikely' b'energy' b'by' b'low' b'vehicle' b',' b'some' b'pitfalls' b'crashed' b'with' b'.' b'Here' b','
    b'expecting' b'Doyle' b"'s" b'formation' b'in' b'Europe' b',' b'only' b'a' b'transfer' b'on' b'a' b'wide' b'summer' b'that' b'the' b'kakapo' b'takes' b'their' b'local'
    b'predators' b'after' b'development' b',' b'they' b'are' b'open' b'.' b'As' b'they' b'are' b'quite' b'parallel' b'to' b'young' b'ones' b',' b'they' b'identify' b'presentation'
    b'disrupting' b'<unk>' b'parts' b'of' b'the' b'bird' b'.' b'Once' b'the' b'matter' b'of' b'comparison' b'to' b'wedding' b',' b'these' b'had' b'long' b'killed' b'save'
    b'storms' b'such' b'as' b'grazing' b'or' b'<unk>' b'.' b'The' b'engraving' b'cannot' b'have' b'dense' b'.' b'Even' b'they' b'were' b'either' b'different' b',' b'better'
    b'species' b'of' b'proteins' b'were' b'able' b'to' b'produce' b',' b'composed' b'on' b'each' b'other' b'.' b'There' b'are' b'also' b'implying' b'fewer' b'dun' b'supply'
    b'of' b'Ceres' b'in' b'which' b'recreated' b'.' b'It' b'has' b'an' b'male' b'pet' b'display' b',' b'and' b'incensed' b'it' b'.' b'<eos>' b'In' b'TFG'
    b',' b'a' b'parrots' b',' b'<unk>' b',' b'is' b'comparing' b'by' b'plaques' b'to' b'trees' b'.' b'<eos>' b'Unlike' b'some' b'other' b'birds' b'always' b'tended'
    b'to' b'be' b'accompanied' b'by' b'seater' b',' b'they' b'were' b'distinguished' b'by' b'M.' b'RNA' b'.' b'These' b'flocks' b'help' b'troublesome' b'tricolour' b',' b'therefore'
    b'pillow' b'during' b'their' b'parrots' b',' b'which' b'feed' b'upon' b'longer' b'vulnerable' b'to' b'<unk>' b'.' b'They' b'lived' b'in' b'Gielgud' b'and' b'vast' b'thunderstorms'
    b'can' b'indicate' b'against' b'below' b'the' b'way' b'.' b'They' b'feels' b'mainly' b'booms' b'and' b'accommodate' b'their' b'poor' b'nest' b',' b'and' b'banquet' b'under'
    b'modern' b'forests' b'may' b'be' b'analyzed' b'.' b'A' b'neck' b'of' b'archaeologists' b'about' b'such' b'value' b'have' b'them' b',' b'not' b'because' b'they' b'are'
    b'simple' b'.' b'The' b'Romanesque' b'reliable' b'angular' b'starling' b'list' b',' b'has' b'its' b'olfactory' b'or' b'calls' b',' b'<unk>' b'R\xc3\xa9union' b',' b'considered' b'this'
    b'animal' b',' b'should' b'listen' b'to' b'civilizations' b'due' b'to' b'low' b'circumstances' b',' b'or' b'Nationalist' b'hyaline' b'.' b'Alternatively' b',' b'it' b'are' b'common'
    b',' b'and' b'the' b'solar' b'starling' b'of' b'executing' b'hurt' b'male' b'Natal' b'.' b'<eos>' b'In' b'the' b'2010' b'United' b'States' b',' b'it' b'suggests'
    b'that' b'there' b'are' b'many' b'more' b'than' b'38' b'men' b'weapon' b'the' b'Sticks' b'because' b'it' b'was' b'unclear' b'.' b'This' b'will' b'have' b'understood'
    b'them' b'so' b'time' b',' b'such' b'as' b'<unk>' b'or' b'minerals' b'.' b'Other' b'thus' b'rarely' b'seem' b'to' b'occur' b',' b'before' b'they' b'<unk>'
    b'young' b'expression' b'.' b'These' b'equal' b'spots' b'to' b'may' b'prepare' b'by' b'it' b'however' b',' b'identified' b'by' b'fossil' b'feed' b'and' b'leukemic' b'leaves'
    b'across' b'<unk>' b'.' b'<eos>' b'Common' b'starlings' b'usually' b'adapted' b'or' b'into' b'a' b'total' b'transfer' b'rate' b'of' b'$' b'15' b'million' b'catalogues' b'.'
    b'In' b'the' b'1920s' b',' b'the' b'male' b'can' b'be' b'shorter' b'inside' b'their' b'specific' b'variation' b'between' b'<unk>' b',' b'causing' b'by' b'a' b'minimum'
    b'of' b'accurate' b'feeding' b'.' b'Once' b'there' b'first' b'may' b'be' b'difficult' b'to' b'eat' b'<unk>' b',' b'it' b'Accelerated' b'that' b'many' b'of' b'the'
    b'<unk>' b'or' b'predicament' b'.' b'1755' b'that' b'<unk>' b'through' b'cattle' b'inside' b'roughly' b'2' b'%' b'of' b'them' b'.' b'There' b'are' b'widespread' b'sawmill'
    b',' b'such' b'as' b'<unk>' b'as' b'it' b'cannot' b'be' b'stacked' b'.' b'Common' b'starlings' b'<unk>' b'pine' b'to' b'<unk>' b'1783' b'when' b'their' b'large'
    b'social' b'dogs' b'is' b'organized' b'by' b'seeing' b'greater' b'areas' b'.' b'Thus' b',' b'they' b'are' b'able' b'to' b'be' b'recorded' b'.' b'Another' b'species'
    b'may' b'be' b'repelled' b'equipment' b'.' b'No' b'attention' b'are' b'difficult' b',' b'and' b'the' b'other' b'vegetation' b'officers' b'were' b'experimentally' b'and' b'descriptions' b'seconds'
    b'or' b'the' b'breeding' b'species' b',' b'by' b'this' b'time' b'.' b'Therefore' b',' b'if' b'there' b'are' b'linked' b'on' b'air' b',' b'they' b'were'
    b'always' b'able' b'to' b'be' b'@-@' b'brown' b'.' b'At' b'the' b'beginning' b'of' b'the' b'irregular' b'island' b',' b'some' b'first' b'going' b'to' b'be'
    b'tasked' b'or' b'juveniles' b'.' b'These' b'Moreover' b'seen' b'on' b'the' b'west' b'hand' b'from' b'more' b'missing' b'activity' b',' b'but' b'they' b'invented' b'parallel'
    b'to' b'direction' b'apart' b'as' b'a' b'spots' b'of' b'exposure' b'to' b'many' b'individuals' b'.' b'A' b'path' b'in' b'any' b'other' b'pieces' b'are' b'toxicity'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 235.3
    loss: 5.168
    elapsed time (seconds): 150.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  32.509 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
