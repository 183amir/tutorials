.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Hollywood' b'.' b'A' b'sense' b'that' b'Walpole' b'led' b'enjoyed' b'and' b'banned' b'at' b'least' b'16' b'mph' b'(' b'68' b'km' b'/' b'h' b')'
    b',' b'in' b'Steam' b',' b'later' b'as' b'<unk>' b'and' b'on' b'August' b'2' b',' b'2003' b'.' b'<eos>' b'In' b'1911' b',' b'it' b'was'
    b'assigned' b'to' b'being' b'killed' b'by' b'their' b'body' b'for' b'several' b'months' b'disclosed' b'an' b'immediate' b'season' b',' b'a' b'alliance' b'with' b'Han' b'typhoon'
    b'to' b'sleep' b'elsewhere' b'in' b'prey' b',' b'Benny' b'\xe1\x83\xa1' b',' b'2015' b',' b'and' b'South' b'Carolina' b'.' b'The' b'Anglesey' b',' b'lifelong' b'and'
    b'Indian' b'gestation' b',' b'also' b'formerly' b'developed' b'in' b'1991' b'.' b'chieftain' b'is' b'a' b'farmer' b'with' b'a' b'wide' b'divisions' b'to' b'other' b'flagpole'
    b'fascinating' b',' b'and' b'it' b'immediately' b'natural' b'spiders' b'for' b'<unk>' b',' b'mostly' b'open' b'food' b',' b'instead' b'of' b'the' b'latitude' b"'s" b'governmental'
    b'lyrics' b',' b'leads' b'to' b'between' b'end' b'and' b'annexed' b'Australia' b'from' b'spored' b',' b'maneuver' b'sites' b',' b'EASA' b'currents' b',' b'drugs' b','
    b'government' b',' b'Flint' b'and' b'gold' b'.' b'Keith' b'coastal' b'batches' b'of' b'Australia' b',' b'mainly' b'hawks' b',' b'2002' b',' b'accurately' b',' b'Courts'
    b',' b'sometimes' b'swinging' b'iodine' b',' b'Turnbull' b'Families' b'on' b'statehood' b'.' b'Though' b',' b'then' b',' b'they' b'were' b'unique' b'even' b'in' b'temperate'
    b'years' b'.' b'Lisa' b'is' b'greatly' b'even' b'damaged' b'.' b'There' b'is' b'a' b'900' b'@-@' b'vast' b'diet' b',' b'by' b'<unk>' b',' b'spreading'
    b'to' b'other' b'universe' b'.' b'In' b'sections' b'of' b'nesting' b'from' b'central' b'being' b'given' b'infection' b'that' b'the' b'<unk>' b"'s" b'behaviour' b'stretch' b'address'
    b'when' b'they' b"'re" b'uncommon' b'to' b'another' b'date' b'.' b'In' b'the' b'latter' b'39' b'@.@' b'7' b'@-@' b'46' b'%' b'of' b'the' b'team'
    b',' b'they' b'vomiting' b'its' b'S.C.' b',' b'although' b'Locke' b'behind' b'colonisation' b'of' b'any' b'bird' b'.' b'In' b'1797' b',' b'different' b',' b'which'
    b'may' b'quickly' b'indicate' b'of' b'an' b'conforming' b'or' b'<unk>' b'when' b'there' b'have' b'decoration' b'cannot' b'disrupt' b'other' b'trees' b'between' b'patriotism' b'and' b'simultaneously'
    b'support' b'.' b'It' b'is' b'inferred' b'in' b'turboprop' b'large' b'head' b'size' b'.' b'In' b'the' b'second' b'minutes' b',' b'times' b'prerogatives' b'Qinzong' b'raided'
    b'to' b'northern' b'soil' b'by' b'DNA' b'signs' b'of' b'dun' b'birds' b',' b'as' b'either' b'exit' b'white' b'faces' b'down' b'hurt' b'compartments' b'he' b'are'
    b'<unk>' b'in' b'<unk>' b',' b'and' b'well' b'as' b'the' b'regions' b'related' b'to' b'<unk>' b',' b'which' b'were' b'lost' b'in' b'several' b'areas' b'.'
    b'They' b'can' b'have' b'been' b'hinted' b'in' b'Ireland' b',' b'close' b'him' b'until' b'this' b'period' b'they' b'also' b'fought' b'into' b'the' b'downstream' b'form'
    b'rather' b'than' b'.' b'For' b'example' b',' b'the' b'long' b'eye' b'as' b'to' b'the' b'family' b',' b'while' b'facial' b'images' b'have' b'changed' b'before'
    b'breed' b'.' b'A' b'few' b'generally' b'trapped' b'intruders' b'make' b'three' b'hundred' b'sexual' b'starling' b',' b'as' b'up' b'the' b'kakapo' b'around' b'over' b'one'
    b'lights' b',' b'and' b'as' b'it' b'becomes' b'visible' b',' b'they' b'are' b'realism' b'that' b'the' b'invasive' b'starling' b'turns' b'into' b'its' b'conflict' b'.'
    b'Some' b'common' b'starlings' b'were' b'introduced' b'for' b'a' b'variety' b'of' b'<unk>' b'tube' b'over' b'pale' b',' b'when' b'most' b'significant' b'females' b'have' b'proceeded'
    b'call' b'mainly' b',' b'and' b'also' b'practically' b'low' b'numbers' b'and' b'even' b'broods' b'.' b'elk' b'and' b'courting' b'bodies' b',' b'they' b'are' b'played'
    b'by' b'migratory' b'neutrons' b'<unk>' b'<unk>' b'.' b'<eos>' b'Females' b'are' b'commonly' b'different' b',' b'composed' b'when' b'it' b'nests' b'occurs' b'and' b'resembles' b'long'
    b'Pliny' b',' b'they' b'may' b'be' b'Unionist' b'.' b'Furthermore' b',' b'females' b'were' b'usually' b'performed' b'near' b'into' b'<unk>' b'such' b'as' b'<unk>' b'and'
    b'river' b'etymology' b',' b'rather' b'than' b'when' b'they' b'"' b'<unk>' b'and' b'branched' b'"' b'by' b'prey' b'by' b'channel' b'direction' b'and' b'fewer' b'short'
    b'impoverished' b'rooms' b'using' b'persistent' b'females' b'(' b'frustrating' b'their' b'poor' b'and' b'400' b'bulk' b')' b',' b'gas' b'male' b'bones' b',' b'and' b'other'
    b'oars' b'.' b'Under' b'this' b'species' b'are' b'split' b'from' b'the' b'northern' b'binary' b'and' b'dark' b'@-@' b'use' b',' b'outside' b'<unk>' b',' b'1891'
    b',' b'open' b',' b'<unk>' b'and' b'antiquarian' b'fir' b'.' b'He' b'preferred' b'"' b'if' b'questioning' b'function' b'our' b'distinctive' b'inner' b'offices' b'at' b'about'
    b'one' b'possible' b'.' b'"' b'According' b'to' b'al' b'<unk>' b',' b'the' b'evidence' b'that' b'"' b'if' b'this' b'Furtado' b'moves' b'to' b'a' b'signal'
    b'<unk>' b'of' b'\xe2\x80\x93' b'2' b',' b'are' b'based' b'in' b'Saville' b'as' b'growing' b'as' b'\xe2\x80\x93' b'food' b'.' b'<unk>' b'<unk>' b'is' b'whereby' b'up'
    b'to' b'fly' b'for' b'it' b'.' b'"' b'Jim' b'passages' b'argued' b'that' b'"' b'change' b'.' b"'" b'It' b'is' b'longer' b'brutally' b'valid' b','
    b'and' b'used' b'just' b'of' b'some' b'of' b'the' b'smooth' b'abundant' b'or' b'white' b'mouse' b'from' b'strong' b'@-@' b'lived' b'and' b'even' b'able' b'to'
    b'be' b'a' b'spot' b'.' b'"' b'Playing' b'his' b'number' b'of' b'fungus' b'-' b'total' b'of' b'ribosomes' b'emphasized' b'her' b'sunset' b'of' b'8' b'@.@'
    b'5' b'mm' b'(' b'2' b'@.@' b'4' b'in' b')' b'long' b',' b'and' b'<unk>' b'behaviour' b';' b'both' b'more' b'kakapo' b'have' b'seen' b'2'
    b'hours' b',' b'can' b'generate' b'to' b'partial' b'spot' b'.' b'Many' b'each' b'rate' b'Protein' b'(' b'9' b'%' b')' b'have' b'been' b'260' b'of'
    b'the' b'body' b'and' b'was' b'replaced' b'by' b'an' b'booms' b'between' b'Ceres' b'and' b'male' b',' b'and' b'the' b'first' b'residents' b'policemen' b'can' b'be'
    b'gone' b'northward' b'.' b'When' b'their' b'species' b'are' b'usually' b'upwards' b',' b'they' b'ruling' b'numerous' b'or' b'juvenile' b'droppings' b'.' b'Since' b'they' b'can'
    b'eliminate' b'pain' b',' b'which' b'they' b'can' b'<unk>' b'thrilling' b'effectiveness' b'and' b'sheep' b'as' b'those' b'are' b'purplish' b'.' b'<unk>' b'emergence' b'of' b'pale'
    b',' b'uppermost' b'nest' b',' b'or' b'<unk>' b'both' b'that' b'feathers' b'are' b'reinforced' b'.' b'When' b'they' b'find' b'raw' b'the' b'rhythm' b',' b'they'
    b'are' b'a' b'lining' b'of' b'the' b'narrow' b'gills' b',' b'because' b'others' b'may' b'still' b'be' b'assigned' b'to' b'more' b'or' b'two' b'Jos' b'acids'
    b'.' b'Because' b'they' b'are' b'comparable' b'to' b'no' b'intimate' b',' b'they' b'move' b'another' b'back' b'.' b'benefice' b'eat' b'bottom' b',' b'to' b'Berkovi\xc4\x87i'
    b',' b'but' b'immortal' b'hands' b',' b'suggest' b'it' b'tree' b'a' b'male' b',' b'heavy' b'to' b'kneeling' b'craft' b'.' b'Following' b'their' b'triumph' b'at'
    b'every' b'points' b',' b'they' b'are' b'of' b'linked' b'some' b'lush' b'native' b'without' b'dense' b'large' b'effects' b'.' b'But' b'they' b'find' b'female' b'into'
    b'faith' b',' b'some' b'of' b'the' b'names' b'have' b'occasionally' b'strongly' b'been' b'Daisy' b',' b'within' b'their' b'good' b'tone' b'.' b'Kreeft' b'could' b'be'
    b'killed' b',' b'situated' b'on' b'restored' b'to' b'the' b'large' b'populace' b'.' b'<eos>' b'athletes' b'Guy' b'Brown' b'envisaged' b'skepticism' b'out' b'to' b'prevent' b'they'
    b'are' b'married' b'until' b'very' b'human' b'sets' b',' b'even' b'although' b'their' b'chicks' b'may' b'be' b'doubts' b'for' b'Chesterfield' b'and' b'their' b'dogs' b'.'
    b'The' b'state' b',' b'or' b'comparisons' b'was' b'broadly' b'routinely' b',' b'and' b'have' b'various' b'companion' b'<unk>' b'.' b'readings' b'have' b'continue' b'to' b'employ'
    b'supplemented' b'to' b'calcium' b'down' b'surface' b'<unk>' b',' b'cats' b'<unk>' b',' b'and' b'entry' b'.' b'M.' b'Inari' b'is' b'also' b'unable' b'to' b'catch'
    b'migration' b'die' b'and' b'can' b'be' b'able' b'to' b'the' b'well' b'pressure' b'of' b'Ceres' b'or' b'mystery' b'.' b'B' b'language' b'have' b'confirmed' b'that'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.7
    loss: 5.168
    elapsed time (seconds): 151.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  22.852 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
