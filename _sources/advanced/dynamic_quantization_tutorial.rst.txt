.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'for' b'a' b'large' b'@-@' b'hitter' b'.' b'Once' b'editor' b'Joseph' b'Buchan' b'referred' b'to' b'as' b'one' b'of' b'the' b'highest' b'parts' b'who' b'loved'
    b'with' b'the' b'of' b'years' b'needed' b'in' b'<eos>' b'He' b'had' b'affairs' b'into' b'a' b'pointed' b'distance' b'with' b'the' b'headpiece' b'colt' b',' b'background'
    b'grew' b'Dies' b'Jewish' b'bass' b',' b'participated' b'as' b'with' b'other' b'wife' b'Live' b',' b'colonised' b'rub' b'into' b'the' b'<unk>' b'grade' b'(' b'<unk>'
    b'Dramatic' b')' b',' b'a' b'yarder' b'9' b':' b'00' b'@.@' b'7' b'in' b')' b',' b'an' b'prolific' b'<unk>' b'(' b'Australian' b')' b','
    b'book' b'first' b'Loves' b'wisdom' b'(' b')' b'were' b'1' b'degrees' b'like' b'in' b'178' b',' b'14' b'fatal' b'USD' b')' b',' b'and' b'use'
    b'(' b'effect' b')' b'and' b'bowls' b'203' b'arches' b'and' b'8' b'(' b'1200' b'Southwestern' b')' b'.' b'Local' b'legs' b'arise' b'between' b'2' b'@.@'
    b'50' b'females' b'on' b'Robert' b'Jie' b'in' b'Phoenix' b'during' b'Andros' b',' b'resulting' b'on' b'five' b'birds' b'.' b'The' b'male' b'is' b'being' b'a'
    b'planet' b'city' b',' b'and' b'has' b'a' b'cold' b'breeding' b'formula' b'.' b'This' b'indicates' b'that' b'a' b'bird' b'was' b'in' b'the' b'forward' b'c4'
    b',' b'but' b'they' b'really' b'<unk>' b'had' b'aggressively' b'showed' b'these' b'mountains' b'if' b'it' b'is' b'revealed' b',' b'merchant' b'or' b'it' b'is' b'associated'
    b'when' b'therefore' b'above' b'the' b'pool' b'.' b'Small' b'faces' b'in' b'maturity' b'(' b'2O' b')' b'within' b'48' b'\xe2\x80\x93' b'21' b'\xe2\x80\x94' b'2' b'\xc2\xb0'
    b'hemp' b'(' b'22' b'\xe2\x80\x93' b'17' b'to' b'24' b'cm' b')' b'a' b'length' b'of' b'5' b'@.@' b'4' b'lb' b'(' b'10' b'\xe2\x80\x93' b'10'
    b'/' b'2' b'@.@' b'45' b'in' b')' b'.' b'When' b'it' b'nayav\xc4\x81da' b'is' b'apparent' b'but' b'them' b'.' b'<eos>' b'In' b'the' b'United' b'Kingdom'
    b',' b'the' b'kakapo' b'leverage' b'down' b'venues' b'.' b'According' b'to' b'his' b'large' b'size' b',' b'it' b'is' b'a' b'large' b'bird' b'of' b'an'
    b'grey' b'Tabash' b'calls' b'who' b'would' b'be' b'deeply' b'so' b'different' b'from' b'its' b'<unk>' b'Township' b'.' b'The' b'<unk>' b'is' b'dark' b',' b'providing'
    b'releasing' b'first' b'was' b'consumed' b'using' b'ship' b'.' b'It' b'is' b'possible' b'that' b'Ceres' b'had' b'faced' b'only' b'a' b'catalogue' b'mating' b'male' b'.'
    b'The' b'radial' b'male' b'is' b'running' b'for' b'a' b'stream' b'of' b'any' b'time' b'.' b'transport' b'of' b'these' b'female' b'state' b'municipalities' b'were' b'the'
    b'19th' b'dozen' b'NASA' b'eggs' b'under' b'them' b',' b'rather' b'or' b'non' b'@-@' b'produce' b'.' b'Upon' b'Dominican' b'galericulata' b',' b'longest' b'pressings' b','
    b'by' b'a' b'source' b'of' b'Episcopal' b'hemmemas' b',' b'often' b'survive' b'to' b'evolves' b'with' b'ribosomal' b'birds' b'.' b'<eos>' b'In' b'refineries' b',' b'many'
    b'integration' b'are' b'sighted' b'to' b'enter' b'their' b'push' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Small' b'description' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'Individuals' b'threatened' b'over' b'departing' b'and' b'more' b'<unk>' b'similarity' b'contain' b'Perry' b'in' b'old' b'areas' b',' b'which' b'forcing' b'significant' b'evidence' b'.' b'Early'
    b'of' b'his' b'nests' b',' b'a' b'distinct' b'alkali' b'presence' b'traditionally' b'only' b'occupies' b'even' b',' b'staying' b'a' b'high' b'adult' b'eye' b'that' b'is'
    b'derived' b'.' b'<unk>' b'to' b'be' b"'s" b'longest' b'or' b'define' b'prey' b'@-@' b'crystallography' b'game' b',' b'kind' b'exposures' b'with' b'tawny' b'birds' b','
    b'fruit' b'amounts' b'between' b'males' b',' b'Cl' b'metallic' b'purposes' b',' b'<unk>' b'and' b'microtubules' b'.' b'In' b'the' b'efforts' b'of' b'a' b'female' b'off'
    b'by' b'Apostolid\xc3\xa8s' b',' b'they' b'are' b'both' b'small' b'.' b'The' b'lines' b'measured' b'acres' b'to' b'be' b'kept' b'into' b'for' b'<unk>' b'.' b'The'
    b'female' b'become' b'internal' b'in' b'extra' b'terms' b',' b'such' b'as' b'<unk>' b',' b'reaction' b',' b'or' b'clump' b'up' b'more' b'than' b'aboard' b'measurements'
    b'.' b'They' b'touch' b'nearly' b'10' b'@.@' b'7' b'metres' b'(' b'3' b'@.@' b'4' b'km' b')' b'apart' b'old' b'plates' b'until' b'the' b'other'
    b'simultaneously' b',' b'grey' b'enclosed' b'.' b'Black' b'intermediate' b'that' b'predators' b'ever' b'feature' b'body' b'Letterman' b',' b'before' b'about' b'42' b'black' b'residents' b','
    b'it' b'usually' b'utilizing' b'over' b'less' b'than' b'1' b'million' b'on' b'the' b'ground' b'.' b'It' b'is' b'known' b'on' b'12' b'@.@' b'8' b'years'
    b',' b'5' b'modification' b')' b',' b'with' b'23' b'lb' b'.' b'In' b'a' b'basic' b'tooth' b',' b'the' b'kakapo' b'initially' b'heralded' b'their' b'average'
    b'movement' b'as' b',' b'down' b'as' b'such' b'.' b'Schedeen' b'Raghavanka' b'this' b'name' b'is' b'hanging' b'in' b'each' b'other' b'.' b'It' b'makes' b'one'
    b'total' b'of' b'3' b'@.@' b'5' b'in' b'(' b'4' b'@.@' b'2' b'loss' b')' b',' b'with' b'any' b'other' b',' b'namely' b'females' b'.'
    b'Along' b'with' b'<unk>' b'flanked' b'by' b'metropolis' b',' b'planets' b'does' b'not' b'present' b'up' b'Richard' b'"' b'literary' b'Hood' b'"' b'.' b'According' b'to'
    b'slice' b'the' b'chicks' b',' b'Ceres' b'lays' b'her' b'axis' b'each' b'time' b',' b'and' b'silver' b'<unk>' b',' b'Reborn' b',' b'is' b'used' b'as'
    b'disrupt' b'layers' b'of' b'the' b'depths' b'of' b'sortie' b'of' b'sacrament' b'.' b'Because' b'it' b'is' b'Juana' b'Warner' b'sealing' b'kakapo' b',' b'she' b'receives'
    b'his' b'birthplace' b'as' b'a' b'saint' b'.' b'He' b'begins' b'as' b'"' b'almost' b'stars' b'to' b'really' b'back' b'a' b'bit' b'"' b',' b'with'
    b'birds' b'as' b'European' b',' b'H' b',' b'or' b'other' b'mythology' b',' b'as' b'small' b'threads' b'do' b'not' b'compete' b'around' b'several' b'.' b'<eos>'
    b'Drawing' b',' b'Ireland' b'has' b'a' b'female' b'animal' b',' b'with' b'the' b'breeding' b'lines' b'as' b'hooves' b'figure' b',' b'and' b'fine' b'workshops' b'of'
    b'stupa' b'position' b'.' b'These' b'proteins' b'must' b'be' b'distinguished' b'by' b'control' b'outside' b'their' b'goods' b';' b'while' b'many' b'are' b'already' b'easily' b'there'
    b',' b'they' b'wish' b'to' b'express' b'each' b'other' b',' b'but' b'it' b'will' b'be' b'very' b'smaller' b'.' b'At' b'the' b'other' b'when' b'it'
    b'is' b'generally' b',' b'she' b'periodically' b'crazy' b'increased' b'a' b'crown' b'and' b'becomes' b'venom' b'who' b'filled' b'the' b'ground' b',' b'and' b'the' b'other'
    b'doubts' b'will' b'question' b'pure' b'chicks' b'.' b'Each' b'unfavorable' b'Catholic' b'male' b'drive' b'called' b'up' b'by' b'Steiner' b'avoided' b'electron' b'in' b'intent' b'.'
    b'One' b'imagery' b'species' b'are' b'convective' b'among' b'maturity' b',' b'where' b'they' b'migrate' b'to' b'a' b'female' b'of' b'wood' b'Barbie' b'and' b'stalk' b'carrying'
    b',' b'The' b'outside' b',' b'occupy' b'it' b'with' b'their' b'vegetation' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'An'
    b'study' b'of' b'Bombay' b'a' b'number' b'of' b'transits' b'at' b'King' b'(' b'typically' b'distributed' b')' b',' b'eyelids' b'Tell' b'Hughes' b',' b'<unk>' b','
    b'limb' b'<unk>' b',' b'\xce\xbaB' b',' b'<unk>' b'and' b'intermediate' b'W' b'.' b'Other' b'leave' b'species' b'killed' b'by' b'both' b'mercy' b'are' b'composed' b'for'
    b'equal' b'architectural' b'mothers' b'.' b'Through' b'expects' b',' b'opposite' b'the' b'lattice' b'crosses' b'or' b'bell' b'\xe2\x80\x93' b'enclosed' b'or' b'even' b'spread' b'<unk>' b'or'
    b'food' b'Aspects' b',' b'also' b'for' b'it' b'four' b'.' b'Others' b'produces' b'morale' b'with' b'the' b'violated' b'variants' b'to' b'composition' b'question' b'estate' b'soil'
    b'or' b'beginning' b'such' b'an' b'female' b',' b'the' b'other' b'facial' b'starling' b'who' b'easily' b'<unk>' b'.' b'While' b'a' b'bronze' b'appears' b',' b'they'
    b'are' b'looking' b'to' b'be' b'lives' b'from' b'both' b'or' b'laughing' b'they' b'pass' b'<unk>' b'.' b'<eos>' b'I.' b'K.' b'<unk>' b'disappearing' b'in' b'a'
    b'laboratory' b'using' b'him' b'by' b'its' b'legs' b'before' b'which' b'female' b'females' b'are' b'introduced' b'for' b'reasons' b'under' b'mitosis' b',' b'which' b'strongly' b'give'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 242.2
    loss: 5.168
    elapsed time (seconds): 161.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  49.288 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
