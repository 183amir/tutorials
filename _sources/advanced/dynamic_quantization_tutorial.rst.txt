.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'further' b'offerings' b'with' b'them' b'to' b'select' b'each' b'die' b'and' b'advance' b'their' b'production' b'.' b'This' b'has' b'allowed' b'most' b'of' b'these' b'Formula'
    b'&' b'B' b'Clamp' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'first' b'verse' b'of' b'the' b'drug' b'planet'
    b'is' b'deep' b'introduced' b'in' b'North' b'African' b',' b'football' b',' b'alter' b'<unk>' b'(' b'AMNH' b'Homeland' b')' b'and' b'a' b'top' b'to' b'all'
    b'species' b'pitched' b'in' b'height' b',' b'and' b'spacecraft' b'in' b'a' b'elevation' b'occurred' b'with' b'colors' b'of' b'1250' b'the' b'existence' b'of' b'its' b'continuous'
    b'territories' b'.' b'The' b'multiplied' b'rotation' b'should' b'be' b'mostly' b'<unk>' b'as' b'a' b'adjoining' b'complexes' b'.' b'<eos>' b'white' b'significance' b'used' b'sue' b'on'
    b'a' b'Christian' b'open' b',' b'done' b',' b'and' b'the' b'symbol' b'of' b'domed' b'as' b'well' b'.' b'Later' b',' b'many' b'of' b'these' b'have'
    b'a' b'greater' b',' b'preventing' b'super' b',' b'such' b'as' b'the' b'wind' b':' b'"' b'"' b'I' b'Why' b"'t" b'sir' b'us' b'with' b'me'
    b'!' b'Now' b'get' b'a' b'year' b',' b'and' b'an' b"'" b'race' b',' b'albeit' b'expound' b'with' b'his' b'teacher' b'people' b'Days' b'in' b'for'
    b'instance' b',' b'and' b'he' b'are' b'...' b'a' b'sincere' b'slightly' b'slightly' b'politics' b'ago' b'"' b'.' b'When' b'But' b'in' b'the' b'end' b'of'
    b'he' b'the' b'slavery' b'then' b'engaged' b'on' b'the' b'ground' b',' b'they' b'<unk>' b'.' b'For' b'example' b'Alkan' b',' b'white' b',' b'natural' b','
    b'and' b'insects' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Plot' b'=' b'=' b'<eos>' b'<eos>' b'The' b'race' b'is' b'long' b'developed' b'by' b'oar' b'spots'
    b'.' b'Seven' b'farms' b'notes' b'the' b'camera' b'means' b'is' b'great' b'that' b'any' b'of' b'these' b'accounts' b',' b'such' b'as' b'its' b'wild' b'2nd'
    b'characteristics' b',' b'may' b'occupy' b'such' b'the' b'sternum' b'for' b'a' b'good' b'eye' b',' b'along' b'by' b'head' b',' b'the' b'Passion' b'<unk>' b'Goeben'
    b'(' b'Old' b"'t" b'be' b'the' b'only' b'allegorical' b'weighing' b'with' b'their' b'two' b',' b'well' b'@-@' b'known' b'@-@' b'European' b'record' b')' b'and'
    b'is' b'a' b'remote' b'pharaoh' b'who' b'would' b'calculate' b'depending' b'in' b'an' b'female' b'.' b'Almost' b'known' b'online' b'has' b'found' b'good' b'characteristics' b','
    b'"' b'Ice' b'characteristics' b'"' b';' b'global' b'<unk>' b'depictions' b'of' b'Roches' b',' b'the' b'final' b'searching' b',' b'or' b'assistance' b'with' b'Oscar' b"'s"
    b'or' b'their' b'predecessor' b"'s" b'fear' b';' b'where' b'they' b'affects' b'themselves' b'.' b'It' b'also' b'Ceres' b'fog' b'into' b'other' b'subspecies' b',' b'leaves'
    b'an' b'drum' b'mass' b',' b'and' b'limiting' b'that' b'"' b'Vasco' b'"' b'(' b'Procyon' b'speaks' b')' b'.' b'According' b'to' b'Weinberg' b'Nine' b'goes'
    b'from' b'species' b'that' b'they' b'preceded' b'food' b',' b'is' b'pretty' b'powerful' b'.' b'Each' b'female' b'consisted' b'of' b'tenuous' b'inhabitants' b'<unk>' b'recitation' b'during'
    b'the' b'riders' b',' b'where' b'they' b'have' b'disturbed' b'the' b'astronomical' b'effect' b'it' b'.' b'Water' b'current' b'regalis' b'form' b'that' b'his' b'six' b'resemble'
    b'.' b'The' b'gills' b'are' b'reminiscent' b'of' b'these' b'CdS' b'.' b'Several' b'more' b'specific' b'examples' b'should' b'be' b'developed' b'by' b'dark' b'losses' b'cycle'
    b'.' b'In' b'Certainly' b',' b'or' b'the' b'Riela' b'of' b'familiar' b',' b'they' b'are' b'declines' b',' b'by' b'a' b'greater' b'CGW' b',' b'covered'
    b'by' b'white' b'crisis' b'/' b'especially' b'to' b'exposure' b'and' b'the' b'<unk>' b'edge' b',' b'but' b'they' b'attain' b'dissatisfied' b'elements' b'such' b'as' b'their'
    b'clothing' b'taking' b'leading' b'down' b'.' b'When' b'they' b'were' b'more' b'frequent' b',' b'it' b'is' b'much' b'deep' b'privacy' b'than' b'wisdom' b'.' b'<eos>'
    b'There' b'also' b'suggests' b'that' b'"' b'the' b'interstellar' b'dark' b'is' b'a' b'program' b'"' b'.' b'<eos>' b'Mycena' b'bernissartensis' b'has' b'been' b'made' b'that'
    b'Ceres' b'"' b'flies' b'almost' b'the' b'Latin' b'to' b'Library' b';' b'"' b'over' b'high' b'times' b'.' b'art' b'extract' b'populations' b'from' b'Us' b'or'
    b'<unk>' b'database' b'are' b'placed' b'in' b'spite' b'of' b'inscriptions' b'.' b'Irish' b'ancient' b'common' b'tools' b'consist' b'are' b'more' b'dense' b'.' b'When' b'the'
    b'property' b'will' b'have' b'a' b'motion' b',' b'where' b'it' b'is' b'a' b'small' b'1807' b'practice' b',' b'they' b'are' b'always' b'<unk>' b'.' b'<eos>'
    b'Elephanta' b'wireless' b'of' b'<unk>' b'reddish' b'numbers' b'can' b'surrounding' b'be' b'written' b'by' b'dark' b'lines' b'.' b'The' b'type' b'is' b'most' b'Funerary' b'when'
    b'others' b'will' b'synthesize' b'time' b'and' b'have' b'practically' b'.' b'Males' b'represent' b'pain' b'per' b'record' b'for' b'the' b'bastn\xc3\xa4site' b';' b'Union' b'or' b'<unk>'
    b'do' b'regulator' b'.' b'Due' b'to' b'the' b'same' b'external' b'spots' b',' b'Ceres' b'burying' b'steamboats' b'preserved' b'by' b'<unk>' b'various' b'types' b'of' b'those'
    b'able' b'to' b'find' b',' b'as' b'darker' b'when' b'Mulder' b'leaves' b'prepared' b'with' b'God' b',' b'but' b'some' b'racing' b'effects' b'consist' b'simply' b'fully'
    b'easily' b'stay' b'about' b'that' b'.' b'For' b'bare' b',' b'O' b'Denard' b'and' b'green' b'Eurasia' b'dams' b'are' b'often' b'found' b'<unk>' b'.' b'For'
    b'example' b',' b'no' b'form' b'already' b'has' b'standardized' b'ministers' b'to' b'have' b'their' b'place' b'when' b'I' b'floors' b'.' b'These' b'farms' b'have' b'thus'
    b'been' b'observed' b'maat' b'despite' b'cells' b',' b'flanked' b'by' b'females' b',' b'<unk>' b'cortex' b',' b'<unk>' b'legitimize' b',' b'fires' b',' b'fields' b','
    b'Wax' b',' b'and' b'the' b'figure' b'.' b'"' b'carving' b'"' b'has' b'published' b'no' b'results' b',' b'fishing' b'square' b'or' b'long' b'sudden' b','
    b'he' b'can' b'have' b'be' b'associated' b'by' b'Successful' b'rams' b',' b'especially' b',' b'with' b'other' b'males' b'control' b'in' b'suitable' b'their' b'Korean' b'abundance'
    b'.' b'Smaller' b'definite' b'food' b'subspecies' b'during' b'a' b'participation' b'on' b'the' b'ground' b'require' b'a' b'safe' b'milk' b'or' b'nest' b',' b'clockwise' b','
    b'white' b',' b'or' b'enthusiasts' b'under' b'.' b'The' b'condition' b'between' b'S.' b'sexpunctatus' b'describes' b'Asomtavruli' b'to' b'rise' b',' b'showing' b'circular' b'view' b'with'
    b'larger' b'etymology' b',' b'including' b'fluctuated' b'.' b'fingers' b'may' b'be' b'found' b'by' b'birds' b'of' b'archipelago' b'domains' b"'s" b'regard' b'.' b'According' b'to'
    b'DNA' b',' b'an' b'female' b'tree' b',' b'they' b'clearly' b'steadily' b'argon' b'and' b'touched' b'to' b'speak' b'of' b'its' b'cause' b'.' b'In' b'the'
    b'same' b'year' b'they' b'appears' b'problems' b',' b'its' b'older' b'common' b'power' b',' b'and' b'wings' b'to' b'indicate' b'it' b'exposure' b',' b'giving' b'"'
    b'prediction' b'<unk>' b'?' b'"' b'and' b'"' b'<unk>' b'"' b'calls' b'by' b'which' b'her' b'ability' b'whether' b'they' b'must' b'eat' b'his' b'throat' b'species'
    b'.' b'A' b'common' b'envelope' b'of' b'scales' b'described' b'thousands' b'of' b'guitar' b',' b'they' b'are' b'not' b'identified' b'as' b'"' b'professionalisation' b'Wreath' b'"'
    b'.' b'More' b'confusion' b'do' b'not' b'play' b'their' b'<unk>' b'leaders' b'.' b'<eos>' b'<eos>' b'=' b'=' b'<unk>' b'=' b'=' b'<eos>' b'<eos>' b'Conservation'
    b',' b'acknowledging' b'in' b'natural' b'form' b',' b'or' b'rock' b',' b'for' b'example' b'(' b'fill' b'to' b'locally' b',' b'or' b'Ides' b')' b','
    b'suggests' b'that' b'humans' b'Die' b'Manners' b'.' b'The' b'task' b'may' b'be' b'derived' b'from' b'Gharapuri' b'like' b'that' b'shrubs' b'behind' b'the' b'toughest' b'warts'
    b':' b'No' b'children' b'in' b'the' b'envelope' b',' b'Illinois' b',' b'and' b'<unk>' b':' b'investment' b'van' b'S.' b'R.' b'!' b'!' b'(' b'Robert'
    b'v.' b')' b',' b'father' b"'s" b'female' b',' b'Aeris' b'away' b'and' b'q' b'.' b'When' b'a' b'collision' b'in' b'snakes' b',' b'their' b'UK'
    b'behaviour' b',' b'and' b'at' b'Males' b',' b'is' b'among' b'highly' b'five' b'enzymes' b'killed' b'to' b'gather' b'down' b'.' b'No' b'female' b'feathers' b'like'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 221.3
    loss: 5.168
    elapsed time (seconds): 148.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.056 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
