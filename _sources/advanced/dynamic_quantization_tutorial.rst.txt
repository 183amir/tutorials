.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'Mata' b',' b'Illinois' b',' b'and' b'S\xc3\xa3o' b'Palmer' b'of' b'Hope' b';' b'both' b'known' b'recorded' b'by' b'<unk>' b',' b'Flemington' b'and' b'orchestra'
    b'were' b'Kishon' b"'s" b'developing' b'.' b'As' b'the' b'International' b'version' b"'s" b'people' b',' b'maritime' b'of' b'practice' b'spread' b'from' b'the' b'mannerisms' b'of'
    b'a' b'outer' b'starling' b',' b'then' b'becomes' b'a' b'jurisdictions' b'to' b'reclaim' b'Wattles' b'.' b'<eos>' b'The' b'umpire' b'beads' b'won' b'a' b'accepted' b'architectural'
    b'character' b',' b'which' b'were' b'part' b'of' b'Somerset' b',' b'Doctor' b'(' b'2006' b')' b'and' b'Idaho' b'Day' b',' b'stationed' b'there' b'in' b'1997'
    b'.' b'The' b'fewest' b'to' b'be' b'born' b'by' b'the' b'ironclad' b'to' b'increase' b'the' b'forum' b'occupied' b'by' b'neared' b'a' b'Crash' b'River' b'music'
    b'range' b'out' b',' b'performing' b'the' b'Common' b'East' b'book' b',' b'and' b'inducted' b'a' b'run' b'alongside' b'Pulaski' b'Hospital' b'in' b'2010' b'.' b'It'
    b'was' b'also' b'to' b'attack' b'other' b'games' b'atop' b'money' b'named' b'Parliament' b',' b'unloading' b'adaptations' b'<unk>' b',' b'Michael' b'S.' b'Fitzgerald' b',' b'and'
    b'Daniel' b'<unk>' b'Gilbert' b'anti' b'.' b'Heather' b'Symphony' b'Erik' b'Clark' b'became' b'descendant' b'of' b'Crash' b'Leading' b'Leonard' b'Williams' b',' b'James' b'Jr' b','
    b'and' b'"' b'Phantom' b'of' b'I' b'Corporations' b'"' b',' b'many' b'of' b'top' b'players' b'are' b'suspended' b'on' b'close' b'stages' b'that' b'broadcast' b'in'
    b'Western' b'Africa' b'.' b'By' b'the' b'beginning' b'of' b'September' b',' b'it' b'presented' b'that' b'the' b'strike' b'were' b'learned' b'the' b'fortunes' b'of' b'how'
    b'Ceres' b'wrote' b'that' b'"' b'...' b'a' b'year' b'elicited' b',' b'are' b'short' b',' b'not' b'happens' b'to' b'psychological' b'spiders' b'<unk>' b',' b'meaning'
    b'"' b'Air' b'80s' b',' b'and' b'Barracks' b',' b'in' b'which' b'it' b'should' b'be' b'moved' b'to' b'symbolize' b'adoration' b'and' b'defaced' b'has' b'Die'
    b'"' b"'" b'groundwater' b'Crystal' b'"' b'under' b'"' b'hygroscopic' b',' b'Bolliger' b'\xe2\x80\x94' b'know' b'"' b'and' b'"' b'Divorce' b'crimes' b'"' b',' b'which'
    b'would' b'be' b'affected' b'by' b'<unk>' b',' b'<unk>' b'knighted' b'Movies' b'.' b'Keys' b'also' b'says' b'generally' b':' b'no' b'younger' b'moves' b'in' b'70'
    b'games' b'on' b'21' b'January' b'2005' b',' b'after' b'restaurants' b'were' b'sent' b'into' b'a' b'<unk>' b'return' b'after' b'royalties' b'.' b'The' b'R' b'Francisco'
    b'State' b'wanna' b'was' b'planned' b'to' b'collect' b'the' b'planet' b'to' b'avoid' b'Alex' b'Little' b',' b'which' b'is' b'avoidance' b'making' b'the' b'first' b'year'
    b'.' b'Another' b'all' b'crew' b'of' b'<unk>' b'is' b'one' b'which' b'are' b'seen' b'from' b'August' b'20' b'to' b'apartment' b'a' b'final' b'year' b'.'
    b'<eos>' b'Meuvaines' b'names' b',' b'such' b'as' b'<unk>' b',' b'sometimes' b'ninja' b'as' b'"' b'wind' b'people' b'"' b',' b'briefly' b'supported' b'over' b'15'
    b'years' b'in' b'all' b'the' b'PlayStation' b'3' b'Squadron' b'.' b'South' b'Korea' b'plants' b'surfaced' b'further' b'versions' b'at' b'the' b'County' b'MTV' b'Principality' b'('
    b'How' b',' b'tears' b')' b',' b'which' b'is' b'passed' b'by' b'the' b'europium' b'R' b'Bang' b'Power' b',' b'to' b'anthologies' b'tour' b'about' b'the'
    b'Church' b'of' b'academia' b'.' b'Two' b'PopMart' b'summarised' b'/' b'People' b'(' b'41' b'biochemical' b'72' b'\xc2\xb0' b'guns' b'Sovetskaya' b'216' b')' b',' b'a'
    b'composite' b'<unk>' b'critically' b',' b'is' b'very' b'talented' b'for' b'the' b'ground' b'as' b'they' b'are' b'a' b'blown' b'shirt' b'.' b'Since' b'its' b'extensions'
    b'eat' b'owner' b',' b'or' b'pass' b'up' b'as' b'fewer' b'doctrines' b'and' b'powerful' b'male' b',' b'suppressed' b'strong' b'feathers' b'such' b'as' b'<unk>' b'and'
    b'other' b'is' b'<unk>' b'close' b'to' b'mating' b'.' b'At' b'that' b'time' b',' b'totaling' b'it' b'might' b'reveal' b'fascination' b',' b'they' b'are' b'"'
    b'establishing' b'significantly' b'came' b'"' b'.' b'However' b',' b'Trudy' b'carried' b'the' b'<unk>' b'<unk>' b'<unk>' b'bearded' b'Measures' b'of' b'its' b'light' b',' b'not'
    b'immediately' b'creates' b'less' b'.' b'Several' b'prey' b'director' b'probes' b'surpassed' b'it' b'as' b'"' b'<unk>' b';' b'milking' b'the' b'free' b'era' b'of' b'nonsense'
    b'birds' b'to' b'be' b'ly' b'and' b'there' b'have' b'around' b'300' b'in' b'robots' b'on' b'their' b'inside' b'.' b'"' b'<eos>' b'Other' b'it' b'met'
    b'historian' b'Barrier' b'Bang' b"'s" b'specimen' b'or' b'Arbor' b'Agency' b'is' b'having' b'R\xc3\xa9union' b"'" b'distribution' b'.' b'In' b'the' b'first' b'image' b',' b'it'
    b'has' b'also' b'high' b'wings' b'.' b'There' b'are' b'many' b'species' b'of' b'pattern' b'or' b'<unk>' b',' b'common' b',' b'cane' b'@-@' b'soluble' b','
    b'sago' b',' b'Mitsuda' b'and' b'empowered' b',' b'which' b'uses' b'their' b'male' b'@-@' b'shaped' b'Zhang' b'romance' b'and' b'may' b'understand' b'predator' b'actors' b'to'
    b'protect' b'long' b'radiation' b',' b'and' b'they' b'are' b'difficult' b'to' b'sing' b',' b'when' b'noisy' b'acids' b'are' b'able' b'to' b'describe' b'that' b'it'
    b'could' b'be' b'associated' b'.' b'As' b'they' b'do' b'see' b'when' b'it' b'turns' b'off' b',' b'when' b'plants' b'could' b'even' b'"' b'distance' b'its'
    b'control' b',' b'there' b"'s" b'great' b'measuring' b'perfect' b'people' b'.' b'The' b'limit' b'of' b'here' b'cautioned' b'I' b'have' b'considering' b'fine' b'interest' b'to'
    b'any' b'other' b',' b'then' b'much' b'<unk>' b'due' b'to' b'AML' b'experience' b'its' b'nuclei' b'and' b'create' b'they' b'skills' b'against' b'a' b'lignotuber' b','
    b'so' b'almost' b'sometimes' b'long' b'simply' b'understood' b'Hecht' b"'s" b'kakapo' b'rather' b'productions' b'.' b'The' b'most' b'able' b'to' b'be' b'interesting' b'to' b'tell'
    b'about' b'20' b'm' b'(' b'2' b'@.@' b'9' b'in' b')' b'.' b'Another' b'possible' b'gameplay' b'are' b'sitting' b'to' b'be' b'known' b'.' b'At'
    b'the' b'start' b'of' b'a' b'night' b'of' b'potential' b'hours' b'stands' b',' b'an' b'bucket' b'portion' b'of' b'its' b'supernatural' b'pet' b'licensing' b'after' b'the'
    b'Beatles' b'wished' b'to' b'end' b'advantage' b'to' b'manage' b'like' b'very' b'ones' b'and' b'centuries' b',' b'ornaments' b'of' b'preventing' b',' b'and' b'on' b'high'
    b',' b'to' b'be' b'a' b'mild' b'argument' b'.' b'"' b'As' b'even' b'leading' b'to' b'the' b'other' b'feeding' b'order' b',' b'Ceres' b'drew' b'more'
    b'than' b'150' b'minutes' b'old' b'for' b'lambs' b'by' b'him' b',' b'or' b'422' b'back' b'to' b'contents' b'as' b'causing' b'first' b'evidence' b'that' b'they'
    b'can' b'be' b'incapable' b'of' b'his' b'pupils' b'.' b'Aside' b'by' b'Patriarch' b'F.' b'Cinquemani' b'the' b'composition' b'of' b'Crash' b'in' b'2006' b',' b'the'
    b'kakapo' b'authored' b'or' b'currents' b',' b'and' b'which' b'may' b'be' b'represented' b'.' b'<eos>' b'Starting' b',' b'arsenic' b'increases' b'when' b'those' b'Zygoballus' b'stated'
    b'collected' b'its' b'final' b'diameter' b'and' b'option' b'through' b'the' b'social' b'Moritzian' b'yards' b'lands' b'.' b'Even' b'Vandernoot' b'gryllotalpa' b'helps' b'they' b'were' b'trying'
    b'to' b'leave' b'Mexico' b'to' b'assist' b'how' b'they' b'were' b'forced' b'to' b'speak' b'.' b'In' b'association' b',' b'The' b'head' b'of' b'kakapo' b'such'
    b'as' b'usually' b'judged' b'Banksia' b'water' b',' b'found' b'it' b'among' b'no' b'example' b'.' b'<unk>' b',' b'conducts' b'by' b'<unk>' b'<unk>' b',' b'a'
    b'long' b'one' b'hetman' b'ballistic' b'organisation' b'formed' b'to' b'protect' b'food' b',' b'showing' b'rats' b"'" b'<unk>' b'roommate' b'<unk>' b',' b'Drop' b'alone' b','
    b'Heaven' b'grass' b',' b'al' b'Doran' b'stalks' b'and' b'Moravia' b'legislation' b'were' b'aided' b'by' b'jointly' b'.' b'There' b'have' b'accumulated' b'portray' b'products' b'on'
    b'books' b',' b'both' b'give' b'on' b'100' b'use' b',' b'reducing' b'twenty' b'or' b'13' b'males' b'remaining' b'on' b'to' b'maximum' b',' b'or' b'wrong'
    b'the' b'male' b'.' b'times' b'cockroaches' b'the' b'chicks' b'Richard' b'gait' b',' b'improvements' b'feature' b'pain' b'and' b'complement' b'aspects' b'from' b'any' b'other' b'functional'
    b'events' b'.' b'However' b',' b'even' b'first' b'usually' b'spread' b'roughly' b'or' b'sound' b'at' b'their' b'homes' b',' b'<unk>' b'.' b'If' b'snakes' b'starts'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.1
    loss: 5.168
    elapsed time (seconds): 169.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  55.088 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
