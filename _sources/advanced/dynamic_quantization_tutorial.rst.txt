.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Kenyon' b'?' b'"' b'The' b'compilation' b'ought' b'up' b'<unk>' b'on' b'another' b'day' b'.' b'"' b'<eos>' b'Much' b'person' b'debated' b'early' b'the' b'Virgin'
    b'in' b'Norse' b'waters' b',' b'issued' b'to' b'he' b'forced' b'it' b'to' b'observe' b'a' b'injuries' b',' b'making' b'with' b'Oswald' b"'s" b'flash' b'character'
    b'in' b'his' b'wish' b',' b'Melbourne' b',' b'and' b'the' b'attack' b'of' b'available' b'person' b'.' b'His' b'religious' b'decision' b'is' b'late' b'Roman' b'or'
    b'at' b'its' b'hands' b'.' b'For' b'the' b'Jews' b'to' b'take' b'a' b'atmosphere' b'about' b'a' b'secondary' b'Tamil' b'coin' b'Hall' b',' b'1787' b'would'
    b'feed' b'on' b'to' b'Yukizuki' b'money' b'in' b'the' b'Kurt' b'Garden' b'Historic' b'Site' b'"' b'<unk>' b'"' b'print' b'.' b'It' b'scream' b'uncertain' b'throughout'
    b'the' b'theme' b'and' b'villagers' b'recorded' b'in' b'their' b'jacket' b',' b'the' b'experiment' b'Greg' b'iodide' b'(' b'died' b'planning' b')' b',' b'Highbury' b'.'
    b'Some' b'examples' b'did' b'not' b'used' b'an' b'pair' b'of' b'rhizomorphs' b'.' b'Main' b',' b'marked' b'by' b'absence' b',' b'they' b'form' b'Gofraid' b'will'
    b'be' b'used' b'for' b'them' b'to' b'be' b'distributed' b'.' b'A' b'two' b'@-@' b'year' b'deity' b'begins' b'for' b'the' b'Swedish' b'<unk>' b'River' b'which'
    b'alkaline' b'experiments' b'of' b'Historian' b'Nils' b'<unk>' b'recorded' b'for' b'the' b'latter' b'was' b'<unk>' b'.' b'The' b'other' b'subspecies' b'were' b'allowed' b'to' b'say'
    b'in' b'<unk>' b',' b'occasionally' b'or' b'only' b'no' b'<unk>' b',' b'comparing' b'hundreds' b'at' b'the' b'fourth' b'@-@' b'point' b'@-@' b'seam' b'Sea' b'resort'
    b'in' b'April' b',' b'when' b'on' b'a' b'night' b'of' b'3' b'.' b'The' b'<unk>' b'made' b'it' b'all' b'down' b'as' b'the' b'ligand' b'Defensive'
    b'rhythms' b'consume' b'across' b'"' b'the' b'church' b'of' b'1819' b'400' b'on' b'that' b'of' b'the' b'couple' b'from' b'Hindu' b'Baroque' b'cake' b'and' b'was'
    b'reserved' b'to' b'God' b'erosion' b'"' b'.' b'By' b'2000' b',' b'has' b'a' b'black' b'method' b'of' b'five' b'manna' b'leaders' b',' b'starting' b'off'
    b'to' b'a' b'permanent' b'sum' b'conducted' b'by' b'any' b'other' b'urban' b'tales' b'who' b'crushed' b'a' b'11th' b'@-@' b'century' b'brownish' b'reception' b'in' b'his'
    b'unrest' b'in' b'the' b'fighting' b'.' b'He' b'also' b'says' b':' b'"' b'No' b'large' b'species' b'never' b'lying' b'on' b'them' b'which' b'room' b'.'
    b'"' b'Furthermore' b',' b'that' b'Peshkin' b'said' b'his' b'ROK' b'authority' b'has' b'a' b'"' b'1617' b'"' b'university' b',' b'rate' b'read' b'why' b'she'
    b'had' b'nothing' b'"' b'rectilinear' b'No.' b'lightning' b'weeks' b'"' b'immigrant' b'feelings' b'or' b'an' b'bad' b'parent' b'to' b'respawn' b'.' b'The' b'court' b'measures'
    b'is' b'derived' b'into' b'<unk>' b';' b'the' b'<unk>' b'is' b'small' b'part' b'of' b'Square' b'@-@' b'character' b'that' b'grabbed' b'their' b'boyfriend' b'Shiva' b"'s"
    b'condition' b'.' b'He' b'sees' b'kitsune' b'with' b'the' b'remaining' b'before' b'Hermann' b'subjects' b'can' b'be' b'killed' b'.' b'At' b'a' b'moment' b'for' b'colonial'
    b'claim' b',' b'the' b'other' b'exposed' b'pursuers' b'Per\xc3\xb3n' b'was' b'expected' b'to' b'some' b'make' b'acyclic' b'art' b'obstructions' b'of' b'evil' b'examination' b'.' b'But'
    b'each' b'of' b'many' b'or' b'slow' b'roommate' b'takes' b'place' b',' b'after' b'having' b'similar' b'significant' b'enough' b'to' b'contribute' b'spaces' b'.' b'If' b'588th'
    b'Duarte' b'figure' b'it' b'is' b'one' b'of' b'the' b'specialized' b'sixteenth' b'behavior' b',' b'they' b'possess' b'like' b'just' b'heads' b'for' b'misunderstanding' b'or' b'connections'
    b'.' b'His' b'stress' b'on' b'them' b'of' b'his' b'Filmfare' b'and' b'ornithopods' b'had' b'exploitation' b'<unk>' b',' b'South' b'Australia' b',' b'and' b'other' b'marksman'
    b'.' b'This' b'states' b'contains' b'Jake' b'Worthing' b',' b'"' b'probably' b'reflects' b'up' b'into' b'thinking' b'"' b'a' b'phone' b'of' b'theft' b'view' b'of'
    b'45' b'%' b'.' b'His' b'father' b"'s" b'boyfriend' b'Benson' b'wrote' b'the' b'character' b'and' b'at' b'odds' b'for' b'an' b'short' b'appearance' b'.' b'He'
    b'also' b'read' b'with' b'an' b'rush' b'to' b'Earth' b',' b'at' b'the' b'village' b'of' b'Palmyra' b'(' b'<unk>' b')' b'to' b'Taylor' b'Rankin' b'('
    b'foxes' b')' b';' b'the' b'original' b'British' b'Crash' b'(' b'Love' b')' b'Under' b'the' b'ancient' b'author' b'and' b'Gehrig' b'companionship' b',' b'and' b'instead'
    b'that' b'another' b'conclusion' b'was' b'originally' b'strong' b'to' b'regulate' b'certain' b'books' b'.' b'A' b'confusion' b'ago' b"'s" b'vision' b'all' b'in' b'a' b'character'
    b'or' b'the' b'desired' b'text' b'can' b'be' b'<unk>' b'British' b'.' b'Some' b'royal' b'politicians' b'excelled' b'trapped' b'Lordship' b'for' b'a' b'goals' b'around' b'!'
    b'<unk>' b',' b'the' b'king' b'of' b'La' b'Leonard' b'<unk>' b'(' b'Op.' b'<unk>' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Geography' b'=' b'='
    b'<eos>' b'<eos>' b'Hornung' b"'s" b'henchmen' b'notably' b'in' b'treasure' b'spores' b',' b'some' b'as' b'to' b'be' b'physically' b'applied' b'over' b'traced' b'.' b'<eos>'
    b'Ceres' b'searched' b'about' b'a' b'black' b'film' b'of' b'the' b'Man' b',' b'giving' b'Pam' b'the' b'Glenn' b'"' b'<unk>' b'Knowledge' b'"' b',' b'suggesting'
    b'that' b'"' b'these' b'areas' b'<unk>' b'her' b'peer' b'and' b'Arab' b'<unk>' b';' b'can' b'I' b'say' b',' b'Hughes' b'hate' b'or' b'<unk>' b'Les'
    b'Yingtianfu' b'film' b'he' b'then' b'superficial' b'him' b'with' b'principally' b'as' b'a' b'generous' b'artificial' b'described' b'by' b'two' b'Per\xc3\xb3ns' b',' b'that' b'<unk>' b'doesn'
    b"'t" b'need' b'.' b'"' b'Key' b'<unk>' b'was' b'King' b'where' b'the' b'words' b'of' b'young' b'artists' b'have' b'choreographed' b'<unk>' b',' b'and' b'they'
    b'seldom' b'potentially' b'to' b'be' b'neither' b'fond' b'for' b'Giring' b'to' b'find' b'background' b'Scientology' b'effects' b'connected' b'.' b'After' b'most' b'of' b'these' b"'s"
    b'players' b'taken' b'on' b'Alkan' b"'s" b'family' b',' b'some' b'others' b'such' b'as' b'blooms' b',' b'who' b'is' b'absent' b'from' b'her' b'necks' b'crew'
    b'.' b'This' b'inferior' b'have' b'more' b'fertile' b'feelings' b'of' b'controlling' b'in' b'The' b'public' b'to' b'a' b'young' b'celebrations' b'.' b'<eos>' b'Following' b'landmines'
    b',' b'batsmen' b'expanded' b'his' b'wives' b'quests' b'of' b'the' b'Dubliners' b'.' b'When' b'it' b'is' b'likely' b'that' b'<unk>' b'do' b'not' b'have' b'<unk>'
    b'with' b'hack' b',' b'it' b'may' b'be' b'distinguished' b'.' b'The' b'iris' b'fox' b'is' b'this' b'\xc2\xb5m' b'unified' b'and' b'whether' b'it' b'is' b'discovered'
    b'that' b'it' b'is' b'possible' b'up' b'into' b'several' b'children' b'.' b'The' b'tortoise' b'however' b'at' b'once' b'of' b'eight' b'radioactive' b'breeds' b'he' b'is'
    b'bred' b'for' b'food' b'and' b'692' b'them' b'.' b'Co' b'@-@' b'gatherers' b'have' b"'t" b'be' b'fundamentally' b'<unk>' b'to' b'do' b'it' b'.' b'<eos>'
    b'In' b'his' b'autobiography' b'never' b'defenders' b',' b'except' b'Ravana' b',' b'Zhou' b'is' b'Weekly' b'and' b'<unk>' b',' b'both' b',' b'who' b'had' b'an'
    b'concentration' b'of' b'higher' b'dim' b'Faith' b'.' b'It' b'has' b'belonged' b'to' b'Inari' b'by' b'biases' b'of' b'<unk>' b',' b'returning' b'to' b'that' b'which'
    b'will' b'be' b'R\xc3\xa9union' b'for' b'Lombardi' b'to' b'rhyme' b'the' b'rituals' b'.' b'In' b'many' b'cases' b',' b'the' b'player' b'replies' b'this' b'king' b'is'
    b'connected' b'to' b'giving' b'"' b'Alec' b'has' b'there' b'is' b'that' b'I' b'are' b'no' b'place' b'"' b',' b'while' b'Fish' b'sees' b'her' b'solid'
    b'playing' b'relating' b'to' b'him' b'.' b'The' b'scathing' b'object' b'is' b'decent' b'320th' b'(' b'going' b'via' b'so' b'readers' b')' b'.' b'The' b'female'
    b'is' b'major' b'singing' b'(' b'to' b'do' b'get' b'.' b'<eos>' b'Units' b'e' b'Suggesting' b'are' b'unusual' b')' b'light' b'by' b'Brooks' b',' b'shell'
    b'gene' b'Catholicism' b',' b'a' b'U\xc3\xad' b'species' b'exactly' b'or' b'<unk>' b'.' b'The' b'common' b'female' b'are' b'present' b';' b'or' b'been' b'doing' b'that'
    b':' b'"' b'If' b'I' b'do' b'each' b'.' b'"' b'The' b'noisy' b'astronomer' b'-' b'Kit' b'is' b'waking' b'in' b'Act' b'.' b'<unk>' b'get'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 243.1
    loss: 5.168
    elapsed time (seconds): 172.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  1.206 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
