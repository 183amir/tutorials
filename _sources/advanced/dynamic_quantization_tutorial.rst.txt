.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'The' b'court' b'was' b'sent' b'up' b'on' b'January' b'26' b',' b'1995' b',' b'and' b'these' b'twenty' b'times' b'resulted' b'in' b'the' b'Fearless'
    b'Formation' b'.' b'The' b'Mexican' b'firm' b'was' b'only' b'<unk>' b'by' b'Orchart' b'<unk>' b'and' b'inflated' b'by' b'<unk>' b'O' b'One' b',' b'Little' b'City'
    b'as' b'Sawyer' b'.' b'In' b'the' b'second' b'half' b'of' b'Cross' b',' b'the' b'<unk>' b'confronted' b'with' b'runoff' b'Owen' b"'s" b'now' b'burning' b'and'
    b'dismissed' b'in' b'public' b'development' b'the' b'operation' b'watching' b'<unk>' b',' b'but' b'proposed' b'broadcasts' b'into' b'Hall' b'reach' b'by' b'Hsia' b'.' b'It' b'takes'
    b'10' b'points' b'in' b'a' b'hour' b'with' b'one' b'on' b'a' b'DVD' b'shots' b'called' b'within' b'long' b'to' b'encourage' b'lightly' b'reality' b'.' b'The'
    b'<unk>' b'to' b'change' b'has' b'requests' b'in' b'intensity' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Second' b'reception' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'county' b'ourebi' b',' b'a' b'city' b',' b'is' b'its' b'first' b'in' b'New' b'Zealand' b'and' b'was' b'created' b'in' b'1988' b'.' b'Layne'
    b'<unk>' b'from' b'this' b'time' b'was' b'noted' b'then' b'from' b'<unk>' b',' b'1940' b'.' b'Adam' b'wrote' b'toward' b'the' b'<unk>' b'Observatory' b'in' b'2008'
    b'.' b'During' b'the' b'2011' b'definition' b'of' b'series' b',' b'the' b'rest' b'of' b'the' b'series' b'initiated' b'Ceres' b'against' b'authors' b'terms' b',' b'and'
    b'based' b'on' b'speaking' b'tactics' b'by' b'unnecessary' b'sand' b'material' b'.' b'According' b'to' b'Robert' b'<unk>' b',' b'the' b'McLaren' b'wanted' b'to' b'attend' b'the'
    b'robed' b'isolation' b',' b'"' b'Ceres' b'who' b'have' b'important' b'Royce' b',' b'it' b"'s" b'.' b'[' b'most' b']' b'state' b',' b'I' b'emphasizes'
    b'the' b'totalitarian' b'sound' b'in' b'all' b'.' b'"' b'Consequently' b',' b'it' b'is' b'possible' b'on' b'a' b'game' b'of' b'New' b'Zealand' b'.' b'The'
    b'final' b'definition' b'of' b'the' b'court' b',' b'between' b'example' b'across' b'a' b'nearby' b'literary' b',' b'knocked' b'carried' b'downfall' b'from' b'13' b'pm' b'during'
    b'this' b'period' b',' b'and' b'it' b'is' b'possible' b'to' b'have' b'been' b'antithesis' b'and' b'living' b'on' b'her' b'side' b'end' b'.' b'The' b'expressed'
    b'cephalothorax' b'includes' b'about' b'half' b'of' b'more' b'than' b'11' b'%' b'(' b'1' b'%' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Commercial' b'life'
    b'=' b'=' b'<eos>' b'<eos>' b'Severe' b'Carolina' b'reported' b'sing' b'against' b'the' b'three' b'species' b'of' b'<unk>' b',' b'a' b'very' b'small' b'<unk>' b'Manikarnika'
    b'and' b'<unk>' b'circulated' b'after' b'"' b'new' b'"' b',' b'as' b'it' b'is' b'that' b'God' b'exposes' b'plans' b',' b'the' b'lowest' b'brood' b'plum'
    b'da' b'and' b'Squadron' b',' b'in' b'1999' b'.' b'<eos>' b'Irish' b'species' b'have' b'regularly' b'made' b'bear' b'them' b'on' b'a' b'airport' b'broad' b'jury'
    b'can' b'be' b'discovered' b'.' b'In' b'Australia' b',' b'it' b'is' b'eaten' b'by' b'Inti' b'in' b'English' b'(' b'\xe7\x81\xab\xe7\xa4\xae' b'.' b'Net' b':' b'<unk>'
    b')' b',' b'diatoms' b'(' b'topmost' b')' b',' b'Op.' b'eukaryotes' b',' b'chivo' b'(' b'Pinus' b'Bush' b')' b',' b'<unk>' b'(' b'1999' b'\xe2\x80\x93'
    b'2000' b')' b',' b'and' b'(' b'stealing' b')' b'.' b'Males' b'considers' b'disturbed' b'material' b'to' b'cover' b'penetration' b',' b'1866' b'standards' b'are' b'solely'
    b'in' b'recent' b'species' b'.' b'<eos>' b'objects' b'simply' b'receive' b'mixed' b'areas' b',' b'were' b'largely' b'used' b'to' b'proceed' b'.' b'No' b'significant' b'regard'
    b'were' b'also' b'Meng' b'.' b'Irish' b'with' b'the' b'fungus' b'did' b'not' b'begin' b'to' b'be' b'put' b'to' b'...' b'Union' b'in' b'become' b'fed'
    b'(' b'Lithuania' b')' b',' b'Stabilization' b'@-@' b'black' b'<unk>' b'that' b'overthrow' b'with' b'common' b'starlings' b'for' b'all' b'areas' b',' b'or' b'as' b'a'
    b'<unk>' b',' b'either' b'by' b'a' b'Irish' b'@-@' b'white' b'narrative' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Habitat' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'majority' b'of' b'kakapo' b'or' b'Taunton' b'is' b'fully' b'hostile' b',' b'combined' b'protein' b'and' b'aggressive' b',' b'with' b'"' b'instructing' b'fees' b'"'
    b',' b'attempting' b'to' b'have' b'been' b'found' b'that' b'roots' b'stimulated' b'curiosity' b'during' b'the' b'soil' b'.' b'A' b'common' b'ceremonial' b'conflict' b'showed' b'Cambridge'
    b'against' b'Valkyria' b'Bird' b',' b'West' b'Chariot' b',' b'Portland' b',' b'Queens' b'Adam' b'Bengal' b'.' b'[' b'when' b'Rao' b'began' b'his' b'refuge' b','
    b'it' b'goes' b'to' b'heaven' b'in' b'1789' b'.' b'<eos>' b'Whereas' b'availability' b'by' b'churches' b'through' b'their' b'collection' b'of' b'certain' b'sp' b',' b'<unk>'
    b',' b'flightless' b',' b'and' b'special' b'changes' b',' b'made' b'evolution' b'that' b'sticks' b'their' b'butter' b'between' b'birds' b',' b'while' b'much' b'more' b'male'
    b'Parisian' b'Cd' b'.' b'Later' b',' b'when' b'their' b'executioner' b'displays' b'the' b'melting' b'size' b'they' b'strongly' b'lives' b'and' b'items' b'of' b'prey' b'('
    b'i.e.' b',' b'it' b'has' b'no' b'prayers' b',' b'that' b'west' b'for' b'NY' b'Korean' b'flock' b'(' b'grout' b')' b'.' b'In' b'Homarus' b','
    b'ingestion' b'of' b'birds' b'include' b'each' b'rate' b'of' b'"' b'<unk>' b'"' b'than' b'a' b'distinct' b'lifestyle' b'.' b'No' b'of' b'these' b'are' b'short'
    b',' b'though' b'employ' b'a' b'investigation' b'saying' b'that' b'they' b'were' b'"' b'less' b'like' b'significant' b'by' b'way' b'across' b'Inn' b',' b'survive' b'when'
    b'we' b'hope' b'"' b'.' b'After' b'this' b'is' b'critical' b'accidental' b',' b'Ireland' b'is' b'the' b'subject' b'of' b'other' b'associated' b'audit' b'populations' b'during'
    b'a' b'harsh' b'painting' b'.' b'In' b'addition' b',' b'the' b'American' b'starling' b'and' b'miners' b'do' b'not' b'attract' b'eggs' b'to' b'rats' b'olive' b'similar'
    b'to' b'numerous' b'unsuccessful' b'populations' b'and' b'the' b'dry' b'technique' b'.' b'Common' b'image' b'cancelled' b'toxic' b'greats' b'and' b'<unk>' b'non' b'@-@' b'apricot' b'enemies'
    b'.' b'It' b'has' b'their' b'longer' b'actions' b'to' b'be' b'shown' b'by' b'Nederlands' b'radiation' b'and' b'1130' b'.' b'Males' b'usually' b'returns' b'to' b'basal'
    b',' b'<unk>' b',' b'capital' b'and' b'AC' b',' b'and' b'F.C.' b'process' b'include' b'higher' b',' b'moralitas' b',' b'<unk>' b',' b'emerging' b',' b'violated'
    b',' b'direct' b'and' b'eye' b'connections' b'.' b'The' b'misunderstanding' b'dating' b'a' b'breeding' b'neck' b',' b'and' b'cultivated' b'products' b'were' b'constantly' b'<unk>' b'.'
    b'Unlike' b'the' b'kakapo' b'symbiosis' b',' b'other' b'are' b'smooth' b',' b'whereas' b'Beginning' b'at' b':' b'25' b'and' b'18' b'@-@' b'minute' b'starlings' b','
    b'eight' b'other' b'membranes' b',' b'endemic' b'to' b'other' b'species' b',' b'extinct' b'moist' b'parrot' b'system' b',' b'resemble' b'ring' b'for' b'low' b'.' b'A'
    b'solution' b'may' b'the' b'average' b'to' b'hindlimbs' b'Annapolis' b'...' b'Main' b'or' b'captors' b'(' b'only' b'1' b'%' b',' b'2004' b')' b'are' b'handled'
    b'by' b'a' b'yellowish' b'drawbridge' b'of' b'two' b'identical' b'crops' b'which' b'opens' b',' b'more' b'than' b'10' b'million' b'cell' b'(' b'begin' b'or' b'being'
    b'lattice' b')' b'.' b'The' b'stem' b'are' b'masked' b',' b'the' b'earliest' b'three' b'or' b'at' b'a' b'stem' b'cents' b'.' b'This' b't1' b','
    b'LN' b'Smith' b',' b'Ceres' b',' b'<unk>' b',' b'<unk>' b',' b'inbound' b'the' b'head' b'1' b'years' b'but' b'best' b'with' b'an' b'30' b'@-@'
    b'metre' b',' b'and' b'descended' b'into' b'or' b'in' b'Missouri' b'.' b'Its' b'family' b'land' b'are' b'visible' b'from' b'Bet' b'administrative' b'points' b'.' b'With'
    b'original' b'nest' b'size' b',' b'of' b'sperm' b'prior' b'to' b'a' b'258' b'phenomenon' b',' b'objects' b'were' b'ready' b'to' b'be' b'the' b'ice' b'<unk>'
    b'right' b'or' b'tend' b'to' b'engage' b'more' b'man' b'for' b'other' b'starlings' b'.' b'subscription' b'Mycena' b'2' b'may' b'be' b'further' b'eaten' b'by' b'food'
    b',' b'Northumbrian' b',' b'<unk>' b',' b'<unk>' b'and' b'protein' b',' b'including' b'the' b'rainbands' b'production' b'.' b'The' b'pink' b'disbanding' b'is' b'described' b'as'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 210.4
    loss: 5.168
    elapsed time (seconds): 139.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  56.150 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
