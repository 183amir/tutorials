.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'in' b'fibres' b'.' b'For' b'example' b'175' b'times' b'after' b',' b'another' b'inscription' b'of' b'number' b'were' b'delays' b'and' b'his' b'nuts' b'opponents'
    b',' b'and' b'the' b'fact' b'after' b'Kama' b'-' b'Frank' b'him' b'was' b'also' b'changed' b'by' b'E.' b'Conan' b'St.' b'Dareus' b'.' b'<eos>' b'In'
    b'this' b'era' b'battle' b',' b'<unk>' b'pitches' b',' b'and' b'bearing' b'the' b'year' b'as' b'gamers' b'were' b'short' b'by' b'control' b',' b'but' b'was'
    b'adaptations' b'of' b'the' b'Composite' b'and' b'<unk>' b'halls' b'they' b'still' b'@-@' b'breakdown' b'since' b'Australia' b'.' b'As' b'not' b',' b'retired' b',' b'the'
    b'766th' b'delegation' b'is' b'referred' b'to' b'as' b'"' b'modification' b';' b'and' b'actively' b',' b'"' b'UN' b',' b'which' b'experience' b'the' b'pictures' b'of'
    b'his' b'companion' b'.' b'Much' b'other' b'principle' b'may' b'prefer' b'before' b'any' b'other' b'occasion' b',' b'mostly' b'given' b'a' b'manuscript' b'of' b'bombs' b'to'
    b'have' b'"' b'.' b'A' b'sort' b'belongs' b'on' b'her' b'side' b'may' b'be' b'<unk>' b',' b'which' b'was' b'reduced' b'.' b'"' b'In' b'<unk>'
    b',' b'the' b'script' b'Uyghurs' b'for' b'common' b'Mycologist' b'"' b'Bangaru' b'Life' b'"' b'extended' b'minimal' b'average' b'of' b'44' b'cm' b'(' b'2' b'@.@'
    b'4' b'in' b')' b'1216' b'and' b'the' b'Irish' b'Weather' b'stems' b'\xe2\x80\x94' b'which' b'are' b'being' b'spotted' b'.' b'By' b'has' b'five' b'small' b'pairs'
    b',' b'strip' b',' b'extant' b',' b'and' b'apricot' b'purposes' b',' b'can' b'be' b'defined' b'.' b'<eos>' b'A' b'monthly' b'Agaricales' b'estimate' b'of' b'servant'
    b'is' b'two' b'towards' b'that' b'planet' b',' b'and' b'is' b'more' b'endangered' b'.' b'In' b'1929' b',' b'Chen' b'do' b'not' b'be' b'published' b'or'
    b'likely' b'.' b'These' b'have' b'so' b'yet' b'been' b'less' b'decorated' b';' b'however' b',' b'they' b'are' b'looking' b'to' b'classify' b'or' b'duck' b'common'
    b'aspects' b'of' b'Ceres' b'until' b'the' b'producers' b"'" b'specific' b'culture' b'.' b'The' b'species' b'entered' b'over' b'one' b'other' b'non' b'@-@' b'Islamic' b'front'
    b'(' b'<unk>' b')' b';' b'The' b'toy' b'urban' b'bodies' b'responsible' b',' b'records' b'.' b'Others' b',' b'crossing' b'in' b'other' b'or' b'B' b'cultures'
    b',' b'is' b'severe' b'in' b'<unk>' b',' b'help' b'methodological' b'riding' b'across' b'any' b'enclosure' b"'s" b'breast' b'.' b'<eos>' b'In' b'the' b'19th' b'century'
    b',' b'more' b'than' b'five' b'stegosaurid' b'(' b'907' b')' b'will' b'be' b'considered' b'to' b'be' b'derived' b'into' b'<unk>' b'.' b'Stars' b',' b'more'
    b'important' b',' b'fewer' b'lines' b'are' b'sensitive' b',' b'often' b'cell' b'or' b'underwater' b'.' b'The' b'kakapo' b'primarily' b'of' b'just' b'quartered' b'was' b'then'
    b'used' b'.' b'the' b'mushroom' b'is' b'usually' b'unknown' b'.' b'The' b'common' b'starling' b'Venus' b'maintains' b'hollow' b'recreation' b'leaves' b'less' b'than' b'80' b'meters'
    b'(' b'4' b'in' b')' b'in' b'length' b',' b'which' b'could' b'be' b'dubious' b',' b'so' b'this' b'is' b'disturbed' b'by' b'move' b'.' b'This'
    b'has' b'four' b'gill' b'predators' b'each' b'bird' b',' b'so' b'The' b'kakapo' b'provides' b'place' b'on' b'more' b'powerful' b'females' b'ferry' b'trees' b'throughout' b'the'
    b'semi' b'@-@' b'Irish' b'bacteria' b',' b'it' b'seems' b'to' b'hold' b',' b'so' b'as' b'they' b"'m" b'picked' b'out' b',' b'<unk>' b'it' b'went'
    b'to' b'<unk>' b',' b'one' b'greatly' b'Kwame' b'it' b'.' b'competing' b',' b'they' b'do' b'not' b'begin' b'without' b'"' b'moving' b'drying' b'to' b'construct'
    b'slopes' b'except' b'their' b'particular' b'equatorial' b'<unk>' b'so' b'artistic' b',' b'which' b'are' b'very' b'powerful' b'.' b'"' b'Simultaneously' b'through' b'the' b'existing' b'starling'
    b',' b'with' b'the' b'animal' b',' b'this' b'concept' b'they' b'found' b'and' b'no' b'classification' b'to' b'represent' b'their' b'eye' b'.' b'They' b'continued' b'to'
    b'be' b'associated' b'in' b'synthesis' b'by' b'that' b'remaining' b'over' b'and' b'<unk>' b'set' b'Schmeichel' b',' b'once' b'by' b'considerable' b'foraging' b'in' b'the' b'Republic'
    b',' b'he' b'Smith' b'does' b'smart' b'characteristics' b'down' b'in' b'northern' b'furs' b'.' b'However' b',' b'in' b'1889' b',' b'the' b'common' b'starling' b'also'
    b'lasted' b'in' b'April' b'2001' b'.' b'A' b'species' b'for' b'alligators' b'can' b'be' b'negative' b'more' b'than' b'Congregation' b',' b'because' b'they' b'are' b'known'
    b'to' b'mediate' b',' b'so' b'that' b'this' b'account' b'of' b'analyses' b'at' b'different' b'methods' b'should' b'indicate' b'so' b'they' b'are' b'one' b'of' b'the'
    b'large' b'and' b'modern' b'minded' b'Status' b'of' b'a' b'transit' b'.' b'By' b'this' b'period' b'there' b'attribute' b'no' b'holy' b'charge' b',' b'including' b'the'
    b'numerous' b'Arecibo' b',' b'<unk>' b'to' b'the' b'male' b'well' b';' b'they' b'are' b'subdivided' b'with' b'male' b'sciences' b'.' b'It' b'was' b'generally' b'criticised'
    b'out' b'for' b'Christ' b'as' b'far' b'as' b'they' b'both' b'be' b'perceived' b'to' b'explain' b'that' b'lifetime' b'.' b'In' b'the' b'cause' b'of' b'the'
    b'pace' b'of' b'000' b'divorce' b',' b'umpires' b'rejected' b'one' b'farmers' b',' b'calls' b',' b'<unk>' b'for' b'herds' b',' b'and' b'gadolinium' b'has' b'exhibit'
    b',' b'reducing' b'one' b'warfare' b'to' b'being' b'to' b'be' b'elaborate' b'in' b'way' b'to' b'ensure' b'.' b'This' b'will' b'not' b'be' b'seen' b'as'
    b'or' b'<unk>' b'by' b'ice' b'swollen' b',' b'with' b'biochemical' b'food' b'or' b'filament' b'124' b'.' b'When' b'a' b'female' b'may' b'be' b'observed' b'to'
    b'happen' b',' b'and' b'study' b'in' b'change' b',' b'they' b'have' b'clearly' b'clear' b'an' b'true' b'or' b'threats' b'of' b'their' b'revisions' b',' b'and'
    b'<unk>' b'heating' b'treat' b'damage' b'before' b'they' b'may' b'move' b'to' b'air' b'trying' b'to' b'separate' b'Kusanagi' b'.' b'Females' b'also' b'walk' b'by' b'<unk>'
    b',' b'which' b'should' b'open' b'dry' b',' b'<unk>' b',' b'connect' b',' b'Countries' b',' b'Genesis' b',' b'black' b',' b'Orne' b',' b'sometimes' b'susceptible'
    b'to' b'130' b'or' b'dinosaurs' b',' b'Boys' b',' b'and' b'far' b'to' b'several' b'trees' b',' b'by' b'3' b'@.@' b'1' b'to' b'1' b'@.@'
    b'98' b'mm' b'(' b'15' b'@.@' b'8' b'mi' b')' b'early' b',' b'from' b'2' b'\xe2\x80\x93' b'5' b'\xce\xbcm' b'and' b'5' b'%' b'of' b'males'
    b'.' b'After' b'Nadiadwala' b'takes' b'over' b'180' b'kilometres' b',' b'8' b'@.@' b'5' b'metres' b'(' b'14' b'@.@' b'8' b'in' b')' b'steel' b'prey'
    b'to' b'be' b'north' b'acknowledged' b'.' b'Although' b'it' b'displays' b'slightly' b'side' b'of' b'these' b'they' b'drop' b'that' b'shape' b',' b'they' b'feed' b','
    b'around' b'roughly' b'three' b'days' b'.' b'While' b'it' b'will' b'be' b'killed' b',' b'they' b'do' b'not' b'undergo' b',' b'sulfur' b'faster' b'birds' b'.'
    b'At' b'08' b':' b'10' b',' b'feels' b'were' b'unhappy' b'used' b'a' b'strength' b'.' b'More' b'recent' b',' b'currently' b'under' b'spouting' b'it' b','
    b'but' b'it' b'typically' b'were' b'only' b'mature' b'.' b'It' b'has' b'two' b'direct' b'gear' b'(' b'minimum' b',' b'India' b',' b'preserving' b'.' b')'
    b'.' b'<eos>' b'In' b'this' b'Mediterranean' b'bird' b',' b'they' b'were' b'inferred' b"'Cruz" b'following' b'amino' b'Hardy' b',' b'allowing' b'it' b'upon' b'one' b'.'
    b'<eos>' b'In' b'a' b'series' b'of' b'roughly' b'12' b'days' b',' b'they' b'do' b'not' b'guard' b'stronger' b',' b'making' b'females' b'and' b'cells' b'and'
    b'able' b'to' b'be' b'attached' b'.' b'(' b'1901' b')' b'vary' b'from' b'one' b'of' b'the' b'Chronic' b'groups' b'to' b'the' b'7th' b'@-@' b'century'
    b'envelope' b'before' b'an' b'male' b'.' b'The' b'kakapo' b'differs' b'in' b'Kountze' b'kiosk' b',' b'where' b'fewer' b'as' b'their' b'food' b'west' b',' b'in'
    b'Barbadian' b'supply' b',' b'spread' b'a' b'aspect' b'of' b'other' b'three' b'tracks' b',' b'and' b'moving' b'mainly' b'soon' b'under' b'other' b'types' b'of' b'straight'
    b'or' b'fewer' b'years' b'.' b'Mulder' b'will' b'eat' b'however' b'early' b'as' b'enforced' b'to' b'lad' b'.' b'As' b'of' b'2014' b'they' b'suggest' b'nomadic'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 233.4
    loss: 5.168
    elapsed time (seconds): 165.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  44.128 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
