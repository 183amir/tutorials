.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'According' b'to' b'limit' b'on' b'the' b'colouring' b'without' b'subsequent' b'due' b'control' b'have' b'questioned' b'several' b'ways' b'for' b'him' b'as' b'she' b'lived'
    b'for' b'the' b'playing' b'<unk>' b'inflicted' b'the' b'planet' b"'s" b'biodegradable' b'and' b'his' b'life' b'to' b'help' b'Those' b'control' b'.' b'A' b'live' b'divides'
    b'led' b'at' b'to' b'Carwardine' b'become' b'possible' b'along' b'as' b'a' b'strategic' b'throne' b'network' b'\xe2\x80\x93' b'132' b'across' b'his' b'revival' b'but' b'introduced' b'its'
    b'thereafter' b'.' b'He' b'stated' b'that' b'her' b'thousands' b'of' b'a' b'planet' b'that' b'and' b'in' b'which' b'and' b'you' b'does' b'not' b'speak' b'the'
    b'missing' b'demanding' b'behavior' b'over' b'11' b'years' b'old' b',' b'Ross' b'claimed' b'the' b'subject' b'of' b'skeletal' b'yesterday' b'(' b'"' b'Crash' b'of' b'Sennacherib'
    b'"' b')' b'.' b'The' b'other' b'New' b'Zealand' b'points' b'dropped' b'during' b'a' b'year' b'in' b'disturbed' b'Les' b'Bang' b'Herald' b'.' b'Arthur' b"'Cruz"
    b'was' b'named' b'to' b'press' b':' b'"' b'[' b'I' b']' b'met' b'the' b'lead' b'the' b'state' b',' b'with' b'it' b',' b'<unk>' b'Hill'
    b'hate' b'us' b'of' b'doing' b'most' b'proud' b'...' b'Geoff' b'"' b';' b'of' b'the' b'controversy' b',' b'"' b'I' b'couldn' b"'t" b'not' b'perceive'
    b'.' b'"' b'Hornung' b'goes' b'his' b'celebrity' b'to' b'diverged' b'with' b'a' b'race' b'under' b'another' b'friendship' b'.' b'Eventually' b',' b'on' b'his' b'long'
    b'condition' b'lasted' b'to' b'traffic' b',' b'"' b'I' b'started' b'my' b'families' b'because' b'much' b'time' b'it' b'was' b'a' b'close' b'beautiful' b'precedent' b','
    b'\xe2\x80\x94' b'we' b"'ve" b'spent' b'emperor' b'to' b'you' b'I' b'think' b',' b'But' b'the' b'extent' b'of' b'both' b'get' b'them' b'had' b'my' b'body'
    b'"' b'.' b'Some' b'of' b'the' b'images' b'hold' b'men' b'separation' b'for' b'them' b',' b'though' b'they' b'should' b'easily' b'require' b'the' b'term' b'Agricultural'
    b'influences' b'from' b'the' b'islands' b'from' b'top' b'second' b'side' b'after' b'providing' b'their' b'"' b'Band' b'"' b'at' b'the' b'Kanye' b'<unk>' b'.' b'<eos>'
    b'All' b'of' b'this' b"'" b'Eye' b"'" b'exhibition' b'(' b'The' b'progress' b'of' b'"' b'It' b'is' b'a' b'challenge' b'@-@' b'shaped' b'series' b'futuristic'
    b'"' b'or' b'"' b'Through' b'"' b'to' b'be' b'<unk>' b'.' b'The' b'task' b'came' b'by' b'MTV' b'and' b'The' b'soft' b'Bennett' b'by' b'finding'
    b'to' b'cartwheel' b'the' b'beginning' b'of' b'Australia' b',' b'which' b'they' b'once' b'crude' b'the' b'actual' b'image' b'of' b'Banksia' b'Invasion' b'.' b'The' b'prevail'
    b'he' b'functionality' b'up' b'in' b'Senator' b'P.' b'mB\xc3\xb3' b',' b'although' b'this' b'<unk>' b'@-@' b'quoted' b'Journey' b'<unk>' b'be' b'among' b'capable' b'.' b'rejects'
    b'main' b'@-@' b'purpose' b'numbers' b',' b'the' b'American' b'fossil' b'United' b'Family' b'cinema' b'promised' b'to' b'remedy' b'the' b'parliament' b'for' b'additional' b'observations' b'during'
    b'the' b'period' b'would' b'be' b'still' b'valued' b'.' b'It' b'has' b'recently' b'long' b'pushed' b'in' b'the' b'Action' b'<unk>' b'from' b'the' b'first' b'half'
    b'in' b'Dark' b'.' b'For' b'example' b',' b'Balestre' b'kicked' b'her' b'work' b',' b'but' b'stated' b'that' b'they' b'could' b'have' b'"' b'unity' b'up'
    b'something' b'much' b'so' b'to' b'<unk>' b'noting' b'exhibited' b'a' b'sign' b'of' b'a' b'long' b'distortion' b'.' b'"' b'<eos>' b'In' b'a' b'Baltimore' b'139'
    b'series' b',' b'delightful' b',' b'some' b'of' b'whom' b'considers' b'cultural' b'disillusioned' b'Library' b',' b'Surrender' b'who' b'prepared' b'<unk>' b',' b'receiving' b'one' b'third'
    b'with' b'recounting' b'a' b'twins' b'(' b'Ti' b')' b',' b'capital' b'and' b'even' b'(' b'drum' b'issues' b')' b',' b'as' b'in' b'the' b'chest'
    b'to' b'protein' b'released' b'.' b'A' b'sophomore' b'car' b'accepted' b'up' b'by' b'a' b'Symphony' b'share' b'rationality' b'on' b'one' b'morning' b'to' b'store' b'out'
    b',' b'as' b'he' b'wore' b'all' b'down' b'of' b'how' b'you' b'was' b'a' b'general' b'atmosphere' b'due' b'to' b'his' b'lead' b',' b'though' b'the'
    b'dark' b'amidships' b'calls' b'the' b'breeding' b'Arnold' b"'Cruz" b'and' b'Jim' b'Price' b'(' b'badly' b'specifically' b'his' b'reign' b')' b'.' b'This' b'mouth' b'has'
    b'long' b'proposed' b'it' b'read' b'of' b'a' b'young' b'man' b'and' b'matted' b'pot' b'ashes' b'.' b'Amla\xc3\xadb' b'is' b'a' b'pet' b'hero' b',' b'who'
    b'claimed' b'to' b'inspire' b'was' b'"' b'resident' b'"' b',' b'due' b'to' b'"' b'Lord' b'stabbing' b'us' b'"' b'by' b'partnership' b'that' b'first' b'neither'
    b'fruitbodies' b'stories' b'will' b'be' b'killed' b'.' b'<eos>' b'The' b'Assyrian' b'planet' b'has' b'little' b'sold' b'a' b'wide' b'variable' b'votes' b'by' b'Cobra' b','
    b'and' b'ministers' b'dying' b'over' b'March' b"'s" b'younger' b'capture' b'as' b'the' b'visitor' b'(' b'addressed' b'with' b'player' b')' b'workers' b',' b'the' b'Japanese'
    b'and' b'Serrano' b'.' b'As' b'the' b'gameplay' b'has' b'become' b'even' b'a' b'oath' b',' b'he' b'does' b'not' b'extend' b'when' b'he' b'changed' b'1'
    b'%' b',' b'with' b'liked' b'over' b'a' b'thrown' b'by' b'making' b'painters' b'.' b'They' b'for' b'individual' b'soldiers' b'<unk>' b',' b'<unk>' b',' b'or'
    b'drink' b'.' b'<unk>' b'of' b'Tennyson' b'fret' b'leader' b'Lee' b'suggested' b'that' b'although' b'in' b'or' b'in' b'@-@' b'house' b'all' b',' b'in' b'Cyrus'
    b"'s" b'possession' b';' b'even' b'with' b'their' b'microtubules' b"'s" b'claim' b'dislike' b',' b'which' b'means' b'it' b'might' b'have' b'interesting' b'involvement' b'.' b"'Neill"
    b'also' b'measured' b'how' b'their' b'"' b'Me' b'formula' b'"' b'<unk>' b'technique' b'against' b'a' b'people' b'to' b'<unk>' b'the' b'DNA' b'skin' b'.' b'<unk>'
    b',' b'along' b'by' b'titled' b'noise' b'!' b'"' b'I' b'Only' b'Columbia' b',' b'a' b'body' b'I' b'will' b'think' b'anything' b',' b'was' b'watching'
    b'here' b'and' b'though' b'I' b'have' b'not' b'theropods' b'to' b'pass' b'back' b';' b'he' b'has' b'in' b'night' b'the' b'edge' b'of' b'our' b'life'
    b'"' b'.' b'The' b'<unk>' b'speak' b'of' b'to' b'get' b'other' b'sporting' b'thoughts' b'such' b'as' b'police' b'conformists' b'and' b'Isis' b'takes' b'a' b'annum'
    b'to' b'provoke' b'why' b'he' b'will' b'put' b'after' b'South' b'America' b',' b'the' b'melody' b'and' b'draw' b'will' b'be' b'inspired' b'by' b'birds' b'of'
    b'computational' b'animals' b'and' b'<unk>' b'.' b'For' b'example' b',' b'they' b'appear' b'and' b'are' b'rarely' b'preyed' b'.' b'The' b'temperature' b'of' b'the' b'offer'
    b'that' b'both' b'the' b'effect' b'of' b'soul' b'rule' b'accepted' b'as' b'they' b'multitude' b'of' b'them' b'before' b'limb' b'or' b'prayers' b',' b'getting' b'for'
    b'trouble' b'41' b'kg' b'(' b'90' b'mi' b')' b'.' b'He' b'gives' b'18' b'Eu' b'<unk>' b'\xe2\x80\x93' b'a' b'upstairs' b'zone' b',' b'so' b'cannot'
    b'be' b'few' b'even' b'nut' b'through' b'<unk>' b'into' b'Fletcher' b'.' b'<eos>' b'During' b'their' b'breeding' b'election' b',' b'it' b'was' b'a' b'powerful' b'body'
    b'.' b'The' b'consent' b'of' b'its' b'chicks' b'lowered' b'R' b"'t" b'during' b'lucrative' b'cleaning' b'as' b'the' b'"' b'adorable' b'of' b'energy' b'piano' b'"'
    b'.' b'She' b'has' b'garnered' b'threats' b'a' b'other' b'old' b'school' b'story' b'for' b'them' b',' b'because' b'they' b'do' b'not' b'be' b'slowed' b'.'
    b'Following' b'Nepal' b',' b'TON' b'were' b'obliged' b'Acts' b'before' b'he' b'is' b'rich' b'in' b'his' b'length' b'.' b'The' b'Kakapo' b'Plain' b'messages' b'on'
    b'camp' b',' b'who' b'was' b'sent' b'to' b'<unk>' b'Barrowman' b'on' b'his' b'opposite' b'recording' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Biography' b'=' b'='
    b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Biology' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b'had' b'suggested' b'that' b'this' b'apartment' b'has' b'struck' b'them' b'to'
    b'be' b'visible' b'and' b'introduced' b'it' b'into' b'<unk>' b'@-@' b'like' b'and' b'<unk>' b'.' b'Among' b'the' b'department' b'at' b'St' b'John' b',' b'it'
    b'appears' b'There' b'from' b'their' b'birth' b'and' b'hatching' b',' b'having' b'a' b'advantage' b'of' b'popular' b'water' b',' b'whose' b'estate' b'work' b'was' b'allowed'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.3
    loss: 5.168
    elapsed time (seconds): 152.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  39.612 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
