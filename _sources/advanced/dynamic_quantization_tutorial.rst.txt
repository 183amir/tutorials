.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'imported' b'.' b'The' b'fourth' b'specimen' b'is' b'sets' b'of' b'source' b'in' b'pair' b'such' b'as' b'<unk>' b'and' b'<unk>' b',' b'which' b'opened' b'in'
    b'the' b'era' b'for' b'organic' b'course' b',' b'while' b'from' b'the' b'struggle' b'of' b'capabilities' b'he' b'destroyed' b'progressively' b'Reasons' b'down' b',' b'to' b'find'
    b'the' b'potential' b'.' b'<eos>' b'<unk>' b'are' b'concurrently' b'added' b',' b'Salvador' b'Collins' b',' b'under' b'driving' b'between' b'and' b'because' b'flybys' b'are' b'not'
    b'the' b'Bruins' b'played' b'so' b'of' b'orbits' b'.' b'But' b'immortality' b'opted' b'to' b'be' b'usually' b'added' b'in' b'some' b'schools' b',' b'it' b'does'
    b'occasionally' b'process' b'to' b'yield' b'<unk>' b'2' b'.' b'These' b'birds' b'are' b'attributed' b'to' b'Cajal' b'container' b'is' b'the' b'<unk>' b'flavour' b'.' b'Vandernoot'
    b'has' b'decided' b'to' b'nil' b'for' b'the' b'2009' b'race' b'.' b'A' b'Assassination' b'Tracy' b'is' b'almost' b'recommended' b'and' b'mature' b'to' b'discourage' b','
    b'whether' b'affected' b'after' b'the' b'head' b'of' b'aplacental' b'constitution' b'.' b'<eos>' b'Canopus' b'after' b'the' b'end' b'of' b'Islam' b',' b'Catholic' b'scales' b'are'
    b'praised' b'throughout' b'the' b'adequate' b'period' b'.' b'<eos>' b'In' b'relation' b'to' b'other' b'predators' b',' b'only' b'nine' b'other' b'countries' b'can' b'be' b'the'
    b'cause' b'of' b'geography' b',' b'allowing' b'so' b'birds' b'of' b'sized' b'starling' b',' b'or' b'shrubby' b'feeding' b'or' b'sometimes' b'small' b'.' b'In' b'the'
    b'word' b'region' b'of' b'1880' b',' b'the' b'foreign' b'starling' b'of' b'this' b'extends' b',' b'Ceres' b'situated' b'ashore' b'into' b'the' b'Republic' b',' b'and'
    b'also' b'roots' b'in' b'Ireland' b'.' b'Despite' b'only' b'most' b'transcriptional' b'ecosystem' b',' b'many' b'birds' b'reported' b'that' b'it' b'should' b'be' b'named' b'.'
    b'<eos>' b'O' b'Cyclone' b'with' b'John' b'<unk>' b'believed' b'that' b'they' b'are' b'perfectly' b'leveled' b'.' b'However' b',' b'in' b'the' b'animal' b',' b'about'
    b'My' b'mammals' b',' b'or' b'its' b'candidates' b'that' b'were' b'committed' b'from' b'the' b'lamins' b'they' b'should' b'erupt' b'on' b'a' b'medium' b'.' b'Others'
    b'have' b'debated' b'21' b'@.@' b'1' b'%' b'per' b'fiction' b'more' b'than' b'one' b'day' b'.' b'Despite' b'5' b'@.@' b'4' b'larva' b',' b'it'
    b'may' b'leave' b'females' b'kakapo' b'into' b'another' b'associated' b'or' b'then' b'being' b'starling' b'De' b'Bandcamp' b'.' b'Some' b'starlings' b'<unk>' b'is' b'different' b','
    b'not' b'through' b'a' b'planet' b'assigned' b'to' b'low' b'practices' b'.' b'The' b'presence' b'of' b'the' b'assassins' b'within' b'laying' b'pattern' b'shrub' b'food' b'are'
    b'greatly' b'common' b'orchids' b'in' b'361' b'figures' b'from' b'New' b'Zealand' b'burned' b'by' b'the' b'threat' b',' b'and' b'had' b'their' b'spy' b'and' b'lower'
    b'.' b'This' b'bird' b'occurs' b'around' b'2' b'@.@' b'5' b'in' b'adults' b'into' b'food' b'and' b'a' b'frequency' b'from' b'4' b'@.@' b'8' b'%'
    b'of' b'DE' b'teams' b'.' b'<eos>' b'Special' b'pressures' b'is' b'<unk>' b'(' b'which' b'may' b'be' b'in' b'Culinary' b'Nationalist' b'don' b'@-@' b'Was' b')'
    b'.' b'It' b'is' b'unclear' b'surface' b'only' b'over' b'her' b'when' b'they' b'form' b'nesting' b'humans' b'.' b'These' b'<unk>' b'can' b'also' b'gain' b'inhalation'
    b'after' b'any' b'team' b'.' b'The' b'female' b'can' b'be' b'distinguished' b'by' b'up' b'a' b'accuracy' b'in' b'Ireland' b'when' b'they' b'were' b'communal' b'stellar'
    b'.' b'<eos>' b'The' b'most' b'common' b'kakapo' b'is' b'smaller' b'hygrometricus' b',' b'well' b'as' b'<unk>' b',' b'or' b'dark' b'river' b'or' b'open' b'numbered'
    b'.' b'They' b'may' b'lead' b'Hangzhou' b'and' b'nucleotide' b',' b'when' b'the' b'kakapo' b'feed' b'better' b'on' b'a' b'retrospective' b'fragments' b',' b'obey' b'night'
    b'for' b'them' b'around' b'her' b'idea' b'.' b'They' b'may' b'have' b'bowls' b'before' b'long' b'different' b'mobbing' b'among' b'rot' b'.' b'priests' b'flies' b'lubricated'
    b'items' b'such' b'as' b'<unk>' b'or' b'Logic' b'467' b',' b'but' b'others' b'often' b'appear' b'for' b'plant' b'soil' b'.' b'M' b'@-@' b'Colonna' b'do'
    b'not' b'answer' b'chicks' b'around' b'Lake' b'acids' b',' b'giving' b'not' b'=' b'Though' b'the' b'bird' b'is' b'usually' b'adds' b',' b'they' b'will' b'potentially'
    b'indicate' b'south' b'came' b'above' b'monastic' b'temples' b'.' b'<unk>' b',' b'when' b'other' b'damage' b'are' b'often' b',' b'damage' b'SSH' b'routine' b',' b'they'
    b'127' b'small' b'structures' b'almost' b'for' b'their' b'leased' b'resulting' b'over' b'them' b'at' b'night' b'.' b'<unk>' b',' b'there' b'is' b'many' b'hostile' b'jetport'
    b'europium' b'deity' b',' b'and' b'some' b'fly' b'species' b'are' b'because' b'heavier' b'or' b'sweet' b'plants' b'steps' b'them' b'away' b'.' b'After' b'their' b'first'
    b'lives' b',' b'milk' b',' b'males' b'make' b'an' b'one' b'section' b'in' b'leukemic' b'measurements' b',' b'so' b'forks' b'when' b'<unk>' b',' b'occasionally' b'lost'
    b'oil' b'mean' b'they' b"'re" b'<unk>' b'.' b'Instead' b',' b'other' b'birds' b'may' b'be' b'ordered' b'are' b'mostly' b'spousal' b'.' b'The' b'keel' b'gravity'
    b'also' b'difficulty' b'that' b'typical' b'<unk>' b'on' b'one' b'front' b'of' b'birds' b'may' b'be' b'like' b'analyses' b'for' b'prey' b'.' b'deciduous' b'areas' b'may'
    b'be' b'rectilinear' b'for' b'about' b'a' b'half' b'of' b'eight' b'birds' b',' b'and' b'will' b'be' b'feet' b'<' b'@-@' b'brown' b',' b'Scully' b'acknowledged'
    b'they' b'cook' b'or' b'being' b'less' b'large' b'.' b'About' b'it' b'South' b'force' b'point' b'in' b'coastal' b'measurements' b'attempt' b'to' b'supplement' b'by' b'their'
    b'sense' b'of' b'force' b',' b'or' b'to' b'be' b'@-@' b'highest' b'.' b'Common' b'populations' b'have' b'always' b'been' b'short' b',' b'but' b'well' b','
    b'even' b'father' b'do' b'not' b'pass' b'its' b'close' b'specimens' b'.' b'Perhaps' b'after' b'many' b'other' b'reading' b'it' b'arrived' b',' b'they' b'pass' b'the'
    b'surface' b'or' b'their' b'other' b'birds' b',' b'since' b'the' b'other' b'females' b'could' b'be' b'offensive' b'male' b',' b'movies' b'and' b'RNA' b'mean' b'.'
    b'The' b'spots' b'are' b'smaller' b'for' b'ZNDH' b'use' b'of' b'other' b'feeding' b',' b'as' b'DC' b'devices' b'usually' b'marched' b'as' b'food' b'.' b'One'
    b'factor' b'the' b'eggs' b'between' b'Cub' b'and' b'sheep' b',' b'even' b'when' b'lung' b'cougar' b'large' b',' b'lantern' b'may' b'<unk>' b'cutting' b'stimulation' b','
    b'they' b'bind' b'to' b'its' b'head' b'notes' b'.' b'Otway' b'quickly' b'might' b'have' b'abruptly' b'relating' b'to' b'machinery' b'or' b'the' b'dense' b'power' b'.'
    b'<eos>' b'In' b'various' b'nests' b',' b'they' b'meet' b'mostly' b'common' b'or' b'adjacent' b'elements' b',' b'when' b'they' b'do' b'some' b'methods' b'essentially' b'Mwele'
    b'.' b'They' b'have' b'also' b'increased' b'significant' b'birds' b'from' b'decision' b'that' b'straight' b',' b'equator' b'from' b'long' b'police' b'for' b'forming' b'stump' b'.'
    b'If' b'<unk>' b'this' b'periods' b'maintains' b'documented' b'a' b'lifespan' b',' b'it' b'increases' b'9' b'/' b'5' b'in' b'diameter' b'until' b'of' b'which' b'of'
    b'certain' b'bird' b'or' b'metals' b'.' b'<unk>' b'kakapo' b'who' b'sobriquet' b'them' b',' b'and' b'it' b'believe' b'.' b'When' b'they' b'show' b',' b','
    b'throughout' b'humans' b',' b'can' b'have' b'used' b'associated' b'high' b'true' b'well' b'.' b'<unk>' b',' b'and' b'comb' b'Commons' b'may' b'be' b'\xc3\x81lvaro' b','
    b'generally' b'costly' b'and' b'climbing' b'rare' b'eggs' b'.' b'Furthermore' b',' b'one' b'typically' b'have' b'fewer' b'device' b'discontinued' b'visceral' b'grasses' b'between' b'their' b'way'
    b'likely' b'later' b'.' b'The' b'most' b'robust' b'ones' b'have' b'higher' b'harmful' b'and' b'even' b'resemble' b'substrate' b'feathers' b',' b'either' b'<unk>' b'.' b'Most'
    b'hospitals' b'were' b'comparable' b'complex' b',' b'such' b'as' b'Earth' b'and' b'<unk>' b',' b'areas' b'such' b'as' b'areas' b',' b'or' b'predict' b'when' b'a'
    b'large' b'penalties' b'horrified' b'.' b'From' b'one' b'and' b'singly' b'in' b'summer' b'regions' b',' b'females' b'were' b'considered' b'by' b'the' b'clumsy' b'jam' b'into'
    b'animals' b'into' b'legs' b'and' b'detail' b';' b'they' b'attend' b'closer' b'chemical' b'spots' b'of' b'trees' b'.' b'This' b'objects' b'might' b'manage' b'waterway' b'during'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 243.0
    loss: 5.168
    elapsed time (seconds): 169.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  57.828 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
