.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'ill' b'opinions' b'his' b'striving' b'that' b'adopted' b'divert' b'Shawn' b'al' b"'s" b'glee' b'<unk>' b'as' b"'" b'Jagannadh' b"'" b'Sadleir' b"'" b',' b'which'
    b'could' b'be' b'able' b'to' b'be' b'replaced' b'to' b'have' b'other' b'lives' b'on' b'<unk>' b'it' b'as' b'Guitar' b'or' b'the' b'bird' b',' b'who'
    b'loved' b'the' b'man' b"'" b'influences' b'to' b'reconcile' b'to' b'him' b'he' b',' b'nor' b're' b'inches' b'in' b'its' b'production' b'began' b'.' b'Joseph'
    b'Nelson' b'received' b'the' b'role' b'of' b'five' b'car' b'@-@' b'<unk>' b'to' b'width' b'an' b'maximum' b'to' b'produce' b';' b'which' b'removed' b'reopened' b'or'
    b'analysed' b'an' b'windows' b'and' b'being' b'inherited' b'concerned' b'.' b'The' b'lasting' b'population' b'Tennyson' b'made' b'one' b'on' b'rejects' b'between' b'Z' b'.' b'According'
    b'to' b'<unk>' b'or' b'Campbeltown' b'in' b'<unk>' b'(' b'Chelsea' b'and' b'his' b'1936' b'layer' b',' b'<unk>' b'dans' b'Terry' b'<unk>' b')' b'3' b'to'
    b'<unk>' b'his' b'<unk>' b'funeral' b',' b'to' b'help' b'a' b'speed' b'that' b'came' b'instead' b'to' b'either' b'accompany' b'a' b'movement' b'by' b'entering' b'the'
    b'stars' b',' b'a' b'adult' b'which' b'<unk>' b'its' b'<unk>' b'memory' b'.' b'Over' b'example' b',' b'means' b'I' b'had' b'no' b'happened' b'legal' b'threats'
    b':' b'Scott' b'+' b'partly' b'<unk>' b'shows' b'217' b'meeting' b',' b'as' b'they' b'am' b'<unk>' b'for' b'the' b'umpire' b',' b'as' b'<unk>' b'officers'
    b'they' b'form' b'to' b'make' b'their' b'thoughts' b'in' b'his' b'borough' b'victory' b'.' b'He' b'then' b'feels' b'each' b'other' b',' b'how' b'hanging' b'players'
    b'.' b'The' b'story' b'of' b'generators' b'is' b'nearly' b'part' b'of' b'other' b'consequences' b'.' b'<unk>' b'is' b'no' b'four' b'times' b',' b'in' b'custom'
    b'soap' b'opinion' b';' b'he' b'attributed' b'to' b'Tahiti' b'when' b'it' b'would' b'focus' b',' b'and' b'gave' b'the' b'first' b'ever' b'given' b'out' b'of'
    b'two' b'different' b'individuals' b'.' b'These' b'trade' b'cricket' b'faces' b'containing' b'the' b'nephew' b'of' b'Great' b'La' b'Robinson' b'as' b'"' b'<unk>' b'"' b'repeatedly'
    b',' b'Ambition' b'(' b'eucalypts' b')' b'and' b'Am' b'.' b'<eos>' b'<unk>' b'@-@' b'Schafer' b',' b'the' b'abrupt' b'All\xc4\x81h' b'in' b'replacing' b'Chou' b'granite'
    b',' b'responds' b'so' b'mentioned' b'since' b'research' b',' b'relied' b'later' b'so' b'more' b'than' b'once' b'Epsicokhan' b'.' b'That' b'year' b'they' b'possesses' b'white'
    b'eggs' b'could' b'be' b'seen' b'at' b'four' b'or' b'four' b'months' b'.' b'The' b'Fresno' b'singers' b'can' b'be' b'obtained' b'directly' b'as' b'common' b'or'
    b'<unk>' b'spores' b',' b'which' b'was' b'short' b'up' b'into' b'<unk>' b'.' b'This' b'cell' b'will' b'fulfil' b'it' b'Muddling' b'M.' b'n' b'far' b'rubbing'
    b',' b'and' b'are' b'switched' b'in' b'an' b'5' b'down' b',' b'according' b'to' b'archer' b',' b'Greece' b',' b'which' b'can' b'be' b'controlled' b'.'
    b'As' b'clearly' b'its' b'fast' b'expedition' b',' b'which' b'could' b'make' b'Frontier' b'or' b'mutiny' b'anyone' b'are' b'grapes' b'.' b'stanzas' b'should' b'resemble' b'10'
    b'%' b',' b'by' b'such' b'orbits' b'cell' b'birds' b'stood' b'in' b'a' b'solar' b'racing' b'front' b'.' b'In' b'particular' b',' b'females' b'are' b'usually'
    b'different' b'.' b'They' b'are' b'<unk>' b'and' b'are' b'always' b'beneficial' b'at' b'its' b'core' b'when' b'they' b'transferred' b'to' b'reaching' b'<unk>' b'.' b'There'
    b'are' b'retained' b'fewer' b'types' b'of' b'anger' b'or' b'birds' b'that' b'trouble' b'masters' b'to' b'become' b'chemical' b'and' b'valid' b'as' b'they' b'can' b'constitute'
    b'up' b'representation' b'of' b'old' b'.' b'Males' b'are' b'better' b'Swing' b'structure' b'or' b'light' b',' b'typically' b'fast' b'.' b'Depending' b',' b'they' b'are'
    b'drinking' b'at' b'<unk>' b',' b'<unk>' b'(' b'an' b'hatch' b'track' b'with' b'the' b'artifact' b'who' b'will' b'be' b'known' b'as' b'follows' b'diagram' b')'
    b',' b'with' b'high' b'advertisements' b'Center' b',' b'<unk>' b'they' b'death' b'that' b'burning' b'almost' b'.' b'In' b'a' b'variety' b'normal' b'niche' b'cells' b','
    b'they' b'are' b'capable' b'of' b'either' b'imported' b'mean' b'driving' b'or' b'takes' b'much' b'year' b'when' b'they' b'are' b'one' b'of' b'those' b'a' b'standard'
    b'way' b'.' b'This' b'is' b'also' b'because' b'they' b'mean' b',' b'instead' b'of' b'tents' b'can' b'be' b'changed' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Sport' b'=' b'=' b'<eos>' b'<eos>' b'Gordon' b'compact' b'is' b'probably' b'used' b'upon' b'call' b'as' b'many' b'as' b'some' b'Ras' b'occasionally' b'possibility' b','
    b'although' b'stars' b',' b'like' b'<unk>' b'or' b'white' b',' b'spread' b'up' b'soup' b'Half' b'.' b'Those' b'detect' b'eggs' b',' b'Bernard' b'fibers' b','
    b'God' b',' b'<unk>' b',' b'41' b',' b'and' b'carvings' b',' b'which' b'exhibit' b'approximately' b'return' b'at' b'Sun' b'Tehran' b',' b'containing' b'<unk>' b'.'
    b'They' b'initially' b'feed' b'surveys' b'to' b'find' b'Triatominae' b'factors' b'display' b'false' b'predators' b'of' b'holes' b'through' b'.' b'It' b'will' b'be' b'devised' b'by'
    b'expand' b'eggs' b'and' b'talked' b'Missouri' b'for' b'white' b'interests' b'and' b'vis' b'predators' b'including' b'its' b'yellow' b'likable' b'owners' b',' b'but' b'also' b'affected'
    b'to' b'be' b'natural' b'by' b'entire' b'areas' b'was' b'often' b'considered' b'simultaneously' b'.' b'Because' b'in' b'the' b'same' b'object' b'on' b',' b'to' b'other'
    b'or' b'absorb' b'bodies' b',' b'Romania' b'(' b'including' b'example' b'or' b'rings' b')' b'may' b'cause' b'convection' b'or' b'their' b'drinking' b'feathers' b',' b'but'
    b'transcription' b'fly' b'them' b'then' b'industrial' b'or' b'easily' b'during' b'its' b'food' b';' b'then' b',' b'they' b'were' b'established' b'his' b'diameter' b',' b'so'
    b'constrained' b'when' b'they' b'consist' b'just' b'only' b'towards' b'so' b'to' b'females' b'and' b'do' b'because' b'while' b'each' b',' b'one' b'fully' b'wish' b'about'
    b'to' b'be' b'an' b'planet' b'at' b'once' b'pictorial' b'.' b'Grant' b'of' b'a' b'female' b'Matagorda' b'sunken' b'may' b'be' b'reinstated' b'in' b'impassable' b','
    b'mechanical' b',' b'finishing' b'with' b'<unk>' b'spends' b',' b'and' b'near' b'the' b'tongue' b'when' b'organelles' b'Duncan' b'St' b'plasma' b'are' b'most' b'understood' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Some' b'female' b'deities' b'have' b'to' b'be' b'their' b'occurrence' b'themselves' b'in' b'a'
    b'enzyme' b',' b'allowing' b'knowledge' b'on' b'a' b'specific' b'sized' b'structure' b'.' b'The' b'attendant' b'and' b'the' b'gotten' b'removal' b'gives' b'an' b'higher' b'<unk>'
    b'threat' b',' b'with' b'later' b'scope' b'being' b'found' b'replication' b'to' b'be' b'homes' b'.' b'Because' b'other' b'starlings' b'undercut' b'their' b'draw' b'it' b'will'
    b'seek' b'for' b'.' b'They' b',' b'steadily' b'reply' b'is' b'branched' b'another' b'woman' b',' b'<unk>' b',' b'intensifying' b'and' b'outside' b'red' b'fat' b'('
    b'high' b')' b'provides' b'that' b'their' b'breeding' b'appearance' b'is' b'will' b'be' b'cleared' b'with' b'any' b'island' b'structures' b'.' b'It' b'could' b'become' b'the'
    b'size' b'of' b'consensus' b'on' b'8' b'August' b'1835' b'they' b'often' b'existed' b',' b'well' b'or' b'mechanical' b'process' b'or' b'someday' b'.' b'contents' b'narrow'
    b'humans' b'have' b'fallen' b'gunboat' b',' b'situ' b',' b'consistency' b'and' b'contacts' b'into' b'childish' b'.' b'<eos>' b'immature' b'spiders' b'do' b'not' b'be' b'Wagner'
    b'species' b'of' b'those' b',' b'and' b'McGuire' b'can' b'be' b'considerably' b'heard' b'.' b'DNA' b'ports' b'may' b'be' b'discarded' b'after' b'Independence' b"'s" b'Cork'
    b'(' b'proprietor' b')' b',' b'under' b'rats' b'newly' b'preceded' b'.' b'Though' b'they' b'cannot' b'classify' b'if' b'they' b'are' b'still' b'diagonal' b'to' b'step'
    b'to' b'declaring' b'greater' b'equilibrium' b'birds' b'.' b'About' b'4' b'@.@' b'5' b'birds' b'of' b'local' b'starling' b'females' b'were' b'still' b'straight' b',' b'when'
    b'it' b'is' b'frequently' b'always' b'lower' b'.' b'Hanna' b'causes' b'so' b'their' b'assessment' b'of' b'dense' b'energy' b',' b'whereas' b'more' b'birds' b'form' b'expression'
    b'to' b'be' b'moving' b'.' b'It' b'is' b'confidently' b'that' b'Kamerkoor' b'may' b'Marlon' b'be' b'done' b'so' b'without' b'Inari' b',' b'or' b'as' b'they'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.1
    loss: 5.168
    elapsed time (seconds): 143.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  7.969 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
