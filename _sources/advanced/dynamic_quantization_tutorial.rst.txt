.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Agriculture' b',' b'who' b'regarded' b'with' b'Canon' b'Lanxess' b'and' b'visited' b'a' b'superficial' b'witness' b'of' b'hatching' b'.' b'The' b'neighborhood' b'was' b'spent' b'on'
    b'down' b'analyze' b'as' b'one' b'of' b'the' b'<unk>' b'dialect' b'thinks' b'for' b'a' b'short' b'grade' b',' b'and' b'a' b'member' b'must' b'spend' b'the'
    b'race' b'of' b'alarm' b'songs' b',' b'and' b'is' b'fully' b'named' b'to' b'only' b'pitch' b'their' b'profile' b'.' b'The' b'house' b'proved' b'playing' b'at'
    b'southern' b'Grade' b'with' b'Doyle' b'to' b'be' b'added' b'when' b'"' b'If' b'it' b'is' b'so' b'usually' b'a' b'Purpose' b'"' b',' b'they' b'also'
    b'underwater' b'its' b'gay' b'career' b'and' b'their' b'native' b'range' b'.' b'The' b'transepts' b'is' b'by' b'co' b'@-@' b'31' b'.' b'It' b'was' b'picked'
    b'west' b'of' b'kakapo' b'to' b'other' b'missionary' b',' b'with' b'a' b'self' b'@-@' b'level' b'scenarios' b',' b'north' b'also' b'documented' b'his' b'side' b'to'
    b'four' b'other' b'incidents' b',' b'and' b'buyer' b'Sybil' b'asleep' b'on' b'his' b'length' b'there' b'.' b'According' b'to' b'<unk>' b',' b'deduced' b'<unk>' b'('
    b'<unk>' b'Zatanna' b')' b'praised' b'their' b'force' b't' b'as' b'his' b'state' b',' b'and' b'a' b'curved' b'display' b'of' b'balance' b'in' b'<unk>' b'feature'
    b',' b'Swaziland' b'range' b'against' b'this' b'publish' b'her' b'relationships' b'on' b'a' b'strenuous' b'wedding' b'.' b'"' b'It' b"'s" b'a' b'free' b'presence' b','
    b'Isabella' b'incorporates' b',' b'thus' b'a' b'kicking' b'Model' b'.' b'"' b'Although' b'"' b'old' b'is' b'a' b'average' b',' b'Narvik' b'extra' b'so' b','
    b'<unk>' b',' b'and' b'<unk>' b'"' b'prior' b'from' b'the' b'series' b'whereas' b'things' b'became' b'invited' b';' b'it' b'seems' b'to' b'mean' b'"' b'much'
    b'of' b'the' b'laboratory' b'"' b',' b'if' b'he' b'spoken' b',' b'compared' b'sarcastic' b'acceptance' b'Donny' b',' b'similar' b'to' b'her' b'storyline' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Personnel' b'=' b'=' b'<eos>' b'<eos>' b'As' b'a' b'member' b'of' b'moving' b'in' b'Ranch' b',' b'it' b'takes' b'over' b'one'
    b'six' b'years' b'old' b',' b'in' b'its' b'first' b'and' b'four' b'<unk>' b'on' b'both' b'30' b'%' b',' b'a' b'plausible' b'stable' b',' b'surprisingly'
    b',' b'and' b'small' b'unpopularity' b'.' b'The' b'male' b'makes' b'him' b'to' b'rise' b'an' b'orbit' b'at' b'Constantine' b',' b'where' b'it' b'does' b'not'
    b'consume' b'or' b'expedite' b'a' b'distance' b'chip' b':' b'how' b'he' b'will' b'enable' b'out' b',' b'"' b'spiritual' b'"' b'is' b'much' b'punting' b'and'
    b'mention' b'him' b'as' b'makes' b'a' b'car' b'.' b'At' b'that' b'point' b',' b'they' b'fly' b'on' b'foreigners' b'they' b'actually' b'really' b'really' b'compare'
    b',' b'including' b'Echmarcach' b'or' b'bats' b',' b"'" b'politicians' b"'" b'meat' b'lashes' b'down' b'things' b'to' b'be' b'<unk>' b'.' b'There' b'has' b'struck'
    b'a' b'<unk>' b'book' b'pass' b'with' b'.' b'The' b'teacher' b'introduces' b'player' b',' b'near' b'a' b'challenge' b'to' b'snow' b',' b'because' b'<unk>' b'makes'
    b'difficulty' b'a' b'good' b'artillery' b',' b'falling' b'away' b'through' b'five' b'other' b'female' b',' b'black' b'and' b'opposite' b'readers' b',' b'document' b'friends' b','
    b'<unk>' b',' b'also' b'lacking' b'their' b'intruder' b'.' b'In' b'eight' b'framing' b'the' b'rhythm' b'doesn' b"'t" b'afford' b',' b'with' b'a' b'male' b'to'
    b'rush' b'Rhys' b'.' b'This' b'process' b'is' b'assigned' b'to' b'Lambert' b'but' b'housed' b'its' b'first' b'attempt' b'for' b'those' b'@-@' b'point' b'values' b','
    b'now' b'which' b'identity' b'at' b'a' b'angle' b',' b'a' b'old' b'or' b'<unk>' b'quest' b',' b'at' b'a' b'tentatively' b'core' b'<unk>' b'on' b'the'
    b'back' b'of' b'IR' b'.' b'<eos>' b'descenders' b'and' b'suggests' b'"' b'Ras' b'materials' b'"' b'is' b'known' b'on' b'emperor' b'<unk>' b'(' b'pinkish' b'Yangjiang'
    b')' b',' b'and' b'was' b'57th' b'known' b'as' b'centerpiece' b',' b'while' b'the' b'head' b'leaves' b'similar' b'to' b'sample' b',' b'with' b'nature' b','
    b'salts' b',' b'feeding' b'supportive' b',' b'and' b'abide' b'to' b'up' b'physical' b'styles' b'with' b'their' b'.' b'These' b'chicks' b'were' b'specialising' b'into' b'the'
    b'character' b'and' b'their' b'DNA' b'@-@' b'like' b'darker' b'pretty' b'proof' b'.' b'Despite' b'the' b'<unk>' b',' b'water' b',' b'dignified' b',' b'fun' b'family'
    b'@-@' b'related' b'romance' b';' b'"' b'terrific' b'<unk>' b'"' b',' b'they' b'"' b'still' b'reduced' b'<unk>' b'falling' b'by' b'a' b'typical' b'sub' b'@-@'
    b'body' b'behavior' b'one' b'white' b',' b'and' b'<unk>' b'with' b'arbitration' b'of' b'social' b',' b'commercial' b'teams' b',' b'but' b'because' b'it' b"'re" b'in'
    b'slightly' b'certain' b',' b'we' b'needed' b'fumbles' b'&' b'phrases' b'I' b'lives' b'and' b'in' b'to' b'make' b'it' b'severe' b'or' b'message' b'to' b'<unk>'
    b'have' b'apparently' b'.' b'"' b'MacLeod' b'Fans' b'comedic' b'Clarke' b'described' b'his' b'death' b'from' b'Rodman' b'after' b'the' b'doctor' b'(' b'1984' b')' b'.'
    b'<unk>' b',' b'on' b'The' b'other' b'hand' b',' b'was' b'a' b'supernova' b'<unk>' b'of' b'a' b'strategy' b"'s" b'dramatic' b'hetman' b'subject' b'.' b'Damage'
    b'describes' b'this' b'dispersal' b'is' b'traditionally' b'called' b'in' b'or' b'appears' b'to' b'avoid' b'his' b'wedding' b'memorable' b'and' b'insists' b'to' b'be' b'.' b'"'
    b'<unk>' b'"' b'during' b'"' b'Counterfeit' b'of' b'the' b'lower' b'character' b'has' b'<unk>' b'its' b'tail' b',' b'and' b'about' b'high' b'man' b'at' b'his'
    b'time' b'of' b'the' b'red' b'interior' b'is' b'afraid' b'in' b'order' b'.' b'"' b'The' b'resolution' b"'s" b'nurse' b'forces' b'first' b'showing' b'high' b'techniques'
    b'such' b'as' b'Chicago' b',' b'fertilizers' b',' b'seminal' b',' b'attractive' b',' b'and' b'tail' b'JV' b'.' b'It' b'is' b'forced' b'in' b'1848' b'as'
    b'they' b',' b'so' b'constant' b'by' b'blankets' b',' b'"' b'This' b']' b'is' b'simply' b'spoken' b'.' b'"' b'<eos>' b'In' b'the' b'seminal' b'half'
    b'of' b'the' b'<unk>' b',' b'a' b'husbands' b':' b'The' b'title' b'to' b'tonality' b'<unk>' b'Music' b'(' b'commodities' b'do' b'not' b'receive' b'a' b'poor'
    b'reduces' b')' b'while' b'played' b'from' b'much' b'morning' b'.' b'Its' b'other' b'cast' b'is' b'predominantly' b'earns' b',' b'as' b'there' b'is' b'themes' b'that'
    b'small' b'eggs' b'together' b'at' b'La' b'Fore' b'<unk>' b'Revisited' b'on' b'the' b'Illinoise' b'Case' b',' b'on' b'Port' b'Fritsch' b'found' b'.' b'The' b'coronation'
    b'two' b'prototypes' b'light' b'Senate' b'Cd' b'continues' b'well' b'to' b'each' b'grammar' b',' b'Son' b'<unk>' b'by' b'witness' b'and' b'larger' b'trees' b'away' b';'
    b'a' b'repertoire' b'wrote' b'that' b'Prue' b'devoted' b'a' b'laughter' b'<unk>' b'<unk>' b'called' b'is' b'Karlsson' b'.' b'He' b'also' b'traces' b'that' b'his' b'narrative'
    b'was' b'accidentally' b'Thrill' b'into' b'Andy' b'spiritual' b'It' b',' b'where' b'it' b'considers' b'your' b'vertical' b'GBA' b'Selection' b'.' b'<eos>' b'The' b'education' b'of'
    b'Ceres' b'seems' b'to' b'sink' b'poor' b'and' b'sometimes' b'<unk>' b'even' b',' b'coming' b'to' b'the' b'water' b'during' b'2006' b'.' b'Early' b',' b'autonomic'
    b',' b'swift' b',' b'air' b',' b'fingers' b'of' b'insects' b'and' b'avoided' b'.' b'<eos>' b'In' b'1887' b',' b'debate' b'cannot' b'be' b'observed' b','
    b'neither' b'or' b'as' b'they' b'are' b'worshipped' b'on' b'a' b'distinctive' b'because' b'they' b'want' b'to' b'flee' b'as' b'a' b'female' b'.' b'The' b'reviewer'
    b'holds' b'an' b'bird' b'by' b'a' b'antidote' b'that' b'makes' b'include' b'Jo' b'theorem' b'(' b'V' b'and' b'becomes' b'a' b'mixture' b'of' b'the' b'planet'
    b')' b'are' b'transformed' b';' b'the' b'other' b'<unk>' b'found' b'alien' b'scenes' b'similar' b'to' b'that' b'zone' b'.' b'<eos>' b'Returning' b',' b'however' b','
    b'S.' b'Boom' b'Bang' b'!' b'(' b'<unk>' b'<unk>' b')' b'near' b'the' b'registry' b'have' b'difficulties' b'that' b'they' b'"' b'exercise' b',' b'quite' b'shall'
    b'something' b'suspect' b'"' b',' b'felt' b'that' b'others' b'recorded' b'choice' b'about' b'up' b'by' b'<unk>' b'.' b'The' b'Viscount' b'II' b'off' b'it' b'"'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.7
    loss: 5.168
    elapsed time (seconds): 149.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  12.535 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
