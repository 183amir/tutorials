.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Miss' b'(' b'Anne' b'Baldwin' b')' b',' b'and' b'5' b'<unk>' b'.' b'The' b'presence' b'of' b'Heston' b'diagram' b'(' b'also' b'stable' b'Air' b'Affairs'
    b')' b',' b'person' b'as' b'a' b'bird' b'about' b'a' b'stiff' b'city' b',' b'which' b'was' b'also' b'able' b'to' b'be' b'part' b'of' b'eighteen'
    b'students' b',' b'leading' b'up' b'36' b'%' b'potential' b'to' b'decide' b'head' b'issued' b'since' b'/' b'45' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'A'
    b'selection' b'of' b'seral' b'5240' b'=' b'<eos>' b'<eos>' b'The' b'Annals' b'of' b'Ireland' b'are' b'a' b'locality' b'in' b'gems' b'by' b'lopsided' b'language' b','
    b'in' b'England' b',' b'which' b'suggest' b'these' b'million' b'authorities' b'like' b'or' b'indicate' b'a' b'orbit' b'division' b'after' b'like' b'females' b'.' b'A' b'anonymous'
    b'story' b',' b'buff' b'missionary' b',' b'Seamus' b'et' b'Allah' b',' b'is' b'more' b'one' b'known' b'as' b'well' b'.' b'He' b'described' b'the' b'opening'
    b'door' b'<unk>' b'fire' b'<unk>' b'(' b'died' b')' b'1977' b',' b'featuring' b'<unk>' b',' b'e' b',' b'infestation' b',' b'and' b'spiders' b',' b'as'
    b'well' b'as' b'their' b'fixed' b'divinities' b',' b'Editing' b'"' b'fully' b'facility' b'"' b'.' b'In' b'1790' b',' b'(' b'1999' b')' b'are' b'now'
    b'overlooked' b',' b'<unk>' b'for' b'Islands' b'Guardsmen' b'\xe2\x80\x94' b'and' b'the' b'closest' b'Vermont' b'traits' b'for' b'parallel' b'7' b'volumes' b'of' b'knowledge' b'.' b'Pipe'
    b'fruit' b'representative' b'.' b'S.' b'al.' b'was' b'the' b'subject' b'of' b'even' b'reading' b'Mysore' b'.' b'The' b'Ras' b'is' b'increasingly' b'vague' b',' b'Daddy'
    b',' b'while' b'immigrants' b'were' b'renowned' b',' b'certain' b'technique' b'were' b'accomplished' b'.' b'<eos>' b'Georgian' b'bird' b'singer' b'The' b'school' b'of' b'M.' b'Dareus'
    b'is' b'an' b'WAG' b'at' b'cottages' b'after' b'which' b'was' b'described' b'as' b'90' b'%' b'of' b'emission' b'(' b'oaths' b')' b'.' b'All\xc4\x81h' b'binaries'
    b'such' b'as' b'as' b'the' b'host' b'of' b'Captain' b'pumped' b'to' b'unite' b'as' b'pre' b'@-@' b'royal' b',' b'usually' b'striking' b'a' b'protein' b'and'
    b'barrier' b',' b'but' b'has' b'been' b'widely' b'used' b'...' b'in' b'the' b'past' b',' b'these' b'the' b'Frenchmen' b'notes' b'two' b'peaks' b'to' b'determine'
    b'1063' b'.' b'In' b'addition' b'to' b'outlying' b'mornings' b',' b'the' b'kakapo' b'appears' b'their' b'game' b'.' b'A' b'character' b'by' b'Historian' b'Cunningham' b'<unk>'
    b'commented' b'it' b'was' b'"' b'drank' b'another' b'With' b'bonus' b'and' b'hang' b'any' b'Odaenathus' b';' b'in' b'his' b'essays' b'\xe2\x80\x99' b's' b'consistent' b'<unk>'
    b'of' b'nuclear' b'chant' b'has' b'successfully' b'charged' b',' b'and' b'although' b'stretches' b'about' b'11' b'years' b',' b'undetected' b'that' b'outlet' b'music' b'.' b'The'
    b'word' b'of' b'<unk>' b'"' b'(' b'II' b')' b'is' b'sometimes' b'distinguished' b'.' b'In' b'Polish' b',' b'Birth' b',' b'is' b'negotiating' b'in' b'the'
    b'northern' b'19th' b'century' b'.' b'Several' b'subspecies' b'may' b'be' b'moved' b'to' b'unlock' b'the' b'planet' b'of' b'starling' b'simply' b'.' b'Since' b'this' b'makes'
    b'helium' b'of' b'it' b',' b'they' b'may' b'refer' b'to' b'the' b'male' b',' b'within' b'Sirex' b',' b'making' b'that' b'Djedkare' b'can' b'be' b'able'
    b'to' b'burn' b'their' b'body' b'by' b'a' b'variety' b'of' b'flirting' b'.' b'The' b'objections' b'have' b'raised' b'eight' b'centuries' b'and' b'to' b'it' b'.'
    b'At' b'that' b'point' b'for' b'their' b'next' b'season' b',' b'during' b'example' b',' b'unrest' b',' b'pulled' b'kept' b'by' b'greater' b'legs' b',' b'often'
    b'interact' b'into' b'high' b'flow' b'hand' b'win' b'.' b'<eos>' b'In' b'Europe' b'@-@' b'taken' b',' b'the' b'Republic' b'of' b'Wales' b'composed' b'silver' b'evidence'
    b'in' b'this' b'region' b',' b'established' b'to' b'run' b',' b'on' b'different' b'ingredients' b'.' b'<unk>' b'by' b'<unk>' b',' b'Xavier' b',' b'Greek' b','
    b'yellow' b',' b'was' b'referred' b'to' b'as' b'a' b'characterized' b',' b'<unk>' b',' b'relationship' b'by' b'drug' b'filiation' b'.' b'There' b'will' b'identify' b'any'
    b'common' b'movement' b',' b'particularly' b'around' b'30' b'km' b'(' b'100' b'mi' b')' b'west' b'of' b'<unk>' b'.' b'<unk>' b'takes' b'over' b'10' b'%'
    b'of' b'the' b'birds' b'on' b'a' b'nest' b'2' b'@.@' b'5' b'%' b'of' b'the' b'early' b'reddish' b'bend' b'.' b'These' b'compound' b'include' b'a'
    b'tie' b'range' b',' b'Ravi' b'mentions' b'of' b'Mesopotamia' b',' b'complications' b',' b'offensive' b'from' b'non' b'@-@' b'Cash' b',' b'including' b'three' b'other' b'messages'
    b',' b'potassium' b'taxa' b',' b'and' b'an' b'average' b'maximum' b'dozen' b'mating' b'slightly' b'.' b'<eos>' b'As' b'entering' b',' b'they' b'feeding' b',' b'if'
    b'they' b'were' b'<unk>' b'.' b'Consequently' b',' b'Roo' b'then' b'lists' b'eastward' b'required' b'the' b'infiltrating' b'in' b'both' b'of' b'sexual' b',' b'fragments' b'of'
    b'<unk>' b'.' b'Since' b'hardly' b'age' b',' b'the' b'ram' b'shot' b',' b'with' b'a' b'second' b'or' b'2' b'@.@' b'2' b'\xe2\x80\x93' b'4' b'\xce\xbcm'
    b',' b'on' b'a' b'estimated' b'sequence' b',' b'2' b'centimetres' b'from' b'7' b'.' b'<unk>' b'industry' b',' b'however' b',' b'and' b'still' b'microscopy' b'even'
    b'broke' b'Chief' b',' b'builds' b'it' b'to' b'<unk>' b',' b'limit' b'.' b'Those' b'120' b'\xe2\x80\x93' b'2' b'cent' b'on' b'Burnley' b'and' b'UCLA' b'in'
    b'the' b'most' b'<unk>' b'South' b'America' b',' b'after' b'similar' b'a' b'large' b'europium' b'or' b'two' b'orbital' b'Mallowan' b'from' b'blood' b',' b'Allah' b','
    b'which' b'can' b'give' b'known' b'<unk>' b'to' b'feature' b'level' b'.' b'<eos>' b'<eos>' b'=' b'=' b'1218' b'=' b'=' b'<eos>' b'<eos>' b'A' b'35'
    b'Independent' b'invasive' b'field' b'antelope' b'(' b'340' b'@-@' b'shaped' b')' b'is' b'(' b'face' b')' b'Darwin' b',' b'usually' b'from' b'bars' b'since' b'lesson'
    b',' b'which' b'are' b'also' b'derived' b'at' b'an' b'kakapo' b'more' b'than' b'2' b'@.@' b'5' b'million' b'(' b'Elida' b')' b',' b'this' b'observation'
    b'that' b'can' b'become' b'illegal' b'to' b'be' b'known' b'.' b'<eos>' b'WASP' b'channels' b'is' b'sometimes' b'known' b';' b'to' b'the' b'eastern' b'territory' b','
    b'"' b'control' b'have' b'shown' b'the' b'handling' b'"' b'of' b'King' b'Farm' b',' b'Lawrence' b'having' b'a' b'non' b'@-@' b'68' b'star' b'.' b'His'
    b'large' b'calendar' b'are' b'visible' b'.' b'Upon' b'all' b',' b'<unk>' b',' b'other' b'methods' b'broke' b'to' b'the' b'tail' b'before' b'its' b'sizeable' b'loss'
    b'.' b'One' b'other' b'involve' b'females' b'were' b'it' b'to' b'believe' b'that' b'the' b'kakapo' b':' b'"' b'<unk>' b'British' b'in' b'his' b'friends' b'"'
    b'and' b'The' b'"' b'Democrat' b'I.' b'"' b',' b'described' b'by' b'much' b'poet' b'flying' b',' b'compared' b'grid' b'and' b'appropriate' b',' b'and' b'after'
    b'its' b'breeding' b'memories' b'.' b'In' b'the' b'first' b'and' b'Solar' b'<unk>' b',' b'the' b'term' b'Kicking' b'ran' b'\xe2\x80\x93' b'Enriquillo' b'daily' b',' b'which'
    b'it' b'is' b'reduced' b'to' b'males' b'the' b'minerals' b'of' b'Gardnerian' b',' b'accomplished' b',' b'and' b'open' b'species' b'with' b'turuma' b',' b'healthcare' b','
    b'or' b'even' b'<unk>' b'when' b'they' b'daily' b'83' b'or' b'six' b'.' b'Those' b',' b'according' b'to' b'their' b'western' b'<unk>' b'option' b'or' b'adults'
    b'and' b'stability' b',' b'each' b'will' b'be' b'observed' b'as' b'activity' b'.' b'A' b'nuclear' b'<unk>' b'<unk>' b'usually' b'<unk>' b'advancing' b'with' b'the' b'vineyards'
    b'as' b'little' b'as' b'reaching' b'B.' b'Cross' b'.' b'Islanders' b'or' b'larvae' b'are' b'unstable' b',' b'trek' b'containing' b'common' b',' b'membrane' b'including' b'incessantly'
    b'and' b'protein' b',' b'which' b'follows' b'molecular' b'treatment' b'of' b'objects' b'.' b'There' b'I' b'also' b'<unk>' b'<unk>' b'police' b',' b'n' b'and' b'deep'
    b'within' b'a' b'psychiatric' b'diet' b'cannot' b'be' b'dated' b'.' b'<unk>' b'Advertising' b'were' b'shown' b'to' b'find' b'each' b'element' b',' b'and' b'it' b'can'
    b'be' b'Extinction' b'.' b'The' b'food' b'contact' b'near' b'each' b'sheep' b'due' b'to' b'ejaculation' b',' b'whereas' b'the' b'physiological' b'imagination' b'are' b'shared' b'for'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.1
    loss: 5.168
    elapsed time (seconds): 166.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  51.642 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
