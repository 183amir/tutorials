.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'weighing' b'their' b'assistant' b'as' b'being' b'able' b'to' b'[' b'anyone' b"'" b'death' b'begins' b'as' b'a' b'option' b'"' b'when' b'To' b'end' b'it'
    b'it' b',' b'if' b'he' b'is' b',' b'Baltimore' b'can' b'be' b'a' b'good' b'step' b',' b'and' b'they' b'wouldn' b"'t" b'<unk>' b'for' b'the'
    b'course' b'of' b'strung' b'on' b'Wolfpack' b',' b'and' b'even' b',' b'if' b'if' b'the' b'<unk>' b'[' b'Mary' b']' b'his' b'evidence' b'showed' b'it'
    b'with' b'them' b'that' b'"' b'was' b'they' b"'ll" b'that' b'rise' b'the' b'development' b'of' b'Kajal' b'was' b'justice' b'without' b'having' b'been' b'advised' b'to'
    b'get' b'on' b'to' b'make' b'another' b'shout' b'.' b'<eos>' b'Dodge' b'commented' b'its' b'development' b',' b'which' b'nonetheless' b'apparently' b'sang' b'Leibniz' b'from' b'his'
    b'69' b'Division' b'Georges' b'@-@' b'loss' b'known' b'to' b'mark' b'their' b'health' b'flank' b'of' b'solar' b'load' b'being' b'held' b'.' b'However' b',' b'Shao'
    b'<unk>' b'gave' b'it' b'more' b'seemed' b'to' b'learn' b'themselves' b',' b'a' b'descriptions' b'that' b'decided' b'to' b'think' b'1853' b'.' b'The' b'reviewer' b'learns'
    b'that' b'it' b'is' b'intentional' b'through' b'conflicting' b'for' b'the' b'players' b'to' b'observe' b'Firstly' b'conditions' b'on' b'their' b'shock' b'.' b'In' b'December' b','
    b'Mosley' b'who' b'started' b'the' b'arsenal' b'against' b'<unk>' b'very' b'than' b'looking' b'in' b'fact' b'.' b'However' b',' b'there' b'is' b'still' b'conservation' b','
    b'the' b'builds' b'points' b'with' b'Oxford' b',' b'Laverton' b',' b'and' b'41st' b',' b'inside' b'the' b'evidence' b'being' b'often' b'be' b'much' b'reported' b'a'
    b'planet' b'(' b'"' b'binary' b'to' b'John' b'"' b')' b'.' b'Thriller' b'Jeremi' b'sits' b'into' b'deprecation' b'resulting' b'in' b'psychology' b'for' b'<unk>' b'stars'
    b'to' b'be' b'successful' b';' b',' b'expressing' b'gospel' b'standalone' b'.' b'<eos>' b'During' b'the' b'first' b'two' b'years' b',' b'Chen' b'spent' b'a' b'new'
    b'election' b'responses' b'with' b'Mr' b'native' b'to' b'a' b'toughest' b'fraction' b'which' b'could' b'be' b'expected' b'and' b'were' b'too' b'multi' b'@-@' b'educated' b'.'
    b'<unk>' b',' b'the' b'kakapo' b'peculiar' b'and' b'Solo' b'@-@' b'potential' b'<unk>' b'10' b'.' b'She' b'spent' b'a' b'first' b'twenty' b'@-@' b'metre' b'more'
    b'@-@' b'period' b'ahead' b'of' b'six' b'months' b'to' b'avoid' b'since' b'were' b'reused' b'by' b'<unk>' b',' b'as' b'suddenly' b'over' b'thunderstorms' b'.' b'The'
    b'proximity' b'was' b'also' b'noted' b'that' b'it' b'pitched' b'the' b'capability' b'to' b'least' b'be' b'influenced' b'by' b'plastic' b'binomial' b'.' b'Taylor' b'wrote' b'and'
    b'raise' b'a' b'one' b'particular' b'Australians' b'on' b'1998' b'and' b'birds' b'such' b'as' b'Layne' b'<unk>' b',' b'a' b'insane' b'@-@' b'neurons' b',' b'London'
    b',' b'controlled' b'spindle' b',' b'progenitor' b'Kipling' b',' b'<unk>' b'quote' b',' b'<unk>' b'and' b'purplish' b'silver' b',' b'and' b'<unk>' b'his' b'colloquially' b'.'
    b'C.R.U.S.H.' b'is' b'a' b'promotional' b'controversy' b',' b'whose' b'player' b'.' b'w' b'is' b'kitsune' b'Hopkins' b'<unk>' b',' b'where' b'he' b'get' b'its' b'horse'
    b'to' b'a' b'resembles' b'bat' b'.' b'<eos>' b'The' b'London' b'240s' b'is' b'effectively' b'dubbed' b'been' b'observed' b'.' b'<eos>' b'As' b'is' b'newborn' b'by'
    b'this' b'other' b'person' b',' b'Ceres' b'had' b'fallen' b'several' b'geometry' b'as' b'he' b'prefer' b'it' b'.' b'As' b'<unk>' b',' b'dark' b',' b'with'
    b'other' b'outspoken' b'spots' b'are' b'not' b'enlarged' b'.' b'<eos>' b'Because' b'mac' b'Glenwood' b'riffs' b'published' b'up' b'his' b'own' b'hyphae' b',' b'Dr.' b'Boom'
    b'diable' b'for' b'2005' b'is' b'a' b'vintage' b'starling' b',' b'related' b'to' b'another' b'other' b'odor' b'of' b'larger' b'literature' b'.' b'She' b'then' b'says'
    b'that' b'R\xc3\xa9union' b'described' b'a' b'<unk>' b'owner' b'to' b'grant' b'the' b'phone' b'by' b'humanity' b'had' b'climbs' b'his' b'arrival' b'the' b'wings' b"'s" b'breakage'
    b'used' b'<unk>' b'trails' b',' b'by' b'great' b'angle' b',' b'and' b'quickly' b'happen' b'during' b'other' b'martial' b'children' b'.' b'These' b'45' b'I' b'develop'
    b',' b'and' b'comply' b'real' b',' b'maple' b',' b'often' b'"' b'impractical' b'"' b':' b'"' b'slender' b'harmonies' b'cooking' b'accompanied' b'to' b'[' b'of'
    b'brightest' b']' b'barricades' b"'" b',' b'and' b'tell' b'it' b'tradition' b'@-@' b'up' b'(' b'making' b'of' b'the' b'chattering' b'side' b',' b'and' b'there'
    b'is' b'no' b'collection' b'of' b'Andrew' b'\xe2\x80\x99' b't' b'.' b'"' b'The' b'NBA' b'takes' b'unclear' b'funds' b'and' b'barque' b'Ceres' b',' b'which' b'also'
    b'added' b'a' b'weapon' b':' b'there' b'are' b'no' b'number' b'of' b'six' b'offspring' b',' b'in' b'1919' b',' b'including' b'iron' b'mocking' b'as' b'Jordan'
    b"'s" b'male' b'intensity' b'.' b'This' b'association' b'on' b'damage' b'Whereas' b'photosphere' b'and' b'turkey' b',' b'and' b'the' b'Star' b'Bang' b',' b'which' b'also'
    b'previously' b'need' b'from' b'social' b'loud' b',' b'too' b'kind' b'allows' b'identity' b'with' b'players' b'and' b'assumption' b'contact' b',' b'<unk>' b',' b'would' b'be'
    b'capable' b'of' b'justified' b'.' b'Like' b'example' b',' b'5' b'@.@' b'4' b'm' b'(' b'0' b'at' b'2' b'@.@' b'5' b'ft' b')' b'was'
    b'a' b'very' b'broad' b'common' b'success' b',' b'and' b'are' b'a' b'copy' b'of' b'most' b'depth' b'.' b'It' b'is' b'not' b'possible' b'to' b'belong'
    b'to' b'holding' b'<unk>' b'with' b'a' b'animal' b'arsenic' b'.' b'Perhaps' b',' b'their' b'degree' b'may' b'leave' b'across' b'effect' b',' b'and' b'they' b'have'
    b'also' b'yet' b'trouble' b'a' b'juvenile' b'encourages' b'him' b'.' b'It' b'is' b'obviously' b'Kheops' b',' b'exposed' b',' b'and' b'works' b'that' b'can' b'make'
    b'16' b'\xe2\x80\x93' b'2' b'tails' b',' b'and' b'only' b'may' b'be' b'killed' b'.' b'These' b'dunes' b'fit' b'damage' b'by' b'1891' b'and' b'smallest' b'attempting'
    b'to' b'be' b'brought' b'on' b'30' b'to' b'18' b'hours' b'.' b'They' b'<unk>' b'males' b'ago' b',' b'treat' b'eggs' b'as' b'"' b'whenever' b'gigantic'
    b'as' b'industrial' b'at' b'reach' b'common' b'vegetation' b'"' b'.' b'However' b',' b'on' b'dark' b'sources' b',' b'bone' b'remembering' b'others' b'a' b'division' b'must'
    b'occur' b'in' b'love' b'.' b'<eos>' b'The' b'female' b'is' b'visible' b',' b'and' b'<unk>' b'they' b'are' b'conforming' b':' b'"' b'Two' b'people' b'has'
    b'puts' b'simply' b'his' b'long' b'may' b'remedy' b'or' b'.' b'Venus' b'could' b'use' b'on' b'other' b'or' b'one' b'casemates' b'draped' b'comparing' b'you' b'of'
    b'pre' b'@-@' b'tail' b';' b'it' b'is' b'likely' b'a' b'great' b'secondary' b'female' b'which' b'in' b'another' b'manner' b'were' b'61' b'percent' b',' b'so'
    b'by' b'the' b'delight' b'through' b'be' b'the' b'exceptional' b'starling' b'allows' b'it' b'to' b'get' b'a' b'pools' b'a' b'nest' b'can' b'be' b'lost' b'.'
    b'What' b'couldn' b"'t" b'steals' b'a' b'variety' b',' b'calls' b'.' b'If' b'the' b'undistinguished' b'voice' b'(' b'like' b'more' b'very' b'fed' b'voice' b')'
    b'.' b'It' b'be' b'to' b'become' b'anti' b'inches' b'.' b'So' b'is' b'so' b'corresponds' b'together' b'.' b'But' b'a' b'glossy' b'bird' b'fight' b'by'
    b'kneeling' b',' b'now' b'if' b'the' b'compromise' b'were' b'good' b',' b'and' b',' b'a' b'large' b'man' b'bath' b'certain' b'accurate' b'elements' b',' b'acted'
    b'as' b'<unk>' b',' b'he' b'does' b'so' b'record' b'up' b'.' b'This' b'genuine' b'eggs' b'is' b'gate' b'AAR' b';' b'their' b'head' b'along' b'a'
    b'light' b'variant' b',' b'and' b'specifically' b',' b'they' b'head' b'and' b'bowled' b'the' b'tracery' b'<unk>' b'of' b'<unk>' b'.' b'57' b'may' b'be' b'detected'
    b'up' b'made' b'it' b'for' b'close' b'to' b'very' b'birds' b'by' b'his' b'male' b'\xe2\x80\x93' b'100' b'.' b'This' b'distinguish' b'melodramatic' b'heads' b'harmless' b'for'
    b'a' b'private' b'jacket' b';' b'however' b',' b'at' b'a' b'half' b'of' b'of' b'horsepower' b"'s" b'memory' b'biting' b'to' b'males' b',' b'earth' b','
    b'residential' b'parrot' b'and' b'disease' b'(' b'1' b'@.@' b'5' b'million' b')' b'and' b'40' b'\xe2\x88\x92' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Impact' b'='


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.9
    loss: 5.168
    elapsed time (seconds): 142.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  6.145 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
