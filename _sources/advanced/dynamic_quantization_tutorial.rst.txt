.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'for' b'another' b'stage' b'frigate' b',' b'alongside' b'a' b'massive' b'evidence' b'a' b'association' b'on' b'his' b'words' b'to' b'examine' b'a' b'fascist' b'popcorn' b'designed'
    b'in' b'command' b'.' b'<eos>' b'As' b'an' b'minimal' b',' b'Raffles' b'assembly' b'takes' b'place' b'in' b'fighting' b',' b'whom' b'sequence' b'them' b'levels' b'from'
    b'the' b'game' b',' b'moved' b'at' b'No.' b'5' b'.' b'On' b'other' b'wall' b',' b'they' b'cannot' b'be' b'passed' b'on' b'a' b'referendum' b'close'
    b'to' b'strengthen' b'assume' b'the' b'term' b',' b'which' b'has' b'their' b'Baltimore' b',' b'greater' b'and' b'other' b'mobility' b'in' b'the' b'volume' b'and' b'<unk>'
    b',' b'passing' b'a' b'year' b'throughout' b'radio' b'.' b'Aside' b'seen' b'on' b'M.' b'Conway' b',' b'stream' b'of' b'a' b'polytree' b',' b'has' b'"'
    b'becoming' b'the' b'native' b'<unk>' b'ever' b'so' b'after' b'haven' b'and' b'Uncle' b'Balestre' b'"' b'.' b'<unk>' b'God' b'was' b'dog' b'Leonardo' b'as' b'being'
    b'played' b'on' b'Edition' b'mixed' b'students' b'has' b'the' b'first' b'best' b'baby' b'traits' b'containing' b'some' b'Maya' b'units' b'.' b'Although' b'concluded' b'this' b'were'
    b'flat' b'or' b'they' b'were' b'the' b'silence' b'of' b'pre' b'@-@' b'page' b',' b'while' b'second' b'said' b'the' b'characters' b'would' b'often' b'be' b'so'
    b'able' b'to' b'have' b'kept' b'.' b'Das' b'Santo' b'descended' b'in' b'the' b'moments' b'the' b'contest' b'of' b'Amazon.com' b',' b'literary' b'<unk>' b',' b'and'
    b'harmless' b'power' b',' b'mentioning' b'in' b'their' b'good' b'periods' b',' b'which' b'supernatural' b'miner' b'eggs' b'all' b'on' b'the' b'world' b'and' b'its' b'homes'
    b'and' b'<unk>' b',' b'became' b'the' b'only' b'minor' b'officer' b'before' b'the' b'two' b'sun' b'Korea' b'are' b'suitable' b'.' b'There' b'are' b'no' b'opinion'
    b'that' b'it' b'did' b'not' b'be' b'found' b'a' b'powerful' b'variety' b'of' b'origin' b'.' b'The' b'city' b"'s" b'reception' b'begins' b'for' b'a' b'kakapo'
    b'yellowish' b'.' b'They' b'may' b'be' b'substituted' b',' b'including' b'3' b'\xc3\x97' b'5' b'in' b'(' b'38' b'@.@' b'4' b'in' b')' b'while' b'weight'
    b'361' b'a' b'virtue' b'of' b'2' b'@.@' b'8' b'm' b'(' b'5' b'@.@' b'8' b'in' b')' b'long' b'.' b'The' b'kakapo' b'then' b'vanished'
    b',' b'being' b'only' b'disappeared' b'.' b'Baby' b'<unk>' b'in' b'Shetland' b'becomes' b'shown' b'to' b'become' b'designated' b'around' b'every' b'<unk>' b'NCAA' b',' b'either'
    b'to' b'25' b'surviving' b'.' b'It' b'will' b'be' b'seen' b'to' b'aggregated' b'it' b',' b'unlike' b'@-@' b'berth' b',' b'23' b'metres' b'(' b'0'
    b'@.@' b'4' b'in' b')' b'Stefani' b',' b'so' b'the' b'kakapo' b'@-@' b'guide' b'is' b'very' b'of' b'slightly' b'120' b'or' b'980' b',' b'in'
    b'which' b'their' b'population' b'as' b'flight' b'relief' b'size' b'<unk>' b',' b'as' b'it' b'ends' b'until' b'about' b'17' b':' b'30' b'on' b',' b'males'
    b'seen' b'in' b'ship' b'.' b'<eos>' b'<eos>' b'=' b'=' b'O' b'galericulata' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b'in' b'which' b'finely' b'word'
    b'like' b'hemmemas' b'are' b'based' b'in' b'terminal' b',' b'Mustang' b',' b'Helen' b',' b'<unk>' b',' b'and' b'animal' b'.' b'They' b'show' b'the' b'common'
    b'Enough' b':' b'a' b'catapult' b'do' b'also' b'receive' b'most' b'kinds' b'of' b'their' b'bright' b'part' b'of' b'Iraq' b'.' b'The' b'low' b'emotions' b'is'
    b'probably' b'visible' b'classes' b'known' b'as' b'and' b'feeding' b'earthstars' b'.' b'Females' b'has' b'Forerunner' b'high' b'evidence' b',' b'as' b'no' b'<unk>' b'as' b'strong'
    b',' b'item' b'than' b'<unk>' b'or' b'marvellous' b'or' b'<unk>' b'<unk>' b'.' b'Even' b'the' b'sequence' b',' b'a' b'female' b'suggests' b'they' b'also' b'justice'
    b'its' b'dark' b'clerk' b',' b'with' b'the' b'owner' b'illiterate' b'Peuple' b':' b'<unk>' b',' b'scripture' b'<eos>' b'"' b'<unk>' b'"' b',' b'"' b'The'
    b'amazing' b'landowner' b'of' b'the' b'perfectly' b'<unk>' b'<unk>' b',' b'1812' b'at' b'Lake' b'Eurasia' b'and' b'the' b'<unk>' b'!' b'"' b'.' b'It' b'is'
    b'roadside' b'shipyard' b',' b'roughly' b'twenty' b'to' b'9' b'degrees' b',' b'and' b'2' b'.' b'In' b'cooler' b',' b'her' b'winter' b'can' b'be' b'reused'
    b'.' b'<eos>' b'Since' b'in' b'filming' b',' b'it' b'has' b'pre' b'@-@' b'dirt' b'for' b'Ceres' b'of' b'65' b'%' b'who' b'arrived' b'in' b'their'
    b'home' b'.' b'One' b'compact' b'interaction' b'<unk>' b'that' b'many' b'birds' b'have' b'praises' b'an' b'vast' b'Haus' b'.' b'The' b'final' b'tower' b'(' b'born'
    b'b' b')' b'is' b'discovered' b'after' b'only' b'on' b'low' b'regions' b';' b'mainly' b'or' b'sulfate' b',' b'remedy' b'by' b'food' b',' b'other' b'highways'
    b'are' b'white' b',' b'from' b'repeatedly' b',' b'passing' b'by' b'"' b'<unk>' b'"' b'and' b'"' b'Amazon.com' b'"' b'off' b'Bad' b',' b'destroyed' b'her'
    b'counties' b'.' b'Zhou' b'explains' b'several' b'are' b'devastated' b'as' b'Phonographic' b'Cash' b'Kamehameha' b'der' b'Blood' b',' b'usually' b'commenting' b'with' b'three' b'more' b'and'
    b'Christian' b'Americans' b',' b'enthusiasm' b'models' b',' b'and' b'other' b'Poison' b'used' b'bases' b'.' b'They' b'is' b'chosen' b'to' b'find' b'a' b'secret' b'fungus'
    b'at' b'what' b'may' b'be' b'found' b'to' b'discuss' b'chin' b'and' b'their' b'gray' b'starting' b'more' b'<unk>' b'\xe2\x80\x94' b'which' b'have' b'not' b'<unk>' b'elsewhere'
    b'<unk>' b'in' b'<unk>' b'and' b'twisted' b'as' b',' b'was' b'offered' b'very' b'late' b'as' b'females' b',' b'no' b'momentum' b',' b'forming' b'language' b','
    b'rock' b'mammals' b'.' b'The' b'narrator' b'has' b'begun' b'7' b'@.@' b'5' b'million' b'(' b'69' b'@.@' b'5' b'in' b')' b'long' b',' b'sciences'
    b'on' b'the' b'end' b'of' b'five' b'.' b'Considering' b'the' b'iodine' b'mass' b',' b'Alexander' b'married' b'a' b'asteroid' b'at' b'a' b'white' b'and' b'very'
    b'abundant' b'dense' b'purple' b'model' b'when' b'they' b'do' b'it' b'at' b'any' b'night' b'.' b'Later' b'her' b'poem' b',' b'intensive' b'by' b'flowers' b'have'
    b'a' b'mysterious' b'ring' b'with' b'20' b'ratio' b',' b'legs' b',' b'she' b'struggled' b'a' b'greatly' b'of' b'34' b'points' b'or' b'five' b'points' b'.'
    b'However' b'(' b'1963' b')' b'the' b'term' b'Late' b'output' b'in' b'many' b'large' b'fat' b'areas' b'on' b'<unk>' b',' b'limestone' b',' b'thick' b','
    b'even' b'various' b'traits' b'.' b'Without' b'almost' b'predators' b'going' b',' b'which' b'TIME' b'all' b'over' b'all' b'years' b',' b'but' b'Due' b'for' b'tooth'
    b'range' b'.' b'<eos>' b'Van' b'Hawk' b',' b'which' b'is' b'the' b'most' b'commonly' b'<unk>' b',' b'is' b'his' b'patch' b"'s" b'gross' b'as' b'they'
    b'star' b'call' b'when' b'embattled' b'with' b'Hour' b'found' b'about' b'every' b'"' b'over' b'100' b'minutes' b'of' b'over' b'59' b'stars' b',' b'capturing' b','
    b'is' b'because' b'I' b'need' b'to' b'happen' b'.' b'"' b'purple' b'spoken' b'populations' b'can' b'be' b'banned' b'from' b'matures' b'.' b'At' b'56' b':'
    b'15' b'the' b'kakapo' b'more' b'cost' b'of' b'the' b'tibia' b',' b'his' b'triple' b'edge' b'is' b'enlarged' b'.' b'When' b'diminishing' b',' b'the' b'head'
    b'depicts' b'less' b'lieutenant' b'or' b'kinds' b'of' b'taxa' b',' b'Wimbledon' b'and' b'water' b',' b'thick' b',' b'<unk>' b',' b'water' b',' b'and' b'electrical'
    b'<unk>' b',' b'and' b'south' b"'s" b'female' b'was' b'suspended' b'before' b'however' b'.' b'Some' b'eggs' b'bear' b'recommend' b'or' b'companions' b'but' b'<unk>' b'females'
    b'conducted' b'by' b'<unk>' b'<unk>' b';' b'they' b'are' b'aided' b'by' b'forecasters' b'in' b'the' b'<unk>' b',' b'on' b'the' b'night' b'or' b'other' b'frequencies'
    b'called' b'"' b'Boy' b'"' b',' b'which' b'were' b'also' b'"' b'spelled' b'"' b'or' b'is' b'"' b'a' b'hard' b'heir' b'of' b'those' b'of'
    b'foreign' b'poetic' b',' b'ideas' b',' b'some' b'explanation' b'being' b'"' b'power' b',' b'and' b'in' b'great' b'regard' b'they' b'will' b'be' b'up' b'.'
    b'<unk>' b'found' b'dies' b'girlfriend' b'Bavarian' b'this' b'other' b'baby' b'or' b'without' b'food' b'or' b'its' b'ability' b'and' b'short' b'amber' b'.' b'During' b'this'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 249.0
    loss: 5.168
    elapsed time (seconds): 170.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  4.672 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
