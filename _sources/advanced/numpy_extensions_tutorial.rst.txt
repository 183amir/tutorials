.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[19.7290,  5.7570,  9.0444,  7.0024,  5.4413],
            [ 5.5816, 10.5383,  8.9613,  6.7691,  4.8463],
            [12.9960,  6.0608,  3.7993, 13.6882,  2.5465],
            [ 5.0627,  4.5483,  2.2071,  3.4561,  3.5958],
            [ 8.3151,  5.3973,  7.7458,  3.1866, 10.3822],
            [ 5.0627,  9.4550,  1.8287,  6.0387,  3.5958],
            [12.9960,  5.6018,  7.3776,  7.0458,  2.5465],
            [ 5.5816,  8.5368,  4.5944,  8.5436,  4.8463]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4330,  0.7266,  0.1871, -0.6755,  0.2414, -0.9493,  1.0926,  1.1307],
            [-0.4355,  0.2393, -1.0338,  0.2826,  0.6784,  0.6316, -0.3689, -0.4112],
            [ 1.8917, -0.6264,  1.2423,  0.3098,  0.1546,  1.4020,  1.2320,  1.3448],
            [-0.4447, -0.2630,  0.4774,  0.5935, -0.8508,  0.9406,  1.4425, -0.2520],
            [-0.9300, -1.6755, -0.1484, -0.0715,  0.1218,  0.0297,  2.4602,  0.5482],
            [ 0.6644, -0.4705, -0.0584, -0.1867, -1.4794,  0.1070,  1.0913, -1.0941],
            [ 1.8162,  0.0389,  1.3929,  1.5022, -0.3418,  0.7950,  0.1214, -0.7746],
            [-0.2422,  2.1363,  1.5153,  0.2516,  0.5024,  0.7961,  0.1603,  0.7877]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.0650, -1.7085,  1.1620],
            [-0.1082,  0.5668,  0.8472],
            [ 1.7022,  0.4717, -1.9531]], requires_grad=True), Parameter containing:
    tensor([[2.4645]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5675e+00,  7.8906e+00,  3.0384e+00, -5.6113e+00,  1.0284e+01,
              2.1240e+00,  3.1822e+00,  1.0519e+01],
            [-4.3876e-01,  7.7340e+00, -9.4884e-01,  7.0427e+00,  3.3799e+00,
             -7.0485e-01,  6.3656e+00, -5.0759e-03],
            [ 6.8022e+00, -2.4267e+00,  3.3108e+00,  3.8067e+00, -4.1256e+00,
              6.4607e+00,  3.0210e+00, -1.9021e+00],
            [ 5.9598e+00, -2.0629e+00,  1.1648e+01, -2.3022e+00, -3.1536e+00,
              6.4637e+00,  2.8652e+00,  4.3952e+00],
            [-4.8546e+00,  6.6989e+00,  2.3782e+00, -1.5860e-01,  8.5114e+00,
              4.1554e+00,  4.0983e+00, -1.5365e-01],
            [ 1.1396e+01,  6.1343e+00,  1.6459e+00,  9.0200e+00, -1.9883e+00,
             -4.3005e-01,  7.0158e-02,  2.8994e-01],
            [ 3.7593e+00, -5.5961e-02,  5.2319e+00, -4.2421e+00,  1.2936e+00,
              1.0162e+01,  7.0766e-01,  2.0232e+00],
            [-1.4146e-01,  1.0886e+01, -1.5391e+00, -6.0463e-01, -4.0546e-01,
              3.3200e+00,  2.0290e+00,  1.1510e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.8175e-01,  1.5161e+00,  2.9490e-01, -6.0949e-01, -8.6296e-02,
              4.7366e+00, -6.8931e+00,  6.3960e+00, -3.1275e+00,  9.9236e-01],
            [ 1.3903e+00, -1.0611e+00, -1.8559e-01, -4.6346e-01,  2.0102e+00,
             -3.5530e+00,  2.0286e+00, -1.7193e-01, -6.9974e-01,  8.4043e-01],
            [ 2.4195e+00,  1.7540e+00,  5.7641e+00, -4.3183e+00,  9.8145e-01,
              1.0406e+00,  5.8863e-01, -4.2139e+00,  4.7082e+00, -2.0741e+00],
            [ 4.8725e-01,  1.2861e+00, -5.3442e+00,  5.9998e-01,  3.6348e+00,
              2.0151e+00,  2.6659e-02,  4.7869e+00, -6.9198e-01, -6.7283e-01],
            [ 2.2400e+00,  1.0972e+00,  8.3175e-01, -4.6990e-01, -2.9840e+00,
              2.8068e+00,  2.9543e-01, -2.9821e+00,  9.4805e-02, -3.7115e-01],
            [-2.9658e+00,  2.8408e+00, -4.8329e+00, -3.3104e+00,  8.0409e+00,
             -2.5452e+00,  8.0253e-01, -2.1846e+00, -1.0726e+00,  4.7376e-01],
            [ 5.4703e-03,  6.7637e-01, -9.7145e-01,  6.6381e-02,  2.6110e+00,
             -4.5440e+00,  7.7625e-01, -4.1781e+00, -2.1746e+00,  2.8235e+00],
            [-3.7883e+00,  3.0012e-01,  7.7166e-01, -2.6169e+00,  4.2877e+00,
             -2.6097e+00, -2.5781e+00,  1.4090e+00,  1.5202e+00, -3.3591e+00],
            [-3.3645e-01,  1.5736e-01,  1.2783e+00, -4.7152e-01, -9.9384e-01,
             -3.0027e+00, -3.5087e+00,  2.7871e+00,  9.5572e-01, -1.4836e+00],
            [-1.4663e+00, -1.3332e+00,  4.9500e-01,  1.9566e-01,  2.9887e+00,
              1.0441e+00, -3.8133e+00, -2.5287e+00,  8.7739e-01,  2.7816e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.547 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
