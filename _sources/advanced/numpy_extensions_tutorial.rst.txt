.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3375, 12.9758,  3.9749,  5.0078,  4.3156],
            [ 3.2280,  3.5023,  5.1772, 10.3054,  3.5271],
            [10.7081, 14.1094,  5.6891,  7.2552,  6.8540],
            [ 9.7774, 10.5621, 13.3232,  7.9175,  8.2825],
            [ 9.9881, 10.3020,  4.0452,  3.1951,  1.5747],
            [ 9.7774, 11.7016,  6.5087,  1.9658,  8.2825],
            [10.7081,  4.4324, 10.2065,  2.3169,  6.8540],
            [ 3.2280,  5.1749, 11.1738,  7.0609,  3.5271]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2687,  1.2320,  0.1118, -0.1430, -1.1696, -1.3675, -0.2115,  1.4404],
            [-0.8882, -1.4293,  1.3447,  0.6426,  0.0995,  0.1829,  0.1286, -1.3273],
            [ 1.2848, -0.5801,  1.2775, -0.2522,  2.1970,  1.6446, -0.4058,  0.1822],
            [-1.0900,  0.8490, -0.1139,  1.4755, -0.1809, -2.2058, -1.2934,  0.2258],
            [-0.7481, -0.2347, -0.6736,  0.5999,  0.1767, -0.2133,  0.0979, -1.0149],
            [ 1.3362,  1.1875, -0.7105,  0.1423,  1.5112,  0.1473,  0.1054, -0.7748],
            [-1.1162,  0.2554,  0.1211,  0.8327, -0.2679,  0.2441,  1.3239, -0.7294],
            [-1.7132, -0.3145,  1.6514,  0.6689, -0.9504, -1.7892, -0.1766, -1.5661]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1070, -0.4700,  1.0391],
            [ 1.1031,  0.1080,  1.0105],
            [ 0.8790, -1.7259,  0.3166]], requires_grad=True), Parameter containing:
    tensor([[-0.5758]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.7137, -1.8909,  1.2562, -1.4180, -3.3174,  4.4898, -6.6678,  4.3315],
            [ 0.7004, -1.1863,  0.6173,  0.8176, -6.6377,  0.2982,  1.2728,  0.0511],
            [ 4.1525,  2.9414,  0.5794,  0.7194,  0.6301,  4.0769, -2.7000,  0.6720],
            [-8.3764, -0.8604,  1.7663,  3.7059, -1.2557, -4.1743,  0.5697,  5.8204],
            [-0.4686, -1.7804,  4.0979, -1.1844, -2.8589,  0.1827, -1.8035, -4.9740],
            [ 1.7638, -3.0590, -4.7361, -2.9306,  1.2617, -1.1047, -5.6430,  3.8152],
            [-2.0351, -5.0250, -0.6143,  0.3544,  3.6239,  2.8066, -4.4392,  3.5777],
            [-0.3095,  3.6151,  2.9656, -4.8383, -2.7839,  1.2720, -3.2978, -2.0665]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3300,  1.9402, -0.3253, -2.3823,  3.2485,  4.0387, -2.8163, -3.9214,
              0.9239,  0.8622],
            [-0.3545,  0.0875,  0.8296, -3.7334, -2.6277,  0.2722,  0.5044, -4.0611,
              1.1864,  1.2146],
            [-1.4351, -2.6355,  5.4734, -3.6177, -1.8500,  1.9485,  5.1090, -4.4569,
             -1.0426,  0.2449],
            [ 1.4212, -1.9094,  4.5987, -2.0243, -2.8050, -1.5209,  2.6622, -2.7997,
              0.1454, -0.0177],
            [ 2.3123, -3.0279, -2.0142,  3.8855, -2.7094, -1.3958,  2.2076,  0.9620,
              1.4816,  0.7138],
            [-2.3384,  1.0251, -1.2906,  2.8199, -1.6270,  3.0650,  1.4391,  1.4997,
              0.6276, -0.3464],
            [-1.7863,  2.2457, -0.5522,  0.5880, -0.9893,  1.6022, -2.5423,  1.8263,
             -1.7962, -1.9269],
            [ 0.9935,  0.4437,  0.7790,  0.5601, -1.3967,  3.2514, -2.1862, -4.4067,
              0.5627, -0.0985],
            [ 1.5592, -2.5566,  0.9609,  0.6200, -0.6013,  0.3026, -0.6155,  2.4294,
              2.4749,  0.9288],
            [ 0.5119, -1.9617,  3.0725, -2.3625,  0.4973, -0.4864,  1.4536, -0.4863,
             -1.9080,  0.3995]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.526 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
