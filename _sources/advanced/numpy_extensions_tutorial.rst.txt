.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.4525,  9.7041,  9.2887,  6.0494,  6.9998],
            [10.7191,  7.7304,  4.9418,  7.9497,  0.0297],
            [ 4.3560, 11.2921,  5.0612, 11.9305, 13.9676],
            [ 3.5544,  3.8243, 12.2462,  1.3125,  9.3601],
            [15.7505,  0.0816, 10.7571,  9.3808, 10.2700],
            [ 3.5544, 11.9642, 18.5762,  8.3655,  9.3601],
            [ 4.3560, 14.1216,  3.4908,  7.1928, 13.9676],
            [10.7191,  1.1806,  8.0635,  3.4701,  0.0297]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1838,  0.1505,  0.1075, -0.2780, -2.6021,  0.6245,  0.1175,  0.6121],
            [ 0.3976,  0.6699, -0.0537,  0.0467, -1.7671, -2.1205, -1.3834,  2.6372],
            [ 0.0031, -0.1535,  1.1396, -0.2302,  1.1877,  0.7677, -0.7117,  0.4349],
            [-0.8558, -0.2346, -0.4215,  0.8488, -0.6776, -0.9445,  2.1698, -1.1736],
            [ 2.3693,  0.2829, -0.2345,  1.6892,  0.2716, -0.1365, -0.7042,  2.0126],
            [-0.9694,  0.6403,  0.8201, -0.9151, -2.1437,  1.4072,  1.2744, -0.1874],
            [-0.5955,  0.9871,  1.0861,  0.0610,  0.0417,  0.6783, -1.5589,  0.8656],
            [-0.2429, -1.5727,  1.3940, -0.1941,  0.0048, -1.3165, -0.5525, -2.2332]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6529,  0.3699, -0.0692],
            [-1.1224, -1.6475,  2.0617],
            [-0.5094,  0.4380, -0.3469]], requires_grad=True), Parameter containing:
    tensor([[-0.8634]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2228,  0.4518, -1.6421, -6.4401, -0.7595,  3.2284, -3.0423,  1.9208],
            [-0.6439, -2.6202, -1.8913,  1.8803,  3.6118, -1.1785, -1.9600, -2.6007],
            [ 0.9266, -2.9362, -3.2782, -3.7675,  0.7904, -4.8882,  3.1938,  2.9745],
            [-0.9424, -3.3096, -2.9592,  1.8457, -6.1706,  1.7522,  0.3846, -2.3065],
            [-4.6994,  4.1351, -0.3567, -3.8450, -0.2583,  3.0476, -6.5008,  4.4443],
            [ 6.1783, -1.9221, -2.4868, -1.9330,  0.7230, -4.0446, -2.4405,  3.7180],
            [-6.5622, -6.1115, -1.0928,  5.9485, -1.6485, -1.7117, -3.3560, -0.6865],
            [-1.1571,  5.4541, -1.9979, -5.5110,  3.6862, -4.2808,  1.6271,  1.1802]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 9.6330e-03, -5.2317e-01,  8.4320e-01,  1.0747e+00, -7.7097e-01,
             -2.7830e+00, -2.5567e+00, -1.4019e-02,  4.4122e-01, -5.5380e-02],
            [-5.8559e-01,  5.7904e-01,  4.7969e-01, -5.3624e+00,  3.9865e+00,
              8.2381e+00,  4.4435e+00, -5.7572e+00, -5.7307e+00,  1.6921e+00],
            [ 1.5913e+00,  1.5473e+00, -5.7992e+00,  1.3779e-01,  6.3621e+00,
             -4.2806e+00,  7.8962e-02,  6.4520e+00, -1.5625e+00, -1.5742e+00],
            [-3.2147e-01, -1.0250e+00,  2.9249e+00, -1.0771e+00, -6.7536e+00,
              3.7530e+00,  9.9210e+00, -5.7096e+00, -3.4640e+00,  2.1050e+00],
            [-1.3386e+00,  1.7022e+00,  4.0036e+00,  1.1414e+00, -4.1443e+00,
             -5.5637e-01, -4.8530e+00,  4.6514e+00,  3.8772e+00, -3.9276e+00],
            [-8.5117e-02, -2.1487e-01, -4.3562e+00,  2.2840e-01,  1.5894e+00,
              2.8567e+00, -5.0291e+00,  7.1114e+00,  1.1463e-01, -2.6917e+00],
            [ 1.2814e+00, -2.0544e+00, -1.2801e+00,  3.4589e+00,  4.2594e-01,
             -2.7832e+00,  1.8753e+00, -1.7547e+00, -6.6845e-01,  9.9220e-01],
            [ 4.9782e-01, -3.8665e-01,  1.9796e+00, -5.6397e+00,  2.5699e+00,
             -2.6568e-01,  2.0336e-01,  6.1995e-01,  2.8180e+00, -2.7386e+00],
            [-1.3436e+00, -6.3549e-02,  1.5019e+00, -1.1259e-01,  1.3689e+00,
              2.6447e-01, -1.7248e+00,  2.7176e+00, -3.7415e+00,  1.7671e+00],
            [-5.0920e-01,  7.9678e-01, -7.6405e-01,  5.6790e-01,  1.6048e-01,
             -4.5237e-01,  1.0058e+00, -9.2490e-01,  6.2666e-01, -2.2270e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.293 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
