.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.6860,  5.3466,  8.7972,  6.2244,  0.9304],
            [ 1.8943,  4.4693,  9.9176,  4.2000, 17.6851],
            [ 0.3276,  7.9210, 12.4764, 11.5189,  9.0075],
            [12.2286,  0.9733, 15.9702, 14.1555,  8.0021],
            [ 3.0394,  2.9180, 18.3704,  4.8702, 17.8026],
            [12.2286,  2.6701, 14.7151,  5.2530,  8.0021],
            [ 0.3276,  8.3067, 10.2385,  3.0141,  9.0075],
            [ 1.8943,  6.3865,  6.2727,  7.7435, 17.6851]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4616,  0.5683, -0.2794,  2.6426, -1.4382,  1.1390, -1.1973,  0.5642],
            [-1.0850,  1.0075,  0.9165, -1.9674,  0.2474,  1.4384, -1.7472, -0.3444],
            [-1.3830,  1.2769,  0.7141,  0.4734, -1.8605, -0.5380,  3.4123,  1.3765],
            [ 1.4861, -0.5833,  1.1202, -1.3022,  0.1067, -0.2632,  0.0441, -0.9113],
            [ 0.3370,  0.2962,  1.5142, -1.7766,  0.8642,  0.7233, -0.9621, -1.0004],
            [ 1.6599, -0.7915,  0.0097,  1.4258,  1.5780, -1.1084, -0.3293,  1.1309],
            [-0.7779, -0.0663,  0.7392, -0.7193, -2.5584,  0.6374,  0.5308, -0.9675],
            [ 1.1090, -0.3774,  0.4532,  0.7617,  0.9677,  0.0894,  0.0777, -0.9565]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[0.3685, 0.0470, 0.0251],
            [0.1984, 1.4440, 0.9356],
            [0.7739, 0.7624, 0.4081]], requires_grad=True), Parameter containing:
    tensor([[-0.4515]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9694, -1.9355, -0.6984,  1.2424,  1.2293,  0.3955, -0.5295,  2.1678],
            [-0.6498,  1.1498,  1.3468,  2.3924,  4.2400,  2.5104,  3.2442,  3.0181],
            [-2.1006, -1.1005,  0.8329,  3.0769,  1.7357,  1.6652,  2.5785,  4.6819],
            [-1.5345,  0.1760,  2.2040, -1.0046, -1.5124, -1.2558, -0.8001,  1.4247],
            [ 1.8486,  2.2014, -0.5458, -0.0298, -1.4315, -3.9951, -4.1601, -2.5470],
            [-0.8036, -3.0611, -1.9906,  0.4947,  2.8685,  0.3590, -2.3188, -2.4773],
            [-1.3398, -4.2495, -3.9922,  1.0283,  2.6272,  2.4597, -1.2225, -1.0998],
            [-1.2093,  0.2123, -0.9014, -3.0339, -2.3050, -1.5920,  0.5871, -0.9356]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0710, -0.0209,  0.7541,  0.0904, -0.0639, -0.1151,  0.0767,  0.3879,
              0.0554,  0.0261],
            [-0.1684, -0.1873,  0.1658,  2.7459,  2.0454, -0.0250, -1.0127, -0.2144,
              1.6471,  0.9348],
            [-0.5140, -0.4080,  1.7007,  1.8125,  0.0246,  0.2858,  2.0590,  0.1596,
             -2.2957, -0.8931],
            [-0.3638, -1.0758,  0.5165,  0.4666, -0.2809,  2.0185,  0.5006, -1.8527,
             -1.2853, -0.2914],
            [-0.4689,  0.2465,  0.7077,  1.1657, -0.6065, -4.3222, -3.8556, -1.5414,
             -2.3630, -0.8726],
            [ 0.6094,  1.2093,  1.2093,  0.2800, -3.2844, -3.4817, -1.2420, -3.1808,
             -2.3195, -0.0349],
            [ 0.3051,  2.3479,  4.1168,  1.6204, -2.0192, -1.5281, -1.8727, -0.6023,
              0.1282,  0.3714],
            [ 1.4078,  1.4388,  2.2353,  1.5565, -1.4353, -3.0620, -3.9341, -3.1138,
             -2.7310, -0.8467],
            [ 0.0267,  2.2434,  1.1987,  1.6838,  3.1598,  0.1375, -1.3538, -3.9569,
             -3.1631, -0.3737],
            [ 1.3413,  0.8919,  1.1987,  2.5545,  2.1996,  1.8688, -0.5506, -0.8889,
             -0.7468,  0.0166]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.500 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
