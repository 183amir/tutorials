.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.3890,  6.9367, 10.6516,  4.7929,  4.3404],
            [ 7.5021,  7.9287, 13.0555,  7.8026,  3.3843],
            [ 5.5283,  3.2657, 10.5377,  2.5543,  7.1082],
            [ 9.6074,  9.1613, 10.6682,  8.7525, 11.6456],
            [ 5.4058,  9.6238,  5.1011,  2.5150,  1.8386],
            [ 9.6074,  8.6978,  7.7323, 10.7855, 11.6456],
            [ 5.5283,  7.9495, 11.4744, 12.8593,  7.1082],
            [ 7.5021,  9.9753,  3.3550,  6.1510,  3.3843]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0066, -0.2851, -1.1396, -1.3564,  0.7730,  0.5934,  0.0903, -1.3378],
            [ 1.9216, -0.6298, -1.7184,  0.0545, -0.3848, -1.6149, -0.2156,  0.8711],
            [-0.3577,  1.6422,  0.1136,  2.2106,  0.8009, -1.3484, -0.1090,  2.0119],
            [ 0.6102,  1.6350,  0.7592, -2.1424, -0.3273, -1.0054, -0.1075, -0.2883],
            [ 1.4023, -0.2927,  0.9701,  1.4877, -0.4944,  0.7376,  0.7009, -1.1542],
            [ 0.5811,  0.7564, -0.6858,  1.1481, -0.0334, -0.5534, -0.0345,  1.4314],
            [ 1.0656,  0.0382, -0.6699, -1.7864,  1.0658,  1.1655,  0.7882, -0.4222],
            [ 1.4101, -0.4106,  0.5127,  0.5937,  0.4274,  1.3426, -1.3440, -1.0677]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9185, -0.8347, -0.9652],
            [ 1.4357,  1.2066,  0.9984],
            [ 1.1522, -0.3441,  2.3366]], requires_grad=True), Parameter containing:
    tensor([[0.1731]], requires_grad=True)]
    Output from the convolution:  tensor([[-8.9732,  2.2918, -2.5032, -1.2549, -3.0700, -0.2665, -1.3412, -2.6213],
            [-1.1518,  3.1472, -1.9600,  3.2478,  0.6758,  6.1031,  5.5402, -0.6327],
            [ 6.9127,  4.1501,  7.5540,  4.8673,  5.5631, -1.3280,  4.8082,  1.2231],
            [-5.1610, -0.2604, -1.9850,  1.6046, -4.0862,  1.4797,  0.3996,  2.0370],
            [-3.2152, -4.2493, -6.5716, -0.3303, -4.4962, -4.4050, -1.4922, -0.9017],
            [ 6.6140, -1.8199,  3.0488, -0.2309,  0.6687, -0.0268, -0.0599,  1.5154],
            [-9.0119, -0.4057, -7.9035,  2.7566, -2.4978,  0.5641, -4.6813,  1.1446],
            [-0.4312, -4.1396, -4.0325, -0.9511,  2.4809,  2.2195,  1.4380,  1.3301]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3130, -0.5131,  1.8554, -0.2868,  2.6246,  0.6699,  3.2070,  1.9123,
              1.1834,  0.3875],
            [ 1.1411,  2.9781, -1.1446, -1.1214, -6.4877, -5.3069, -5.2078, -1.0272,
              0.8795,  0.9534],
            [-4.4884, -3.1595, -5.9903,  7.1189, -3.1911,  8.6526, -2.7344, -4.2742,
             -5.9156, -3.0177],
            [ 2.6996,  3.6334, -1.0241, -1.2104,  0.6031,  0.8736,  0.4290,  1.4943,
             -0.2141, -2.3607],
            [-2.8294, -5.4554, -0.6252,  4.5191, -0.0202,  3.4511, -1.0649, -6.1501,
             -1.0887, -0.3878],
            [-1.2095,  1.7944, -3.0018,  0.5054,  2.2601,  1.5971,  1.9860,  2.3988,
              3.0714,  1.9013],
            [ 1.4611, -2.5226, -1.6437, -7.9090, -0.0953, -3.4113,  3.7722,  0.4658,
             -2.0015,  2.9986],
            [ 1.3456,  7.2821,  5.4395,  6.0900, -0.3134, -2.1556,  1.6110, -0.7612,
             -2.1890, -2.7692],
            [-1.7252,  0.9237, -3.0123,  9.8787,  5.8400,  6.4972,  5.1742,  5.3840,
              2.9105,  4.3226],
            [-1.4519, -0.6277, -2.8889, -0.1884,  0.4424,  4.2824,  3.0888,  4.5036,
             -0.3093,  5.5137]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.505 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
