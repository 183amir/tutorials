.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.0075,  6.8059, 12.8694,  8.4569,  1.6452],
            [ 3.9937,  6.0280, 11.2159,  2.8983, 13.2281],
            [11.3990, 10.8540,  1.5645,  7.2314,  9.7639],
            [ 6.8455,  4.6863,  6.1573,  7.3172,  5.5880],
            [10.5065,  7.7919,  4.3924,  4.1302,  9.9801],
            [ 6.8455,  2.0717,  5.1231,  6.3646,  5.5880],
            [11.3990, 12.4412,  6.8412,  7.1383,  9.7639],
            [ 3.9937,  6.9139, 11.8019,  4.0268, 13.2281]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2725, -0.6905, -0.2530, -2.0716, -0.1536, -0.5455, -0.2322, -0.5156],
            [-0.2228,  0.5528, -0.5712, -0.3579,  0.2119, -1.0606, -0.9164, -1.6631],
            [-0.1235,  0.9259,  0.5141,  0.0657, -0.0530, -0.4972,  1.8499, -0.2982],
            [ 0.4842,  0.6619, -0.7776, -1.0565, -0.9185,  0.0694,  0.6201, -0.9978],
            [-1.1439,  1.3444,  0.4241, -0.9722,  1.0503,  0.3276, -0.5593,  0.0744],
            [-1.7050,  1.5606, -0.2917,  2.0265, -0.9579, -0.6438, -2.9451, -0.8682],
            [ 1.7020, -0.1372, -0.7658,  0.6561,  1.4849,  0.4601, -0.2324, -0.1578],
            [ 1.5191,  0.7222, -1.1350, -1.0950,  1.6885, -0.5902, -0.5447,  0.4449]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0221, -0.3135,  2.1531],
            [ 0.3267, -0.3875,  0.3391],
            [-0.7294, -0.8991,  0.4803]], requires_grad=True), Parameter containing:
    tensor([[0.4817]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.6448,  2.0358,  0.2476, -1.4746,  2.2483,  2.1103,  5.3965,  2.3507],
            [-3.2475,  3.3142,  6.2203,  0.1093,  1.8422,  0.1757,  6.6928,  4.5276],
            [-1.3655, -0.6204,  0.1304, -4.8733, -1.3304,  0.1347,  2.0697,  3.8901],
            [-0.7505,  5.9083,  0.4036, -1.1602, -3.4342, -2.0874, -0.1770,  4.4200],
            [-3.6827,  1.5505,  0.3709,  0.7328, -0.2792, -0.1170, -2.0446, -0.8279],
            [-3.9909,  0.3556,  4.8880,  5.0474,  0.1313,  0.5175, -4.3761,  5.0432],
            [-0.1243,  6.5719, -4.7523,  6.0782,  0.8375, -0.7770,  1.6827,  2.9854],
            [-2.8299,  1.1920, -2.7596,  3.0661,  1.6761, -2.3389, -5.0591,  1.0512]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0180,  0.2713, -1.9885,  1.6939, -1.1500,  1.6013,  1.1728, -2.0594,
              0.7286, -2.4071],
            [-0.2832,  0.8049, -2.5079,  1.5014,  2.8769, -2.2387, -0.1082, -4.0162,
              0.3738,  1.6211],
            [ 0.3590,  0.4543,  0.9826, -1.3615, -1.9690,  1.9304,  0.6786,  0.2010,
             -0.9761, -0.2470],
            [ 0.8039, -0.0852, -2.4361,  1.7583,  5.6225,  0.8285,  1.8265, -3.9772,
              0.7282,  3.9330],
            [-0.6507,  0.3590, -0.3954, -1.1477, -0.8341,  2.0305,  4.6405, -0.1656,
             -4.2244,  3.4342],
            [-0.1133,  0.1069, -5.6727,  2.5636,  1.4288, -2.9807,  1.2932, -7.2090,
             -1.5618,  1.9269],
            [ 0.2431,  1.6882,  0.0757, -2.2218, -0.5132,  1.2737, -0.6825,  1.8905,
             -0.6907,  1.9544],
            [ 0.9834, -0.9983,  2.5258, -0.5360, -1.5337,  5.3503,  1.2641, -0.0281,
             -0.7613,  1.7057],
            [ 0.2586, -0.8726,  0.9672, -1.3949, -0.1906,  1.6148, -2.6730,  0.0777,
             -0.4873,  0.4823],
            [-1.2011, -0.6751,  2.3746, -0.7427, -1.6411,  0.1134, -0.2874, -0.0381,
             -0.6572,  0.3038]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.364 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
