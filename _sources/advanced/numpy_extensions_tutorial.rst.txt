.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.6047,  7.2925,  6.0357,  4.9903, 11.6220],
            [ 7.1887,  2.9582,  6.2731, 10.5572, 12.7718],
            [ 3.4907, 13.8078,  3.8953, 17.3183,  9.7888],
            [ 2.2159,  7.5865,  5.2133, 15.7659,  7.3633],
            [ 8.3517,  7.4281,  2.4784,  8.3952,  0.6141],
            [ 2.2159,  6.2158,  4.1714,  5.2062,  7.3633],
            [ 3.4907,  5.3082, 22.5738, 12.2446,  9.7888],
            [ 7.1887,  7.6879,  1.8935,  8.4229, 12.7718]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-4.9011e-01, -5.5860e-01,  1.3544e+00,  6.9977e-01, -2.9591e-01,
             -9.6820e-01, -2.6998e-01, -4.2690e-01],
            [ 8.6420e-01, -1.4299e+00,  3.8470e-01,  9.8989e-01, -5.3298e-01,
             -5.0084e-01,  2.2563e+00, -1.3171e-01],
            [ 3.9486e-02, -2.1127e+00, -1.9748e+00,  1.6121e+00,  4.7674e-01,
              7.5579e-01, -3.2594e-01, -5.3912e-01],
            [ 8.2376e-01,  9.4166e-01,  1.3013e+00, -4.1578e-01, -8.6464e-01,
              7.8595e-01, -2.2170e+00,  2.4798e-01],
            [-1.4758e+00,  1.1942e+00,  1.7908e+00, -2.6578e-01, -8.6970e-01,
              7.7588e-02,  2.8519e-01,  2.1134e-01],
            [ 1.8371e+00, -2.0514e-01, -2.1159e-01,  1.9953e+00, -4.8299e-01,
             -6.9707e-01,  2.1888e+00, -3.4105e-01],
            [ 6.4996e-01, -1.5187e+00,  1.9944e+00, -1.2733e+00,  3.1342e+00,
             -4.5366e-01, -9.0063e-01,  5.7026e-01],
            [-5.0501e-01,  6.9935e-01,  5.1915e-01, -7.0190e-01,  2.3293e+00,
              2.4733e-01, -6.9929e-01,  3.0959e-03]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.6762, -0.3670,  0.3352],
            [-0.5492,  0.7922,  0.1050],
            [ 0.7736,  0.8069,  2.3125]], requires_grad=True), Parameter containing:
    tensor([[2.2606]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.4401,  0.6760,  6.4429,  6.3736,  5.4816,  2.8322,  0.6629,  5.4049],
            [-0.7734,  4.5241,  2.2875,  1.5531,  1.4707,  4.9213,  6.4885, 11.9645],
            [ 4.2838, -0.9914,  4.9232,  4.5487,  2.4314,  3.0172,  5.0710,  3.6128],
            [ 0.7916,  0.4698, -0.5928,  1.5559,  1.2104,  1.8491, -3.5974,  5.5248],
            [-0.0242, -0.6539,  4.5322,  2.0725,  2.0134, -1.4178,  2.0802, -2.2206],
            [-1.6225, -3.5266, -4.7862, -1.2144,  2.7974,  0.9399,  1.3806,  6.1209],
            [-2.7519,  2.6824,  5.9882, -2.5432,  4.8922,  3.6566,  2.1047,  0.9781],
            [-5.6087,  4.5499,  1.1840,  0.2828, -0.4336,  4.5539,  8.6326,  6.7132]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.0022, -0.2697,  0.6483,  0.6826,  0.9197, -1.2956,  0.3005,  1.7845,
             -0.4667,  0.3961],
            [-1.0278,  3.6922, -0.1253, -2.8288,  2.6590, -2.3561,  1.0209, -3.5723,
              1.5191, -0.3211],
            [ 4.2661,  2.6649,  8.8997,  1.9863, -2.8365,  1.0232, -1.7708,  1.1262,
             -0.8296,  2.7871],
            [-1.4577,  0.6619, -1.5377,  1.8999, -0.5963, -5.0174, -0.0460, -4.1597,
             -0.5463, -2.9475],
            [ 1.3283, -1.6340,  6.0369, -3.5542, -0.6110, -2.8538, -0.4938, -5.4056,
             -1.2099,  1.1447],
            [-1.5504, -0.7734, -6.0878, -0.3799, -5.8955,  2.6189, -4.6223, -2.3831,
             -3.7654, -0.1171],
            [-0.0102,  0.5841, -0.8742, -5.1614,  4.2931, -5.5801, -1.4875, -0.4460,
             -0.5253, -1.1664],
            [-0.6985, -0.1648, -0.9661, -1.0088,  2.3503,  2.5857, -0.5761, -4.7139,
             -3.8495, -3.3744],
            [-0.0613,  0.1571,  1.2813,  3.8976, -0.0535,  1.0472,  0.8361, -0.1649,
             -2.0071,  3.2133],
            [-0.1476,  0.5458,  0.6261,  1.8265,  1.6743, -0.5014,  4.4140, -0.0112,
              1.0455, -1.4661]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.551 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
