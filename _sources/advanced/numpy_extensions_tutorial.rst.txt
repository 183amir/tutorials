.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.7804,  3.5231,  8.8577, 11.9767,  4.1606],
            [ 3.3758,  4.0558, 10.5714,  8.0741,  8.4546],
            [ 0.7974,  9.5285,  3.6325,  4.5040,  4.6125],
            [ 1.9090,  1.9048,  5.8362,  8.6854,  9.1350],
            [ 2.1023,  4.3359, 10.5643,  7.1245,  6.9148],
            [ 1.9090,  5.6850, 11.4095,  4.4507,  9.1350],
            [ 0.7974,  4.5721,  3.4114,  7.5977,  4.6125],
            [ 3.3758,  0.2980, 11.8793,  8.0467,  8.4546]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-5.2885e-01,  1.7815e-02,  5.6711e-01, -4.3229e-01, -2.0891e+00,
              7.9314e-01,  1.4400e+00, -1.8358e+00],
            [-2.7795e-01,  1.4244e-01, -4.7266e-01,  7.3755e-01, -1.4642e-01,
             -8.1360e-03, -8.2732e-01, -1.5712e-01],
            [ 9.9161e-01,  3.1591e-01, -1.4036e+00,  8.0655e-03, -1.1308e+00,
              1.1952e+00,  9.3685e-02, -5.3700e-01],
            [ 8.4455e-01, -1.2491e+00, -2.9878e-01,  3.4981e-01, -5.4908e-02,
             -2.7930e-01,  4.8856e-02,  1.5345e-01],
            [ 5.2544e-01,  7.0624e-01, -2.1056e+00, -8.2810e-01,  2.2496e+00,
             -1.6404e-01,  1.5127e-01, -6.4292e-01],
            [ 6.0352e-01, -1.0947e-01,  3.4564e-01,  6.4271e-01,  7.2047e-01,
             -7.3436e-01, -1.0681e+00, -1.6419e-01],
            [ 1.1093e-01,  2.5681e-01, -6.2226e-01, -4.8513e-01,  2.6433e-01,
             -6.2517e-01, -4.5988e-02, -6.5198e-01],
            [ 8.7597e-01,  1.8411e-01, -1.6840e+00,  4.4305e-01, -2.2195e+00,
              1.6498e+00, -3.2780e-01, -1.9195e-03]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0808, -0.9872, -0.2761],
            [-1.2501, -0.4167,  0.0487],
            [ 1.0468, -0.1397, -0.4356]], requires_grad=True), Parameter containing:
    tensor([[1.9554]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.9502, -1.1559,  3.6634, -0.9075,  6.5866,  7.1215,  1.8233,  2.4904],
            [ 4.5273,  2.3870,  1.5090,  4.3661, -0.7883, -2.4015,  4.6027, -1.5264],
            [-2.2416,  3.6698,  0.1044,  0.0953,  1.8137,  6.5701, -4.8674,  1.7414],
            [ 4.4397, -3.2401,  3.3125,  3.6921,  2.8688, -0.8203,  9.5062,  2.4663],
            [ 1.0634,  2.6838, -0.4251,  2.9390,  0.9710,  4.3680,  1.4252,  1.9218],
            [ 3.3728,  1.5151,  3.2702,  5.2194,  4.0171,  1.3147,  0.7401,  1.0065],
            [ 0.9964,  4.4150,  0.6625,  2.2619,  2.4830,  0.2356,  3.7416,  5.7937],
            [ 1.3394,  1.3042,  0.7462,  2.3301,  1.2444,  4.5605,  2.2763,  1.3651]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5398,  0.5975, -1.7104,  2.1910,  0.1063, -1.8687,  0.7518,  1.4264,
             -0.3297, -0.1330],
            [ 1.4570, -0.5554,  1.6306, -1.4395,  0.7792,  2.4624,  1.3244, -1.7356,
              0.2378,  0.1923],
            [-2.1878,  0.4544, -0.6876,  2.2928, -1.4852, -0.6192, -2.6783,  1.9019,
              2.3743,  0.1653],
            [ 0.2845,  1.3526,  0.2569, -3.8353,  2.2413,  2.5191,  1.5316,  2.6088,
              0.3654,  0.1284],
            [ 0.0982,  3.2865, -2.3723, -0.6240,  0.6217, -0.2083, -1.3558, -0.5024,
              0.1738,  0.4516],
            [ 1.3895, -2.5332, -0.1591,  1.5865, -3.7467,  3.1268, -4.0707, -1.2274,
              1.5181,  0.2576],
            [-1.6548, -0.3759, -2.6354,  0.2465,  4.4309, -3.4333,  0.3284,  1.0263,
              1.2106, -0.0993],
            [-0.9282,  0.5564,  1.0677,  2.1980, -4.5625,  1.6599, -3.2843, -0.6401,
              1.5186,  0.5034],
            [ 2.6568,  1.0780, -1.9079, -1.2795,  0.3315, -1.8580,  0.9081, -0.4445,
             -0.1239,  0.4225],
            [-1.2805, -0.0860,  0.3079,  2.0442,  0.7364, -0.3263, -1.3159, -0.2577,
              0.3799,  0.0546]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.472 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
