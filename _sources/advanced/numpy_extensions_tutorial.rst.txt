.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.2146,  4.4215,  4.9330, 10.9459,  5.7459],
            [ 4.0062, 14.3254, 18.4187,  2.7828,  8.3806],
            [ 6.2195,  8.9345,  1.2114,  8.0459,  8.9912],
            [ 5.0742,  3.3412,  9.4933,  7.4366,  1.2292],
            [ 0.8708, 10.1320, 10.2144, 10.5890, 12.3681],
            [ 5.0742,  6.6611, 10.8264,  5.9585,  1.2292],
            [ 6.2195,  6.1441,  8.7667,  1.9456,  8.9912],
            [ 4.0062,  4.9089,  9.8714,  3.2219,  8.3806]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.4337,  0.9803, -1.0866, -0.5087,  0.4308,  0.6187,  1.3800, -1.3798],
            [ 1.3468, -1.1305,  0.7000, -0.2198, -0.0548,  0.3323, -0.4641,  0.1046],
            [-0.8015, -0.3451,  0.2573,  1.4811, -2.0091, -1.1067,  1.3600,  0.4628],
            [-1.6229, -1.5622,  1.1384,  0.5779,  0.7967,  0.4882,  0.5320, -1.1982],
            [-0.3933,  0.5380,  0.7423,  1.8206, -0.8177, -0.9295,  1.1143,  0.3242],
            [ 0.0342,  1.3645,  0.7729,  0.9736, -0.3309,  0.3786, -1.0494, -2.0248],
            [ 0.2719,  0.8905,  0.3957, -0.5428, -2.0527,  0.9934, -0.5449, -0.3054],
            [ 2.3866, -1.1568,  0.0353, -0.3110,  1.9232,  0.0572,  0.1557,  0.5692]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2427,  0.9216,  0.6998],
            [-0.3512, -1.2785,  0.5900],
            [ 2.0165, -0.4311,  0.1724]], requires_grad=True), Parameter containing:
    tensor([[0.2412]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.7832e+00, -3.9942e+00,  2.3968e+00,  1.6664e-03,  6.9268e+00,
             -1.7103e+00,  4.2154e+00, -2.5542e+00],
            [ 4.8272e+00, -2.3529e-01, -1.1420e+00, -5.5979e+00,  7.1335e+00,
             -3.0071e+00,  9.8025e-01,  2.6416e+00],
            [ 1.5228e+00,  6.2948e-01,  5.1889e+00, -6.5765e-01, -2.2674e+00,
              1.3667e+00, -1.4096e+00,  1.0185e-01],
            [-6.1812e-02, -2.7196e+00, -5.1391e-01,  3.6404e+00, -1.8139e+00,
              1.5563e+00, -2.5824e+00,  2.2138e+00],
            [ 8.5454e-01, -1.0431e+00,  2.1756e-01,  1.2118e+00, -1.3127e-01,
              1.3780e+00,  2.6954e+00, -4.4751e+00],
            [ 2.2583e+00, -7.5050e-01,  1.4177e+00, -1.7122e+00,  4.1479e+00,
              3.5123e-01,  4.3182e+00,  5.8374e+00],
            [-6.2650e-01,  1.8223e+00,  3.6808e+00, -2.3952e+00,  2.2781e+00,
             -2.3856e+00, -3.5607e+00, -4.8438e-02],
            [ 2.1756e+00,  3.2985e+00,  5.8522e-01,  2.6340e+00,  4.3624e+00,
              5.0931e+00,  4.5938e+00, -3.1212e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.4856,  0.4869,  1.7699, -0.2561, -2.5292, -2.8688, -3.7160, -0.7240,
             -0.3882,  0.4596],
            [-2.6354, -3.9023, -0.9628, -3.1901,  1.9157,  1.7022, -2.8437, -1.2220,
             -2.8453,  0.1020],
            [ 4.7319, -0.6248,  5.2709, -0.1111, -5.0048, -0.4964, -2.9775,  0.9995,
             -1.7535,  0.2903],
            [-4.2006,  1.0137, -3.0322,  1.2610,  3.5251, -5.9666, -0.8926, -0.4227,
             -3.6754, -0.8067],
            [-0.2445,  1.6879,  2.6698, -0.0721,  5.0367,  1.6580, -2.4516,  1.5231,
              0.4503, -1.7653],
            [-2.9800,  3.6677, -3.5881, -0.0212, -4.2050, -3.2532, -3.3151, -5.0364,
              1.9498, -0.8997],
            [-4.5217,  0.3402, -1.7031,  5.1989,  2.3085,  3.0281,  4.2102,  0.7776,
              0.9070,  0.3223],
            [ 0.1033, 10.1786, -0.1659,  0.6829, -0.7414, -0.3585, -4.3696,  0.0448,
              0.4205,  0.8792],
            [-6.4315, -2.2105, -0.5656,  2.1662, -1.7704,  1.0233,  4.0414, -0.3984,
             -0.7913,  0.5140],
            [ 2.5390,  3.8245, -0.2595,  1.0570,  2.2713, -2.6332,  1.1747,  1.1144,
             -0.2582,  0.1205]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.524 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
