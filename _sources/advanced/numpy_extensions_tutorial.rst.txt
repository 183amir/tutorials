.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.8118,  5.7638,  9.4975,  3.4499,  0.6797],
            [ 3.3944,  6.1823, 10.0081,  3.9627,  4.3288],
            [ 3.6877,  6.9970,  9.6375,  9.4580,  4.6268],
            [ 3.8779,  5.1649,  4.0700, 12.6805,  4.8111],
            [ 8.7423,  1.8271,  3.1677,  3.0169,  6.9458],
            [ 3.8779, 10.8119,  5.5248,  7.2432,  4.8111],
            [ 3.6877, 11.9331,  4.8840,  8.5418,  4.6268],
            [ 3.3944, 16.6495, 12.4323,  1.0690,  4.3288]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1874,  1.3981,  0.4758, -1.0519, -0.8708, -0.2688,  0.4087,  0.1629],
            [-0.0911, -0.2413,  0.8376,  0.5734, -1.2961, -0.1271, -0.4279,  0.2455],
            [-0.2834,  0.4921,  0.9255, -0.4783, -0.8490,  0.5595,  0.5040,  0.2996],
            [-1.3405,  0.5325, -1.0392, -0.0375,  1.1819, -1.8236,  0.3846,  0.2803],
            [-0.1522, -1.9531,  0.3130,  1.7049,  2.1949, -0.4445, -0.3018, -1.1282],
            [-0.0736, -1.4393, -1.1139, -0.8687, -1.0279,  0.9239, -0.3465,  0.6745],
            [ 0.1334,  1.7027,  0.3245, -1.1950, -1.2509, -0.9912,  2.2549,  1.0172],
            [ 0.1498,  1.0595,  0.7460, -0.6690, -1.2393,  0.5255,  0.4911, -0.6804]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3074, -0.3319, -0.7743],
            [ 0.3030,  0.0378, -0.7469],
            [-0.3033,  1.9990,  2.2930]], requires_grad=True), Parameter containing:
    tensor([[0.6044]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.7183,  2.7783,  2.1722, -0.9610,  2.1348,  0.5227, -0.2748,  2.5234],
            [-1.9140, -0.7931, -4.2724,  0.8860,  2.3043, -0.8874,  0.9357,  0.3814],
            [-5.9587, -7.7073,  2.6677,  2.0301, -3.5943, -0.8188, -4.3161,  1.1072],
            [10.5156,  7.5133,  1.1214, -3.1118,  2.4801, -0.1109, -4.3165, -4.4045],
            [-4.2929,  0.3319,  5.2520,  2.4289,  0.2549,  1.8449,  0.3612,  1.4566],
            [-3.6153, -0.2274, -0.6264, -2.2684, -1.6091,  4.2209,  1.2689,  1.4247],
            [-0.7947, -1.1421, -2.9633, -4.7605, -0.7771, -2.3387,  0.2356,  0.2151],
            [ 5.6078,  0.3643, -0.2102,  4.0410,  0.6065, -2.1157, -0.8823, -6.1821]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0231,  0.5409,  2.2912,  3.6425,  1.5606,  3.1769,  0.7425,  0.1404,
              0.0923, -0.5762],
            [ 2.3058, -0.8865, -0.1719,  0.1608,  1.0413,  2.8216,  0.7534,  3.6241,
              1.4489,  0.4935],
            [-2.1649, -2.0481,  0.6494, -6.3905, -5.0065, -3.3109,  0.3756, -1.9107,
              1.9981,  4.0228],
            [ 0.8379, -2.8011, -3.3845,  3.1965, -1.4953, -4.2142, -1.0441, -4.6100,
             -5.2928, -1.7968],
            [-1.1461,  1.7008,  7.8197,  2.2527,  1.7794, -3.6841, -1.8306, -0.6679,
             -4.2818, -4.0860],
            [-0.3231, -0.3550, -2.2581,  0.4436,  1.4922,  1.4294,  3.9975,  5.0812,
              4.9653, -1.1904],
            [ 1.3688, -0.1942,  4.5348, -3.6939,  1.3214,  2.1240,  1.0374, -1.5852,
             -2.4134,  0.0952],
            [-0.1589,  1.0459,  2.2428,  2.5686,  0.1411,  0.3346,  2.8037, -4.9918,
             -0.8263,  2.0762],
            [ 0.2669, -2.6331,  1.0643, -0.9299, -5.0742, -4.2762, -5.9367,  0.2544,
              2.0382, -0.2988],
            [ 0.0667, -0.4512, -0.3844,  0.3927, -4.0493, -5.2731, -0.9469, -3.1917,
             -2.5258,  0.6800]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.507 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
