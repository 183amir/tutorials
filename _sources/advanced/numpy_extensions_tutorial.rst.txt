.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.1211,  3.3753,  7.3674, 11.5990,  3.1910],
            [ 4.5399,  7.2938,  7.3304,  6.2872,  6.8377],
            [ 8.6195,  9.2431,  6.0054, 10.0003,  2.9517],
            [13.0845,  3.9223,  6.6465,  3.8675,  2.7027],
            [ 7.5866,  3.5698,  6.5550, 17.5875,  3.7892],
            [13.0845, 17.3745,  3.1530,  8.8205,  2.7027],
            [ 8.6195,  7.3020,  6.1696,  6.6316,  2.9517],
            [ 4.5399,  7.7663,  4.2434,  7.7810,  6.8377]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6438, -1.9366, -0.2100, -0.8556,  0.2041,  0.2855, -1.7583, -0.3626],
            [ 0.0559,  1.4017, -0.4034, -0.5304, -0.1254, -0.6723, -0.9085, -1.8156],
            [ 0.8204,  1.2967,  0.1258,  2.7468, -0.4509,  0.9785, -0.4670, -1.4984],
            [-1.4405, -0.2459, -2.1805, -0.6098,  1.0071,  0.3952,  0.5999, -0.0873],
            [ 1.0815,  0.7549, -0.3968,  1.0682, -0.0707, -0.4891,  0.0230,  0.6686],
            [-0.6975,  0.6655, -1.2627,  0.3087,  0.9465, -2.1996,  0.0751, -0.8405],
            [ 0.9529, -0.8695, -0.0333, -0.5161, -2.0677,  0.9323,  1.7621,  0.1578],
            [ 0.5268,  0.8704, -0.6285,  0.6561,  1.1194, -0.0054,  0.2889, -0.6173]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0686,  1.4904,  0.7196],
            [ 0.4986,  0.6435,  0.2774],
            [ 1.1204, -0.3246, -1.4917]], requires_grad=True), Parameter containing:
    tensor([[0.7445]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.1650, -3.7007, -0.3446,  3.0229,  2.4662, -0.9294,  2.7533,  7.7338],
            [-1.6395,  0.3570,  0.9181,  2.0921, -0.9825,  0.4936,  3.8782, -0.3310],
            [ 0.0871,  0.5757,  1.6548,  1.9338,  0.0862,  4.2122,  2.9893, -0.6894],
            [ 0.6863,  2.4291,  1.1942,  4.2231,  2.9027,  0.5820, -1.2941,  1.0973],
            [ 1.8342,  0.1530,  0.4150,  2.6358, -4.9671, -3.5303,  0.7578, -1.3808],
            [ 3.1499, -2.7041, -0.1971, -1.1987, -1.5203,  5.6245,  5.5834, -4.0565],
            [-1.4880,  1.0435,  4.6456, -1.3553,  0.3935,  7.2495, -1.0137, -3.9800],
            [ 1.0042,  1.1387,  3.2270,  1.8294, -1.6742, -2.3058, -6.8671,  4.6385]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2675, -0.6188,  3.5091, -1.6393, -2.1280, -0.5917,  1.7411, -1.5639,
              1.1348,  0.7558],
            [ 1.9959, -0.1769, -3.7569, -3.0792, -0.0254,  1.6942, -1.9574, -0.0285,
             -0.4357, -0.1552],
            [ 0.7431, -4.4087, -4.1992,  0.6291,  3.0709,  1.3319, -0.8874,  2.5899,
             -2.4847, -3.1010],
            [-2.4373, -1.1979,  4.1408,  2.5512, -0.1249, -1.9283,  3.9825, -0.0611,
              0.8699,  1.3321],
            [-2.2970,  3.7187,  0.5037, -2.7950, -1.7089,  3.1523,  2.3604, -2.3184,
              0.3664,  3.0566],
            [ 0.0709, -1.7847,  2.2097,  1.9778,  3.1059,  1.4994,  0.2683, -0.3292,
             -2.0098, -2.5896],
            [-0.4053,  0.1517,  3.6553,  2.8297, -1.4610,  0.7374, -1.7974, -1.1833,
              1.5394,  0.5614],
            [-0.1039,  3.6381,  0.8641,  0.4661,  1.7696, -0.5425,  1.1181,  0.3753,
              1.8849,  1.4571],
            [ 1.8334,  2.1088, -0.9818, -1.7383,  1.2160,  0.4266, -1.7997, -0.2523,
             -0.8628, -1.1149],
            [ 0.9445,  0.6450, -0.2963, -2.0072, -2.7963,  1.6224,  1.8106, -1.0104,
             -0.3860,  0.0281]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.551 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
