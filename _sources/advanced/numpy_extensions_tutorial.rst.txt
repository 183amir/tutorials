.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.5739,  6.7236, 10.9935,  7.3092,  5.1943],
            [11.9053,  8.8914,  5.3333,  5.9334,  7.2761],
            [ 5.3012,  7.3550,  4.5760,  8.9421,  6.3992],
            [ 1.7043,  8.3380,  9.0807,  9.8231,  9.2126],
            [ 1.8423, 11.5141,  3.6221,  5.0152,  9.8313],
            [ 1.7043,  7.4596,  3.8907,  8.9636,  9.2126],
            [ 5.3012,  7.2546, 12.2320, 10.2374,  6.3992],
            [11.9053,  5.5477,  5.5751,  1.5952,  7.2761]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8309, -1.2551,  0.2985,  1.4920,  0.6614,  0.0118, -1.8362, -0.4597],
            [ 2.9688, -2.7678,  0.1247, -0.3454, -0.7723, -1.9259, -0.1442,  0.4741],
            [-1.4036,  0.4963, -0.4001, -0.5214,  1.7995, -0.0690, -0.1126,  0.1251],
            [ 1.1759,  0.0051,  0.3188,  0.3868,  1.5159,  0.6192,  0.1527, -0.4879],
            [-0.0707, -0.2792,  0.2242,  0.2617, -0.4319,  1.5289,  1.2905,  1.0432],
            [ 0.9063, -1.0459, -0.4587,  0.5337, -0.7278,  0.3071, -0.2146,  0.1066],
            [ 0.3752, -1.5354, -0.1850,  0.7365,  0.6498,  0.3400, -1.1202, -0.6893],
            [-1.0686,  0.9129,  0.0084, -0.5191,  0.3958, -0.5357, -1.2789, -0.3282]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-2.0280, -0.6461,  0.2616],
            [ 1.7812, -0.6566, -0.9241],
            [-0.3582, -2.0187, -0.5893]], requires_grad=True), Parameter containing:
    tensor([[-0.1439]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.1440, -0.2284, -1.1206,  1.5963, -6.5673,  3.0123, -0.2408, -0.9401],
            [ 5.8597,  5.1331,  2.0204,  2.0544,  3.0221,  1.1551, -3.4003,  0.8614],
            [-0.8501, -3.0876, -6.0101,  6.4025,  0.8314, -5.5840,  2.6018,  4.9168],
            [ 2.4346,  0.5201,  1.4263,  0.6808,  3.7871,  8.3130, -0.1880, -7.2545],
            [ 0.2862, -2.0205, -1.0213, -0.7670,  3.9926, -3.5041,  2.3607,  4.5114],
            [ 0.8226,  0.5556,  2.8951, -0.7323, -1.9676,  0.3411,  0.7954, -2.9706],
            [-1.3869,  2.4958, -5.5187, -5.2346, -2.6664,  3.2723, -2.0297, -1.3193],
            [ 0.0422, -3.2076,  3.3311,  4.6334,  0.7742, -6.3329, -4.2014,  4.7879]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.4697e+00, -5.6356e-02, -1.8131e+00,  3.9805e-01, -6.2143e-01,
             -1.1829e+00, -3.3475e-02,  1.8212e+00,  5.3457e-01, -2.1985e-01],
            [ 3.5236e+00,  3.6281e+00,  2.9688e+00, -2.2293e+00,  3.3290e+00,
              3.8026e+00, -1.4612e+00, -1.0569e+00,  1.0999e+00,  6.1187e-01],
            [-1.4459e+00,  3.1915e+00, -2.7651e+00, -1.8797e-01,  7.1726e-01,
             -1.2572e+00,  5.5066e+00, -6.4554e-01,  7.4296e-01,  1.2742e+00],
            [-1.4594e+00,  9.2648e+00,  9.4229e+00, -1.6534e+00, -5.4792e+00,
              2.5768e+00,  1.5583e-01,  4.9027e+00,  2.9801e+00, -5.9094e-01],
            [-3.6305e-01,  3.0356e-01,  4.4776e-01,  1.7383e+00,  1.8848e-01,
              5.2981e+00,  3.4232e+00,  8.2720e-01, -6.9615e-02,  5.7588e-01],
            [ 6.5564e-01, -4.0192e+00,  7.7401e+00,  1.1912e+00, -3.3548e+00,
             -7.6089e+00, -1.7091e+00,  4.0947e+00,  2.6868e+00,  2.8089e-01],
            [ 1.9386e+00,  4.6895e+00, -2.0193e+00,  3.7521e+00,  4.5843e+00,
             -1.4621e+00, -4.3816e+00, -4.3123e-01,  1.1477e+00,  2.6384e-01],
            [-1.5561e+00, -2.9486e+00, -7.8812e-01,  6.8620e-01,  7.0810e-01,
             -7.5204e-01, -2.5567e+00,  1.7763e+00, -4.1179e-02, -5.7138e-01],
            [ 1.6071e-01,  3.4852e+00,  1.4757e+00,  2.2837e+00,  5.6254e+00,
             -1.3986e+00, -3.6815e+00, -4.5075e+00, -1.8330e+00,  9.0042e-02],
            [ 3.8685e-02,  4.9829e-03, -9.3233e-01,  7.2385e-01, -4.2998e-01,
             -1.9768e+00, -7.4555e-01, -8.5730e-02,  9.6875e-01,  3.0129e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.474 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
