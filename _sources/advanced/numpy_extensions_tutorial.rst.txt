.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.6274, 12.5820,  3.7718,  4.4338, 11.3785],
            [10.7669,  1.8455,  8.9211,  9.2017,  1.9306],
            [ 3.2794, 10.2238,  2.0467,  8.8380,  3.9747],
            [ 0.7654,  8.3319,  2.5376,  7.9740,  1.3713],
            [ 0.4970, 12.9506,  1.9973,  5.1550,  6.2626],
            [ 0.7654,  0.3707,  7.8998,  4.1315,  1.3713],
            [ 3.2794,  6.6445,  8.7698,  7.8818,  3.9747],
            [10.7669, 11.2724, 13.0620,  6.5164,  1.9306]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-7.5128e-01, -5.4151e-01,  9.1914e-01,  3.2125e-01,  6.5698e-01,
              8.8547e-01,  1.1725e-01, -3.1081e-01],
            [ 1.8103e+00,  6.5350e-01,  6.3612e-01,  4.0060e-01,  1.6888e-01,
             -1.8185e-01, -1.9267e-01, -1.8290e+00],
            [-1.4707e+00, -2.9328e-04,  4.2913e-01,  2.7922e-01,  1.6031e+00,
              2.6813e-01, -5.6419e-01, -1.7719e+00],
            [-1.1839e+00,  5.6539e-01, -1.1977e+00, -5.1020e-01,  4.7605e-01,
             -1.5069e+00,  3.0699e-01, -7.1143e-01],
            [-1.1978e+00, -2.2399e+00, -1.5702e+00,  7.9136e-01, -3.3957e-01,
              1.9929e-01,  1.0242e+00, -8.4137e-01],
            [-7.7635e-01, -1.8460e+00,  2.8345e-01,  9.2822e-01, -1.1210e-01,
             -1.7092e+00,  4.9604e-01, -3.7879e-01],
            [ 5.0131e-01, -1.5391e+00, -6.7257e-01,  8.3853e-01,  5.5152e-01,
             -5.5228e-01, -9.8989e-01, -9.7678e-02],
            [ 1.1414e-01, -2.4741e-01, -3.1795e-01, -2.0912e+00,  3.6774e-01,
              5.2476e-02,  2.5003e-01,  7.2033e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9818, -2.7450, -0.2079],
            [ 1.3263,  0.1660, -0.2331],
            [ 0.4102,  0.5338,  1.3045]], requires_grad=True), Parameter containing:
    tensor([[0.0354]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5688,  0.1533,  1.0514, -2.1784,  6.4053, -0.2608, -8.5674,  2.6497],
            [-4.0700, -4.3707,  5.0664, -2.4071,  3.2723,  0.0133,  0.2947,  0.3056],
            [ 0.9639, -4.5778, -3.0567, -2.6776,  1.1569,  0.7729, -4.8498,  6.4871],
            [-0.2164,  1.8362, -7.0067, -2.5162, -1.6162,  3.3634,  2.5674, -3.0460],
            [-2.0013,  6.2739, -2.9525, -1.8005, -4.7904, -0.1170,  1.4528, -1.2789],
            [ 0.5306,  7.6620, -0.7226,  3.6320, -4.4130, -1.4892, -5.1183, -0.1983],
            [-1.7273, -1.2980,  4.8353,  2.4035,  2.1898,  9.4263, -5.4161,  1.4858],
            [ 2.2065, -1.8961, -5.9739,  1.7004, -2.0334, -0.0562, -1.7440,  5.2862]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8067,  2.4161, -0.6914, -0.2057,  4.6054, -2.2895,  1.1439, -0.6885,
             -1.6062, -0.1142],
            [-0.7345, -0.0150, -3.2548, -2.0323,  5.0103, -3.4982, -3.1201,  3.1518,
              5.6609,  0.2773],
            [ 0.6102,  0.5134, -2.5664, -7.4849,  1.3440,  5.3083, -5.9399, -2.2187,
              1.5227,  1.2077],
            [ 1.7742, -1.0734,  3.1998,  0.3168, -3.4746,  4.9799,  0.6240, -4.1471,
              6.1303, -1.8145],
            [ 2.1353, -2.4898,  6.4247, -0.5752, -4.5545,  2.9214, -6.0362,  3.5611,
              1.5935,  0.7103],
            [ 0.4709,  0.3735,  5.0720, -0.4873, -3.6223, -1.5450, -1.8879, -4.2559,
             -7.3309, -4.5434],
            [-0.3060, -2.3994,  1.0274,  3.7196,  7.6899, -3.7795,  0.8381, -1.3715,
             -1.7408, -1.3323],
            [ 0.5829, -2.0684, -0.7290, -3.0600,  1.5421,  5.3886,  4.2307,  1.1761,
              4.8453,  2.9527],
            [ 0.5658, -0.5337,  0.7049, -0.8517, -4.5460, -2.2570,  1.9408, -1.0645,
              0.9775, -0.9002],
            [ 0.1157, -0.0847,  0.3661, -0.2259,  0.3675, -0.9614, -3.1759, -1.8701,
             -1.3015, -1.1215]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.501 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
