.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.8901, 11.2362,  9.2841,  4.1340,  6.6241],
            [10.7573,  5.6083,  8.3534, 10.1229,  8.8598],
            [10.4736,  4.1327,  4.8105,  3.2193,  8.2687],
            [ 6.4150,  7.6655,  2.1462,  6.7071, 11.8974],
            [13.5198,  7.2638,  5.5309, 11.8303,  3.4239],
            [ 6.4150,  6.8060,  8.0208, 11.5994, 11.8974],
            [10.4736, 10.9862,  7.9636,  3.7356,  8.2687],
            [10.7573,  5.9582,  8.8689, 16.7099,  8.8598]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1363, -2.6161, -1.5206, -0.2382,  0.2402,  0.2797, -1.4591, -0.1347],
            [ 2.2026, -0.5741, -1.3468, -0.6085, -0.1928,  2.0525,  0.5416,  1.7091],
            [ 0.0824, -0.5911, -0.8879,  0.5262, -1.3623,  0.6831, -0.7547,  0.2733],
            [ 1.7597, -1.1951,  1.0442, -0.6012,  0.2628, -0.0037,  1.0984, -0.9541],
            [-0.8972,  0.2027, -0.7561,  0.9573,  0.9311, -1.2531,  2.3364, -0.5577],
            [ 0.6746,  0.6274,  1.3632,  0.3418,  0.9019, -0.5014,  0.0421,  2.4517],
            [ 1.3226,  0.7857, -1.4653,  0.0107,  1.5347, -0.7742,  1.9122,  0.2389],
            [ 0.1085,  0.8151, -0.0549, -0.7390,  0.2800,  0.7761, -0.8205, -0.7562]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2012,  0.4465, -0.4129],
            [-1.2515, -0.7459,  0.9537],
            [-1.9013, -0.7948,  0.7431]], requires_grad=True), Parameter containing:
    tensor([[-0.5011]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2448, -1.5798,  0.7068, -1.5770, -0.3156,  3.3014, -3.2327, -2.5062],
            [ 1.2288,  0.4378, -1.3234,  1.4360,  1.2374,  3.6591, -5.4302, -5.4122],
            [ 0.9007, -1.2827, -1.5683,  0.6472,  1.5967,  1.8914,  0.0696, -2.5038],
            [-3.8158, -3.7436, -4.1605, -0.1528,  2.1596, -0.6707,  6.1617,  2.5906],
            [ 0.8385, -5.0010, -2.6501,  0.0386,  0.2046, -3.4614,  4.6146,  6.0650],
            [ 0.5681,  0.7317,  0.2585, -0.7791, -0.1387, -1.2741, -3.7876,  4.1045],
            [ 1.6621, -1.2930, -1.2586,  1.9695, -3.0551, -1.2192, -3.5475, -1.4971],
            [ 0.7330,  0.8042,  0.3932, -0.7554, -0.5710, -4.9788,  1.1923, -2.4267]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1686,  0.3466, -0.3382,  0.3986,  0.0834, -0.6187,  1.0443,  0.0526,
             -0.2562, -0.1185],
            [-1.0862, -0.7427,  0.0711, -1.1507,  1.0710,  0.5007, -3.0448, -0.9016,
              0.0796,  1.0888],
            [-1.5144,  0.9541,  1.8625, -3.6969,  0.2116, -1.3373, -2.3262,  2.8452,
              1.7536, -1.9076],
            [ 1.2829,  0.8847, -1.4048, -0.5547,  0.5919,  0.6000,  2.4729,  3.1981,
              0.2734, -1.0405],
            [ 1.6137, -2.8445, -2.7670,  0.8210,  1.9328,  2.7507, -1.0075, -0.8870,
             -1.1880,  0.8703],
            [ 0.6806,  0.4204,  3.7443,  2.7550, -4.5620, -5.4203,  2.3528,  1.6031,
             -0.4419, -0.2922],
            [ 2.2349,  3.6889,  2.6495,  5.9682, -4.5844, -6.5560, -0.1852,  1.5230,
              0.0689,  0.4226],
            [-1.0606, -0.9969, -0.3545,  2.0795,  3.5810, -0.0553, -0.9074, -1.8600,
              1.2929, -0.6203],
            [-6.0516, -4.7282, -0.0368,  0.1065,  0.3279,  2.8553,  2.7450,  0.9990,
             -0.8402, -0.1697],
            [-2.5553, -2.5993,  1.0097,  0.0263, -0.9404, -0.5493,  1.9285,  0.3606,
             -1.1623,  0.3165]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.499 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
