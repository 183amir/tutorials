.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[22.9572,  6.7039,  5.4457,  8.3026,  2.6156],
            [ 3.0478,  8.1870,  5.0899,  1.8987,  9.6577],
            [ 8.4325,  6.2766,  5.4665,  7.9422,  3.3139],
            [ 2.3624,  7.9841,  1.7138,  2.9178,  8.0942],
            [ 3.0070,  5.7243,  7.1840, 14.2702,  9.1192],
            [ 2.3624,  5.5155,  6.0322,  5.7677,  8.0942],
            [ 8.4325, 10.0314,  4.6125,  6.7207,  3.3139],
            [ 3.0478,  9.1767, 13.5704,  5.0130,  9.6577]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-6.5561e-02, -7.0534e-01,  3.4225e-01,  5.1466e-01,  8.2592e-01,
              8.8249e-01, -8.6010e-01,  5.7185e-01],
            [ 5.8783e-01,  1.1433e-01,  1.1058e+00,  9.1845e-01,  4.9031e-01,
             -8.2156e-01,  1.8512e-01, -1.8037e-01],
            [ 8.0940e-01,  1.4657e+00,  5.1783e-01,  9.9563e-01, -1.0475e+00,
              4.2309e-01, -3.8763e-01,  2.9723e-01],
            [-4.6301e-01,  1.7341e+00,  2.2840e-02,  1.6756e+00,  7.8700e-01,
              1.2124e+00, -1.8388e-01, -6.1289e-01],
            [-4.6883e-01,  2.8566e-03,  2.8755e+00, -2.2887e-02, -1.0391e+00,
              1.2989e+00, -1.1282e+00, -4.6484e-01],
            [-9.7329e-01, -8.0005e-01, -1.6024e-03, -4.2167e-02, -1.2326e-01,
              1.2497e-01,  1.5528e+00,  9.0674e-01],
            [ 1.2186e+00,  8.6285e-02,  8.6004e-01,  6.4257e-02, -1.2303e+00,
              1.5964e+00,  8.3154e-01,  9.1496e-01],
            [ 1.8799e+00, -5.4647e-01,  5.0420e-01,  1.8779e+00,  1.3912e+00,
             -7.3933e-01,  1.3550e+00,  4.3477e-02]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1525,  2.0864,  0.1636],
            [-1.4114, -2.0008, -0.4043],
            [-0.5922, -0.4448,  2.2016]], requires_grad=True), Parameter containing:
    tensor([[-0.4487]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4004, -1.0718,  2.1678, -0.2144,  5.9244, -4.8427,  1.4930, -2.6487],
            [-2.4253, -1.7819,  4.3460, -4.0324, -2.9069, -3.8743,  3.5296,  4.4217],
            [ 2.7090,  0.3308,  2.7260, -4.7942, -0.8885,  4.3270, -6.9135,  2.7526],
            [-2.4217,  0.0665,  1.5985,  2.3133, -6.3748, -2.7051, -0.3684, -4.1586],
            [-2.6994,  3.0383, -0.6341, -1.9380, -0.4068,  6.4480, -0.4714, -3.4327],
            [ 1.9235, -0.6708, -1.1092, -1.9848, -1.1831, -4.0477, -4.9046,  7.3917],
            [-2.5224, -1.0421,  3.1879,  1.5396, -1.1716,  3.1523,  2.2683, -1.9645],
            [-8.1240,  1.3520,  4.1851, -1.7588, -1.6409,  1.0861, -2.2805, -1.9337]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1510, -2.1083, -0.8260, -0.9660,  1.6862,  0.1023,  3.3417,  2.0976,
              1.9060,  0.1389],
            [ 1.2375,  0.3932,  4.0742, -2.3117, -4.5600,  0.0742, -0.2124,  0.8455,
             -0.5497, -0.2515],
            [ 1.9905,  0.0411,  0.2266,  4.6480, -0.9379, -2.8982, -7.1502, -5.1655,
             -1.9294,  1.5421],
            [ 1.6398,  3.4644, -6.0221,  2.1283, -1.7171, -7.5712,  1.8639,  8.8058,
              6.9492,  1.5692],
            [-2.6938, -2.5157, -2.7074,  6.0966,  2.1138, -2.2062,  0.1404, -2.5143,
             -1.0138, -1.3259],
            [-2.7864, -2.1093,  2.5847, -1.1989,  1.8553,  3.2630,  0.5517, -2.2243,
              1.1150,  0.6228],
            [-0.6867,  1.2769,  4.2753,  3.5428,  4.5314, -2.8885, -2.9305,  1.6379,
             -2.7712,  2.9705],
            [-0.2809, -1.9724, -2.7523, -8.2953, -5.8749, -5.8046, -3.4743,  5.5519,
             -1.0319,  0.8913],
            [ 1.6020,  2.7255,  1.4392,  1.1195,  1.3293, -2.4003,  2.3373,  2.2672,
              1.0632, -0.4644],
            [ 0.6851,  0.6910, -1.8787, -0.0835, -2.7077, -1.0080,  2.8270, -1.1783,
              2.0157, -0.6224]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.531 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
