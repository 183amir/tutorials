.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.4028,  5.6337,  6.8015, 10.7956,  4.8414],
            [ 7.1486,  5.3478,  7.3837,  4.5203,  1.7991],
            [ 6.5882,  6.5586,  6.2681,  6.1248, 10.0968],
            [ 7.5942,  5.0887,  2.1507,  5.7865,  7.0206],
            [ 1.1250,  3.5317,  7.9294,  5.2115,  3.2164],
            [ 7.5942,  6.8562,  4.3472,  5.7554,  7.0206],
            [ 6.5882,  6.0796,  7.0787,  8.1544, 10.0968],
            [ 7.1486,  5.7767,  9.5197, 12.5289,  1.7991]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2892, -0.5852,  1.6131,  0.3436, -0.5712,  0.3186,  0.2169, -0.8144],
            [ 0.9018,  0.1994,  1.0306,  0.0809,  0.2619, -0.3880, -0.2780, -0.6502],
            [-0.5594, -0.0687, -1.6598,  0.0268,  1.1509,  0.4485,  0.3210, -0.3650],
            [ 0.2783, -0.5656, -0.5754,  0.5990,  1.2603, -0.8128, -0.4963,  0.9926],
            [ 0.3206, -0.8058,  0.7478,  0.0483, -0.3300,  0.1227, -1.7857,  0.2505],
            [ 1.5775, -0.0112,  0.8646,  0.3599,  2.0990, -0.1597, -0.4101,  0.0656],
            [ 0.8506,  1.3152,  1.7060, -1.5110,  0.0690,  1.5901, -0.6534,  1.5990],
            [-0.7096, -0.2516,  0.6239,  0.4064, -0.7936,  0.1617, -0.7384,  0.8411]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0480, -0.8264, -0.7604],
            [ 0.3950, -0.6249,  0.3883],
            [-0.9788,  0.5143, -1.0687]], requires_grad=True), Parameter containing:
    tensor([[0.5572]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.5941,  4.0000, -2.3038,  1.8583,  1.6686, -3.2941,  1.9688, -1.4684],
            [ 0.9140, -0.7119,  2.5951, -1.3310, -1.4321, -0.1858, -0.5087, -1.4370],
            [-2.9818,  0.9703, -2.4058,  2.0606, -0.5640,  3.1163, -1.5117,  0.8318],
            [ 3.2873,  0.6345, -1.2556,  1.2849,  2.8954, -2.6728,  0.2076,  0.5021],
            [-1.7269, -1.4298, -0.0823,  0.1470, -0.7997, -0.4986, -0.9430,  1.4382],
            [ 2.3238, -2.8697,  3.2391,  0.0531, -0.5218, -2.7597,  3.3505, -0.3381],
            [ 0.2868, -0.7746,  4.2172,  1.5370,  0.9648,  3.5898, -1.9156,  1.2944],
            [-4.0953,  3.5953, -2.1186,  0.7103,  4.7934, -3.6948,  1.4993, -0.5841]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0054, -0.1313, -0.7828, -1.0993, -0.9894, -1.3874, -1.7830, -2.1318,
             -2.8548, -1.6365],
            [ 0.1004,  1.1997,  0.2020, -1.4439, -0.8946,  0.5565,  0.9319,  0.8065,
              0.4241,  1.9143],
            [-0.5571,  0.5143,  1.2550, -0.8896, -0.9479, -2.2616, -3.3868, -4.1851,
              0.8964, -2.0779],
            [ 1.0712, -0.6312,  0.7878, -0.7130, -0.9099, -1.5961, -1.4369, -0.2161,
             -0.4166,  1.3697],
            [-0.0203,  3.9325,  0.2045,  3.1129, -0.7567, -3.6195, -3.3391, -0.3350,
              0.8147,  1.4981],
            [ 0.3998,  0.1575,  1.9513, -0.1903, -2.8474, -1.9487, -2.7796,  2.5909,
             -2.0980, -1.1784],
            [ 1.3694,  0.3556,  1.7120, -2.7859, -2.6429, -4.9226,  1.2094,  0.8872,
              0.4773,  2.2393],
            [ 0.7228,  0.4338,  0.1223, -0.1777, -1.9712, -0.8771,  0.3837,  0.7334,
              3.7622, -1.8378],
            [ 0.4377, -1.2154, -0.5991, -0.9001, -3.1192,  1.0756, -2.1150,  3.2643,
             -0.4969,  1.0036],
            [-0.0441, -0.2721,  0.7122, -2.3406,  1.5960, -1.2344,  1.2915,  0.3237,
              1.4914,  0.4945]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.137 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
