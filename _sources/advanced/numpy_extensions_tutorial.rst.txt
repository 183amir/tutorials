.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.3079, 18.9202,  7.1045,  7.6518, 10.5769],
            [11.0217,  5.0033,  0.5263,  3.3553,  7.4264],
            [ 7.9151,  9.2092,  8.9617, 10.9398,  5.3889],
            [13.1686,  8.1632,  3.2311,  4.4503,  2.1834],
            [ 0.7372,  4.4545,  6.9222, 12.0722,  3.1854],
            [13.1686,  5.6979,  4.2654,  6.2317,  2.1834],
            [ 7.9151, 18.6238,  9.6989,  3.1693,  5.3889],
            [11.0217, 10.2063,  2.8699,  3.9213,  7.4264]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2182, -0.5324,  0.1792,  0.5007,  0.0191, -0.1262, -2.0710, -1.0850],
            [-1.9999, -1.4220, -0.3558,  0.6253,  1.8665, -0.1930, -0.1170, -1.5038],
            [-1.2491, -1.0090,  0.2723, -0.0238,  1.8695,  1.1845,  1.8957,  2.4823],
            [ 0.5441, -0.1946, -0.3125, -0.0580,  0.9284, -0.6595,  2.0806,  0.3265],
            [ 1.1604,  0.2292,  1.1070, -0.1610,  2.3812,  0.2243, -0.2761,  0.1269],
            [-0.0969, -0.5056,  0.3581,  0.3808,  0.4043,  0.1306,  0.6181, -0.2037],
            [-2.2968, -1.6613, -1.0532, -0.6980,  0.7791,  0.4390,  0.1738,  0.5233],
            [-1.2731,  0.3505,  0.7296,  1.9889,  0.7162, -0.3653,  1.2425, -0.2450]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2424,  2.2341,  0.5624],
            [ 1.3836, -0.8050, -2.0229],
            [ 0.5660, -1.9998,  0.3176]], requires_grad=True), Parameter containing:
    tensor([[0.3234]], requires_grad=True)]
    Output from the convolution:  tensor([[  0.4232,   5.5420,  -1.6017,   0.7067,  -2.7636,   5.3590,   4.1168,
               0.0548],
            [  0.5905,   4.8566,   4.8713,  -4.6288,   0.8448,   3.4977,  -1.9936,
              -3.8860],
            [  4.3659,  -1.6156,  -7.5709,  -0.1356,   5.0233,  -2.4962,   1.6192,
               1.0597],
            [  2.7723,   0.9779,   6.4347,   3.0714,   0.8154,   5.7658,   0.8447,
              -2.2438],
            [ -5.5652,   0.9872,  -3.3378,  -0.7725,   1.2567,   1.7414, -12.0159,
               2.3933],
            [  5.6046,  -0.3339,   2.6029,   4.2147,  -2.4643,  -5.5117,  -3.2990,
               3.6577],
            [  2.2590,  -4.0050,   0.3990,  -5.3706,  -1.1333,   4.3110,   2.8503,
               0.1378],
            [ -7.7049,   1.7782,   3.2776,   1.5079,   1.3415,  -1.4411,   0.5721,
              -4.6728]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.2081e-01, -7.8247e-01,  2.8284e+00,  1.4329e+00,  1.5271e+00,
              1.3841e+00, -1.6662e+00, -3.5112e+00, -2.3493e+00, -4.0655e-01],
            [-1.1396e+00, -1.8709e+00, -5.5193e-01,  1.6362e+00,  3.0583e+00,
             -3.5865e+00, -6.5812e-01,  3.4438e+00,  5.2210e+00,  1.8893e+00],
            [-2.9175e+00,  2.5178e+00,  2.2573e+00, -2.4650e+00, -2.8776e+00,
              1.5692e+00,  4.8915e+00,  1.4168e+00, -3.1060e-01, -1.6878e+00],
            [-1.6775e+00,  9.7626e-01, -4.6919e+00,  2.0470e+00,  8.3106e-01,
             -4.2216e+00, -8.9004e+00,  4.2401e+00,  1.9112e+00,  4.0641e-01],
            [-1.0918e+00,  3.3420e+00,  2.7959e+00,  3.5575e+00, -6.1267e+00,
              3.5613e+00,  1.5448e+01,  1.9258e+00, -7.5067e+00, -1.4469e+00],
            [ 2.0166e+00, -1.7277e+00,  3.2486e+00,  6.1702e+00,  7.5438e+00,
              8.5873e-01, -5.4011e+00, -1.5453e+01,  1.3845e+00,  1.6370e-02],
            [ 7.9432e-01,  1.2821e+00,  5.9374e+00, -2.4654e+00, -3.7974e+00,
             -1.0683e+00, -2.5003e+00,  4.5589e+00, -3.8167e-01, -1.1360e+00],
            [ 1.1984e+00,  4.3335e+00, -6.3797e+00, -4.2321e+00, -1.1531e+00,
              3.1534e-01, -4.1393e+00, -2.5050e+00,  1.5623e+00,  2.6309e+00],
            [ 1.4425e+00, -1.7076e+00, -4.0598e+00,  1.5372e+00, -1.2150e+00,
              8.0044e-01, -3.4931e+00,  1.6040e+00,  4.7536e+00, -1.2694e+00],
            [ 3.8114e-01, -1.3494e+00,  1.3683e-02,  6.4950e-01, -2.6761e-01,
              2.0566e+00, -2.7073e+00,  3.5770e+00, -1.3874e+00,  1.4286e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.554 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
