.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.4177,  5.5462, 13.5634,  4.5845,  5.4462],
            [ 5.2746, 10.9869, 11.9217,  3.6879,  3.4302],
            [ 1.9878,  5.3673,  3.4129, 19.2453, 18.7091],
            [ 5.3519, 12.1181,  6.9218,  6.5415,  7.5875],
            [ 6.1198,  5.2142,  5.7478, 13.4553,  5.5363],
            [ 5.3519, 14.6400,  7.2553,  2.5577,  7.5875],
            [ 1.9878,  3.3851,  6.1260,  7.4001, 18.7091],
            [ 5.2746,  3.6113, 12.1858, 11.3097,  3.4302]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.5121e-02, -1.7210e+00,  9.1758e-04, -9.8624e-01,  8.6631e-01,
              1.1411e+00,  6.4271e-01, -4.6013e-01],
            [-1.2358e+00,  1.4629e+00,  5.7179e-01, -1.6434e-01, -7.3841e-02,
             -5.4566e-01, -3.9344e-01,  1.3326e+00],
            [-2.2861e-01,  1.9577e+00, -8.4544e-01,  2.6005e+00, -1.3737e+00,
             -7.5687e-01, -5.0018e-01, -3.9259e-01],
            [-2.6058e-01, -1.3980e+00,  9.8395e-01, -1.4116e+00, -2.1465e+00,
              1.5582e+00,  1.8174e+00, -2.7879e-01],
            [-2.7394e-01,  1.7973e-01,  1.4831e+00, -6.6204e-02, -6.6935e-01,
             -1.7626e+00,  1.0608e+00, -5.7630e-01],
            [-2.6105e+00,  2.1214e+00,  1.9146e-01, -2.1849e-01, -8.8429e-01,
             -1.9372e-01,  1.5487e+00,  1.8965e+00],
            [-3.6225e-01, -3.5697e-01, -1.3067e+00, -1.4954e-01, -7.9893e-02,
              7.4607e-01,  1.4584e+00,  4.0533e-01],
            [ 1.1743e+00, -3.0145e-01,  1.1012e+00, -4.8464e-01,  1.3975e+00,
              7.7600e-01, -1.0428e+00,  1.4792e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0674,  0.2514,  0.6790],
            [-0.3414,  0.2753,  1.0987],
            [-0.9735,  0.5311,  0.8059]], requires_grad=True), Parameter containing:
    tensor([[-0.8568]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.4521, -0.0921, -2.1461, -0.6426, -2.5360, -0.1328, -0.4570,  0.6276],
            [ 0.8443, -2.7252, -0.7533, -0.5678, -0.9777, -0.5111,  0.1031, -2.1841],
            [ 1.3233, -3.9699, -1.3210, -0.5327,  1.6276,  0.6673, -2.4785, -2.9640],
            [ 0.5972, -4.2806, -1.6703, -1.1347, -0.2585,  1.8236, -2.8030, -3.1458],
            [ 0.2239, -1.6645, -1.4912, -2.9570,  1.5326,  3.8711, -3.1791, -4.0838],
            [-1.4653,  1.3263,  0.0699, -4.3704,  1.4500, -0.1129, -1.2980, -0.9427],
            [-1.1169,  1.5463, -2.8002, -2.5107,  1.7916,  0.4482, -3.0812, -1.6886],
            [-0.0534,  3.9889, -1.4977, -1.7349,  0.8638, -1.6555, -3.5948, -1.6220]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0371,  0.1017,  0.5402,  0.3130, -0.3525, -0.9755, -1.0305, -0.2131,
             -0.4587,  1.3032],
            [-0.1487, -0.3114,  0.9659,  2.0839,  0.2740, -0.7465, -0.1031, -0.0288,
             -1.7871,  2.4768],
            [-0.3713, -0.8785,  1.0474,  2.4887,  1.2726, -1.4587,  2.5624, -1.5396,
             -1.3273,  2.9525],
            [ 0.5186, -2.3748, -0.3992,  1.9706,  0.6319,  0.3349,  3.9013, -0.2971,
             -0.7108,  2.1909],
            [ 0.3554, -0.9691, -4.5512,  2.2046,  2.4568,  1.8712,  0.8859, -1.2508,
              0.3130,  1.7894],
            [ 2.9731, -3.9398, -6.4676,  1.1437,  3.7751,  1.4873,  0.4820, -1.2308,
              1.3661,  2.0957],
            [ 3.5015, -1.8199, -5.2235, -0.3390,  2.1584,  1.1060, -0.8087, -1.9786,
              1.6694,  2.0620],
            [ 0.8576, -0.4079, -2.0526,  0.8462, -0.0145, -0.1856, -2.4302, -1.4865,
              2.2893,  1.3767],
            [ 0.1129, -0.2670, -0.0180, -0.1951,  0.3490, -1.1466, -1.0843,  0.8727,
              0.2871,  0.0144],
            [ 0.7637, -0.1249, -1.3113,  0.4113,  0.9549, -1.0262, -0.8558,  0.1558,
              0.5478,  0.2886]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.508 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
