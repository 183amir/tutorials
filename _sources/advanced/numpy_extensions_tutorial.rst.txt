.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.0837,  7.8354,  3.0492, 13.5873, 12.6623],
            [ 8.6568,  3.8002,  3.9933, 11.6318,  3.9812],
            [ 4.3188,  0.1260,  4.5503,  7.2040,  9.9021],
            [ 3.4602,  4.6243,  4.0626,  5.7986,  9.5647],
            [ 1.4830,  5.6732, 10.9046,  2.9629,  6.7367],
            [ 3.4602, 12.8820,  4.2706, 16.1597,  9.5647],
            [ 4.3188, 12.1390, 18.4824,  8.3054,  9.9021],
            [ 8.6568, 10.0698,  9.0872,  8.8011,  3.9812]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7388, -1.3568, -1.2378,  0.1697,  0.4150, -1.1527,  1.8738,  0.2422],
            [ 1.2770, -0.5643, -0.1089, -0.7465,  0.5428, -1.6709, -0.2905,  0.2988],
            [ 0.4970,  1.6658,  0.1360,  0.0982,  0.6974,  1.4492,  0.5911, -2.8064],
            [ 0.7100,  0.3512, -0.7422,  1.7053, -0.2482, -0.4958,  3.0371, -0.2215],
            [ 0.6858,  0.7295,  0.5617,  0.8554, -0.4480,  0.4855, -0.2639,  0.9235],
            [ 1.2675, -1.2869,  0.6017,  0.6305,  1.2748,  0.4861,  0.9905, -1.3925],
            [-1.1152,  1.4445, -0.6482, -0.2557,  0.6987, -0.7137,  0.9496, -0.6095],
            [-2.8196, -1.2422,  0.0995,  0.7776,  1.7135,  0.2319,  0.9365,  1.6811]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4827,  2.2592,  0.0874],
            [ 0.0747, -0.4343,  0.2536],
            [-0.5839,  0.5695, -1.5675]], requires_grad=True), Parameter containing:
    tensor([[0.7446]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.7928,  4.6589,  3.8159, -3.0052, -3.6045,  1.9080,  4.1717,  0.9073],
            [ 1.5555,  1.5469,  3.8710, -2.6903, -3.4216, -0.8824,  2.0333, -1.6042],
            [ 2.5629,  4.9921, -3.2877,  4.1276,  1.6038,  7.9956, -1.2827, -1.4294],
            [ 3.4792, -4.0435, -0.1237,  1.0174,  1.8900,  4.6524,  1.5922, -4.6663],
            [ 2.5130,  2.9982, -0.0938, -0.9100, -0.1617, -4.3417, -2.8406, -8.3313],
            [-1.2071, -1.7773, -4.0522, -0.8212, -3.8974, -2.7384, -0.2900, -3.2692],
            [-1.8255, -0.1810,  2.4944,  2.2592,  2.2432,  1.8293,  0.2503, -0.4421],
            [ 1.7589,  2.3869, -0.9511,  1.7668,  1.2770,  5.9859,  4.7394,  4.2342]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.4207,   1.8720,   0.7604,  -2.8903,  -2.9115,  -3.1132,  -3.5765,
              -2.9749,  -1.7858,  -0.0664],
            [ -1.1215,  -2.1648,  -2.4382,  -0.5497,   4.7032,   4.2992,   0.8137,
               3.4891,   4.3687,  -0.0301],
            [ -0.3453,  -0.6016,  -0.7125,  -2.6654,  -2.1273,   0.0294,   2.9177,
               2.5136,  -0.3091,   1.6485],
            [ -1.1987,  -2.1386,   3.1970,   0.8733,   5.0793,   0.0771, -10.8069,
              -3.8942,  -0.8897,  -3.0271],
            [  0.8736,   3.3228,  -1.3124,  -2.2151,   0.9919,  -4.6932,   0.3931,
              -0.3115,  -2.1692,   0.0470],
            [  0.9494,   1.4571,   1.5742,  -2.2844,  -2.6722,  -1.6297,  -5.5866,
               1.3400,  -1.1303,   0.8548],
            [ -1.1613,  -0.7584,   0.4555,  -2.6302,   2.7364,  -2.0262,  -3.4768,
              -1.7437,  -2.9669,   0.7076],
            [ -1.0789,  -2.3455,   2.2841,  -2.6580,   2.3421,  -4.3802,   1.6692,
              -1.7471,  -1.9854,   1.2771],
            [  0.2744,  -0.3057,   1.3250,  -1.3600,   1.0800,   0.5394,   0.6274,
               0.9075,   2.1127,   1.0019],
            [  0.3688,  -0.1862,   0.1975,   1.5080,  -1.6953,   0.8005,   1.4986,
               0.1577,   0.6906,   1.3977]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.513 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
