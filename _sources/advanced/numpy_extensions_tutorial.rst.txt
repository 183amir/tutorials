.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.0597, 13.5447, 12.4733,  9.0936,  8.6949],
            [ 3.4555,  6.3134,  5.6678,  6.6912, 12.0138],
            [ 9.7062,  5.2742,  1.7757,  7.4687,  3.0685],
            [ 0.5838,  9.6161,  5.8865, 16.5851,  4.6307],
            [ 2.5828,  9.0976,  5.9983,  3.1532,  9.8943],
            [ 0.5838,  2.2859,  6.4643, 10.4984,  4.6307],
            [ 9.7062,  3.3102,  1.6360,  5.2792,  3.0685],
            [ 3.4555,  2.7210,  6.0587,  5.9277, 12.0138]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5408, -0.2794,  0.4067,  0.7571, -0.1854,  0.3650, -0.8555, -0.6702],
            [-0.1123,  0.0118, -0.6376, -1.1723, -0.0125,  1.3463,  0.2500, -1.7904],
            [-1.3930,  0.7395, -1.3182,  0.1998,  0.5965, -0.4820, -0.9610, -0.6274],
            [-0.0203, -0.0205, -0.5144, -0.1343,  0.0758,  1.4527,  0.2016, -0.3802],
            [-1.7501,  1.4770, -0.3952,  0.2280,  1.6586, -0.4962,  0.8830, -1.0364],
            [-0.4388, -0.2589,  0.3278,  1.2051, -0.1828, -0.8088,  0.7306, -2.3771],
            [-0.0424,  0.0959,  0.8185, -0.3364, -0.4410, -0.2644, -0.5228, -1.0306],
            [-0.6658,  0.0726,  0.5059, -1.1581,  2.8891,  0.0872,  1.8818, -1.0914]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4918, -0.1752,  0.2466],
            [-1.7950, -1.2972,  1.0363],
            [-1.4282,  0.6548, -0.4290]], requires_grad=True), Parameter containing:
    tensor([[0.1364]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3738, -2.8905,  0.6118,  0.4907, -1.8539, -0.8996,  8.5361,  1.3518],
            [-9.2359, -4.2313,  0.2916,  0.5809, -2.2045,  1.4624, -1.1842, -0.3624],
            [-2.5972,  1.1427,  0.3361, -1.7884,  0.9941, -0.3584, -2.4961,  0.0213],
            [ 0.6179,  0.6741,  1.3001, -4.7015,  2.0288, -3.4514,  1.8786,  0.2941],
            [ 4.0697,  3.2088, -6.7740,  0.8349, -0.5185, -5.2470, -1.5183, -1.0371],
            [ 3.0320,  2.6484,  1.6512,  5.2678, -5.7484, -3.2893, -0.9476, -2.8428],
            [ 3.6472, -1.1524,  4.8707,  1.2170, -4.4730,  0.2094, -2.0294, -0.5209],
            [-4.3877, -4.8179,  2.6054, -2.4804, -3.1435,  2.6333, -5.4165,  0.6852]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1183, -0.7086,  0.0235,  0.5005, -0.9225,  0.5138, -0.5524,  0.3835,
             -0.2687,  0.1582],
            [-0.7229,  3.8322,  2.3546, -4.5976, -0.4584,  3.9316, -0.5884,  0.4768,
             -1.8850,  0.9411],
            [ 4.2656,  4.8980, -7.0109, -0.1189,  6.9249, -2.6101,  0.3209,  0.0202,
             -1.8250,  1.2721],
            [ 4.8411, -6.7431, -2.4261,  2.9741, -1.9098, -4.1374,  0.8464, -5.3832,
             -0.5701,  0.7052],
            [-0.9269, -2.0524,  6.3887, -2.4166, -1.1699, -2.9995,  1.8402,  1.2469,
              2.3383, -2.4035],
            [-0.3420,  5.9507,  0.1800,  1.4182,  1.2821,  2.7239,  0.2761,  2.3952,
             -2.4107,  1.2439],
            [ 0.2031, -0.2447, -0.4184,  1.4071,  3.4343,  2.9722,  4.0322, -1.7341,
             -1.4877,  0.6551],
            [ 0.6555,  2.8510, -0.2393,  0.0244,  1.3779, -0.9189,  1.2911,  1.7729,
             -1.1014,  0.6316],
            [ 1.5384, -1.2542, -2.5508,  4.9015, -3.8083, -6.1818, -0.4560, -2.8139,
             -0.3112,  1.0559],
            [ 0.5871, -2.6509,  2.2544, -0.8686, -1.3014, -2.1035,  0.1627, -2.3271,
              0.6085, -0.5386]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.380 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
