.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.8422,  6.2015,  3.1545, 10.3310,  3.8391],
            [10.7906,  5.8692,  5.5630, 12.9894,  3.8565],
            [ 2.9204,  6.7445,  2.9887, 10.6434, 13.7533],
            [12.3880,  7.1952,  8.8467,  4.3569, 10.4650],
            [ 4.1569,  1.0356, 17.4551,  7.3101,  1.8045],
            [12.3880,  1.6304,  4.8497,  2.1450, 10.4650],
            [ 2.9204,  7.3955,  7.7524,  9.5205, 13.7533],
            [10.7906,  4.1331,  7.2935,  6.7869,  3.8565]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-8.3677e-01,  3.9102e-01,  3.5171e-01, -1.1848e-01, -1.9040e+00,
             -3.4380e-01,  8.1797e-01, -1.0322e-01],
            [ 2.0866e-01, -6.7333e-01, -9.9062e-01, -8.0255e-01,  8.1237e-01,
             -4.7266e-01, -2.5913e+00, -2.1346e-01],
            [ 2.3173e+00, -1.9114e+00,  1.7004e+00, -3.0652e-01, -9.4931e-01,
              7.9493e-02,  1.0201e+00, -1.0430e+00],
            [ 1.8858e+00,  4.7310e-02,  1.7300e-01, -5.1024e-01, -6.5347e-01,
              1.5706e+00, -2.1353e+00,  7.6211e-04],
            [-7.5518e-01,  9.0337e-01,  1.3899e+00,  2.8447e-01, -1.6430e+00,
              1.6064e-01, -2.5484e-01,  1.3583e+00],
            [ 5.3776e-02,  6.5185e-01,  7.0914e-01, -4.3372e-01,  1.2351e+00,
              2.0991e-01,  1.6582e+00,  1.1569e+00],
            [-8.6323e-01, -1.9073e+00, -5.8242e-01,  3.0721e-01, -5.0071e-01,
             -9.7411e-02,  3.5330e-01, -8.1407e-01],
            [ 7.4795e-01,  3.1655e-01,  7.8267e-05, -3.4854e-01, -4.7104e-01,
             -3.9938e-01,  1.9494e-01, -2.7993e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2543,  1.3162,  0.1021],
            [-0.2264, -1.6794, -0.8025],
            [-0.6124, -1.0584, -0.0924]], requires_grad=True), Parameter containing:
    tensor([[0.8443]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.5055,  2.3934,  2.7821,  4.3992,  3.6931, -2.1542, -3.9064,  0.9645],
            [-2.8663, -0.9450, -5.6515, -2.9101, -1.4352,  1.2906,  0.0755, -1.0809],
            [ 1.5741, -4.0046, -0.2683, -1.3349, -0.8422, -2.4883, -0.5166,  2.3571],
            [ 1.6509,  3.1694,  2.7684,  2.1746, -1.7601,  1.8454,  4.8084,  3.7066],
            [ 2.2382,  4.9601,  2.3115, -2.4557,  0.6121,  0.6954, -0.4533, -0.6295],
            [ 3.5818,  2.0269, -0.7920, -1.7983, -2.7006, -1.5298,  3.0702,  1.0053],
            [ 3.0652, -3.3513, -2.4865, -3.5619,  4.8353,  6.4533,  1.8393, -2.7874],
            [ 0.9674, -3.0080, -1.3564,  5.8376,  4.4775,  1.6598, -0.7543, -0.7364]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1312, -0.2616,  1.7601, -2.2111, -2.9803,  0.2104, -1.2115,  1.7056,
             -0.9440, -0.0856],
            [ 0.3928,  1.7704, -2.8695,  0.7528,  5.5486,  1.9126,  0.9642, -0.9624,
              0.7139,  0.7132],
            [ 0.0869, -1.8632,  0.0798,  2.3355,  2.4200,  0.9859, -0.2558, -1.4272,
              1.3267, -0.1257],
            [-0.7628, -1.7071, -1.9399, -1.3353,  0.2792, -3.6723,  2.4002,  0.1779,
             -0.9273, -0.8624],
            [ 0.0797,  0.8275,  4.4390,  6.3777, -1.1521,  0.1077, -2.1803, -6.1448,
             -3.3801, -0.9147],
            [ 0.1087, -0.2813, -1.0825,  2.2052,  0.9574, -0.7514, -4.2304,  5.1973,
              2.7750,  0.2369],
            [-0.3404, -1.8840,  0.3247, -1.6217, -4.2412, -6.3938,  2.9387,  4.7352,
             -0.8003, -0.2889],
            [ 0.6044,  3.4349, -0.6030, -0.6579,  3.1013,  5.8773,  3.3974, -1.5249,
             -1.1346,  0.3343],
            [ 0.4628, -0.6347,  0.2412,  2.8705,  3.2659,  0.1290, -3.9252, -1.6762,
              1.9628,  0.8346],
            [-0.5581, -0.5522,  0.8910,  0.4815, -0.6077, -1.8458, -1.6916,  0.1695,
              1.0039,  0.0899]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.470 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
