.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.2206,  4.9729,  3.8213, 17.3563,  5.0970],
            [ 8.5722,  7.7481,  0.5258,  7.6503, 12.7625],
            [10.8663,  8.0810,  5.0860, 15.3640,  8.2302],
            [ 7.6107,  8.3822,  2.9235, 10.3104, 14.9057],
            [17.2357, 15.2310,  8.8337,  9.7210,  7.8566],
            [ 7.6107,  7.6575, 11.3657, 14.7840, 14.9057],
            [10.8663, 13.3485,  3.6264, 10.6999,  8.2302],
            [ 8.5722,  3.4335,  7.6464,  5.4349, 12.7625]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3848,  0.0786, -1.3891, -0.3939,  2.9742,  1.2989,  2.0775, -0.0936],
            [-0.1322,  1.5313, -0.8686, -1.3131,  0.0959, -3.1762,  0.2470, -1.7622],
            [-1.6066,  1.1946, -0.5927,  0.6422, -0.7809, -0.1309, -0.5012, -0.4774],
            [ 0.6427,  0.9351, -1.1493,  1.5658, -1.4802,  0.7091,  0.3656,  0.6460],
            [ 0.2631,  0.4021,  0.6464, -0.3040,  1.1571,  1.8017,  1.6235, -0.5234],
            [-0.8448,  0.1887, -1.9308,  1.3068, -1.8681, -0.1743,  0.6075,  1.0260],
            [-0.0240,  1.7384, -1.1640,  2.0860,  2.8166, -1.2999,  0.9390, -1.3453],
            [-0.0484, -1.3780,  1.6738, -0.4133, -0.7915,  0.5094, -1.0109, -0.2166]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2640, -1.3219,  1.1184],
            [-1.3121,  0.0210, -1.2836],
            [-1.2846, -0.1645,  0.7311]], requires_grad=True), Parameter containing:
    tensor([[-0.0017]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9260,  6.0630,  0.1501, -0.1625, -3.6224, -2.2905, -0.8078,  1.2021],
            [ 1.8876,  2.2359,  3.9734, -1.2996, -0.1941, -5.5753,  1.5450,  3.8776],
            [ 0.8144,  3.0491, -2.3307, -3.4414, -3.1168, -6.1416, -5.1220,  2.4078],
            [-0.4103,  1.3876, -0.9947, -2.5958, -0.7718,  1.2422,  1.9988, -0.4063],
            [ 1.6356,  0.2737,  0.5637,  1.2256, -2.6572, -1.8161, -3.5221,  0.1017],
            [-0.1766, -1.7132, -0.6508, -1.2272, -0.1174, -2.5131,  6.1281, -1.2844],
            [ 0.8170,  1.6793,  0.0113, -4.1701, -0.0071,  1.9843, -4.8488,  5.5964],
            [-3.3628, -4.1628, -1.8870,  0.5236,  1.2699, -4.7343,  6.9588,  1.9939]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0984,  0.6247,  0.2080, -0.7785,  0.1732,  0.8917, -2.1105,  0.2194,
             -0.2128,  0.6219],
            [ 0.9696,  2.9020, -2.5094,  1.0583,  0.2883, -0.7910, -1.1389, -0.7221,
             -0.3901, -0.9188],
            [ 2.5574, -1.8363,  2.0402, -2.1310,  6.1244, -8.3285, -0.9424,  2.5814,
             -0.7383,  0.3103],
            [ 0.7130, -1.5802, -3.1518,  2.5881, -4.7559,  2.1066, -0.7486, -2.1576,
              3.3026, -0.6986],
            [-1.6662,  1.0471, -2.5170,  4.5079,  2.2122, -5.4813,  2.3959,  4.6634,
             -0.7092,  0.3681],
            [ 0.8551,  0.3156,  4.3577, -1.0331, -2.1916,  2.8051, -2.0641, -1.6782,
             -0.1611,  0.6033],
            [ 1.3629,  2.7229, -1.7791,  0.5265,  4.4031,  0.1920, -1.4131, -0.1836,
              2.6356, -1.5475],
            [ 1.2846,  2.2831,  3.1664, -0.5749, -3.2951,  1.9343, -3.1790, -0.9962,
             -4.4606,  1.9755],
            [ 1.6940,  1.7273, -0.1697,  0.5730,  5.0135, -1.6256, -1.6794, -0.5427,
              2.5075, -1.4646],
            [ 0.2934,  1.6938,  2.3484, -1.4502, -0.7877,  0.4661,  0.5684, -0.9935,
             -0.6790,  0.6564]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.596 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
