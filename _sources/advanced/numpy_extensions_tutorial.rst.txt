.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.7719,  7.5412,  6.6822,  7.2630,  9.8218],
            [ 8.8383, 11.0439,  6.8405,  9.3280, 15.7761],
            [ 5.8398,  4.5608,  6.7647,  6.5357, 12.8970],
            [13.1697,  5.9415, 16.8490,  8.4282,  8.6371],
            [ 8.0972, 14.6603,  6.0820,  5.1021,  0.4024],
            [13.1697,  2.2205,  8.5912,  7.7426,  8.6371],
            [ 5.8398, 13.3136,  4.7679, 11.3735, 12.8970],
            [ 8.8383,  1.8237,  7.1676,  0.5646, 15.7761]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0506, -1.2121,  1.1068,  0.1619,  0.2932, -0.6162, -2.4635, -0.1468],
            [ 2.6181, -0.4394,  2.7986,  0.2505,  0.6927, -1.8450,  1.5733, -0.0329],
            [-0.3845,  0.8310,  1.0912, -1.1101,  0.7057, -0.5851,  0.1048, -2.7952],
            [ 0.7872,  0.3349, -1.4396,  1.0600, -0.2599, -0.8561,  1.1405,  2.6534],
            [ 1.1176,  1.7664,  0.2244,  0.6847,  0.3386, -0.1207,  1.4851,  0.6051],
            [ 1.5770, -0.1309, -0.4355,  0.3409, -0.1507,  1.1760, -1.1424, -0.6331],
            [-0.1039,  0.3330, -0.0726,  1.5292,  0.4723,  0.1130, -0.8410, -1.1244],
            [ 0.4386,  0.8876, -2.2109, -0.4512,  0.3964,  0.7115,  0.8900, -0.8650]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2634,  0.5125,  0.0841],
            [ 1.2684,  0.2661, -2.1946],
            [-1.1589, -1.5622, -1.0999]], requires_grad=True), Parameter containing:
    tensor([[0.0308]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.8515e-03,  6.0899e-01,  1.1139e-01, -3.8306e+00,  3.5739e-01,
              5.4617e+00,  2.6203e+00,  2.7697e+00],
            [ 2.7226e+00,  4.1157e+00,  6.7762e-01,  1.7924e+00,  4.4315e+00,
              9.0932e-01,  3.6698e+00, -6.3097e-01],
            [ 4.7430e+00, -7.1460e-02, -4.3701e+00,  8.9197e-01, -2.4164e+00,
             -4.4681e-01, -3.9887e+00, -2.0355e+00],
            [-4.7895e+00,  3.7517e+00,  1.9726e+00, -1.5932e+00, -1.0349e-01,
              3.9183e+00,  2.7456e+00,  7.8714e+00],
            [ 1.4174e+00,  9.2776e-01, -4.1827e+00, -6.9527e+00, -3.3161e+00,
             -6.5021e-01, -3.5065e+00, -5.5120e+00],
            [ 3.6815e+00,  5.3930e-01, -3.7570e+00, -1.3140e+00,  3.5192e+00,
             -2.7747e+00,  1.4873e+00, -3.5176e-01],
            [ 9.5010e-01, -1.0983e+00,  2.3254e+00, -4.7094e+00, -6.4362e-01,
             -2.0130e+00,  2.3920e+00,  1.3388e+00],
            [-7.4876e-01,  1.3572e+00, -3.8067e+00, -3.8813e+00, -4.7316e-01,
             -2.1182e-01,  2.8693e+00,  1.1329e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.0410,  -0.0344,  -0.5810,   0.7180,   0.3695,   0.2341,   0.7499,
              -0.9301,   0.4257,   0.0889],
            [ -0.3596,   0.5239,   1.9611,   1.1467,  -2.9594,  -0.4417,  -3.2583,
               0.7338,   3.2935,  -2.3492],
            [  0.8935,  -1.4717,  -4.7671,   1.0665,  -1.2361,  -2.9120,   1.6882,
              -0.9368,  -5.3609,  -0.4775],
            [ -0.7211,   1.1584,   4.1923,   3.7565,  -2.0217,  -2.1303,  -5.4949,
              -5.6127,   0.0308,   2.8635],
            [  0.8001,   2.9189,  -1.1879,  -6.5115,  -3.8035,  -0.3621,   5.0099,
               2.0682,  -0.2990,   1.8866],
            [  0.7759,  -0.9392, -12.0595,  -5.5879,   5.3694,   4.0079,   5.0118,
              -4.8703,   0.8069,   4.3735],
            [ -1.3184,  -5.4714,  -2.4465,   5.5583,   2.0303,   4.8968,   5.4272,
              -2.2769,   6.7382,   4.1588],
            [ -1.0544,   1.0115,  -1.1227,   1.1907,  -1.4683,  -0.2125,   0.5880,
              -1.6333,   3.8821,  -0.6568],
            [  2.6824,   0.2523,  -5.2640,  -2.5235,  -5.0550,   0.4158,   0.3476,
              -3.4801,  -1.3501,  -2.1483],
            [ -2.9334,  -4.0094,  -3.9547,  -0.4781,   1.3986,   1.3198,  -0.7553,
              -2.0832,  -1.1962,  -0.6403]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.486 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
