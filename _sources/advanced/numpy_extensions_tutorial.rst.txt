.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.3050,  9.9429,  9.0577,  2.8671,  1.2764],
            [ 6.7696, 13.9288,  7.6422,  3.8637,  0.4399],
            [ 8.2398,  8.4241,  7.4374,  7.0821, 11.0307],
            [ 9.0414,  9.3620, 19.1361,  3.5314,  3.1651],
            [ 4.2513,  4.5520,  5.0046,  9.3151,  6.7900],
            [ 9.0414, 11.6551,  6.5160,  6.4520,  3.1651],
            [ 8.2398,  1.7743,  8.0856, 12.2746, 11.0307],
            [ 6.7696,  6.9092, 14.9094,  2.8748,  0.4399]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.1150e-01, -9.5102e-01, -5.8042e-01,  1.1930e+00,  5.1115e-01,
             -1.6032e-01, -1.4623e+00, -3.8891e-01],
            [-2.5384e-01,  3.4547e-01, -8.9389e-01, -1.6978e+00,  1.0501e-01,
             -6.4748e-01,  1.8728e+00, -1.8050e+00],
            [ 7.2134e-01,  1.7480e+00,  5.3299e-01,  1.9992e-01,  9.7396e-01,
              1.3310e+00, -1.6681e+00, -1.3713e+00],
            [ 1.4012e+00, -9.4334e-02, -9.7391e-01,  2.9387e-01, -1.6032e-01,
             -3.4297e-01, -1.2896e+00,  8.7453e-01],
            [ 2.6896e-01,  7.5713e-01, -2.2120e-01, -3.1042e+00, -2.0133e+00,
              3.0358e-01,  9.0658e-01,  8.2831e-01],
            [ 1.1600e+00, -1.0104e-03, -6.3572e-01,  1.0749e+00,  8.6439e-01,
             -1.2281e+00,  1.9627e+00,  6.3334e-01],
            [-3.4461e-01, -2.0413e-01,  1.3099e-02, -3.3581e-02,  2.9117e-01,
             -1.1109e+00,  4.9423e-01,  2.3553e+00],
            [ 1.8169e+00,  3.3480e-01, -6.5175e-01,  2.4377e-01,  3.5186e-01,
              1.0896e+00, -5.2028e-01,  1.0489e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2072,  1.9179,  0.4366],
            [ 0.4568,  1.1010, -0.4086],
            [ 1.5983,  0.4026,  0.1368]], requires_grad=True), Parameter containing:
    tensor([[-0.2710]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9160,  0.2048, -0.1694,  0.3292, -2.7555,  3.9426,  0.3608, -0.1283],
            [-1.4527, -4.6778, -0.0175, -0.4720,  7.3257,  5.2045,  0.5532, -0.8200],
            [-1.3366,  2.3947,  2.4923,  0.8870,  5.3728, -0.0635,  2.2713, -0.1019],
            [ 0.1145,  2.3938,  1.6426,  3.5334, -1.1359,  3.6174,  0.4906, -0.5541],
            [ 2.1650,  1.3373, -0.5919, -3.6461, -1.4943,  3.0276, -1.5289, -2.8833],
            [-1.7702, -1.9417, -5.1746, -4.6750, -0.3534,  2.0040, -6.4747, -3.3418],
            [-1.9384,  0.3243, -5.9929, -4.0842, -2.4340, -1.2674, -5.3106, -1.3472],
            [-2.2957, -1.9700, -6.4421, -3.0074,  0.1952, -2.4949, -2.3754,  0.1229]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0784, -0.6292,  0.9482,  2.5105,  2.8807,  0.4975,  2.8259,  0.8907,
             -0.0986, -0.0355],
            [-0.0395,  1.1424,  2.3389,  0.3891, -0.6135, -0.5896,  3.6667,  3.1736,
              0.1967, -0.0636],
            [-0.2868,  1.9146,  3.0308, -0.1893,  0.6954,  1.8701,  4.6050,  4.2704,
             -0.8704, -0.0118],
            [ 0.8222, -1.0810, -3.5769, -3.9024,  0.8658,  1.6396,  4.8289, -0.8537,
             -5.2320, -0.9333],
            [-0.3484, -0.8382, -6.1146, -1.4141, -0.8053,  3.4981,  0.9990, -3.1557,
             -6.6580, -0.0878],
            [-1.7916, -2.2016, -6.2063, -2.8731, -0.9513,  0.7921, -4.1299, -8.5814,
             -4.4458,  0.4869],
            [ 0.2082, -5.7934, -3.1428, -1.5106,  2.9518, -0.1034, -1.9967, -1.9708,
              0.2103, -0.1430],
            [ 0.0159, -4.8048, -2.5217, -2.2138, -2.2212, -5.9488, -0.7489,  1.5890,
              1.9915,  0.5444],
            [-3.0903, -0.7676, -0.1493,  1.7342, -2.5119, -0.6578,  4.2528,  1.4058,
              1.7825, -0.5735],
            [-1.3842, -1.6017, -0.2151, -2.3320, -3.3230,  0.3154,  0.3502,  2.4782,
              0.6045,  0.1972]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.532 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
