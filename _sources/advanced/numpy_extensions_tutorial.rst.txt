.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.1231,  1.8118,  7.6010,  6.0976,  1.4596],
            [ 7.2119,  7.8268,  6.8338,  6.3858,  6.2789],
            [ 4.9458,  8.2247, 12.6028, 11.9018, 13.3957],
            [ 7.7778,  9.2846,  3.6774,  8.0830,  2.9948],
            [10.4553, 13.1972,  5.2149,  5.9533,  5.9447],
            [ 7.7778,  3.4579, 10.9304,  9.3741,  2.9948],
            [ 4.9458, 10.3527,  4.7958, 13.4797, 13.3957],
            [ 7.2119,  6.9156,  9.7116,  5.5718,  6.2789]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2217,  0.3331,  1.1756,  0.3282, -0.9920, -0.7239,  0.5726, -1.1417],
            [-0.9386, -2.3083, -1.0962,  1.7974, -1.1027,  0.9128,  0.1281, -0.7638],
            [-2.1149,  1.3111,  0.3886,  0.2929, -0.1137,  1.1987,  0.8596,  0.5334],
            [-1.3284,  0.2055,  1.4751, -1.1170, -0.5038,  0.3710, -0.5664, -0.5754],
            [ 1.8575,  0.1373,  0.1474,  0.6499,  0.4127, -0.8652,  1.4724, -0.6573],
            [-0.8705, -0.5341, -0.4050,  1.7290,  1.2295, -0.0596,  1.6483,  0.0639],
            [ 0.7379, -0.2776,  0.8767,  0.4482, -2.2289, -0.8462, -0.5691,  0.7406],
            [ 0.5740, -0.2979, -1.0187, -1.5944,  0.1991,  0.4608, -1.9194,  0.9166]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1159, -1.8536, -0.8901],
            [ 2.1661,  0.9446, -0.4361],
            [-1.0108, -0.8816, -1.9906]], requires_grad=True), Parameter containing:
    tensor([[-1.3256]], requires_grad=True)]
    Output from the convolution:  tensor([[  4.0214,  -1.2706,  -3.3300,  -1.4718,   4.3166,  -2.6047,   0.3451,
               0.7026],
            [ -1.5544,  -2.5578,  -0.9705,   2.4231,  -5.8996,  -5.3021,  -9.5948,
               0.5658],
            [  2.3719,   2.0226,  -1.1351,   4.1591,  -1.5029,  -0.1495,   0.4800,
               5.2994],
            [ -2.3152,  -6.7482, -12.3771,  -4.4299,  -3.4616,  -8.5307,  -5.3536,
              -2.2714],
            [  0.9742,   2.7394,   0.0526,  -3.9483,   4.8853,  -3.1300,  -1.1904,
               1.1827],
            [ -4.1958,   0.5924,   0.6288,   0.2167,   0.8745,   1.2724,  -2.6473,
               5.7371],
            [  5.1675,   6.9131,   0.7691,  -7.4639, -11.1725,  -0.2736,  -0.3728,
              -2.3429],
            [ -2.2504,  -3.0870,   2.3106,  -1.5236,  -3.5817,  -3.8376,   0.3048,
               0.7377]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0213e-01,  1.3204e+00,  5.7637e+00,  3.0541e+00, -5.9498e-03,
             -1.2807e+00, -1.9028e-01, -1.1899e+00, -4.6496e+00, -1.8759e+00],
            [-2.0307e+00, -5.0150e+00,  2.3519e+00,  1.6020e-01,  1.0248e+00,
             -7.6705e-01,  4.7230e-01,  2.5078e+00,  4.5947e-01, -8.6406e-01],
            [-1.2690e+00, -4.0134e+00,  5.8626e+00,  5.5039e+00,  3.2128e+00,
              1.8375e+00, -1.5766e+00, -2.0317e+00, -4.1094e+00, -4.2584e+00],
            [ 3.2442e+00,  7.0800e-01,  2.3449e+00, -7.2658e-01, -5.4497e+00,
              7.9188e+00,  2.0997e-01, -2.0932e+00, -6.9283e-01,  1.0166e+00],
            [ 3.1160e+00, -5.7966e+00, -5.1104e+00,  2.7031e+00, -3.5350e+00,
              1.0678e+00, -1.7032e+00, -7.5558e+00, -6.9388e-01,  7.1119e-01],
            [ 5.7210e+00,  1.9902e+00, -3.9431e+00, -1.4456e+00,  2.2281e+00,
              3.6409e+00,  9.4759e+00,  3.1657e+00, -1.9559e+00,  1.4388e+00],
            [-4.4681e+00, -1.7739e+00, -4.6885e+00, -7.9816e-02,  4.3823e+00,
              6.3431e-01, -2.9364e+00, -9.9509e-01, -2.6893e+00,  4.0628e-02],
            [-4.7939e+00,  3.6941e+00,  3.1018e+00,  1.3658e+00, -1.7758e+00,
              1.8578e+00,  1.6083e+00,  6.7155e+00,  6.3630e-01, -2.4929e+00],
            [-2.8536e+00,  6.4607e-02,  7.8313e+00,  3.7827e+00,  3.5256e+00,
             -2.2987e+00, -6.1664e+00, -1.7882e+00, -5.6066e-01, -1.3380e+00],
            [ 2.3896e+00,  1.9695e+00,  3.8928e+00, -1.8287e+00, -3.0306e+00,
             -1.2994e+00,  1.1636e+00,  3.6209e+00,  2.7833e+00, -5.8002e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.170 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
