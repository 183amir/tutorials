.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.6871,  3.8923, 12.9004, 10.3721,  1.1980],
            [ 3.9386, 11.1948,  3.5183,  7.5124,  3.9029],
            [ 1.2530,  5.0659,  6.9224,  5.3517,  3.4500],
            [ 3.2331,  8.5057,  5.8881, 12.6816,  7.7189],
            [ 6.7558,  3.6616,  5.9127, 11.6009, 11.8373],
            [ 3.2331,  6.7322,  9.4451,  5.0720,  7.7189],
            [ 1.2530,  9.4167,  7.6487,  5.6462,  3.4500],
            [ 3.9386,  6.1899,  3.0496, 14.6718,  3.9029]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.3598,  0.5774,  1.2660,  0.0796, -2.5171,  0.2947, -0.6181, -0.3380],
            [ 0.4079,  0.2020, -0.5709, -1.3462,  1.4606,  0.6010, -0.9738,  0.5064],
            [ 1.1226,  0.2426, -0.8257,  1.2762,  0.2518,  0.8779,  0.4836, -0.3376],
            [-0.0123, -0.5083, -0.6806, -0.7029,  0.7242,  1.0337, -0.6045,  0.6708],
            [-0.4284,  1.0614, -0.9707, -0.4750,  1.0845, -0.1238,  1.1305,  1.3851],
            [ 0.4720, -0.1306,  2.0223, -0.9799,  0.2383, -0.3174, -0.7760, -0.3566],
            [ 0.9221, -0.6866, -1.0272,  1.1042,  0.6144,  0.5382, -2.1471,  0.5443],
            [ 1.3957, -0.6003,  1.1021, -0.8149, -0.1763,  0.8047, -0.7869, -1.3375]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.7583,  0.6706, -0.1382],
            [-2.4397, -0.3563, -0.6040],
            [-0.2549, -1.3995, -0.3779]], requires_grad=True), Parameter containing:
    tensor([[0.2129]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8230,  3.4704,  0.9895, -1.4958, -1.1923, -0.7102, -0.1215,  4.1878],
            [-4.6456,  0.3849,  4.8313, -0.1341,  4.7614, -6.2092,  5.1366,  5.7510],
            [-2.1295, -0.6687,  2.6131,  0.5247,  6.5613, -5.4171,  7.2845, -0.2249],
            [ 5.6310,  3.2955, -0.7693, -0.6234, -3.6841,  1.7077,  0.0143,  0.3085],
            [ 4.8350,  3.8880,  0.3694,  0.6663, -6.1052, -3.9992, -0.3971,  1.9493],
            [ 4.7294, -0.1418,  1.2382,  0.2430,  2.8274, -7.2683,  2.2077,  3.2865],
            [ 1.3669,  0.4013, -1.4293, -0.9459,  1.9901,  2.2745, -0.8392,  0.2819],
            [-2.0849, -3.2206,  1.1509, -1.2327, -0.9967,  0.4834, -0.5261, -1.3123]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.3979, -0.8675, -1.2513, -0.1952, -3.8363,  2.3106,  0.3609,  3.6915,
             -1.4490,  0.3148],
            [-4.7560, -0.6031, -2.3201, -4.0086, -4.5099, -0.3719,  2.2039,  4.0984,
              1.7706,  1.2801],
            [-0.5493, -0.1758,  1.3237, -5.5354,  0.9646, -3.3475,  2.8614,  0.4315,
              3.7642,  0.4530],
            [ 4.1113, -0.6022,  0.4527,  0.6418, -2.6456,  0.7708,  2.6294, -0.8465,
              0.2170, -0.3322],
            [ 0.9672,  2.0515, -0.4874,  0.0297, -4.5791,  0.2923,  2.9847,  1.9563,
             -0.5110, -0.2370],
            [-4.6210,  0.2553,  3.1812, -3.0429, -1.2270, -2.6308,  0.0688,  6.2529,
             -0.3116,  0.7558],
            [-1.3360, -7.7617, -1.9840, -1.6936, -2.0685, -4.3682,  0.0659, -1.3527,
              2.6001,  0.7222],
            [ 3.4104, -7.3261, -6.1895, -4.1527, -5.8370, -5.6773,  1.0420, -3.2089,
              1.0419, -0.1894],
            [ 1.3777,  0.5117, -3.7182, -1.9566, -2.9887, -4.0913,  0.9743, -1.0127,
              0.2336, -0.4716],
            [ 0.1114,  0.5237, -0.4281, -0.4950,  1.2103,  0.5492, -0.6777,  0.9769,
             -0.4612, -0.2274]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.509 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
