.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.7240,  5.6251,  8.3996,  3.6987,  1.8039],
            [11.3165,  5.0105, 13.0567,  7.8506,  5.2322],
            [ 9.9828,  1.3270,  7.9615,  5.7897,  5.6029],
            [16.8741, 11.9956,  7.1731,  8.4091,  0.6333],
            [ 4.7567,  8.4642,  8.1781,  0.8689, 18.1426],
            [16.8741, 16.6675,  7.0719,  3.0546,  0.6333],
            [ 9.9828, 14.3892,  2.9181,  4.4544,  5.6029],
            [11.3165, 13.6490,  6.6735,  8.0645,  5.2322]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.8110e-01, -6.3283e-01,  6.0595e-01,  3.3490e-01, -5.9806e-01,
             -1.1047e+00,  1.6184e+00,  1.1743e+00],
            [ 4.6148e-01,  8.7176e-01,  2.1218e+00,  9.9918e-01, -2.1392e+00,
             -3.2196e+00, -1.6848e+00,  7.0597e-01],
            [-2.0146e+00, -1.0509e+00,  1.1593e+00, -8.8912e-01,  2.6752e-01,
              4.4073e-01,  6.4566e-01, -2.2849e+00],
            [ 2.1342e-01, -2.4031e-01,  3.0245e-01,  4.4227e-05, -6.2877e-01,
              7.4777e-02, -1.8700e+00,  1.6155e+00],
            [-9.2192e-01, -2.6065e-01, -5.5522e-01, -1.0940e+00, -8.2783e-01,
             -1.2592e+00, -1.3387e+00, -5.7328e-01],
            [ 2.0281e-01,  1.2235e+00, -1.1908e+00,  1.6972e+00,  1.1771e+00,
              1.4800e+00,  1.3524e+00,  9.3933e-02],
            [ 6.5715e-01,  1.8388e-01,  7.0458e-01,  4.0472e-01,  1.2433e+00,
              4.9951e-02,  7.8782e-01,  1.0613e-01],
            [-9.9234e-01,  1.4186e-02, -1.8603e+00, -2.8190e-01, -4.2157e-01,
             -7.4116e-01, -2.2174e-02,  7.0182e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1945,  0.2388, -0.3977],
            [-0.9914, -0.3194, -0.8947],
            [-0.3794,  0.1249,  0.4424]], requires_grad=True), Parameter containing:
    tensor([[1.2821]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.4345,  3.1581, -0.5188,  3.1427, -0.9297,  2.6833,  0.5996,  0.4147],
            [ 1.4784,  2.6880,  0.6379,  2.3627,  0.5060,  0.9924,  1.6906,  1.0341],
            [ 2.1862,  0.8815,  2.0396,  1.2715,  2.2978,  0.3814,  2.3480, -0.8639],
            [ 1.0317, -0.4990,  3.6060,  1.2010,  1.8766, -0.6684, -2.3200, -0.7530],
            [ 2.4205,  2.7301,  0.1672, -0.8074, -1.0109,  0.1051,  3.2816,  4.1814],
            [-1.2800, -0.1826, -1.2977, -1.5591,  2.4271,  2.5067,  1.5657, -1.0757],
            [ 2.8497, -1.8762,  3.2736,  0.1850,  0.9318,  1.1804, -3.0758, -0.1505],
            [ 3.1029,  1.0580,  1.3959,  2.0876,  0.6968,  2.4013,  0.5188,  3.4477]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4421,  0.3782, -1.4027,  0.0586,  0.9637, -0.1112, -0.5437,  0.7336,
             -0.6638,  0.1910],
            [-2.3719, -0.1347, -0.0751,  1.0477, -0.1110,  0.8476, -2.0841,  0.7093,
             -1.3009,  0.6456],
            [-0.2839,  1.0539,  1.8830,  0.8409, -2.1885, -0.7882, -1.1876, -0.6712,
              0.4470,  0.5810],
            [ 0.2595,  1.1347, -1.3399, -0.8771, -1.1128, -0.6420,  1.2962,  1.6754,
              0.7164,  0.5436],
            [ 0.7167,  1.2000,  0.9457,  1.6943,  2.8516,  2.4825,  0.7832,  0.3448,
              0.0801,  0.4384],
            [-0.1792,  1.3659, -2.2744,  1.6223, -1.2562, -0.1220, -0.9080,  2.8986,
             -0.0939,  1.1272],
            [-2.5763, -0.2702, -0.9228,  0.2514,  1.7696,  1.0558,  0.3329,  1.7585,
             -1.2096, -0.4203],
            [-0.0946,  1.6790,  3.4675,  0.8220,  0.9477,  1.7871,  0.3572,  2.1342,
              0.6190,  0.2572],
            [-0.5764, -0.5884, -1.4726, -1.7486, -0.9253,  0.4982, -1.3085, -1.9089,
             -2.1091, -1.9571],
            [-0.3048, -0.1195,  0.1573,  0.1534,  0.5092,  0.3668, -0.8008, -0.6732,
              0.8988,  0.7577]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.610 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
