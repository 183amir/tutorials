.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.3729,  5.4758,  6.7660, 17.9027,  3.7150],
            [ 7.0479,  7.8122,  8.6521,  8.0702,  2.0332],
            [ 4.1088,  2.6058, 11.6438,  2.0899,  2.3234],
            [ 7.8439,  7.9421,  6.5713,  9.0964, 12.5093],
            [ 8.3670, 11.9979,  4.3539,  5.7750,  9.0495],
            [ 7.8439,  9.3089,  4.2365,  3.9306, 12.5093],
            [ 4.1088, 10.5922, 13.5482,  8.1802,  2.3234],
            [ 7.0479,  6.6903, 10.2823,  2.8382,  2.0332]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4094,  0.5151,  0.0104,  0.4542,  0.3883, -2.0182,  1.6331,  1.1990],
            [-0.6950,  0.4224, -1.9338,  0.2747,  1.0358,  0.3051,  1.2753,  0.1216],
            [-0.0783,  0.6730, -0.0472,  0.9225, -0.6353, -0.6843, -2.2130, -0.8887],
            [-0.8610, -1.0518, -0.2671,  0.5760,  1.1674, -1.2858,  0.6800, -0.6344],
            [-0.3309,  0.8126, -1.1607,  1.4097, -0.2688,  0.5671,  0.6511,  0.6799],
            [ 0.4318,  0.5089, -0.4838, -2.2594,  1.0654, -0.4726, -0.8213,  0.3704],
            [ 0.3466,  2.6452, -0.4970, -0.7276,  0.9822,  1.9089,  0.5542, -1.3421],
            [-0.6785, -0.0898, -2.2755,  0.3541,  0.8662,  0.0197,  1.5791,  0.2586]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4378, -0.7745,  0.0330],
            [ 0.5329, -0.3005,  1.9142],
            [-1.6376, -0.5695, -1.1228]], requires_grad=True), Parameter containing:
    tensor([[-1.2637]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7789e+00, -4.3212e+00,  1.8115e+00, -3.1062e-01, -3.7177e+00,
              1.1289e-02, -3.4752e+00,  2.0317e+00],
            [-3.0670e+00, -5.3450e+00, -5.1409e-01, -2.8717e+00,  3.8934e+00,
             -3.7850e-01, -2.2459e+00, -1.9373e+00],
            [-9.2343e-01, -2.2496e+00, -3.8210e+00, -4.6040e+00, -8.4017e+00,
             -3.4378e+00, -2.3033e+00,  1.7312e+00],
            [ 1.1915e+00,  2.2439e+00, -3.2564e+00,  1.1856e+00, -2.9648e+00,
              1.8575e+00, -2.8372e+00, -1.8352e+00],
            [-3.3583e+00, -1.6248e+00,  3.1156e-01, -4.0968e-01, -1.3768e+00,
             -5.2059e+00, -3.7513e-02, -3.7636e+00],
            [-1.5727e+00, -5.9046e+00, -5.0193e+00, -2.6942e+00, -5.2401e-01,
              1.3897e+00, -1.4933e+00, -3.5578e-03],
            [-2.6389e+00, -3.4585e+00, -1.7658e+00, -1.3349e+00, -4.6564e+00,
             -5.9370e+00, -4.0924e+00,  1.2015e+00],
            [-4.2601e+00, -1.1374e+00,  8.3653e-01,  1.9074e+00, -2.1125e+00,
              2.5863e+00, -4.7392e+00, -2.8835e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2563, -0.3711, -0.0867, -0.3108,  0.6876,  0.6308, -0.1152,  0.0489,
             -0.2414,  0.0100],
            [ 0.8022,  0.4643,  0.7514, -1.8601, -0.2886, -1.3224, -2.7510,  1.2468,
              0.4923,  0.5353],
            [-0.8431,  1.4919, -3.9062,  0.0731,  2.3395,  1.7336,  1.8052, -1.7107,
             -0.0984, -2.8054],
            [ 1.1755,  1.5520, -3.0591, -0.7404, -2.9368, -1.7585,  1.6051,  0.6589,
              4.9030,  3.2563],
            [ 3.0428,  1.0577, -0.5025, -4.7551, -3.8950, -2.4939,  0.1531, -5.1184,
             -1.7376, -1.2451],
            [-0.2647,  1.6640, -0.3524,  0.9661, -2.7824,  5.1188, -0.9259,  0.3620,
             -0.7899, -1.1114],
            [ 2.8917,  0.9214,  3.9396, -5.8140, -3.0797, -2.1186, -1.2949,  0.6215,
              0.0342, -0.0146],
            [-1.7611, -0.3210, -1.3004,  0.6164,  1.3346,  1.2823,  2.1615,  3.2982,
              1.4604,  2.4349],
            [ 1.3182,  2.6627,  2.4073,  4.5425, -4.4333, -3.1762, -3.4213, -3.1844,
             -0.5175, -3.2959],
            [-1.8681, -3.4916,  0.4367,  0.3017,  3.6039,  1.1484,  0.7065,  1.6261,
              0.5504,  1.2350]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.501 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
