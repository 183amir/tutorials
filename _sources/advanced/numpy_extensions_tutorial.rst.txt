.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.6765,  9.7075, 10.1690, 12.5902,  9.8269],
            [13.0188, 10.7834,  7.9523, 11.9422, 11.5942],
            [ 6.8291,  6.6015,  3.1156,  1.8689,  4.4369],
            [ 7.0863,  4.9897,  6.4770,  6.3861, 11.9745],
            [ 3.7700, 11.4240,  9.1177, 11.3286, 21.2541],
            [ 7.0863,  4.5775,  3.5908, 13.8623, 11.9745],
            [ 6.8291, 13.6049,  4.2386,  5.5007,  4.4369],
            [13.0188,  7.8325, 14.3630, 11.5331, 11.5942]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4134, -2.7965,  0.1269,  1.3357, -1.9818,  0.3289, -0.3911,  0.8951],
            [ 0.6495, -1.7853,  0.2545,  0.9765,  1.8349,  0.0074,  0.2074, -0.9580],
            [ 0.8945, -1.1911, -1.0459,  0.8104, -0.6697,  1.4034,  0.5085,  2.2591],
            [ 0.9507,  1.7760,  0.5338,  0.4463,  1.8682, -0.1558,  1.9425, -1.8346],
            [-0.8730,  1.8156, -1.1820,  1.5632, -2.1921, -0.7160, -0.8934,  0.1120],
            [-0.8431,  0.5602, -0.3703,  0.4125, -0.2617,  0.6891, -0.7354, -0.6484],
            [ 0.2281, -0.8212, -2.2521,  1.1819, -1.2158,  0.6866,  1.6436, -0.2086],
            [-1.2224, -2.4001, -0.7322, -0.5850, -0.2402, -0.1979, -0.2060,  1.6138]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1715, -0.2127, -0.5244],
            [ 0.3433, -0.2019,  0.5336],
            [-2.3613, -0.3185,  0.0301]], requires_grad=True), Parameter containing:
    tensor([[0.9588]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.1275,  2.0994,  2.5330, -0.3141,  3.6993,  1.9139,  2.6877,  0.8400],
            [ 1.0065,  1.6743, -1.6853,  3.1846,  4.4138, -1.0419, -4.9652,  4.2820],
            [ 0.1302,  2.8192, -4.1881, -3.3307,  0.1100,  6.2019,  3.0808, -0.0865],
            [ 2.6987,  5.7094,  2.5358,  4.2793,  2.3002,  2.4050, -0.4903,  1.4639],
            [-3.5249, -0.8343, -1.5343,  1.0822,  0.7091,  1.2642,  2.0873,  2.0579],
            [ 1.8023,  6.1263, -3.3130,  2.9804,  2.1671,  4.7685, -3.0471,  2.1980],
            [-0.8033,  3.7645,  3.7046,  1.7297,  1.7284,  0.3325,  3.1475, -0.3318],
            [-0.6140,  4.5001, -0.6946,  5.9006,  0.9048,  5.9533,  2.5901,  2.8257]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.5336, -0.3691,  0.3790, -0.1381,  0.9817,  0.0735,  0.0217,  0.6680,
              0.0116,  0.2978],
            [ 2.4374,  0.6106,  1.1263, -2.0306, -0.3955, -0.4369, -0.8699,  1.1140,
             -0.0276,  0.3496],
            [-2.7832, -0.9842,  1.3947,  0.7259,  2.1478,  2.8996, -2.0231, -1.0278,
             -0.3635, -1.2857],
            [ 4.5040,  0.6917, -0.7960, -3.3807,  0.3759,  2.5288, -1.2518,  2.3439,
              1.7187,  0.3013],
            [ 2.3483, -1.8759, -1.9673,  1.6594,  2.6484, -1.8741, -3.9908, -5.2425,
             -0.4462, -0.2161],
            [ 2.5809, -2.7390, -0.1936,  2.8329, -0.7977, -0.1656,  2.7063,  0.2011,
             -0.9500,  0.5216],
            [ 1.4561, -1.7177, -1.6237,  1.1774, -1.5477, -3.6331,  4.2171, -1.6875,
             -0.2981, -0.1523],
            [ 4.0090, -1.5741,  0.7916, -4.7417, -1.8407, -0.3730, -0.2788, -0.9420,
             -1.0388, -0.5070],
            [ 0.1010,  0.5847,  0.9687, -1.6680,  2.4013,  1.0629,  1.7299, -0.9316,
             -0.1933,  0.7575],
            [ 3.0356, -0.0626,  0.1328, -2.9202,  1.0231,  2.7069, -0.7608, -3.4731,
             -0.4308,  0.0421]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.518 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
