.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.2450, 13.4536, 12.2621,  1.0732,  2.8795],
            [ 7.0090,  7.0766,  8.4657,  7.5907, 11.7904],
            [ 6.3939, 12.6517,  6.3115,  4.6909,  3.4115],
            [ 5.7255,  6.3866,  6.2749,  3.6914,  8.1292],
            [ 2.8496, 13.9628,  5.0305,  2.1598,  3.3046],
            [ 5.7255,  1.1973,  3.2589,  6.2728,  8.1292],
            [ 6.3939,  6.1142, 21.3070,  3.4420,  3.4115],
            [ 7.0090, 14.9644, 13.6327,  4.4114, 11.7904]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2014,  0.9169, -0.0531, -1.1811, -1.6317, -0.7351, -0.5903,  1.0411],
            [-0.8159,  1.1381, -1.2738, -0.0572, -0.0644,  0.3537, -0.0040, -0.6169],
            [-0.6457,  2.1375, -0.0426, -0.7719, -1.0500,  0.2788, -0.6597, -1.3612],
            [-0.7579,  0.9220,  2.4156,  1.4756, -1.7008,  0.6502, -1.1432, -1.0384],
            [ 1.6190, -0.1253,  0.9438,  1.2589,  0.7708, -1.2014, -0.4710,  0.6603],
            [-0.2259, -1.5250, -0.7945, -0.0127,  2.3309,  0.7743, -1.2166, -2.3561],
            [ 1.1201,  1.7611, -1.0199, -1.2340,  0.5630,  0.3132, -1.9491, -1.5606],
            [ 0.0209, -0.0269,  0.2379, -0.9994, -0.0884, -1.3433,  0.4127, -0.2180]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7079,  0.3653, -0.1495],
            [-0.1306, -0.6028,  1.0587],
            [ 1.5077,  0.0887, -0.9644]], requires_grad=True), Parameter containing:
    tensor([[1.6021]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7443, -0.4370, -0.3726, -1.2445,  0.5958,  6.6019,  0.0169,  3.1642],
            [ 3.3451,  2.0892,  1.9835,  4.3990,  0.7779,  4.1345,  6.8805, -1.6022],
            [ 0.4211,  2.0089, -1.4250,  0.7327,  3.2979, -0.2513, -2.4783,  2.3650],
            [-0.5185, -0.5343,  3.1871,  4.3369, -1.3280,  2.3627,  1.2150,  2.5293],
            [ 1.4211,  2.1041,  2.8018, -1.5830,  1.8502,  3.6165,  3.2178,  1.5618],
            [ 7.0207,  2.0300,  2.2788, -0.3627, -1.1981,  0.0750,  5.2069, -1.7566],
            [ 0.5739,  1.3340, -3.7778,  6.3486,  3.8477,  3.0440, -3.6695,  4.8847],
            [ 0.6986, -0.3922,  3.5761,  2.7957,  5.6024,  1.6901,  5.3656, -4.8604]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2603,  0.1592, -0.6902, -0.2510, -0.3041,  0.8337, -0.7725, -0.0207,
              0.1051, -0.0694],
            [ 0.2372, -0.9278,  0.4122, -1.3546, -0.1388,  0.4066,  1.8927, -1.7238,
              0.2698,  0.5031],
            [ 0.9312, -0.1154,  0.1765,  1.1631,  0.8952, -2.8068,  1.4827,  2.2221,
             -0.8975, -0.6165],
            [-0.5762,  0.1129,  2.5882, -1.3494,  1.3975,  1.1912, -3.2352, -0.4420,
              0.0280,  0.6593],
            [-0.8780, -0.0655, -1.7248,  4.7624, -3.5141, -0.5486,  2.5223,  0.5158,
              0.3336, -0.2433],
            [ 0.4633,  2.5597, -2.3767, -1.2396,  6.0213,  0.4254, -2.7903,  1.6081,
             -1.3265, -0.7513],
            [ 0.5208, -0.6708,  2.9955,  0.5447, -3.9061,  1.6522, -3.0749, -1.4343,
              0.8817,  1.3234],
            [-0.8454, -0.6151, -0.7510,  2.7396, -2.5818, -0.3364, -0.4478,  2.4538,
              1.2602, -1.2608],
            [-0.0975,  2.2380, -1.2409, -1.0488, -1.4569, -0.5021,  3.6036, -0.8778,
             -0.3038, -0.9596],
            [-0.1570,  0.3262, -1.1391, -1.5618,  1.6471,  1.1944, -0.4669, -2.4515,
             -0.1964,  1.4385]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.480 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
