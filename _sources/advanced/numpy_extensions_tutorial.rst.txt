.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.8909,  4.4650, 10.4144,  8.8281,  2.8713],
            [13.7275,  7.7653,  5.1591, 13.9916, 10.2983],
            [ 8.8370,  2.6477,  8.5862, 12.6333,  1.0426],
            [ 2.4278, 14.7887,  1.7510,  3.7545,  6.5257],
            [ 8.5431,  5.4015,  3.9128,  2.7549,  9.5675],
            [ 2.4278,  3.2573, 11.4168,  3.7556,  6.5257],
            [ 8.8370, 11.4214,  5.1871,  6.7693,  1.0426],
            [13.7275,  8.9457,  4.0756,  1.8843, 10.2983]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5891e-01, -8.0327e-01,  1.4520e-01,  3.9439e-01, -9.1069e-01,
             -9.9446e-01,  1.6451e+00,  2.5741e-01],
            [ 6.5417e-01, -8.1920e-01,  1.2107e-02,  6.9075e-02, -1.2315e+00,
              8.9144e-01, -6.8196e-01, -1.0499e+00],
            [ 2.5619e-01, -6.5972e-01,  2.0675e+00, -2.8598e-02, -2.9186e-01,
             -4.9357e-02, -1.7698e-01, -3.4708e-01],
            [ 8.7191e-01, -5.1075e-01,  3.0095e-01, -1.1497e+00,  1.1461e+00,
             -6.6634e-01,  2.7213e-03,  3.0732e+00],
            [ 9.0816e-02,  3.3383e-01,  9.2842e-01, -2.1469e-01,  4.0133e-01,
              5.0299e-01,  8.8342e-02,  1.4725e+00],
            [-7.4015e-01,  1.0561e+00,  3.0792e-01, -1.2178e+00, -3.1251e+00,
             -1.5604e+00,  2.9841e-03,  4.2310e-01],
            [-1.7553e+00, -7.9730e-01, -1.3537e-01, -2.4448e-01, -1.9335e-01,
              3.0977e-02, -4.8122e-01, -3.6412e-01],
            [-2.7400e+00,  1.7641e-01, -5.0688e-01,  2.5433e-01,  9.7487e-02,
              2.1286e-01, -1.5890e+00, -1.8116e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 6.4718e-01, -8.1216e-01, -2.1383e-01],
            [ 1.5960e+00, -1.5558e-03,  2.8964e+00],
            [ 4.7121e-01, -2.4358e+00, -1.9923e+00]], requires_grad=True), Parameter containing:
    tensor([[0.7481]], requires_grad=True)]
    Output from the convolution:  tensor([[ -0.8408,   6.3841,  -2.8696,  -2.1918,   4.5125,   8.1379,   4.6420,
               5.3761],
            [ -0.5097,  -2.3500,  -3.3989,   1.0741,  -5.6788,  -8.7257,   0.3277,
              -3.8265],
            [ -3.2693,   7.6778,   3.6993,  10.9078,   0.2504,  -0.7533,  -3.1733,
               3.0560],
            [  1.7208,   0.0813,  -7.3682,  -0.6232,  -1.3233,  -6.4006,   4.3133,
               0.8359],
            [  2.3916,  10.1401,   5.6597,   2.7887,  -2.0853,   1.2626,  -0.1840,
               2.2849],
            [ -3.3102,  -2.0249,  -4.2246,   2.5874,  -6.5104,  -1.7136,   3.9745,
              -0.6819],
            [ -8.5493,  -1.5819, -10.1178,  -0.7811,  -3.1265,  -3.1325,   5.0339,
               4.9975],
            [ -1.9664,   2.8271,   5.8871,   6.2480,  14.6613,   1.5358,   0.8675,
               1.8774]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.6506e-01, -2.4497e-03, -5.2573e-01,  3.5817e-01, -7.4240e-01,
              2.3931e-01, -3.9899e-01,  5.2863e-02,  4.5262e-01,  9.2991e-02],
            [ 9.1413e-01,  1.7030e-01,  1.7799e+00,  3.5483e+00, -3.6719e+00,
              4.4629e+00, -2.5880e+00, -5.0844e-01, -9.7684e-01, -1.1748e+00],
            [ 1.3187e+00, -2.3963e+00,  2.7847e-02,  1.9006e+00, -4.2461e+00,
              7.0634e+00, -4.7453e+00,  4.9426e+00,  1.4351e-01, -5.6587e-01],
            [ 9.8435e-01, -9.3461e-01,  1.9952e+00,  1.0845e+00, -7.9651e+00,
              2.2480e+00, -1.2292e+00, -3.0983e+00,  3.7609e+00,  4.6900e+00],
            [-2.3849e-01, -1.0889e+00, -4.1224e+00,  2.7687e+00, -3.1144e+00,
              1.0509e+00, -5.9866e-01,  2.2244e+00, -9.1518e+00, -3.2745e+00],
            [ 5.3816e-01,  3.6964e+00, -9.6463e-01,  2.0059e-01, -3.0884e+00,
             -2.1672e+00, -5.5520e+00,  4.5047e+00,  6.6174e-01, -2.1740e+00],
            [-2.3668e-01,  8.8399e-01, -4.8995e+00,  4.9162e+00,  2.8635e+00,
              1.0043e+01,  6.4670e+00,  6.2011e+00,  7.7663e+00,  7.7744e+00],
            [-9.4578e-01,  1.5247e+00, -4.2873e+00,  2.8152e-01, -3.3528e+00,
             -1.5327e+00, -6.7062e+00, -1.1604e+01, -6.9802e+00, -6.9544e+00],
            [-1.0584e+00,  6.4709e-01, -1.7578e+00,  1.3088e-01, -2.0691e+00,
              1.6596e+00,  6.5154e+00,  8.9536e+00,  4.4236e+00,  5.1695e+00],
            [-2.7089e-01,  1.3691e+00,  1.2192e+00,  2.1194e-01,  2.0647e+00,
              3.7865e+00, -3.7116e+00, -6.8826e+00, -5.4097e+00, -2.3424e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.522 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
