.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.3474, 16.7255,  2.0136,  7.0073,  6.2949],
            [ 6.1631,  8.0253, 15.9966,  4.3273,  4.2766],
            [ 5.9853, 12.0041,  5.5835,  5.7561,  8.5095],
            [13.8057,  5.7259,  3.5682,  6.6526,  5.9839],
            [14.8118, 10.2135,  9.7814, 12.7503,  7.6488],
            [13.8057,  1.6670,  6.0597,  5.4453,  5.9839],
            [ 5.9853,  4.1686, 11.6954,  9.9238,  8.5095],
            [ 6.1631,  4.8837,  5.3845,  2.5442,  4.2766]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.2744,  0.2596, -1.2706, -1.3778,  1.7483,  1.7764,  1.1826, -0.3720],
            [-1.9282,  0.1262,  0.6074, -1.1944,  0.9010,  1.4373, -1.0715, -1.3377],
            [-0.0762, -0.5086,  0.4268,  0.1227,  0.5293, -0.6956,  0.3273, -1.6311],
            [ 1.0313, -0.3347,  0.4646,  2.0268, -0.2506,  0.2926, -1.8014,  1.0056],
            [-2.0124, -0.2438, -1.5171, -0.8125,  0.4247, -0.7179, -0.9621, -1.1134],
            [ 0.3642, -0.6286,  1.2177,  1.9246,  1.2038,  0.1230,  0.2658,  1.0951],
            [-1.7410, -0.6154,  0.8639,  0.2694,  0.4944,  0.4323, -0.0947,  0.5994],
            [-0.0533, -0.4728,  0.4934,  1.5709, -1.2006,  0.0138, -0.6134,  0.9543]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2984, -0.0499, -0.3522],
            [ 0.6927, -2.2390, -0.6639],
            [-1.3566,  1.2327,  2.0938]], requires_grad=True), Parameter containing:
    tensor([[-1.1175]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.3204e+00, -1.9440e+00,  5.6423e-01, -2.4881e+00,  1.8293e+00,
             -6.6194e+00, -9.2605e+00, -5.3017e-01],
            [-5.6362e+00,  2.5681e+00, -3.3108e+00, -5.2084e-01, -6.7183e+00,
             -6.9098e+00, -1.4165e+00,  6.2510e-01],
            [-1.5403e+00, -4.8831e+00,  3.6188e+00, -2.0518e+00, -2.0287e+00,
             -2.0104e+00, -2.8108e+00, -2.2767e+00],
            [-1.3875e+00,  2.1459e+00,  3.6534e+00,  5.0827e+00, -2.7767e-01,
              4.4901e+00, -9.2597e-01,  1.1287e+00],
            [ 1.3266e+00,  7.0962e+00,  3.2566e+00, -7.4896e+00,  2.2031e+00,
             -3.1942e+00, -3.5140e+00, -4.0651e+00],
            [ 6.5482e+00, -4.9697e+00, -2.5201e+00,  8.2927e-03, -4.1608e+00,
             -1.0832e+00,  4.3609e-01, -7.8641e+00],
            [-5.7615e+00, -2.3790e+00, -2.4846e+00, -5.1998e+00, -1.1854e+00,
              3.9657e-01, -6.0400e+00,  4.4133e+00],
            [-8.2703e+00, -3.3220e+00, -2.3338e+00, -3.6986e+00, -9.6559e-01,
             -3.7912e+00, -2.4712e-01, -4.0444e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.2213e+00, -1.1930e+00,  4.0382e+00,  3.3664e-01, -9.5871e-01,
             -9.3981e-01,  4.9583e-02, -7.9868e-01,  1.4974e-01, -1.4916e-01],
            [ 9.7715e-01,  3.2113e+00, -1.9306e+00,  4.5512e+00,  5.2895e+00,
             -3.6594e+00, -3.4853e+00,  9.3280e-01, -7.9653e-01, -2.0047e-01],
            [ 3.9578e-01,  1.9150e+00,  4.2519e+00,  1.2607e+00, -1.0599e+01,
              2.0230e+00,  4.0677e+00, -1.9650e+00, -4.7489e-01,  8.1032e-01],
            [ 3.3048e+00, -3.2556e+00,  1.5084e+00, -5.8920e-01, -2.0128e+00,
             -8.8824e-01,  2.4507e+00,  1.6546e+00,  7.8049e-03, -1.0429e+00],
            [-2.1451e+00,  4.2478e+00,  3.0323e-01, -6.0976e+00,  3.9904e+00,
             -2.2498e+00, -5.8598e+00,  3.9434e+00,  1.8936e+00,  1.2231e+00],
            [ 4.0858e+00, -5.5639e+00, -6.2078e+00,  8.7967e+00, -5.0325e-01,
              9.2665e-01,  1.7089e+00, -8.6617e+00, -5.0179e+00,  8.3934e-01],
            [-1.6629e+00,  3.3104e+00,  4.0463e+00, -4.1823e+00, -6.1311e+00,
             -2.1652e+00,  1.4983e+00,  9.1490e+00,  2.0935e+00, -6.6162e-01],
            [ 3.6352e+00, -2.8539e+00, -2.3609e+00, -1.0960e+00,  2.7920e+00,
              3.5150e-01, -5.5807e+00, -1.6533e+00,  2.4639e+00,  1.3929e+00],
            [-5.1664e-01,  3.3200e+00, -3.6749e+00,  2.0470e+00,  3.0050e+00,
             -6.4177e+00,  4.9965e+00,  8.0352e+00, -2.5680e+00, -2.1132e+00],
            [ 2.2406e+00, -3.5054e+00, -2.7476e+00,  3.4734e+00, -8.1507e-01,
              1.3707e+00,  2.2376e+00, -3.8907e+00, -1.8776e+00,  8.3721e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.536 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
