.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.4165, 10.8151,  8.2359,  2.2935,  4.3541],
            [ 3.9397,  4.6897,  0.5491,  7.3577,  9.5504],
            [10.5591,  1.0107,  6.1675, 13.7295,  7.9250],
            [ 7.4867, 11.7827,  7.3047, 10.3275,  4.4237],
            [ 1.1599,  7.6549,  7.3060,  4.2891,  5.7854],
            [ 7.4867, 10.0435,  8.4652,  6.3089,  4.4237],
            [10.5591, 13.3829, 13.1961,  3.7340,  7.9250],
            [ 3.9397,  0.8510,  3.0076,  4.3705,  9.5504]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2817, -1.1696, -1.1884, -0.1534,  2.4878, -0.1731, -0.0360,  0.7236],
            [ 0.6898,  0.6960, -0.1398, -0.7863, -2.3694,  0.5549,  0.5781, -0.3309],
            [-1.5185, -0.0274,  0.1331, -0.4872, -0.1240,  1.2694,  0.2224, -0.0632],
            [ 0.0602,  1.2403,  0.6669,  0.4989, -0.6081,  1.1446, -0.6831,  1.5051],
            [-1.5425, -1.0857, -1.6798, -0.2830,  0.2156,  0.1533,  1.0867,  0.5918],
            [-0.9765,  0.1899, -1.0332, -1.3979,  0.8763, -0.5441,  1.4560, -0.6721],
            [ 1.4415,  0.8426,  0.8408,  0.1289, -0.8995,  0.4732,  1.4511, -0.2839],
            [-1.3757, -0.7692,  1.8913,  0.5954, -0.0811,  1.6332, -0.0923,  0.3711]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8463,  0.1030,  0.7774],
            [ 0.8481, -0.3500, -0.3930],
            [-0.6544, -0.4523, -0.3631]], requires_grad=True), Parameter containing:
    tensor([[-0.6255]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.0652,  0.2286,  2.5250, -1.2365, -0.1626,  0.3347, -2.0391,  0.9216],
            [ 1.0883, -0.9842,  2.1385, -0.6704, -0.4007, -0.6084,  1.5407, -2.9802],
            [-0.8733,  1.3925, -3.5477, -2.6222, -0.9683, -3.3802, -0.6631, -1.5458],
            [-2.6333, -3.2441, -1.8282, -2.0446, -2.9877, -3.2045, -0.0627, -0.9152],
            [ 3.0276, -1.1906,  3.0896, -1.7681,  3.1315,  0.0759,  1.2310,  0.1034],
            [-0.1227, -0.3281,  2.4076, -1.2395, -1.0389,  0.0901,  0.6687, -1.8202],
            [-2.1710, -2.4814,  0.4106,  1.1424, -3.6091, -0.5435, -3.2457, -3.7935],
            [ 0.5251,  0.3792,  0.6362, -0.8987, -3.6207, -0.8825, -0.8219, -0.3017]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3617,  0.5801, -0.6252, -0.3864, -1.3730, -0.5543, -0.5457,  0.0133,
             -0.2478, -0.1116],
            [-0.3001, -0.4662, -2.7162, -0.0801, -1.1350,  1.6480, -3.3054,  1.7888,
             -1.4382,  2.0711],
            [-1.4092, -1.1389, -0.4855,  2.0776, -0.4093,  0.7058, -0.4569,  3.2363,
              0.3241, -1.8994],
            [ 0.4210,  2.1988,  1.3420,  0.7132,  1.5820,  2.3469,  0.2870, -2.4006,
             -1.5318, -0.7449],
            [-0.6101,  0.6210, -1.7023,  0.9808,  1.1649, -0.6670, -1.9915, -1.2806,
              0.8309, -0.7131],
            [-1.6713, -0.6678, -0.9087, -0.1780, -0.2881, -2.3391,  1.4502, -1.7255,
              3.2672, -0.0385],
            [ 2.5023,  0.6108, -0.0288, -0.1275, -3.5681, -1.7353,  1.9299, -0.1627,
              0.3888,  0.8638],
            [ 0.8555, -1.9342, -2.6285,  0.1307,  0.4918, -0.0575, -1.0771, -0.2631,
             -0.7886,  1.1430],
            [-1.8218, -0.8314,  1.2546,  1.4346,  1.4238, -0.4146,  0.0837,  1.6206,
              0.0501, -0.2750],
            [ 0.5148,  0.9084,  0.8873,  0.5984,  0.2222,  0.8274,  1.0006,  0.1720,
             -0.1305, -0.3196]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.540 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
