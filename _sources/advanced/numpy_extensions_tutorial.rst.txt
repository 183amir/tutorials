.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.3652,  6.8448, 17.2574,  3.8242,  0.8298],
            [ 7.9772, 11.8893,  5.8139,  9.0852,  3.3543],
            [11.7689,  1.7183,  9.7353,  5.0491,  3.4472],
            [ 7.2774,  9.8442,  7.0815,  7.3091,  7.3031],
            [ 1.8879,  7.7521,  4.2429,  5.8531,  0.1243],
            [ 7.2774,  7.4383, 14.3263, 11.8822,  7.3031],
            [11.7689,  3.9760,  8.8370,  0.3550,  3.4472],
            [ 7.9772,  6.5775,  6.4575,  3.0067,  3.3543]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.3941,  0.2829,  1.2396,  1.3835, -0.4331, -1.5838,  0.2007,  0.2415],
            [ 0.6812, -1.2382, -0.8625,  0.4277,  1.4698,  0.3249, -1.6473,  1.0186],
            [ 0.4671,  1.1075, -1.3381,  0.0287,  0.3050, -1.9318, -0.2135, -0.7264],
            [ 0.2800, -1.4781, -1.6955,  0.4041,  0.1820,  0.1538,  0.1150,  0.3501],
            [ 0.2402, -2.0518, -0.3118,  0.2717,  0.3315, -0.2917,  0.0199, -0.3701],
            [ 0.6790,  0.6183, -0.0455,  0.5240, -0.0412,  0.5546,  1.6203,  1.1121],
            [-0.4341, -0.9538, -0.0813,  1.4915,  2.2444,  0.2797, -1.3320,  1.6855],
            [-0.6315, -0.6573,  0.2385,  0.2075, -0.2401, -1.5378, -0.7100, -0.9150]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1439,  0.0157,  1.3741],
            [ 0.8917,  0.0261, -0.9744],
            [ 0.0335,  0.3854,  0.8568]], requires_grad=True), Parameter containing:
    tensor([[-0.3215]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.1307, -2.6022,  0.0940,  1.3885,  2.7155,  0.2874,  0.7371,  0.3118],
            [-6.3839, -0.0649,  2.1335, -2.1866, -2.4676, -2.8878, -2.5325, -1.3339],
            [ 2.5011,  0.1477, -3.4642, -1.2746,  0.6852,  1.6634, -4.3742, -2.8002],
            [-2.0651, -0.9973,  1.7457, -1.0823,  2.1107, -3.1268, -2.9862, -2.8287],
            [-1.5942, -0.5066, -2.1136,  1.2594, -3.7975,  1.2561,  0.3610, -1.5140],
            [-0.9090,  0.9387,  0.1373,  0.4549,  4.3691, -3.0923, -2.5620,  3.4235],
            [-1.1228, -2.6688, -3.5086, -2.6172, -2.3320,  5.3448, -6.6412,  0.6406],
            [-2.6424, -1.6172,  0.3314,  3.6110, -3.4899,  2.0235,  5.3958, -2.9035]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.6025e+00,  1.7708e+00, -2.4328e+00,  1.6121e+00, -1.7721e+00,
              2.9920e-01, -2.0078e+00,  1.4726e+00, -7.9933e-01,  4.0007e-01],
            [-9.5983e-01, -7.1340e-01,  3.1650e+00, -4.2649e+00,  2.4971e+00,
             -7.4985e-01,  8.3409e-01, -4.4203e+00,  3.2155e-02, -1.8290e+00],
            [ 1.5053e+00, -7.5209e-01,  2.6067e+00,  4.0905e+00, -2.1440e+00,
             -1.7481e+00, -2.0980e+00,  1.4458e+00,  7.2890e-01, -6.8831e-01],
            [ 2.4859e+00,  1.0265e+00,  1.8838e-01, -2.6567e+00,  2.3591e-02,
              3.9543e+00,  2.3187e+00, -4.7137e-01, -3.8970e-01,  2.2800e+00],
            [ 3.4786e-01,  2.8079e+00, -2.2557e+00,  4.5300e+00,  8.5463e-01,
              2.3119e+00,  2.1479e+00,  3.6347e+00, -9.3133e-01, -3.9804e-01],
            [ 1.7826e-01,  2.1845e+00,  1.6544e+00, -1.1125e+00,  2.4930e+00,
              7.4165e-01, -4.5705e-01,  3.6173e+00,  1.1081e+00,  2.1521e+00],
            [ 2.1208e+00, -9.5164e-01,  5.6387e-01, -1.7246e-01, -2.6994e+00,
             -3.2023e+00,  2.5201e-01,  1.3093e+00,  1.9310e+00, -1.2156e+00],
            [ 1.2031e+00, -2.2748e-01,  4.6267e-01, -4.5512e-01,  1.6655e+00,
             -2.7974e-01,  2.7302e+00, -2.9251e+00,  5.8635e-01,  1.9403e+00],
            [ 2.7824e-02,  5.0446e-01,  2.3612e+00, -5.2323e-01, -2.7868e+00,
             -3.5847e+00, -7.3041e-01,  1.3381e+00, -8.1105e-02, -3.3753e-01],
            [-6.4885e-04, -7.2899e-03,  3.9299e-02,  6.3289e-01,  1.4711e+00,
              1.0389e-01, -7.9176e-01, -1.2863e+00,  5.3231e-01, -1.1177e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.597 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
