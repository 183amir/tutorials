.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5358,  8.5253,  3.8938,  6.2345,  2.5462],
            [ 3.8639,  5.7824, 10.6688, 16.2558,  8.5647],
            [ 6.2840,  3.7239, 12.3656,  7.4302,  4.2815],
            [10.1682,  4.3423,  7.0922,  6.5897,  4.4351],
            [14.3523,  4.1520,  4.9905,  9.3086, 11.9475],
            [10.1682,  4.1287, 14.0163,  2.3705,  4.4351],
            [ 6.2840, 18.7435,  0.5168, 11.2583,  4.2815],
            [ 3.8639, 11.9449, 13.5513,  8.6185,  8.5647]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3788, -0.0399, -1.4165, -0.3887,  1.4185,  0.4792,  1.3961,  3.0170],
            [ 0.0596,  1.1758, -1.3342, -0.1300, -1.2455,  0.1788,  1.3741, -1.5558],
            [-0.1584,  0.1361, -0.7990,  0.0333, -0.3637,  0.2751, -1.1557, -0.4357],
            [ 0.3311,  0.6938, -1.1099, -1.4204,  0.7345,  1.8448, -0.0488, -0.2454],
            [-0.3822, -0.6133,  1.8175, -0.1779, -0.4617,  0.6717, -1.1424,  2.7732],
            [ 0.4250, -1.6353,  1.3040, -0.8030, -0.8135, -2.3326, -0.2444,  0.5371],
            [-0.8370,  0.9351,  2.1290,  1.2582, -0.0034,  0.4106,  0.9363, -0.4885],
            [-1.1479, -1.6343, -1.4738,  0.0286,  1.5067, -0.7116,  1.0792,  0.7051]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7641,  0.9952,  0.1127],
            [ 0.5962, -1.0952, -0.4319],
            [ 0.5210,  0.5828,  0.8197]], requires_grad=True), Parameter containing:
    tensor([[-0.2200]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.9420,  6.0185,  3.6050,  0.3970, -1.3707, -0.4322, -4.6812,  0.0695],
            [-2.1755, -4.4987, -3.7118, -0.0466, -0.9501,  1.8565,  1.3646,  0.8891],
            [-0.1039,  1.4666,  2.8451,  3.0602, -1.0451, -2.0961, -0.7336,  0.1234],
            [ 0.7280, -1.7463, -1.9201, -3.2193,  1.8918, -0.9755,  1.2059, -3.0610],
            [-0.0124,  1.0645,  2.0812,  3.9550, -0.7179, -1.1990, -1.5394,  0.1117],
            [-1.8353,  0.5086,  0.3380, -2.1187, -2.1580,  0.2713, -0.6431, -0.9641],
            [ 2.7584,  0.6612, -0.0496, -0.1892,  1.1819, -0.8622,  1.9226,  2.3933],
            [-4.3555, -2.4815,  1.0890, -1.0292, -0.3748, -0.9040, -4.9192, -3.1533]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.8084e-01,  1.4410e+00, -1.7538e+00,  1.0857e-02, -5.9917e-02,
              7.0832e-01,  7.0784e-01, -4.9110e-01,  1.1317e+00,  1.2476e-01],
            [-1.0314e+00, -1.2206e+00,  2.9035e+00,  2.1905e+00, -7.1007e-01,
             -7.1737e-01, -3.7875e-01, -2.5233e+00, -1.4029e+00, -4.5697e-01],
            [ 1.2790e+00, -1.7918e+00, -2.2717e+00, -9.6803e-01,  4.0311e-01,
              2.1219e+00,  3.0100e+00,  5.6920e+00, -1.2180e+00,  5.1250e-01],
            [ 1.4765e+00,  1.3334e+00,  3.8499e+00,  3.3379e-01,  1.4991e+00,
             -2.3937e+00, -4.7064e+00, -2.3852e+00,  2.8496e+00,  1.4722e+00],
            [-1.7332e+00,  3.4539e+00,  2.1242e+00, -5.8641e-01,  1.2151e-01,
              4.7922e+00,  2.3556e-01, -8.2617e-01, -4.7596e+00, -2.8122e+00],
            [ 1.6833e+00, -2.7797e+00, -2.8329e+00,  3.1757e+00,  2.0422e+00,
             -4.9080e+00,  1.5425e+00, -4.2850e-01,  1.8421e+00,  1.1525e+00],
            [ 4.3292e-01,  2.3644e+00,  1.9350e+00, -2.1545e+00,  6.7388e-01,
              3.0130e+00,  8.6799e-01,  1.9154e+00,  1.8932e+00, -4.7471e-01],
            [-1.2901e+00,  1.1136e+00,  3.4034e-01, -1.9562e+00, -9.7446e-01,
             -1.4394e+00, -2.8258e+00, -3.1338e+00, -6.5519e-01, -2.2971e-01],
            [-1.0174e-03, -2.0342e+00, -4.7086e-01,  4.4177e+00,  1.6772e+00,
              1.3146e+00,  3.4693e+00,  2.1720e+00, -2.9094e-01, -1.8330e-01],
            [ 2.0865e-01, -7.2555e-01, -2.2339e+00, -3.0741e+00, -2.5304e+00,
             -7.5470e-01, -6.1762e-01,  5.5391e-01,  1.7984e+00,  1.4205e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.514 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
