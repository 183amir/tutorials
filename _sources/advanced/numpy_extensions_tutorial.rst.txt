.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.5153,  4.8356,  7.0291,  5.5214,  0.4717],
            [ 9.6791,  9.9917, 12.2285,  5.1200,  5.7814],
            [ 8.4972,  3.1928, 14.0705,  4.8899,  2.1505],
            [ 4.3641,  6.9805,  5.8393,  7.1024,  5.8162],
            [ 5.5635,  6.4561,  4.0887,  9.9588,  2.7768],
            [ 4.3641,  6.7106,  9.9319,  7.1791,  5.8162],
            [ 8.4972,  5.6549,  3.2737,  3.7940,  2.1505],
            [ 9.6791,  4.5831,  4.1140, 19.5328,  5.7814]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7615, -1.4134, -1.2419, -1.0980,  0.2996, -1.2840, -0.6503,  1.3575],
            [ 0.3512,  1.9697, -0.3950, -0.8903,  0.7565, -2.0776,  0.4413, -0.3772],
            [ 0.4874,  1.2721, -0.0618, -1.8603,  0.3565,  0.4303, -0.5745,  0.8265],
            [ 2.2317, -0.8171, -0.4312,  1.2624,  0.2821,  0.6223, -0.7599,  1.9458],
            [-0.2792, -0.9590,  0.1114,  1.0198,  0.4457,  0.2949,  0.2565,  0.0153],
            [ 0.3061, -1.0246, -0.1513,  1.9737, -1.6601,  0.0967,  1.2444,  0.4627],
            [-0.1088,  1.0478, -0.0314,  0.7888,  0.0396,  0.6534,  0.8883, -0.2918],
            [ 0.3256,  0.9844, -0.0677,  0.5191,  0.4284, -1.0075,  0.4437, -1.4490]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.1300, -0.3620, -1.1430],
            [ 0.3873, -0.7023,  2.4321],
            [-1.5664, -0.0365,  0.3397]], requires_grad=True), Parameter containing:
    tensor([[0.6184]], requires_grad=True)]
    Output from the convolution:  tensor([[  1.0196,  -1.4677,   5.6910,   9.5671, -11.9403,   9.1242,  -1.1712,
              -0.7658],
            [  4.1102,  -1.2558,   0.9073,  -2.8025,   5.7765,   7.7012,  -2.7013,
               7.6807],
            [ -4.9493,   4.7928,  -2.9120,   2.9740,  -1.1014,  -0.3636,   7.1574,
               6.2110],
            [ -1.9959,  -2.0754,   6.3352,   2.9167,  -9.5589,   4.0693,  -2.2861,
              -4.1177],
            [  5.5450,  -2.5003,   0.9549,  -3.1253,   7.9149,  -0.6304,  -6.0600,
               1.3071],
            [  0.4937,   5.7462,  -6.6117,  -1.3995,   5.6953,  -2.6423,   2.7305,
               4.2253],
            [  3.9218,   0.6051,  -2.0614,   6.3751,  -5.3681,  -0.7942,   2.9195,
              -2.4025],
            [ -3.6855,   0.2740,   8.5871,  -1.7510,  -2.9778,   7.0779,   0.2179,
              -5.3182]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0783, -1.0249,  0.3475,  2.3409,  2.4120, -0.2276, -2.7404, -0.9667,
              0.6198,  0.2534],
            [-2.0254, -0.8611,  4.7719,  0.3087, -2.1206,  2.5608, -1.5634,  1.4438,
              1.2384, -0.5432],
            [ 0.1782, -1.4471, -1.5358, -3.4522, -0.3035,  4.5230,  1.1848,  2.1897,
             -5.6445,  0.0465],
            [ 1.2947, -0.1152, -0.3571, -6.2724,  4.1286,  1.1977,  1.0822,  0.0128,
             -0.1026,  0.2079],
            [ 0.1516,  1.5544,  0.5727, -1.5216,  5.3588, -1.4298,  7.3177,  2.5760,
             -1.2867, -2.7718],
            [ 0.0618,  2.3217,  0.2609, -1.6483,  0.8693,  0.9939,  3.1250,  1.1943,
              6.3889,  3.0194],
            [ 0.1899,  1.4570,  0.5516,  4.4544, -2.4974, -6.9718, -8.4298,  6.0031,
              4.8354,  1.0599],
            [-0.9222, -1.3472,  2.9460,  2.4155,  1.1750, -1.0367, -0.6466, -5.7524,
             -3.4317,  3.7256],
            [-0.7630, -0.1922, -3.2103, -1.2986,  0.9021,  3.6900,  2.1608, -0.3640,
              0.7091, -3.4411],
            [ 0.9315, -0.1479, -1.1347, -0.8349,  0.1294, -0.9592, -0.1373,  2.6229,
              0.0819, -0.5158]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.241 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
