.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.4876,  6.4607,  5.6657,  4.9984,  8.3433],
            [ 9.9995,  2.8646,  6.2332,  6.9867, 10.1087],
            [15.6507,  7.3320,  6.6217,  2.6182,  8.0802],
            [ 8.7452,  8.2545,  8.1661,  6.9631,  7.5446],
            [ 2.5308,  8.3502,  9.7662,  7.1895,  4.5799],
            [ 8.7452,  8.4930,  8.3893,  8.7569,  7.5446],
            [15.6507,  9.3473, 11.3788,  2.5296,  8.0802],
            [ 9.9995, 12.8590, 13.5298, 10.0885, 10.1087]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9787,  0.3238, -1.7231,  0.6391, -0.4832,  1.0705,  0.0441, -0.7528],
            [ 0.1721,  0.3212, -0.5281, -1.5632,  0.7801,  0.3899,  1.7196, -0.0861],
            [ 0.4453,  2.1952,  2.0768, -0.0836, -1.5428, -0.0824,  0.6742,  0.0032],
            [-0.6124, -0.7546,  2.2365, -0.2492, -1.9415, -0.8227,  0.6427,  0.6564],
            [ 0.0587,  0.4607, -0.8490,  0.5095,  1.5195,  0.4147, -1.1718, -0.8548],
            [ 1.6157,  0.3240,  2.2690,  1.8893,  0.0116,  0.7777, -0.1816,  1.3346],
            [-0.7320,  0.3247, -0.6366,  1.2586,  0.5214, -0.6312,  0.0358, -1.0753],
            [-1.4029,  1.0721, -1.6519,  0.4961, -1.1477, -1.5077, -1.1676,  0.4177]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2113,  1.1874, -0.8660],
            [-1.9664, -0.1019, -0.8305],
            [ 0.7414, -0.6676,  0.2447]], requires_grad=True), Parameter containing:
    tensor([[0.9486]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0739e+00,  1.0428e+00, -3.0328e+00, -3.9697e+00, -2.4623e+00,
             -6.9313e-01, -3.4256e+00,  2.7470e+00],
            [ 2.4816e+00, -1.1929e+00,  4.7797e+00,  4.8036e+00,  2.3824e+00,
              6.1379e+00,  2.2861e-01,  3.2047e+00],
            [ 4.5230e-01,  2.1869e+00, -3.4114e+00,  4.6230e-01, -2.6850e+00,
              1.6195e+00,  1.2665e-01,  5.2494e+00],
            [-1.7610e-01,  1.1830e+00,  1.5156e+00,  2.8691e+00,  2.7277e+00,
              6.2556e+00,  3.1604e-02,  9.3480e-01],
            [ 1.0458e+00,  1.9109e+00, -2.0729e-01,  1.6753e+00, -1.2370e+00,
              1.6939e+00,  1.7562e+00,  1.7532e-03],
            [ 4.0982e-01,  2.4075e+00,  1.6658e+00, -2.5033e+00,  3.9824e+00,
             -3.4327e+00,  3.9541e+00,  1.2270e+00],
            [ 4.0723e+00,  2.8697e+00,  4.2836e+00,  2.2210e+00,  1.6894e+00,
             -3.5002e+00,  7.1527e+00,  6.2113e-01],
            [ 1.2473e+00,  2.2061e+00, -1.6440e+00,  3.1228e+00,  7.9081e+00,
             -4.1183e+00, -1.8960e+00,  3.2778e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3314, -1.7433,  0.7563,  0.3656, -1.1113,  0.9824,  0.9354, -1.5076,
             -0.0524,  0.5785],
            [ 3.3687, -0.3347,  2.8961,  3.8483, -1.6464,  3.2840, -2.3210,  2.5412,
              0.8713, -0.0176],
            [ 1.7942, -1.0075,  1.1777,  0.6731, -5.7050,  1.2462, -4.2061,  0.3518,
             -1.5730, -0.3040],
            [ 2.0842, -2.0972, -1.7944, -1.9358,  4.0579, -5.8812,  1.7309,  1.6487,
              0.3759, -1.1307],
            [ 1.8290,  4.8777,  1.6786, -0.6694,  0.9093, -0.8819, -0.8116, -3.3304,
             -3.4096, -0.6264],
            [-1.4094,  0.8015, -0.4781,  0.6128,  0.1972,  1.9041, -2.7399,  4.3773,
             -2.8741,  2.0699],
            [-1.7073,  0.2216,  2.0306, -1.2838, -0.9886,  4.0156, -0.0352,  0.1106,
              0.7975, -0.2358],
            [-1.9448, -2.8370, -3.6804, -2.7382, -0.3657, -5.4660, -2.4343, -1.3504,
             -0.8867, -0.3736],
            [-0.6058,  0.8933,  0.8378, -0.6417,  2.3979,  3.0209, -0.7659,  1.8865,
             -0.6155,  0.3123],
            [ 0.5631, -0.6909, -0.3502,  1.0212, -1.0261, -0.6062,  1.2918, -0.9161,
              0.2920, -0.0556]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.550 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
