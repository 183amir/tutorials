.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.7172,  8.3514,  7.8164, 11.4448,  1.7738],
            [ 6.0448,  4.0086, 10.3654, 13.5469,  5.9508],
            [ 6.1331, 14.1069, 10.7224,  3.1475,  5.6819],
            [10.8540, 17.1677,  8.3925,  2.4423, 12.2445],
            [ 7.5993, 10.8782, 13.7873,  9.7486,  1.4265],
            [10.8540,  6.7096,  4.2850,  8.8468, 12.2445],
            [ 6.1331, 17.9512, 19.8669,  3.6428,  5.6819],
            [ 6.0448,  9.9657,  9.6228,  0.2348,  5.9508]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5370,  1.1415, -0.3884, -1.5093,  1.1111,  0.3305,  2.3129,  1.3792],
            [-2.3463, -0.3953,  0.8607,  0.0975,  0.6929,  0.2645,  0.7907,  2.2099],
            [-2.0800, -0.5551, -0.2338,  2.5526,  0.0088, -0.6180,  0.3944, -1.3186],
            [ 1.3479, -0.8196, -2.1337, -1.5799,  1.6484,  0.7580,  1.0827,  1.2468],
            [ 1.4588,  1.6628, -0.2861, -1.3256, -0.3050,  1.1298, -0.9554, -0.6583],
            [ 1.4653, -0.6568, -0.4581, -2.0238,  0.3048, -1.3154, -0.9018,  0.4397],
            [-2.0335, -0.6800,  1.4006,  0.9694,  0.9216,  1.0789, -0.0838, -0.2004],
            [ 0.4315,  0.6808, -1.5502, -0.7032,  0.8747,  0.0201, -3.4170,  0.6430]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4547,  1.3773,  1.2277],
            [-1.1816,  1.1324,  1.0238],
            [ 0.4725,  0.3315,  1.0282]], requires_grad=True), Parameter containing:
    tensor([[1.6339]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8367, -0.4697, -1.9773, -6.1573,  0.8465,  6.8819,  4.2373, -1.4189],
            [ 2.3366,  4.5857,  5.5826, -2.8361, -2.9924,  0.7698,  3.6228, -0.3129],
            [-0.7285,  1.9783,  1.5910,  1.1267,  1.9294,  0.4304, -0.9725,  3.8281],
            [ 6.2194,  1.6987,  2.3788,  0.3468,  5.2737, -1.0056, -2.9176, -1.6240],
            [ 0.6104,  1.1603, -3.9879,  0.8811,  0.2676,  1.1616, -2.6281, -1.4880],
            [ 2.8664, -0.8457, -1.2283,  0.5339,  3.9788, -0.9558, -7.2292, -2.7952],
            [ 5.6586,  0.9190, -3.0535,  2.4908,  3.0673, -1.8528, -4.2703, -5.6468],
            [ 6.2417,  3.5905,  4.6310,  1.5173,  2.3379,  3.8743, -6.8058, -4.3018]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.0887e-01, -1.5506e+00, -1.3569e+00, -1.7815e+00, -3.7914e+00,
             -1.5525e+00,  6.0983e-01,  8.6742e-01,  2.2541e+00,  2.3440e+00],
            [ 1.4030e+00, -3.3756e+00, -1.2425e+00, -7.7020e-01, -5.5763e+00,
             -5.8342e+00, -1.8119e+00, -1.8304e+00,  3.4891e+00,  3.6165e+00],
            [ 5.8572e-01,  3.2032e+00, -2.5607e+00, -4.8433e+00, -3.9597e+00,
             -4.4279e+00, -3.5882e-01, -1.4240e+00, -1.6458e+00,  2.0394e+00],
            [-2.6736e+00, -9.9780e-01,  1.8097e+00, -5.8862e+00, -7.3757e+00,
             -5.6158e+00,  2.3591e+00,  2.8103e+00, -4.5642e+00,  5.9129e-02],
            [ 1.9799e+00, -7.3839e-02, -4.5742e-01,  2.4378e+00, -5.4161e-01,
             -4.8964e+00,  5.0925e+00,  2.7290e+00, -4.2162e+00, -1.9374e+00],
            [ 1.2134e-01, -8.5270e-01, -2.1280e+00,  1.6495e+00, -8.2630e-01,
             -2.0987e+00, -2.7741e+00,  1.9349e+00, -3.1430e+00, -7.0179e-01],
            [-7.2285e-01, -5.8085e-01,  3.8387e+00,  2.7616e+00,  6.7678e+00,
              3.0119e-03, -7.6590e-02,  2.2297e+00,  2.9632e+00,  2.0436e+00],
            [-1.7851e-01, -1.0139e+00, -4.1668e+00,  2.5776e+00,  6.0200e+00,
              1.5117e+00, -2.5230e+00, -1.6964e+00,  2.0198e+00,  1.9101e+00],
            [ 1.1262e+00, -3.3735e-01, -1.5697e+00, -7.9573e-01,  2.7529e+00,
              3.3183e+00,  1.6326e-01,  2.2168e+00,  1.3372e+00,  1.9323e+00],
            [-4.6018e-01, -6.5872e-01, -9.9452e-01,  7.3065e-02,  1.3763e+00,
              1.6131e+00,  8.3697e-01, -2.0782e-01, -8.2840e-02, -2.0586e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.511 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
