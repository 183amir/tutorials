.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.4801,  8.7724,  8.3183,  8.4599,  4.4226],
            [ 3.0743,  7.8531,  6.0041,  8.4470,  1.5657],
            [ 9.7017, 10.1465,  6.2965,  4.1245, 13.9267],
            [10.3855,  3.3735,  8.5271, 13.4245,  7.9040],
            [ 0.5338, 11.1108,  3.6764,  9.2523,  2.9989],
            [10.3855, 16.5745,  6.7352,  6.4861,  7.9040],
            [ 9.7017,  7.8382,  9.9497, 14.0111, 13.9267],
            [ 3.0743, 12.9271,  5.1862, 15.7263,  1.5657]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0889,  1.3300, -0.4587,  0.3492,  1.4353,  0.3168, -1.1096,  2.0402],
            [ 0.2388, -0.3418,  1.4414, -2.6189,  0.1693, -0.1252, -0.4816, -0.6745],
            [ 0.0732, -2.0240,  2.2242, -0.6059,  0.0764,  0.2814, -1.9919,  0.4988],
            [-0.5460,  0.4127,  0.6684,  2.2488,  1.8640,  0.5977,  0.4228,  0.4212],
            [ 1.0202,  0.0787, -2.5121, -0.1951, -0.1251,  0.9406,  1.1452,  0.1544],
            [-0.5183, -0.2201,  0.1868, -0.1744,  1.2125, -1.3348, -0.2917,  1.8721],
            [-0.3890, -2.8631, -1.0174,  1.1166,  1.2780,  1.0735,  3.1050, -0.3615],
            [-0.1380,  0.7398, -0.1416,  0.1922,  0.2605, -0.8295,  0.2615,  0.7328]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1759, -0.4523,  1.0380],
            [-2.3382, -1.5132,  0.3549],
            [-2.5658,  0.3975,  0.3374]], requires_grad=True), Parameter containing:
    tensor([[0.3794]], requires_grad=True)]
    Output from the convolution:  tensor([[ -3.3457,   5.2039,  -3.8317,  -2.7018,   5.4228,   0.2390,  -2.0186,
              -1.3115],
            [ -5.6493,  -0.9952,  -9.2782,  -7.7972,   4.6258,   1.9179,  -3.7853,
               1.4013],
            [ -6.1944,  -7.7945,  -5.3329,  -1.0504,   2.9500,   3.0949,  -9.2678,
              -0.7097],
            [ -8.8122,  -2.0467,  -2.1100,  -3.1505,   4.1974,   1.0027,  -3.3568,
              -2.1928],
            [ -0.1997,   0.5778,   1.1578,  -0.9179,   5.1744,  -2.3180,  -1.4041,
               2.8016],
            [  1.9332,  -1.3830,  -0.3483,   3.3006,  -1.6673,   1.7302,   1.3376,
               2.4626],
            [ -2.9022, -10.4285,  -2.4030,   2.9301,  -5.2847,   4.3470,  -0.1403,
               4.1546],
            [ -2.5822,  -3.1911,   2.5490,  -4.4807,  -4.0736,   0.6433,  -0.1141,
              10.5634]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0310,  0.3311, -0.7488,  1.9332,  0.6067,  0.5284, -3.3734, -0.0251,
              1.0969, -0.1407],
            [-0.4182, -5.9539, -4.3461, -0.2421, 11.1636,  2.0878, -5.3998, -0.0608,
              0.8016,  0.2246],
            [-0.2576, -2.8351, -1.1314,  6.7487, 13.1175, -5.8322, -5.3794,  0.9496,
             -3.0393,  0.9784],
            [-1.4387,  1.2905, -3.3870,  9.2091, -0.5824, -4.7377,  5.1941,  2.3601,
             -3.2205,  0.3503],
            [-1.2381, -3.8763,  2.7751,  6.1298, -0.2314,  1.6879, 10.0408, -1.1129,
             -1.5239,  0.3521],
            [-0.5526, -6.2088,  0.2026, -1.8242, -4.1159, -3.1152,  3.8517,  0.3184,
              0.3945,  1.2130],
            [-2.5059, -3.4284, -2.1365, -4.7199, -0.5040,  1.5667, -2.2410, -6.8281,
             -0.0156,  0.7742],
            [ 0.4864,  7.0307,  2.6149,  3.0252,  5.8226,  0.2597, -7.0056, -5.1966,
              0.8211, -0.3804],
            [ 5.5845,  6.7826, -0.1561,  2.9799,  1.4861,  0.4019, -3.1011,  2.4375,
              1.7150, -0.1938],
            [ 3.6102, -1.1589, -0.4510,  1.9974, -0.6412, -0.6941,  1.5879,  2.0357,
             -0.5329, -0.2889]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.522 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
