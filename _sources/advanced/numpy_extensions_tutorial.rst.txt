.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3058, 12.7756, 12.6392,  2.9514,  5.1994],
            [ 7.8373,  6.2368,  4.7366,  3.8392,  1.8204],
            [ 7.5497, 12.2140, 15.0648,  9.1982,  6.8549],
            [ 5.7888,  6.1116,  7.8328,  2.6303,  3.0674],
            [ 0.4510,  5.5598,  4.8290,  9.5966,  1.8513],
            [ 5.7888,  7.6404,  5.4540,  3.5187,  3.0674],
            [ 7.5497,  4.2203,  9.6786,  3.0348,  6.8549],
            [ 7.8373, 11.3793,  2.2594,  2.7768,  1.8204]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4800,  0.3114,  0.1627, -0.3893,  1.2853, -0.0680, -0.2101, -1.1040],
            [-0.8102, -1.0335,  0.1854,  0.3126, -0.0878, -0.7229, -0.0196, -0.7648],
            [-0.9334, -1.2768,  0.0169,  0.1593, -1.0573, -0.4231,  2.4333,  0.6164],
            [-1.0054, -0.6925,  0.6395, -0.8036, -1.2463,  1.0970,  0.6702,  0.2489],
            [-1.3183,  0.4907, -0.1721,  0.7732,  1.8922,  0.7592, -0.6831, -1.1169],
            [ 0.8368, -0.1705,  0.4756,  0.4698, -0.6667, -1.3304,  0.0870, -0.4210],
            [-1.2644,  0.0155,  2.1765,  0.2641, -0.0557, -0.6321,  1.1592,  0.0471],
            [-0.1120, -0.3725,  1.4460,  1.6004,  1.3259,  1.0793, -0.9175,  0.6304]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3355, -0.0233, -0.1906],
            [-2.3654,  1.4959, -0.4847],
            [ 0.5031, -0.9219, -1.1035]], requires_grad=True), Parameter containing:
    tensor([[0.9522]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.9380e+00,  2.9635e+00, -5.9850e-01,  1.8133e+00, -1.5964e+00,
             -1.2917e+00,  1.3859e+00, -3.2780e-01],
            [-7.8950e-01,  2.0316e+00, -1.0087e+01,  5.0230e+00, -3.5610e+00,
              1.1630e+00, -6.7126e+00,  4.8148e+00],
            [-4.5603e+00,  3.8181e+00, -2.5042e+00, -8.8603e-01, -7.0842e-01,
             -2.5733e+00, -1.4708e+00,  1.0683e+00],
            [ 4.8562e+00,  4.3612e-01,  1.0690e+00, -2.6374e+00,  1.8021e-01,
              1.0137e+00,  1.9648e+00, -2.0519e+00],
            [-1.2015e-01,  9.7966e-03, -2.1937e+00,  6.4129e+00, -4.8204e+00,
              6.7266e+00, -4.4263e+00,  3.6979e+00],
            [ 7.4538e-01, -2.9605e+00,  1.0314e+01, -3.8043e+00,  6.8709e+00,
             -3.8758e+00,  1.9277e+00,  5.4023e+00],
            [ 1.1859e+00, -5.5054e-02,  2.1651e+00,  1.3348e+00, -3.7275e+00,
              6.3306e+00, -2.9418e+00,  4.6866e+00],
            [-2.5051e-01, -2.1641e+00, -1.3320e+00,  2.7947e+00, -2.1410e-01,
              2.0449e+00,  4.5491e+00, -3.0341e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 6.1799e-01, -4.0859e-02,  6.9578e-02, -5.1648e-01, -3.2189e-01,
             -6.6077e-02, -6.9371e-02,  2.7930e-01,  7.5675e-03,  9.4816e-02],
            [ 4.4305e+00, -3.1171e+00, -5.7649e-01, -1.9854e+00,  6.5410e-01,
              1.2576e+00, -1.9810e+00,  1.8899e+00, -1.1923e+00,  5.1692e-01],
            [-7.4657e-01,  2.6213e+00,  2.1214e+00, -9.2851e-01, -1.9357e+00,
             -2.5228e+00, -5.7177e+00,  7.5564e+00, -2.8813e+00,  1.2965e+00],
            [-2.7333e+00, -1.3090e+00,  7.1036e+00, -3.9646e+00, -1.1790e+00,
              1.8782e+00,  1.0216e+00, -2.8628e+00, -1.5519e+00,  1.7815e+00],
            [-1.5336e+00,  3.2985e+00, -6.3943e+00, -2.9040e+00,  1.0504e+01,
             -7.9313e+00,  1.8542e+00,  1.2004e-01,  7.2881e-02,  4.6315e-01],
            [ 1.5264e-01, -5.9342e+00,  4.6507e+00, -8.8918e-01,  2.8934e-01,
             -8.3856e-02,  5.5837e-02,  5.4124e-01,  2.7552e-01,  3.9337e-01],
            [ 6.0504e+00,  4.2565e-01, -1.1899e+00, -1.6613e+00,  6.0998e-01,
             -1.3977e+00, -2.7466e-02, -4.3778e-01, -3.9843e-01, -9.7065e-02],
            [-1.2936e+00,  4.3744e+00,  4.8574e+00,  2.0870e+00,  1.0479e+00,
              1.3365e+00,  1.1093e+00, -1.4864e+00, -4.1858e-01, -7.9979e-01],
            [ 6.0156e+00, -4.4070e+00, -1.6586e+00,  1.7586e+00,  8.5996e+00,
              1.3410e-01, -2.5663e+00, -1.2614e+00,  8.0716e-01, -1.1292e+00],
            [-1.2407e+00,  2.2597e+00,  3.3121e+00, -6.5647e-01, -3.2050e+00,
              8.9289e-01,  4.6274e+00,  1.7006e+00, -1.8020e+00, -1.3211e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.353 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
