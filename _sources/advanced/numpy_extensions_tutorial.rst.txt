.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[5.4468e+00, 7.5235e+00, 1.0935e+01, 1.4176e+00, 1.0161e+01],
            [2.9245e+00, 4.8308e+00, 6.2670e+00, 4.7084e+00, 2.6606e+00],
            [1.5793e+01, 2.0256e+00, 9.0699e+00, 1.1350e+00, 4.9098e+00],
            [1.0760e+01, 9.4201e+00, 7.8332e+00, 2.6042e+00, 6.4621e+00],
            [3.1928e+00, 1.7810e+00, 1.1546e+01, 9.7854e+00, 6.8513e-04],
            [1.0760e+01, 1.3059e+01, 4.6545e+00, 1.0499e+01, 6.4621e+00],
            [1.5793e+01, 7.2068e+00, 1.2800e+01, 8.8597e+00, 4.9098e+00],
            [2.9245e+00, 1.2099e+01, 4.7807e+00, 3.9098e+00, 2.6606e+00]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6282,  0.5438,  0.7534, -1.1013,  0.2055, -0.4378, -0.8399, -1.0321],
            [ 1.0858, -1.3018,  0.0757, -0.5483, -2.0020, -1.1867, -0.3192, -1.2965],
            [ 0.6839,  0.5999, -0.2225,  1.6704,  1.1657, -0.8615, -0.2638,  0.9991],
            [ 0.0573, -1.8305,  1.2261,  2.3884,  1.3241, -0.9677, -0.3524,  0.2826],
            [-0.0560,  0.6975, -1.1077, -2.1334,  0.5080, -0.9580, -0.7664, -1.2489],
            [-0.8488, -1.2014,  0.9928,  0.6928,  0.0310, -0.5215, -1.3656,  0.4541],
            [-0.3193, -0.9630, -0.8203,  1.2842,  0.3433, -0.9310,  0.4885, -0.8282],
            [ 1.4489,  0.8281, -0.1517, -0.5648, -0.3327, -0.1392,  1.1076,  1.8088]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1057, -0.2932, -0.8192],
            [ 0.8493,  1.5367, -0.2775],
            [-1.0693, -1.0303,  0.8519]], requires_grad=True), Parameter containing:
    tensor([[-1.6203]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.7399, -1.4835, -0.5851,  2.2062, -0.1503, -4.6066, -3.2626,  1.4929],
            [-2.5428, -1.7999, -1.3210, -5.7389, -1.5281, -0.8154, -4.7036, -5.9177],
            [-1.5010, -1.8755, -0.5129,  0.0946, -2.3112,  1.3544,  3.4293, -2.5472],
            [-1.2362,  2.1538, -0.3223, -3.0422,  0.1324, -3.4898, -0.4734, -0.3254],
            [-3.2242, -1.5443, -2.3899, -2.7481, -0.8635, -1.7227, -3.6877,  2.8451],
            [-1.6244, -4.6957, -3.2691,  0.6187, -4.8453, -1.1980, -5.6637, -4.7827],
            [ 0.4493, -5.4776, -0.7488, -2.8035, -0.7604, -1.2554,  2.2234, -0.8749],
            [-0.5251,  0.7194, -1.3091, -0.7806, -1.3466, -1.2469, -1.7320, -2.0448]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.0047e-03,  7.0807e-02,  2.1403e-01,  6.5460e-01, -1.9668e-02,
             -2.9279e-01,  3.7129e-01,  1.4376e+00,  7.8998e-01,  5.7518e-01],
            [-9.3244e-02, -8.4778e-01, -2.1393e+00,  1.1000e+00,  3.4014e-02,
             -1.8886e+00, -3.5345e+00, -1.5552e+00, -1.6592e+00,  2.6949e-01],
            [ 1.0803e+00,  1.8811e+00, -1.5509e-01,  8.3169e-01, -2.8650e-01,
              1.6716e+00,  2.0317e+00,  6.0481e-01,  5.2152e-01,  8.0452e-01],
            [-1.7294e+00, -7.1841e-01,  2.7867e+00, -6.7001e-01, -6.6781e-02,
              1.0085e+00,  1.4683e+00, -2.1874e+00,  1.3799e-01,  1.1634e+00],
            [-1.3114e-01, -6.7296e-01, -5.5007e-01, -4.5770e-01,  2.2803e+00,
             -1.2338e+00, -2.8663e+00, -1.4252e+00, -1.5623e+00, -2.4644e+00],
            [ 9.2658e-01,  1.6012e+00, -1.0973e+00, -1.9815e+00, -1.1221e+00,
             -2.4609e+00,  8.1991e+00,  7.6274e+00,  2.2893e+00, -1.4409e+00],
            [ 9.6011e-02, -1.3304e+00,  2.2192e-01,  2.2247e+00,  2.7616e+00,
             -6.4743e-01, -8.8044e+00, -3.2740e+00,  8.3763e-01,  1.8753e+00],
            [-1.8117e+00, -2.6990e+00,  5.1903e-01, -1.6751e+00, -1.9468e+00,
              2.9093e+00,  2.8881e+00, -7.3151e-01, -2.0650e+00,  9.3677e-01],
            [ 3.0663e+00,  4.5600e+00, -2.0323e-01, -9.0293e-01, -1.8710e+00,
              1.5323e+00, -9.7970e-01,  1.1963e-01, -2.0838e-01, -4.4017e-01],
            [-8.4484e-01, -8.1812e-01,  1.1751e-02,  4.2112e-01,  8.9357e-01,
             -9.9700e-01,  1.0622e+00,  4.2709e-01,  5.8197e-01, -5.5110e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.534 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
