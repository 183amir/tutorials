.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.2557,  5.7011, 10.5928,  6.0688, 13.1615],
            [ 4.1284,  5.2433,  4.0779, 15.0147, 11.5752],
            [ 5.7928,  7.2522,  5.9485,  3.9348, 11.2749],
            [ 5.8798,  2.2021,  5.2175, 10.6362,  5.7223],
            [ 0.9614,  5.5025, 10.7322, 14.0870,  5.5729],
            [ 5.8798,  1.4787, 13.6838,  9.2099,  5.7223],
            [ 5.7928, 15.1710, 12.9511, 12.2958, 11.2749],
            [ 4.1284,  4.8786,  4.5795,  9.1363, 11.5752]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2930, -2.9605,  0.6851,  0.3055,  1.0734, -1.2531, -0.5498, -0.2339],
            [-1.0307,  0.6408, -0.3344, -1.7498,  0.0655,  0.7315, -0.4668,  0.4904],
            [ 0.5091, -1.7065, -0.6585,  0.5566, -1.5689, -2.0647,  1.5083, -0.0075],
            [-2.2010,  1.2122,  0.8170, -0.5896,  2.4644, -2.4620, -0.3402,  1.3893],
            [-1.4775,  0.4172,  0.6042,  1.3432,  0.3559, -0.2703,  0.4184,  0.3529],
            [ 0.5987,  0.4110, -1.0680, -0.1268, -0.0552, -0.1931, -1.7875, -0.6283],
            [ 1.0824, -0.0445,  0.3869, -0.6889, -1.6455, -0.6501,  0.8628, -0.5833],
            [ 0.1896, -1.1009,  2.2020,  0.4421,  0.0836, -1.4698,  0.4366, -1.2177]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1369,  0.5716, -0.3936],
            [-0.2064, -0.5738,  1.7331],
            [-1.2678, -1.4899, -0.8650]], requires_grad=True), Parameter containing:
    tensor([[-0.0602]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.5628, -0.8418,  0.1504, -1.2663, -0.7785, -3.5399, -0.5434, -2.4574],
            [ 0.9255,  3.1109,  0.2525, -3.1299,  3.0683,  1.5348,  1.5822, -0.7898],
            [-4.2507, -2.0391, -2.0544,  3.9114, -2.3974,  1.7053,  1.8735,  2.7110],
            [ 4.5945, -2.6039, -0.7762, -1.3894,  3.4130,  5.3479, -0.3755, -0.0991],
            [ 1.2484,  6.8577,  2.1250, -1.7846, -2.9257, -0.2897,  2.3947,  1.0688],
            [ 4.5660,  0.6747,  2.8370,  1.6994, -0.8935, -1.5670, -1.5626, -2.7580],
            [ 0.9833, -1.2296,  0.3969, -4.1930,  0.3023,  1.2258,  2.4783,  1.0984],
            [-0.9482, -0.6669,  1.3026,  4.8073,  2.6885, -5.5713,  0.0828,  4.0899]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8437,  1.9489,  1.5328, -1.8615, -0.6062,  0.8707, -0.9140, -2.1810,
             -0.2858,  0.4828],
            [ 0.1676,  0.5454, -0.6786,  6.4480,  1.8740, -0.6744, -0.4572,  1.0728,
             -0.7397, -2.2128],
            [ 1.4622, -1.9635, -2.0691,  1.5890,  5.0518,  3.9277,  1.4650,  5.7689,
              1.5355,  1.2552],
            [ 1.4591,  2.1958,  0.6083, -6.7648, -3.3013, -0.6724,  0.2216, -0.7850,
              1.5180,  0.5585],
            [-1.0006, -0.1770,  1.1891, -1.4324, -4.5957, -4.6129, -0.9483, -0.5715,
             -4.0436,  0.3325],
            [-3.4210, -6.1715, -6.4189, -1.2733,  1.9397, -2.1218, -4.0455,  0.9557,
              1.1119, -1.4917],
            [ 1.3478, -0.9866, -4.3470, -1.4178,  0.6639, -0.2819,  1.1470,  1.4692,
              0.5711, -0.6119],
            [ 1.4878,  3.8809,  6.6375, -3.3616, -2.8513, -4.8976,  0.9859,  1.0938,
              0.2278,  0.5795],
            [-0.9534,  0.2200, -1.6728,  0.3793,  2.2786, -1.4902,  0.2420, -0.6449,
              5.1010, -2.1184],
            [ 0.2662, -1.0561, -3.8222, -2.7553, -0.4069,  1.5289, -1.4824, -0.4906,
              0.5028,  1.2589]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.334 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
