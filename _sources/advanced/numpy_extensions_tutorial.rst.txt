.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.5474,  7.4908,  9.9666,  2.8403,  1.0687],
            [ 9.1071,  9.3688,  7.3750,  0.6374, 12.1579],
            [ 7.6502, 10.2469,  6.4767,  6.3672, 11.1362],
            [ 7.1143,  1.8228,  7.8996,  4.4760,  8.0695],
            [ 7.5707,  1.5614,  5.7659,  8.6150,  5.1235],
            [ 7.1143,  8.0130,  2.2215, 13.3238,  8.0695],
            [ 7.6502,  5.0566,  6.9621, 10.7760, 11.1362],
            [ 9.1071,  5.3532,  3.0717,  3.8699, 12.1579]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2825e-01, -9.5686e-01, -2.6882e-01,  1.7536e+00, -5.3614e-02,
              1.1362e+00,  3.0408e-01, -3.4542e-01],
            [-7.9366e-01,  1.3587e+00, -7.8150e-01, -3.1171e-01,  3.5009e-01,
              6.8843e-02, -1.1884e-02,  3.4872e-01],
            [ 9.0812e-01,  1.6145e+00,  6.6519e-01,  3.7150e-01, -4.7353e-01,
              5.9386e-01, -6.4393e-02,  9.1650e-01],
            [-1.1406e+00,  1.0894e+00,  3.4594e-01,  3.2346e-01,  1.3987e+00,
              3.3027e-04,  1.1220e+00,  4.8955e-01],
            [ 1.1758e+00, -2.4834e+00,  1.3626e+00, -1.1733e+00,  2.0346e-01,
             -2.6168e-01,  4.1287e-01, -1.1294e+00],
            [ 3.6509e-01,  2.2648e-01, -5.1467e-01, -4.4370e-01, -1.1972e+00,
             -3.7068e-01,  8.0704e-02, -7.1375e-01],
            [-2.0469e+00,  1.2390e+00,  1.2993e-01, -6.9366e-01, -2.3694e-01,
              1.0120e+00,  2.1536e+00,  4.2243e-01],
            [-7.0488e-01, -5.4735e-01, -1.1626e+00, -1.5725e+00, -2.0454e-02,
              1.4498e+00,  3.6101e-01, -6.0339e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8498,  1.0413,  0.1230],
            [-0.2838, -0.4585,  0.5123],
            [ 0.5508, -0.6077,  0.2050]], requires_grad=True), Parameter containing:
    tensor([[-0.2995]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.7834, -0.9640,  2.3779, -1.5884, -2.4650,  0.6497,  0.4054,  0.8826],
            [-1.8049, -0.5670,  0.1317,  0.4909, -0.4703, -1.2154,  0.4621, -0.4616],
            [-2.4903, -0.3510,  2.1096, -2.1185,  0.9030, -1.5583, -0.9409,  0.4473],
            [-0.9006, -1.4487,  0.4189,  1.3846, -0.9788, -0.8758, -1.1533, -0.6538],
            [ 2.6824, -2.0961, -1.9639,  2.6104, -0.9042, -1.4415, -0.3777,  2.6893],
            [ 0.6821, -1.5671, -1.0662, -0.9601,  0.9915, -0.4464, -1.9200,  0.7193],
            [-1.8389, -0.0187,  0.5450, -3.7436,  1.5303,  1.2281, -2.4634,  0.1689],
            [-1.9106, -0.1401,  0.2565,  0.1561,  0.2584,  0.4420, -0.8552, -0.8806]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.0073, -1.2808, -1.0172,  2.1985, -2.3383,  0.7400,  0.9387,  1.1911,
             -1.5060, -0.1764],
            [ 0.3716,  0.8741, -2.0621,  0.1964,  0.9653, -0.1171, -0.5206,  1.6682,
             -0.6465, -0.8822],
            [ 1.2078, -0.9204, -1.3910,  0.1747,  0.6557, -2.9595,  1.7457, -0.0038,
              2.9851, -0.7423],
            [ 0.6429, -0.1135,  0.6695, -0.2262,  0.4339, -2.1410,  0.0855,  0.5518,
             -0.2918,  0.3047],
            [-2.7589,  1.9857,  0.0481,  0.8195, -0.7021,  1.7956, -0.4202,  0.5707,
              0.0438, -0.3077],
            [-0.3636, -1.1476, -0.0485,  1.6160, -1.0752, -0.7045,  1.0335,  0.2069,
              0.6885, -0.2004],
            [ 0.5526,  0.4562,  0.6510, -1.6627,  2.2085, -2.5509, -1.7796,  0.7291,
              0.4381,  0.1232],
            [-0.1163, -0.4721,  1.3583, -0.6187,  3.0487, -2.3977,  0.9246, -1.8195,
              1.3927,  0.3121],
            [ 0.4090, -0.8366, -0.7582,  0.7504, -0.4864,  0.6838, -0.6534, -0.0750,
             -0.5867,  0.6442],
            [-0.1218,  0.5223, -0.3924,  0.3839, -1.2263,  1.8332, -1.1544,  0.9281,
             -0.7077,  0.2359]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.547 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
