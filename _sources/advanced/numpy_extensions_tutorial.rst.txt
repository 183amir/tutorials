.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0465,  5.3831,  6.6093,  1.6063,  5.8498],
            [ 9.3750,  7.7735,  0.2292,  6.1779,  2.6491],
            [ 2.0851,  7.6314,  7.0641,  8.3444,  2.6674],
            [ 2.6791, 10.6573,  8.7145, 13.9716,  3.8741],
            [ 8.4182,  4.0495,  6.5512,  4.0705, 11.6854],
            [ 2.6791, 14.4490,  1.0580,  6.4516,  3.8741],
            [ 2.0851,  6.9861, 10.2626,  4.4281,  2.6674],
            [ 9.3750,  3.8767,  9.1325,  2.6210,  2.6491]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3837, -1.4049, -1.9453, -0.7436, -0.6836, -0.1691,  0.7998, -0.1332],
            [-0.3512,  0.3420,  0.0507,  1.2578, -0.3204, -0.8651, -0.6174,  0.0053],
            [-2.1228, -1.5925,  0.8589, -0.1649,  1.0797, -0.1531,  0.3187, -0.3626],
            [ 0.3024,  0.0503,  0.0571,  1.2839, -0.3990,  0.3328,  0.7126, -0.1311],
            [ 1.3053, -0.8424,  1.6980,  0.2668,  0.6661, -1.0937, -1.6451,  0.1010],
            [-0.5751,  1.0818, -0.6817, -1.4072,  1.5369,  1.0267,  0.6863,  1.0620],
            [-0.1465, -0.1882,  0.1842,  0.9214,  0.1821, -0.4042,  0.8345, -1.0366],
            [-1.2767, -0.2395,  1.1448, -0.7071, -1.1357, -0.0096,  1.0005, -0.0312]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1630, -1.1189, -0.0902],
            [ 0.9232,  0.6374,  0.8774],
            [ 0.5296, -0.0210,  1.4274]], requires_grad=True), Parameter containing:
    tensor([[-1.3022]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0260e+00, -3.6591e+00,  2.4986e+00, -4.0713e-01,  6.0992e+00,
             -1.9461e+00,  1.8056e+00, -4.7521e+00],
            [ 1.8578e+00, -8.2875e-01, -1.4590e+00, -2.3705e+00, -1.1017e+00,
             -3.6768e+00,  1.5678e+00, -4.3253e+00],
            [ 1.3139e+00, -2.2753e+00, -1.6348e+00, -6.7932e+00, -1.6999e+00,
             -6.5259e+00, -2.3279e+00, -3.1972e+00],
            [ 2.3691e+00,  9.6662e-02,  3.5069e-01, -1.9935e+00,  3.3666e+00,
             -3.7522e+00, -3.1379e+00, -1.4264e+00],
            [-1.7987e+00,  1.4744e+00,  2.0223e+00, -1.8697e+00, -7.5560e-01,
             -3.1803e+00,  5.4652e-02,  6.4888e-02],
            [-3.8746e+00, -2.6385e+00, -6.7776e-01, -4.2689e-01,  4.6487e+00,
             -4.0313e+00,  3.4478e+00, -8.3677e-01],
            [-2.8188e+00, -2.4445e+00, -1.4500e+00, -3.0717e+00, -4.8889e-01,
             -1.4443e+00,  7.0249e-01, -1.4433e+00],
            [ 2.5326e-01, -4.1445e+00, -4.2439e-02, -5.1864e-03, -2.3028e+00,
             -2.1768e+00,  1.0194e+00,  4.8916e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0476, -0.0257,  2.3995,  0.5860, -0.6880,  0.6464,  0.8270,  0.2954,
             -1.7346, -0.1398],
            [-0.2864, -1.7914, -3.7180, -1.8463, -1.1187, -1.7529, -0.2566,  0.3981,
              2.6262,  1.4918],
            [-0.2737,  0.5606,  0.2323, -0.7256,  1.8474,  0.6388, -0.5445, -2.2090,
             -1.5076,  0.8592],
            [-0.1250,  0.6420,  0.3488,  1.6237,  0.4197,  0.8379,  1.1003, -2.3376,
              1.1192, -1.4988],
            [ 0.1861,  0.5021,  1.4031, -0.9707,  0.5646,  0.2965,  0.1220,  1.1824,
              2.9322,  0.9623],
            [-0.3665, -1.1336, -0.5480, -2.4240, -0.6573, -0.6602, -1.4106,  0.9793,
              1.1591, -1.5190],
            [-0.6401, -0.6348, -3.1220, -5.4878, -2.2560, -4.2841, -0.4223,  1.8387,
             -0.6519, -2.4981],
            [-0.0510,  1.3476,  1.7722,  2.1968,  1.4498, -0.6991,  0.2403, -1.2223,
              0.0844,  0.2627],
            [ 0.2694,  0.7003,  0.9573,  2.6763,  2.8010,  0.1158,  3.0150, -0.5827,
              0.4357,  1.1334],
            [ 0.1117, -0.1609,  0.3481, -0.1805, -0.1417,  0.7299, -0.0801,  0.1625,
              1.5479,  0.0216]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.540 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
