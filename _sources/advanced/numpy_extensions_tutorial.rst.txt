.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9059,  4.0351,  3.9417,  3.3204,  3.5932],
            [ 9.3662,  2.4689,  7.9388,  9.2258,  8.5740],
            [ 9.7025,  8.6474,  5.9115, 10.4535,  0.7865],
            [ 7.7340, 10.3026,  9.1600,  6.0766,  3.8352],
            [24.6831,  1.2173,  6.8004, 15.3089,  2.3222],
            [ 7.7340,  5.1141,  3.9238, 10.4601,  3.8352],
            [ 9.7025, 11.3857, 12.8533,  3.1209,  0.7865],
            [ 9.3662,  5.4249,  7.5806,  6.3176,  8.5740]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2413, -0.4267,  2.3996,  1.1917, -1.9899, -1.5109,  0.1727, -0.6883],
            [ 0.4360, -0.2353,  1.0228,  0.5723,  0.5770,  0.7160,  1.4841,  0.7547],
            [-0.8621, -1.8132, -1.1677, -0.4658,  0.2538, -1.5718, -0.6909, -0.9210],
            [-0.2320,  1.0040,  0.2694, -0.7252,  1.1490, -0.5036, -0.3836,  0.6619],
            [-1.0883,  1.7208, -0.6843, -0.3344, -1.9074,  0.1174,  0.9997, -2.2246],
            [ 0.4297,  1.8400,  0.5799,  1.0532,  1.0849,  0.0035,  0.6425,  0.8854],
            [ 1.0970, -1.6400, -0.2726, -0.3172, -1.1542,  1.7015,  0.1878,  0.7592],
            [ 0.1749,  1.0170, -0.4870, -0.3791,  0.9494, -0.2332,  0.0179,  0.6478]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1054, -0.8551, -0.8881],
            [ 0.1084,  1.1998,  1.5700],
            [ 0.9537,  2.1002, -0.1970]], requires_grad=True), Parameter containing:
    tensor([[1.0529]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.1635,  0.6149, -3.0165, -2.2700, -4.7584, -4.6635,  0.7811,  3.5103],
            [-1.2212, -1.7917,  3.9086,  2.2544, -2.7934, -2.3058,  0.3188,  0.8807],
            [ 4.5860, 10.6670,  2.4692, -3.9276, -0.0135,  1.0527,  0.1294,  0.9818],
            [ 4.0582,  1.4223, -1.1994,  3.8856, -3.9514, -3.0266,  3.9135, -0.1683],
            [-2.1070,  0.8568,  7.4257,  5.9048,  3.6218,  3.9560, -2.3384,  5.0102],
            [ 4.6688,  2.4928,  8.0196,  4.3479,  2.8191,  0.1574,  2.6715,  0.7725],
            [ 4.1148, -1.3488,  0.6859,  2.3938, -1.2554,  2.4537, -2.3677, -1.1628],
            [ 1.1976, -2.0379,  0.9511, -4.2556,  2.3173,  2.1504,  5.0833,  5.1517]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3567, -0.3140, -1.0043,  0.5262,  0.9776,  2.3230,  0.3676,  0.6220,
              0.3213, -0.2077],
            [-0.1441, -0.4393, -1.0956, -1.3419, -4.5145, -6.1870, -0.8647, -1.5293,
             -0.3764,  1.3626],
            [ 0.6274, -2.6537, -2.3657, -5.0261, -0.9697,  1.4630, -2.3550, -1.5646,
              1.7502, -1.5909],
            [ 1.3740,  0.5368, -1.0283,  1.8380,  2.5294, -0.2842,  0.2903, -0.6243,
             -4.8504, -0.0079],
            [-0.0790,  2.6730,  2.3976,  5.2709,  2.6109,  2.6062,  0.1374, -5.9984,
              1.1981,  2.0168],
            [ 3.0518, -0.4168, -0.9508, -0.9493, -1.0163,  5.3299,  6.3113,  0.5800,
             -1.3405, -3.1186],
            [ 2.2173, -1.7681, -4.6154, -2.1754,  4.5711,  1.6107,  2.2771,  2.6996,
             -5.0615, -0.5729],
            [ 0.9975,  7.4660,  3.0849,  4.7200,  1.3331, -1.5845,  1.5925, -0.1910,
             -3.4623, -1.1400],
            [ 2.4164,  5.6093,  0.9364,  0.0827,  0.3775, -0.6309, -1.8244, -1.2587,
             -0.0674,  1.3213],
            [-0.8494, -1.3400,  0.4034, -1.9640,  0.8856,  0.2178, -0.6535,  0.4605,
              1.6962, -0.1562]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.523 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
