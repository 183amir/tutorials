.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.0926, 18.5182,  7.9005,  2.1983,  5.7949],
            [ 1.3983, 11.9895, 18.0310, 14.8073,  8.3173],
            [ 9.9029,  6.9147,  8.3803,  5.8835, 10.6532],
            [ 7.1549,  5.7989,  9.3582, 13.5217,  6.8229],
            [ 0.5616,  8.4357,  4.4503,  6.9151,  5.0478],
            [ 7.1549,  9.7208,  4.1201,  4.0633,  6.8229],
            [ 9.9029, 11.2787,  5.3926,  9.1826, 10.6532],
            [ 1.3983,  5.2662, 11.9573, 12.1823,  8.3173]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6195, -0.7381, -1.7024,  0.1559, -1.5559,  1.7174, -0.1971,  1.6777],
            [-0.3341,  0.6511,  1.1750,  0.0735,  0.0152,  0.2690, -0.4957,  1.8553],
            [ 0.7313, -1.2010, -0.4862, -0.2641,  0.3389,  0.6214, -0.1380,  0.0407],
            [ 0.4687, -1.1030,  1.1469,  0.1238, -1.5126, -0.7258, -1.5242,  2.6608],
            [-0.2459,  0.6067, -2.6647, -1.3242, -1.1871,  0.4288,  1.8619,  0.3350],
            [ 0.3732,  1.7982, -1.0877, -1.1896,  0.1321,  0.0523,  2.9837, -1.6218],
            [-0.2804,  0.8597,  0.3046, -0.8920,  0.4609,  1.9106,  1.3125, -1.3411],
            [-0.8032, -0.8415, -1.8666, -1.3021,  0.7970,  1.0769,  0.5091, -1.4269]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9903, -0.1466,  0.8111],
            [ 0.6690,  1.4894, -0.6288],
            [ 0.3235, -1.3304, -0.5457]], requires_grad=True), Parameter containing:
    tensor([[-0.1735]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4764, -4.6023,  0.8848,  2.0031,  1.7514,  1.6038,  3.2651,  1.4120],
            [-1.9883,  3.0171,  1.9299, -2.9152,  0.4595, -3.3454, -0.6085,  2.2455],
            [ 3.5282, -0.5123, -0.9298, -5.5381, -1.3967,  2.3013, -1.8021, -1.6215],
            [ 2.2050, -1.2540, -0.4759,  1.6869, -0.3080,  1.2455, -3.8660, -5.1401],
            [-2.1563, -0.9009,  1.9735, -3.5447,  1.7541, -4.5468, -2.2789,  1.4365],
            [ 0.6107, -0.1227, -1.2101, -1.2121, -2.3659,  3.5289, -5.2034, -1.9742],
            [ 3.0252, -2.7291,  3.8237,  0.9067,  1.3732, -0.6545, -1.5459,  1.6178],
            [-4.3849, -0.7895,  1.2566,  0.8995, -0.8730,  1.2470,  0.7066, -7.2576]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4192, -0.2269,  1.0620, -2.2508,  0.1430,  0.6284, -1.8258,  2.2515,
             -0.5167,  0.4865],
            [ 0.8090, -1.4561,  0.0358,  2.3735, -6.7199,  1.9347,  2.1077, -1.5410,
              0.6920, -0.4112],
            [ 1.0622,  2.0956, -2.5285, -2.9619,  5.5644, -1.1951,  0.7366, -2.0631,
              0.0179,  0.4698],
            [ 1.1475,  1.2246, -2.5171,  4.5614, -0.7485,  3.7949, -5.0207,  3.8577,
              1.3441,  0.0747],
            [-0.4177,  2.8274, -1.6256,  2.2887,  5.2805, -5.2224,  2.0469,  1.7618,
             -0.2870, -1.1315],
            [-1.0900, -0.4233, -1.7959, -0.5431,  3.1991,  0.9138, -0.2841, -0.4296,
             -1.9493, -1.3676],
            [ 0.0497,  1.1301, -0.5833,  2.8816, -1.6955,  1.3793, -1.9763, -0.5944,
             -1.0256,  1.4880],
            [-0.7746,  2.7043,  0.6231, -0.8498, -0.1110,  3.2585, -0.4500,  1.1172,
              3.3825,  0.9776],
            [-0.4819, -2.4247,  0.0624,  3.0727,  0.6517, -3.6829, -1.5821, -0.4471,
              0.5731, -1.0265],
            [-0.3556,  1.4898,  0.8218, -0.9159, -3.3032,  1.9263,  0.7035,  0.3343,
             -1.2096, -0.5248]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.512 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
