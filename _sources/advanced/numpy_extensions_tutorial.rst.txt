.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.4082, 12.4126,  4.4388,  5.4421,  6.5234],
            [ 2.1341,  2.2307,  2.5753,  2.8203,  4.9728],
            [ 0.8143,  6.1283,  7.6416,  5.2395,  4.5564],
            [15.1060, 11.4513, 11.9272, 16.6619,  6.8784],
            [ 3.7108,  5.7677,  6.5870, 11.4996,  5.9513],
            [15.1060,  3.7796,  6.3481,  5.7281,  6.8784],
            [ 0.8143,  9.1595,  6.7696, 10.9684,  4.5564],
            [ 2.1341,  7.7839,  8.1050,  0.9626,  4.9728]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5993, -0.4881,  1.8045,  0.9538, -0.8407,  2.0548, -1.0191,  0.6736],
            [-1.2291,  0.8658, -1.5535, -1.6101, -0.5719, -1.1742,  1.7842, -1.0287],
            [ 0.8226, -1.1735,  0.0991,  0.5321, -0.2546, -0.5083,  0.4188,  0.5552],
            [-0.1227,  0.9764, -0.4614, -0.6691,  0.3078,  0.4414, -0.8813,  0.4400],
            [ 0.1446, -1.4603, -2.5408,  0.2339, -0.4997,  1.1241, -0.2011, -0.4677],
            [-0.1589, -0.0188, -0.0342, -0.2400, -0.3107,  1.8733,  1.6381,  0.0637],
            [ 0.5492,  2.2039, -1.0255, -1.0720, -0.8309, -0.1417, -0.5186, -0.0755],
            [ 0.4894, -0.9936, -1.1641, -0.5630, -0.8142, -0.8330,  0.9096,  0.5830]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1115,  0.6670,  0.4562],
            [ 0.0095, -0.6615,  0.2102],
            [-1.9987,  0.7844, -0.8330]], requires_grad=True), Parameter containing:
    tensor([[-0.6784]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7463, -5.0361, -0.3536, -1.4993,  3.8033, -4.5280,  4.4718,  2.5187],
            [-1.3527, -1.6526,  0.8002, -3.8217, -0.6569, -0.4411, -0.8923,  2.3869],
            [ 1.6385,  2.5968, -0.1348,  0.7894, -0.1005,  1.8770, -4.4398, -1.9966],
            [-2.7015,  4.0194, -0.5010,  0.8170, -4.1022, -4.8759, -2.3452, -4.6547],
            [-2.0335,  0.0401, -5.9187, -2.2994,  0.1117, -2.5689,  3.5282, -1.9233],
            [ 4.8308, -7.7897,  1.8528,  3.0757,  2.1241,  0.0786,  0.7027,  2.5665],
            [ 0.7955, -1.8414,  0.4467,  0.9409, -5.7618,  3.2755, -2.9140, -2.8801],
            [-0.2769, -0.6618, -2.4485,  0.1895, -2.7886,  6.7991, -6.5249,  4.8561]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0391, -0.6019,  0.0505,  0.8237,  0.9961,  0.7349,  0.6579,  0.9259,
              0.5167,  0.2623],
            [-0.5910,  1.3749,  2.2676,  0.6591,  0.9247, -0.3747, -0.4940, -0.8304,
             -0.6750,  0.0360],
            [ 1.0922, -0.8012, -0.7628, -0.2211,  2.7907,  1.1182, -0.9903, -3.6235,
             -1.6718, -1.3523],
            [ 2.4711, -0.5098, -2.8697, -0.4050, -4.0492, -0.1030,  0.4810,  1.4449,
              1.5652, -0.0390],
            [ 1.9836, -3.6903, -2.3260, -2.7222, -1.9558, -2.4923,  1.6517,  1.0394,
             -0.6427,  1.6774],
            [-1.7788, -2.0538,  2.1585,  0.9084, -2.7617,  5.9189, -0.8638,  0.8398,
             -0.1698, -0.3349],
            [ 1.8734,  7.7426,  4.2523,  2.6329,  1.7946,  2.0467, -1.6755, -1.9524,
             -0.8002, -0.5849],
            [-0.4076,  2.7033, -3.3903,  0.3709, -3.1862, -0.5081,  0.0587,  0.6704,
              0.3636, -0.1409],
            [-5.2378, -1.3283, -2.3084, -2.4015,  0.9299, -2.6974,  4.2187,  0.1387,
              0.6831,  0.8496],
            [-1.7746,  1.7285,  0.1729,  1.9967, -1.5015,  1.1765, -0.4751, -0.2250,
              0.0516, -0.0682]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.304 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
