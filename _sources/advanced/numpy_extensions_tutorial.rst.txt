.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.3566,  9.6312,  3.8460,  5.5064, 16.1492],
            [13.4152,  4.3516,  6.6759,  8.5879, 10.9872],
            [ 4.2528,  3.6486,  1.9867,  4.0225, 10.5073],
            [ 4.6148, 10.5901,  4.1420,  4.0131, 10.3718],
            [ 5.2093,  9.2162,  9.3118,  4.6624,  6.2544],
            [ 4.6148, 11.2619,  7.1432,  3.6039, 10.3718],
            [ 4.2528,  5.2838,  7.0688,  7.0038, 10.5073],
            [13.4152, 10.8028, 13.2361,  3.3905, 10.9872]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2058, -0.1621, -0.3833,  0.2871,  0.1725, -1.3420, -0.8158, -0.2825],
            [ 1.6061,  0.9997, -0.4116,  0.1843,  1.0193,  0.1366,  0.1003,  0.0594],
            [-0.0677,  0.2227,  0.8791,  0.1665,  0.6850,  1.2364,  1.2097, -0.2716],
            [ 0.9541,  0.9343, -0.9670,  0.7831,  0.4117,  0.7954,  1.4207, -0.1479],
            [ 1.0435,  0.6649, -0.3295, -1.9857, -0.8639,  0.6664,  1.7556,  0.0261],
            [-0.7775, -0.3072, -0.2262,  0.3226, -0.6243,  0.5836, -0.9434, -0.1962],
            [ 2.1110, -1.8322,  0.0075, -2.9247, -1.1660,  0.3897,  1.4443, -0.1732],
            [ 1.0190, -1.6829,  0.9455,  0.1940,  1.2090, -2.3447,  0.6296,  0.1037]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2406,  0.5891, -0.3908],
            [-0.1726,  0.2556, -0.6672],
            [ 0.8501,  0.7156,  0.2199]], requires_grad=True), Parameter containing:
    tensor([[1.0042]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0129,  0.1797,  1.1618,  0.4096,  0.8359,  2.2243,  4.1506,  0.5313],
            [ 0.0364, -0.3662, -0.7547,  0.0672,  2.0969,  0.8929,  1.9863, -0.2451],
            [ 2.8144,  3.5668, -1.6592,  1.4951,  3.3739,  1.7700,  3.2527,  1.7013],
            [ 1.9715,  1.3320, -0.4114,  3.7311,  1.9182,  0.7709, -1.3483,  2.0420],
            [ 1.9214, -1.6114, -0.0058,  1.1205,  0.0937,  2.3837,  0.1262,  0.6416],
            [ 1.7963,  0.3616,  5.2584,  0.3633,  1.2756,  1.3938,  1.2444,  0.3595],
            [-0.5439, -0.0230,  1.4916, -0.7589,  1.1047,  3.3300,  2.6588,  0.9934],
            [-1.6870,  1.0524,  0.4616,  1.9384, -0.7487,  1.0396,  1.1549, -0.5493]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0950,  0.4303,  0.7520,  0.9278,  0.1460,  0.4325, -0.7117, -0.6914,
              0.4945, -0.0331],
            [-0.3685, -0.9884, -0.3110,  0.2595, -1.3451, -0.5973, -1.4111,  0.5491,
              1.2047, -0.4044],
            [ 0.7884,  1.0896,  1.6764,  3.2108,  0.7646,  1.8041, -1.8168, -0.1376,
              0.1639, -0.4946],
            [-1.1569, -1.2883, -2.5067,  1.7576, -0.6983, -0.1109,  0.3858,  1.1882,
              1.0930,  0.2575],
            [ 0.6357, -0.5601, -1.1674, -1.1081, -2.0017, -2.7041, -0.3476, -1.9704,
             -0.6065, -0.3083],
            [ 0.4417, -0.9881, -1.1057,  0.3123, -0.0297,  0.8383,  2.7790,  0.1606,
              0.6758,  0.1883],
            [-0.8321, -1.5638, -1.7940,  0.3918, -2.9428, -1.5076, -0.4714, -0.7896,
              0.5515,  1.0709],
            [ 0.5997, -0.3370, -1.2116,  0.0832, -0.9678, -3.2029, -0.8316, -2.6274,
             -0.7726,  0.6605],
            [-1.0204, -1.7645, -0.7815,  0.6498,  1.7626, -0.6980,  1.1461, -1.0298,
             -0.5835,  0.2350],
            [ 0.5821,  0.3953, -0.3774,  0.6772, -1.0740, -1.6606, -1.3392, -1.1122,
             -0.6103, -0.1442]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.546 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
