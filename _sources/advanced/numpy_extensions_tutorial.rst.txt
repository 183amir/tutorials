.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.1917,  5.0424,  1.7144,  2.6983,  5.4525],
            [ 7.5563,  7.9428, 10.9608, 15.7853,  7.5051],
            [10.4088,  4.0795,  9.8148,  6.2712,  9.1033],
            [ 6.1319,  3.4198, 11.3968,  7.5511,  6.0237],
            [ 4.4760,  7.4216, 14.9680,  7.4179,  6.8517],
            [ 6.1319,  1.0501,  4.6277,  6.5260,  6.0237],
            [10.4088,  5.4192, 13.2212,  5.5359,  9.1033],
            [ 7.5563,  6.6291,  9.3705,  8.1227,  7.5051]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0154,  0.0591,  1.6733,  0.2839,  0.8746,  0.5600,  0.3068, -0.7706],
            [-0.6209, -1.1721,  2.3413,  2.0649, -1.0259,  0.4429,  0.7530,  1.8861],
            [ 0.0914,  0.0530,  2.2731, -0.8879,  0.6185,  0.9843,  0.1762, -0.8911],
            [ 1.5924, -0.8579, -1.7618, -0.1484,  0.9282, -1.8510, -0.9743, -1.5971],
            [-0.6459,  1.5668,  0.2257, -1.2899,  1.2967,  1.1734, -0.3938, -0.0202],
            [-0.4610,  0.3440, -1.6572,  0.7337,  0.4161,  0.2264,  1.7155,  1.6420],
            [-0.0356,  0.6802, -0.9207,  1.0429,  0.8491, -0.4536,  1.3690, -0.4994],
            [ 0.7218,  0.2687,  0.1173,  0.4815, -0.5017,  0.3804,  0.4963, -0.0652]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1910, -0.4592, -1.0294],
            [-0.1550,  0.2426, -0.3713],
            [ 0.8545, -0.5999, -3.1470]], requires_grad=True), Parameter containing:
    tensor([[-1.3464]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.0970, -1.1991, -6.5287, -1.0451, -1.9740, -1.2446, -2.1722,  2.6669],
            [ 1.9087,  3.6094, -1.9717, -0.2416,  2.2897,  1.0679, -3.6360,  2.5169],
            [-0.7824,  1.7132, -5.7771, -2.7281, -4.8596, -1.0045, -0.0277,  3.2109],
            [ 2.1377,  2.5168, -4.1067, -3.4079,  3.0140, -2.6728, -1.5283, -0.9560],
            [-0.9459, -2.5872, -3.6805, -4.4755, -1.9097, -1.0513, -2.1807, -0.0819],
            [ 2.6616, -1.7285, -2.4249, -5.1959, -1.0810,  0.0146, -1.9347, -4.3259],
            [-2.0588,  2.8940, -6.0706, -5.6034,  8.3118,  3.4081, -6.7673, -0.9362],
            [ 0.7456, -5.6820,  2.2080,  3.3247,  0.7703, -2.5662, -8.3276, -6.1449]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0921, -0.3326, -0.5051,  1.2106,  1.3316,  0.8840,  1.4839,  0.6930,
              0.3481, -0.6885],
            [ 0.0156,  0.1363, -0.5585, -1.6833, -1.2825, -1.6061, -0.7639, -0.1360,
             -0.3554, -0.0934],
            [ 0.4370, -0.9415, -3.6789,  2.3760,  4.6781,  3.9814,  3.3060,  0.9272,
              1.1140, -2.0779],
            [ 0.1535,  0.5454,  1.4569, -1.6405, -4.8460, -3.4101, -4.1335,  0.6762,
             -4.0539, -0.8614],
            [ 0.7393, -0.0880, -4.4693, -2.4621,  5.2201,  6.1612, -0.6295, -2.2612,
             -0.3743, -2.4229],
            [-0.6558, -1.3184,  2.7635,  3.3804, -0.8834, -0.2164,  0.4301,  1.9074,
             -4.7157, -4.0081],
            [ 0.4720,  1.0831, -4.8072, -3.3619,  1.7954, -1.5966, -4.0506,  5.3722,
              2.3475, -5.4462],
            [ 1.5276, -1.9383, -4.3116, -2.3036, -5.4037,  4.1911,  4.9250,  1.2459,
             -2.9159,  3.1972],
            [-0.5720,  1.6437, -0.4930, -4.3831,  1.6722,  1.4116, -2.3100,  2.2269,
              4.7677,  0.2915],
            [ 1.8245, -1.0182, -8.0870, -0.9488,  5.2710,  3.1442, -3.0616, -1.2518,
              6.1825,  3.1540]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.548 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
