.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0423,  9.5422,  5.4638,  6.9209,  8.3711],
            [ 7.3844,  6.0106,  6.7175, 11.4849,  1.9974],
            [ 7.3902, 11.9807,  5.3046,  6.5451, 11.1649],
            [14.2509,  2.7458,  3.9943,  6.7093, 11.0512],
            [ 5.6354,  6.5465,  6.5634,  8.9134, 11.8824],
            [14.2509,  5.4351,  2.9515,  8.8288, 11.0512],
            [ 7.3902,  5.4907, 11.3211, 16.0136, 11.1649],
            [ 7.3844,  4.1227, 16.6270,  3.0076,  1.9974]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.9220, -1.1977,  0.8281,  0.8816, -1.0004,  0.8811,  0.3014,  0.7672],
            [ 0.1221, -0.3122, -0.8514,  1.2822, -0.0544, -1.5294,  0.7095, -0.6608],
            [ 2.1694, -0.5825,  0.8441,  0.0814,  2.0769,  0.2372,  1.6130,  0.3067],
            [-0.3016, -0.6034, -0.4716, -1.6386, -0.2162,  2.1145, -1.7912,  0.4078],
            [-0.8877, -0.8227,  1.3952, -0.0828,  0.4816,  2.3350,  0.7993, -2.3627],
            [-0.5037,  0.8035, -0.0971,  0.6739,  0.6029,  0.4430,  1.4319,  0.4074],
            [-0.3761, -0.6215,  1.4545, -2.3545,  0.2947, -0.7262, -1.0893,  0.1164],
            [-0.7354, -0.6182, -0.1693, -0.8236,  0.1239, -1.2604,  0.4254,  1.2939]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7000,  0.6365, -0.9792],
            [-0.3802,  1.5822,  0.8211],
            [-1.7866,  0.6570, -1.1382]], requires_grad=True), Parameter containing:
    tensor([[0.3662]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.8270, -2.9790,  1.7894,  4.8753,  5.5256,  2.4549,  0.2348, -3.3089],
            [ 1.2382, -3.4740, -0.1552, -4.0180, -4.0045,  2.7958,  3.6380, -1.1275],
            [ 0.2656,  1.1056,  2.1115,  2.9932,  4.0487, -0.9761, -2.8935, -2.6043],
            [-0.6780,  0.9394, -3.3669,  0.0413,  2.6763, -2.0574,  1.9421, -1.8243],
            [ 0.6671,  0.4637, -1.5558,  1.3235,  2.9137,  5.0598,  1.7642, -2.3729],
            [-1.0084, -1.5338, -2.6216, -2.8218, -6.9386, -0.1701,  4.4052,  1.3421],
            [ 4.1201,  4.5745, -2.4619,  9.4955, -2.8555, -4.8933,  0.2630,  1.4620],
            [ 0.5989,  1.4231, -1.1105,  2.3179,  5.0448, -1.4724,  0.0306, -2.4870]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5663,  0.3697, -2.2617, -1.2299,  0.6468, -0.5041,  0.8614,  0.0239,
              1.7204, -1.1601],
            [-1.3560, -0.2535,  2.0310, -1.7472, -1.7260, -4.1118, -0.2341, -1.3179,
             -0.2460,  2.0898],
            [-0.1548,  0.1104,  0.4043, -1.1142,  3.1762, -2.0967,  1.6952,  1.0055,
             -0.3806, -3.1650],
            [ 1.9329,  2.3903,  3.7499,  2.1554,  0.7478,  2.5582, -6.4616,  3.9564,
              1.0465,  2.9871],
            [-0.5041, -0.2422, -3.6747,  2.7460, -6.1578,  5.0448, -1.0596, -0.0932,
             -3.4596, -2.7484],
            [ 0.9511, -0.8500, -0.2849,  6.0187, -3.3085,  2.0619,  0.8170,  4.5874,
              3.7759,  1.7574],
            [-4.0678,  0.5210, -3.4136, -1.8787, -3.6199, -4.6257,  0.6265, -4.9589,
             -2.3104, -0.8467],
            [-1.1431,  3.2451, -4.8369,  4.0194,  1.0687, -0.7462,  2.7122, -0.4638,
              0.0898,  0.8556],
            [ 1.8951,  1.2862, -1.3638,  1.5941, -2.2090,  0.5749, -2.8412,  4.1133,
             -1.4220, -0.7823],
            [-0.4129,  0.7285,  1.4520,  0.3672,  2.7504,  0.2287, -1.4992,  3.2089,
             -2.3213,  1.2885]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.524 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
