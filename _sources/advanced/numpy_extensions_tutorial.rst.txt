.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[7.5161e-03, 3.4726e+00, 6.8463e+00, 8.3438e+00, 7.0664e+00],
            [5.5039e+00, 2.4751e+00, 1.0676e+01, 5.2290e+00, 5.8143e+00],
            [1.2003e+01, 1.3551e+00, 5.6221e+00, 7.4736e+00, 7.3173e+00],
            [6.8489e+00, 9.3244e-01, 1.1936e+01, 6.2388e+00, 6.8534e+00],
            [6.7277e+00, 1.2144e+01, 1.1727e+01, 1.4227e+00, 9.1747e+00],
            [6.8489e+00, 7.3073e+00, 1.2793e+01, 7.8178e+00, 6.8534e+00],
            [1.2003e+01, 3.3710e+00, 2.8489e+00, 8.5727e+00, 7.3173e+00],
            [5.5039e+00, 3.4669e+00, 1.3152e+01, 2.8412e+00, 5.8143e+00]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2372,  0.3159, -0.6530,  0.2863, -0.0300, -0.2548,  0.5397, -0.4863],
            [ 1.8010,  0.2261, -2.3648,  1.0787,  1.1713, -1.0728, -0.6577, -0.3058],
            [-0.9807, -0.8223,  0.7904, -0.0517, -0.1573,  1.0863,  0.5758,  0.7031],
            [ 0.3014,  0.9963,  1.4706,  0.3378, -1.0230,  0.6440,  0.9542, -0.4027],
            [-1.1928, -1.7140, -1.7941,  0.8828, -0.4234, -0.3202,  0.1501, -1.8436],
            [ 0.2332, -0.0088, -0.1985, -0.8864, -0.8018,  0.1327, -0.1033,  0.2586],
            [-0.6046,  0.0168, -0.3872,  2.0470, -0.8166,  1.3325, -0.5232,  1.1988],
            [ 2.0915, -0.2297, -1.0591,  0.3408,  1.5494, -0.7314, -1.1571,  0.7756]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7263, -1.3149,  0.3357],
            [ 0.2733, -0.4252, -0.8276],
            [ 0.5884,  1.8875,  0.1735]], requires_grad=True), Parameter containing:
    tensor([[1.6107]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.1658,  0.2590,  1.8228, -2.1904,  3.6882,  2.2845,  4.0842,  5.4259],
            [ 4.1905, -0.9556,  0.7371,  0.3200, -4.4519,  4.2928,  1.0797,  2.7511],
            [ 5.7800,  0.7855,  2.7215,  6.5700, -0.9514,  0.1586,  1.3664,  2.4201],
            [ 4.9046,  6.4728,  4.5353,  4.5785,  8.0611, -3.2453,  0.4162,  2.5022],
            [-0.4799,  2.6359, -0.0714, -3.8150,  0.2363,  5.8165,  2.4719,  0.6518],
            [ 1.5897,  3.3150, -1.2209,  1.9530, -0.6292,  2.6100,  2.1382,  5.4285],
            [ 1.0989,  1.0207,  4.9794, -2.0849,  2.2257, -2.7574,  1.5452,  2.9848],
            [-0.1589,  1.5215,  0.9313,  0.2164, -5.6229, -0.1111, -1.1845,  0.3237]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.5386, -3.1408,  0.4636,  1.0118, -0.1217,  1.3539, -1.3814, -1.4176,
              3.0389, -0.7729],
            [-0.1138,  1.0321, -3.6467,  1.6277,  0.9756,  0.5525, -0.3098, -2.1660,
              1.4676,  1.8394],
            [ 1.5622,  3.0659,  1.0716, -6.6680, -0.6495,  0.4289,  0.3476, -5.3758,
             -3.8601, -0.2961],
            [-0.6756, -0.6008,  2.2926, -1.2390,  1.1792,  3.2931,  4.0539,  0.2929,
             -2.4385,  0.1606],
            [ 0.2505,  2.7184, -0.7058,  0.9249, -2.5648, -4.7801,  2.1944,  2.9324,
              2.1047, -0.5726],
            [ 0.6279, -2.4921,  3.1427,  1.4423,  5.7036,  3.3323, -1.1376, -0.1626,
             -0.5931,  1.3327],
            [-0.0543,  0.1392,  1.0269,  3.7166, -3.1749,  2.4801, -1.4160,  0.2853,
             -5.0422, -0.3263],
            [-0.5833,  3.3256,  0.4290, -3.0001,  1.4962, -0.3277,  4.2651,  3.4215,
             -0.5047, -0.9385],
            [-0.7240, -0.6300,  0.7554, -2.0694,  2.0140,  0.6068, -0.1399,  2.4205,
              3.6342, -0.3977],
            [-0.9827, -3.8447, -1.7105,  1.4921, -2.4264, -0.5567, -2.8951, -1.8261,
              1.3604,  0.1428]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.623 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
