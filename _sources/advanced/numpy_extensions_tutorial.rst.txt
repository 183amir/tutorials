.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[16.9624,  7.3194,  5.7485,  3.8841,  2.9743],
            [10.4151,  5.0866,  3.9307,  3.1186,  1.6671],
            [ 4.2175, 11.4127,  9.1497,  5.0001,  9.4538],
            [ 4.7244,  8.6555,  2.0554,  2.4634,  1.5664],
            [13.5935, 13.7541,  6.9925,  5.3850,  4.1822],
            [ 4.7244,  6.3235, 10.0397,  4.8135,  1.5664],
            [ 4.2175,  8.7516,  7.7529,  3.3368,  9.4538],
            [10.4151,  1.7332,  7.0708,  8.9473,  1.6671]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1924, -1.1833, -0.1017, -0.6191,  0.3048, -0.2450, -0.6694,  1.8097],
            [-0.0692, -0.6053, -1.0973, -0.6195,  0.7611, -1.0377, -0.3610, -0.3857],
            [-0.5912,  0.7382,  1.0300, -0.6354, -0.5417,  0.3520, -0.7880, -1.3277],
            [-1.7991, -0.8754, -1.4056, -1.0378, -1.7102,  0.1824, -0.8166, -1.0058],
            [ 1.9528, -0.3357, -1.0378, -0.7993, -1.1266, -1.1914,  0.3163,  1.2887],
            [-1.1142, -0.8451, -1.2125, -0.1914,  1.1490,  0.2615,  0.5695, -0.8204],
            [ 0.4481,  0.5126,  0.1448,  0.9131, -0.0916, -0.7567,  0.0186,  0.3352],
            [-0.5453,  0.5314, -1.7788, -1.2750,  0.6640,  1.1975, -0.6620,  0.6764]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0404, -0.6898, -0.2128],
            [-0.7859,  0.7498, -1.1794],
            [-1.7605, -1.0722,  0.0573]], requires_grad=True), Parameter containing:
    tensor([[-1.2478]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1163,  1.3501, -2.0260, -1.3050, -2.4578, -0.6629,  0.8714,  6.4299],
            [-3.3678,  3.1616,  4.3101, -0.6484, -1.3941,  2.0344,  1.9481, -6.2181],
            [ 3.2972,  0.4356, -6.6639,  0.1275,  1.2352, -1.5786,  1.3911,  0.9025],
            [-2.0781,  3.0075, -3.8108, -1.9462, -5.7327,  1.6705, -3.0702, -5.8575],
            [-0.6070,  0.9031, -2.0574,  2.6323,  1.2601, -2.1081, -0.8163,  0.0187],
            [ 3.0275,  2.7040,  0.7180, -5.7515, -0.3559,  2.2265, -5.5183, -0.2183],
            [-4.5895, -0.5827,  0.4969,  1.7896,  1.6494, -0.6212,  5.2216, -1.6251],
            [-2.1256,  0.2774,  1.0885, -0.6583,  3.8043,  0.6470, -4.4502, -1.8472]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0611, -1.0537, -0.0884, -0.9826, -0.0109, -0.3592,  1.0663,  0.1508,
              0.5360,  0.1822],
            [-1.2199,  1.7858, -1.6236,  1.4253, -2.0242,  1.4812, -1.0508,  1.9794,
             -2.8661,  0.5462],
            [-2.0350, -0.6825, -3.5414,  2.0820, -2.7274,  5.9611, -2.9426,  2.8596,
             -0.0277, -2.6749],
            [ 0.9292,  3.8633, -1.5699,  2.4871, -3.0585,  3.0503, -2.7573, -6.2606,
             -2.1925, -0.1344],
            [-2.0059,  0.4413, -3.3387,  0.8846,  1.5701, -0.7854, -1.0334, -2.6040,
             -1.7458,  0.0374],
            [-2.1687, -2.0602,  2.8966, -2.3905,  1.6161, -3.8856,  0.4018, -2.3999,
              0.4739, -2.0980],
            [ 0.0704, -3.1583, -0.2546,  2.0405, -1.2382, -2.2246, -1.6874, -3.6736,
             -1.2545, -0.9378],
            [-1.2041,  1.4095, -3.2608, -0.8726,  2.7362,  2.8242, -1.7665,  1.2942,
             -2.3992,  0.2785],
            [-3.0790, -2.9721,  0.4990,  0.6432, -1.4334,  2.7064, -0.1466, -2.5046,
              1.1467,  0.2235],
            [ 0.0816, -0.9817, -1.3426,  1.4021,  1.0494, -1.1662,  0.9164,  1.3331,
              0.1605, -0.0113]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.565 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
