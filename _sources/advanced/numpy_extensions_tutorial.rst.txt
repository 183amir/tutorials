.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.6178, 15.0415,  7.4581, 10.6027,  5.5444],
            [ 4.9812,  8.8098,  9.7487,  7.5119,  9.2262],
            [11.6155, 13.8846,  8.9859,  0.7951,  3.3571],
            [ 8.6728,  6.9980,  5.2688,  8.2967,  5.2223],
            [ 0.9208,  4.9007, 10.9780, 12.2486,  7.6638],
            [ 8.6728,  2.5323,  7.9225,  3.5094,  5.2223],
            [11.6155,  5.6007,  8.2695,  1.4220,  3.3571],
            [ 4.9812,  7.8538, 12.1854, 11.1225,  9.2262]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3065, -1.5309, -0.9313, -0.9207, -1.1739,  0.8716, -0.0175,  1.6784],
            [ 0.6158,  0.3860, -0.2900, -0.6138, -0.2366, -0.4113, -0.6718, -0.1450],
            [-0.0734,  0.1440,  1.2906, -1.8961, -2.4906, -0.3073,  1.9028,  0.5310],
            [ 0.0198,  0.2000, -0.7559, -1.1192, -0.1833,  0.2345,  2.7117, -0.8776],
            [ 0.2056, -0.6903,  0.9387,  0.1178,  0.0660, -0.1061, -0.6377,  1.0341],
            [-0.1151, -0.0573,  0.4133, -1.4300,  0.4143, -1.7058, -0.9398, -1.3406],
            [ 1.4197,  0.3570,  0.7855, -0.5835, -0.1877,  0.9509, -1.8574,  0.9557],
            [ 0.5630,  1.6930,  0.2914, -1.9697,  1.2330,  2.0627, -0.1526,  1.4073]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1690, -0.8185, -0.3482],
            [ 0.4588, -0.9805, -0.8128],
            [ 0.6445, -0.7507, -0.3338]], requires_grad=True), Parameter containing:
    tensor([[0.2283]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7839,  0.6696,  1.8987,  0.4615,  1.1753,  0.9149, -2.1135,  3.9237],
            [-2.1064,  0.7232,  4.1124, -1.6579,  0.6337,  2.1464, -3.2106,  3.4527],
            [-1.2296,  3.0764,  0.7455, -1.5607,  3.1971, -0.5189,  0.0580,  3.7373],
            [ 0.6582,  1.4843,  2.8774, -1.4625,  1.8262, -0.0903,  1.6872,  0.8849],
            [-0.7899,  1.9502, -0.2961, -2.2210, -0.8807,  1.9373,  3.7641, -0.9620],
            [ 0.7076,  1.1537,  1.3557, -2.5648,  0.4694,  1.4003,  3.9923, -4.6668],
            [-1.2789,  3.7139,  3.2197, -1.3843, -2.3042, -1.2029,  0.6765, -0.4864],
            [-0.3891, -0.4511,  1.2886,  0.0789, -1.0478, -2.5282,  2.2851,  0.5951]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0598,  0.9128,  0.2475, -0.6634, -1.8556,  0.3601,  1.4538, -1.0796,
              0.3367,  0.2283],
            [-0.4202, -0.5140, -0.1590, -1.1931, -3.0535,  3.1850,  3.8261, -1.6436,
             -0.6882,  0.4114],
            [ 2.5154, -3.0846,  0.3092,  1.8323, -0.0524,  1.5971,  2.1652, -2.9984,
             -0.2719,  0.2969],
            [ 1.3503, -3.4135, -0.9194,  2.6199,  0.7793,  0.7668,  2.5820, -2.0479,
              0.0102,  0.6729],
            [ 1.6441, -3.2359,  2.0172, -1.5813,  1.4657, -2.6889,  1.2302, -2.2516,
             -0.9797,  0.2084],
            [ 0.8182, -2.5588,  0.7058, -1.3544, -1.0203,  1.7153,  1.3430, -2.5404,
             -0.3342,  0.3046],
            [ 0.2675, -0.8174,  2.5530, -4.0489,  4.2661,  1.4628,  0.8762, -1.0918,
              1.1692,  0.9262],
            [ 0.4895, -1.2453, -1.1567, -0.8049,  2.9972,  4.9893, -3.5745, -1.9046,
              2.4803,  0.9184],
            [ 0.1098,  0.1427, -0.6634, -1.7497,  3.5955,  1.6659, -1.9719, -0.6874,
              2.3126,  1.0831],
            [ 0.0918, -0.0541, -0.7082,  0.4147,  0.3649,  1.3043, -1.6801, -0.3854,
              1.3589,  0.4266]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.503 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
