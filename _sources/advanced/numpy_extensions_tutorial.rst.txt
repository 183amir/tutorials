.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1227,  7.3521,  4.7060,  2.4236, 10.5747],
            [ 4.8973,  2.1924,  2.5084,  7.2409,  1.2186],
            [ 2.3402, 11.0532, 17.4884,  7.4000,  6.2576],
            [ 2.7254, 10.8718,  3.0673,  9.7917, 18.5934],
            [ 1.8413, 12.4088,  6.5893,  4.7411,  1.1461],
            [ 2.7254,  8.8385,  8.8399,  5.6225, 18.5934],
            [ 2.3402,  7.8844,  4.3119,  5.4156,  6.2576],
            [ 4.8973, 12.9688,  6.6409,  9.6147,  1.2186]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0131,  1.5767, -1.6301,  0.3844, -0.2213, -1.3027, -1.4438,  0.4821],
            [ 0.6042, -1.5651, -0.6492,  0.8048,  0.8766, -0.3662, -0.1272, -0.3100],
            [-2.0738, -0.6606,  0.9577,  1.2639,  0.6460,  0.4028,  0.2902,  0.1598],
            [-0.8891,  1.5109, -2.4144,  0.1961, -0.1839,  0.3473,  0.2392,  1.2838],
            [-0.0426,  0.4786,  0.4618, -0.7798,  2.0682, -0.0751, -0.6613, -1.6612],
            [-0.1748, -1.0111, -1.6662,  0.1447, -0.7131,  0.0625,  1.8022,  2.5088],
            [-1.1123, -0.9609, -0.2851,  0.1294, -1.5250,  1.7329,  0.1372,  0.2689],
            [ 0.6532, -0.9378,  1.1638, -0.3364, -1.1199,  0.0773, -0.3288, -0.6227]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2865, -0.4695, -0.4497],
            [-0.5897,  1.2583, -0.8862],
            [ 0.3285,  0.0883,  1.2184]], requires_grad=True), Parameter containing:
    tensor([[0.4092]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5213,  0.7069, -1.1311, -2.3979, -0.9754, -3.9130,  1.7557,  1.3396],
            [ 1.5255,  0.1878,  4.2744,  4.7221,  1.1213,  1.8833,  0.4151, -4.2852],
            [ 1.3731,  1.5926, -0.7562,  0.6778, -0.6177, -0.7718,  1.2809,  0.6768],
            [ 0.3933,  0.5847,  1.2136, -1.6277,  0.0590, -2.5762, -3.1759, -0.5369],
            [-3.9106,  0.7919, -1.3682,  1.9551, -0.8755, -0.0590,  2.1329,  0.4407],
            [-0.9122, -0.7472, -1.1099, -4.3352, -1.3781, -0.6860,  1.9274,  0.7539],
            [-0.2261,  2.5551, -1.3256,  1.4790, -0.3651, -0.3050,  1.0736, -1.8118],
            [-0.9647,  6.3297,  3.7799,  2.0151, -1.8998,  5.7343,  1.4103, -1.9804]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0790,  1.5085, -0.0232, -0.0246,  1.5626,  0.2961,  2.3421, -0.7821,
              0.1338, -0.4678],
            [-1.7203,  0.3238, -2.0184,  2.3273,  2.6029, -1.5908,  4.9886,  0.2434,
              4.0368, -0.2101],
            [-1.3010, -0.5094, -1.2317, -1.9672,  1.3477, -1.0122,  0.2569,  0.3757,
             -1.5272,  3.1256],
            [-2.7864, -1.9826,  1.1608, -3.7876, -2.6447, -0.9330, -1.4398,  1.4762,
             -3.1207, -0.5027],
            [-1.5326,  4.4781, -1.7778,  0.8053, -1.9879,  3.7520, -4.6398,  2.9886,
             -2.6058, -0.6864],
            [ 1.4300,  0.9044, -0.7853,  3.3369,  3.7317,  4.2402,  5.4715, -3.0711,
              3.5166, -2.2788],
            [ 2.4236, -3.2660,  1.2544, -1.1473, -2.9728, -2.9376, -0.1847,  1.3766,
             -0.3263,  1.5991],
            [-0.8516, -2.1438,  3.2829, -2.3586, -0.1744,  0.0403, -3.8956, -4.4643,
              0.2523, -0.2237],
            [-1.2113,  2.5927, -4.1735,  2.8698,  2.0850, -0.9756,  3.9799,  0.1559,
             -1.4215, -0.0553],
            [ 0.3946, -0.2265,  1.4135, -0.9071,  0.0445,  1.2710, -0.6744,  0.5253,
             -0.1034, -0.0614]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.527 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
