.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.4203, 18.6956,  3.0154, 14.2154,  7.0362],
            [ 1.6538,  2.9401,  5.2001,  5.9140,  8.1860],
            [10.9413,  5.3496,  9.1540,  8.9470,  6.4880],
            [ 3.3799, 10.7862,  3.2290,  8.6572, 10.7357],
            [10.9803,  5.9029,  9.7146,  6.1849,  1.7933],
            [ 3.3799, 10.0112, 11.2214,  9.0934, 10.7357],
            [10.9413,  6.0503, 14.0734,  5.3595,  6.4880],
            [ 1.6538, 12.8653,  7.4524,  9.6418,  8.1860]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.9500, -1.8978,  0.6144, -2.1663,  1.1743, -1.2289,  0.4734,  1.0416],
            [ 1.3963,  0.8255, -0.3539,  0.5235, -0.7562, -1.9189, -0.5455,  0.7513],
            [ 1.0947, -0.2306,  1.6727, -1.8732, -0.0664,  0.7446, -0.8984,  0.0684],
            [ 1.4343,  0.7997,  1.7232, -0.2604, -0.8339, -0.5643, -0.7734,  0.7983],
            [-0.1796, -0.5409,  0.3737,  0.0412, -1.1830, -2.6935, -1.8417,  1.1995],
            [ 0.9796,  0.4474,  0.2228, -0.9680,  0.6901,  0.8762, -0.9369,  0.1168],
            [-0.5767,  2.2151,  0.9614,  1.0201, -0.7194,  0.3497, -0.9889, -0.7098],
            [ 0.4829,  1.5408,  0.7817, -1.4987,  1.5316, -0.4470, -0.6953, -1.0894]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.3641,  0.5669,  2.5848],
            [-1.0318, -1.5880, -0.3417],
            [-0.1683, -0.9855, -1.2982]], requires_grad=True), Parameter containing:
    tensor([[0.4010]], requires_grad=True)]
    Output from the convolution:  tensor([[  1.1604,   2.0967,   3.8608,   3.7482,   3.3346,   3.5628,   0.1369,
              -0.8163],
            [  1.5384,  -2.5987,  -1.3768,  -1.8502,   3.8302,   2.0868,   2.1836,
               5.1938],
            [ -1.7730,  -6.7816,  -1.8501,  -3.9243,   7.8434,   3.5478,   3.6525,
               3.6393],
            [  3.2794,   0.5040,  -2.6242,  -6.9829,  -1.4287,   0.5351,   1.9514,
               2.1597],
            [  0.2875,   6.5679,   6.5987,  -5.5361,  -6.2253,  -9.4722,  -4.6515,
              -3.7149],
            [  0.1128,   0.2695,   6.5849,  10.7493,   1.9418,  -0.6017,  -1.1450,
              -5.0054],
            [  3.8904,   1.1196,   1.2168,   6.0025,   1.1691,   2.1576,   5.2977,
              -0.1708],
            [ -4.4203, -11.4499,  -8.0148,  -4.0487,  -0.5836,  -4.7008,   2.7822,
               6.9286]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1336, -0.0276, -2.2910, -1.9297, -2.0209, -5.8122,  0.0262,  1.7200,
              2.8016,  5.0464],
            [ 2.5701,  0.7089,  3.0763, -0.7072,  0.9705, -4.2008, -6.1301, -8.7515,
             -5.2688, -2.1102],
            [-2.3889, -3.0892, -2.7729, -4.3781,  3.7674,  7.2682,  7.0358,  6.1967,
              0.0572,  0.7296],
            [-0.4352,  1.0733, -1.9070,  0.4080, -1.1974,  0.6835,  6.6887,  3.2632,
              2.4218, -0.1402],
            [ 2.7517,  3.2085,  8.7273,  4.6492,  1.2993, -6.5640, -9.0901, -7.5626,
             -3.2094, -1.9326],
            [-1.3092, -1.4633,  0.2599,  3.8336,  5.5333,  8.1961, -2.2204, -2.0850,
             -5.1590, -0.1856],
            [-0.3456, -0.3671, -0.3132,  0.6909, -1.7813,  2.9823,  3.2961,  5.9747,
              5.8866,  3.4854],
            [-0.5695,  0.5200, -2.6872, -0.3959, -3.2790,  0.8851, -0.1466, -2.1145,
             -3.6715, -3.2413],
            [ 0.6146,  0.4916,  0.1015,  0.3627, -0.6688, -0.4466,  1.8442,  1.8154,
             -0.7515, -1.2013],
            [ 0.0953,  0.4712,  0.3683,  0.1863,  1.2096, -0.0930, -0.6916,  0.4030,
              2.5701,  1.5356]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.507 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
