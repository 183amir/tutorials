.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.9049,  9.8265,  2.9413,  4.9162,  8.2174],
            [ 5.1929,  6.6130, 12.2256, 11.6399,  8.3154],
            [10.5815,  4.8463, 10.7348,  3.7234,  6.7001],
            [ 4.7515,  8.6630, 11.3614,  5.1264,  5.7366],
            [12.5959,  4.5867,  2.1323,  8.2937,  4.7344],
            [ 4.7515,  9.8064,  2.2707,  9.2504,  5.7366],
            [10.5815,  5.7141,  6.3890,  5.6635,  6.7001],
            [ 5.1929,  4.0136,  1.4792,  4.7985,  8.3154]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 4.2336e-01,  7.3073e-01, -7.6045e-01, -1.2785e+00, -4.3909e-01,
              1.7878e+00,  5.1646e-02,  5.9773e-01],
            [ 6.8151e-01, -4.5438e-01, -1.9320e+00, -4.8556e-01,  1.0665e+00,
             -7.9421e-01, -1.1921e+00, -2.1748e+00],
            [-1.5924e-01, -7.4036e-01, -8.3250e-01,  1.2186e-01,  4.5250e-01,
              3.3131e-01,  5.4868e-01,  1.8168e+00],
            [-2.0272e-01, -1.3042e+00, -2.8095e-01,  1.4143e-03, -4.6214e-01,
              5.3149e-01, -2.5238e-01, -2.5307e-01],
            [-5.2429e-01, -1.7368e+00,  3.1379e-01, -8.9736e-01,  9.1561e-01,
             -1.0922e-01, -1.0355e-02,  1.2787e+00],
            [ 7.4771e-02, -1.5883e+00, -4.0888e-02, -2.3512e+00, -6.7375e-01,
             -7.5136e-02, -1.3295e-01, -5.6162e-01],
            [-6.3769e-01, -2.9347e-01,  1.0959e+00, -3.5156e-02,  1.3718e+00,
             -4.8210e-01, -1.6119e-02, -1.0400e+00],
            [-1.1083e+00,  9.6124e-01,  2.2835e-01,  8.9573e-01,  5.1566e-01,
             -1.1566e+00,  1.5741e+00,  1.9606e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4195, -0.2287, -0.0221],
            [-1.0860, -1.7644,  0.6015],
            [-0.6163, -0.6130, -1.3114]], requires_grad=True), Parameter containing:
    tensor([[-1.6847]], requires_grad=True)]
    Output from the convolution:  tensor([[ -3.7375,  -4.3712,  -3.3205,  -0.4937,   1.9132,  -3.1667,  -0.0807,
              -2.5266],
            [-10.6615,  -9.8429,  -4.6668,  -0.4565,  -0.8115,  -1.4701,  -0.2153,
               0.0640],
            [ -2.3047,  -4.0167,  -2.1536,  -1.4375,  -1.1077,   0.2666,   0.1867,
              -0.5324],
            [  1.6722,  -0.8725,   2.9789,  -3.0942,   1.8229,   4.7592,  -1.6703,
              -0.1461],
            [  1.8073,   0.9352,  -1.5552,  -2.4989,  -5.4037,  -1.2866,  -1.5755,
              -1.9224],
            [  1.9601,   1.8497,  -0.0967,  -4.6001,  -0.1842,  -1.5764,  -3.3147,
              -3.1613],
            [  0.3102,   0.7971,  -1.6713,   0.7523,  -0.9497,   1.3106,  -0.7601,
              -0.6732],
            [  3.8534,   3.6407,  -0.2431,  -4.3323,  -0.0736,  -0.4294,  -0.5501,
              -0.3986]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.4264e-01,  1.9736e-02,  2.1955e-01, -1.8116e-01,  1.5339e-01,
              8.5873e-01, -6.3791e-01,  1.9533e-01, -8.6802e-02, -9.0791e-03],
            [ 5.7890e-01,  5.8408e-01, -1.0967e-01, -6.2396e-01, -9.6679e-02,
             -3.4218e+00, -2.4986e+00,  1.8771e+00, -1.3206e+00,  2.0967e-01],
            [-2.4146e-01, -7.8321e-01,  7.5111e-01, -2.0275e+00, -1.0835e-01,
              1.7655e+00, -7.0669e-01, -8.2769e+00, -1.7552e+00,  4.9419e-01],
            [-1.2667e+00,  5.2423e-01, -5.1075e-01, -3.3869e+00, -1.7391e-01,
              1.6943e+00,  1.2311e+00,  8.6143e-01, -2.2271e-03, -2.9317e+00],
            [ 1.0799e+00,  2.6490e+00, -2.9324e+00, -3.8941e+00, -1.5962e+00,
              1.2679e+00, -1.1269e-01,  3.6643e+00,  3.3093e+00,  8.3162e-01],
            [ 2.3727e+00,  6.5008e+00,  4.8113e+00, -5.8775e+00, -3.5922e+00,
              8.5503e-02,  2.9834e+00,  1.3809e+00,  3.4231e+00,  1.3737e+00],
            [ 1.4685e+00,  4.0758e+00, -1.0167e+00, -2.4300e+00,  2.3761e+00,
             -7.4893e-01, -7.4872e-01,  3.6484e+00,  3.7687e+00,  4.2772e-01],
            [ 1.9650e+00,  2.4913e+00, -1.9215e+00, -1.5625e+00, -1.7615e+00,
              4.3517e+00,  3.5345e+00, -1.0803e+00,  2.2676e+00,  1.4480e+00],
            [ 1.8707e-01, -4.9889e-01,  1.5354e+00,  3.4199e-01, -2.7697e+00,
             -2.4190e+00, -8.7831e-01,  9.8110e-01,  8.7494e-02,  1.1446e+00],
            [-2.8528e-01, -4.9311e-01, -5.4148e-01, -4.9274e-01, -7.4098e-01,
             -2.4870e+00, -3.6909e+00, -2.6869e+00, -1.8174e+00, -4.8059e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.555 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
