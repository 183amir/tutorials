.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.2681,  5.3014,  1.4957,  8.0468,  3.5739],
            [ 7.5808,  7.1443,  6.4890,  6.5400,  5.7284],
            [ 9.0778, 14.2343,  5.1705,  3.1553,  8.8450],
            [ 3.5084,  4.1888,  5.5563,  8.7101, 12.3084],
            [ 2.9633, 11.4581,  6.6485,  4.3246,  8.5061],
            [ 3.5084,  7.4387,  5.7034,  8.0597, 12.3084],
            [ 9.0778,  2.8031,  4.5379,  3.5629,  8.8450],
            [ 7.5808,  2.0948,  2.8377, 13.9964,  5.7284]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2491,  0.4183,  1.0003, -1.0251,  0.7371,  0.5058, -0.1277,  1.3949],
            [-0.6900, -0.9305,  0.6763,  1.3786,  0.7596,  1.3081, -1.1756,  0.3667],
            [-0.5825,  0.7831,  1.2189, -0.8634, -1.1582, -1.0852, -0.9329,  0.9724],
            [ 1.1405,  0.6513, -1.1221, -0.0773, -1.1676,  0.6898,  0.2396, -0.7792],
            [ 0.8199,  0.1061, -0.3357,  0.2205,  0.2263, -0.2403,  0.1712, -0.1811],
            [ 0.2248, -0.7447, -0.4725, -1.7524,  1.1297, -0.6003,  0.5758, -0.9761],
            [-1.0793,  0.3101, -0.0987,  0.6211, -1.9527, -0.4286, -1.4847,  0.7039],
            [ 0.1852, -0.2818, -0.5842, -1.0713,  1.2315, -0.1564,  0.9558,  2.4161]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8597,  0.6610, -0.2547],
            [ 0.7991, -1.5324, -0.5328],
            [ 1.4527,  0.2653, -0.0019]], requires_grad=True), Parameter containing:
    tensor([[-0.7716]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2639, -0.6159, -2.4447,  2.0879, -3.9562, -1.8008,  0.4697, -1.5130],
            [-3.0692,  1.8295, -4.6245, -0.7139, -5.2863,  2.4372, -0.2219, -1.2638],
            [-2.7620,  3.5021, -4.5847,  3.5503,  2.6450,  0.2526, -1.2464, -1.9424],
            [ 0.6334,  1.0361, -3.3803,  2.4302, -2.6426,  1.2198, -0.3244, -4.8784],
            [ 2.4351, -1.7521, -6.6724, -1.8746, -2.6806, -0.8319,  0.3879,  0.9806],
            [-1.0028, -3.7552,  4.8666, -0.1958, -4.0204,  3.5516, -5.6271, -4.7566],
            [-5.1695, -3.3554,  3.6681, -3.5905, -0.5925,  0.9515, -1.1663,  2.0527],
            [-3.3489, -0.4399,  0.9509, -1.9323, -2.7954,  1.1606, -0.6219,  0.1988]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.6104e-01,  2.4994e+00,  4.2166e-01,  5.4467e-01,  2.2544e-01,
             -2.5511e+00,  4.9745e-01,  1.1497e+00,  1.3662e-01, -1.2576e-01],
            [ 1.0506e+00,  1.4295e+00, -5.5917e+00,  2.6839e+00, -3.9031e+00,
              9.4756e-02,  3.2778e+00,  5.5740e-01, -8.3482e-01, -4.2124e-01],
            [ 5.4582e-01,  1.0586e+00, -3.1170e+00,  5.9020e+00, -1.6002e+00,
             -9.7127e-01,  3.4850e+00,  3.9208e+00, -1.3308e-01, -8.6389e-01],
            [ 8.4792e-02,  5.1359e-01,  1.1909e+00,  5.5768e+00,  3.5067e-01,
             -2.4507e+00, -1.0930e+00, -3.8464e-01, -3.4721e+00, -1.2696e+00],
            [-6.6343e-01, -1.7704e+00, -1.2935e+00,  1.6863e+00,  1.3823e+00,
             -1.7918e+00,  3.7454e+00,  5.2661e+00, -1.9115e-01, -2.3511e-01],
            [ 5.3328e-01, -2.1242e+00, -4.7294e-01,  3.9690e+00,  2.1980e+00,
             -5.2961e-01, -1.0949e+00,  1.5034e+00,  1.1890e+00, -1.2458e-01],
            [ 7.1234e-01,  1.8887e+00, -6.0725e-01, -2.0469e+00, -4.2694e-01,
              5.9595e+00,  7.8509e-01, -3.2680e+00, -2.5837e+00, -6.5065e-01],
            [ 1.5584e+00,  4.2965e+00, -1.9409e+00, -9.4546e-01, -1.5059e+00,
              1.4837e+00, -4.0278e-01,  2.8773e+00, -8.0558e-02,  3.0633e-01],
            [ 1.5199e+00, -2.1710e+00, -2.7183e+00,  1.7218e+00, -1.4927e-01,
              2.8436e-01,  1.4341e+00, -2.3415e+00,  1.0289e+00,  5.7231e-01],
            [ 4.0903e+00,  1.4653e+00, -1.1008e+00,  5.6850e-01,  7.1634e-01,
             -1.4942e+00,  1.3462e+00, -1.2587e+00, -2.8712e-01,  2.0935e-03]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.318 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
