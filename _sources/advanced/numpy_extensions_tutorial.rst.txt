.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.3558,  1.9874,  3.5857,  7.6757,  2.2348],
            [15.2482,  7.9747, 13.0446,  5.7017,  3.4753],
            [ 8.5611,  4.8538,  2.5092, 12.1163, 17.6928],
            [ 4.8858,  2.5056,  8.1392,  7.5579, 13.9622],
            [15.1411,  4.9482,  2.4134,  7.7659,  8.9604],
            [ 4.8858,  1.2975, 10.1295, 11.0295, 13.9622],
            [ 8.5611,  7.4191,  8.0348, 10.3072, 17.6928],
            [15.2482,  7.2797,  3.0900,  5.1191,  3.4753]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1748,  0.7379, -0.9627,  0.0525, -0.8719, -0.3710,  0.1560, -0.3395],
            [ 0.5250, -2.0227,  2.2870, -1.3343, -0.7230,  0.6234, -0.1795, -0.8998],
            [ 0.1375,  0.5506, -0.3576, -2.1553, -0.6100, -0.3677, -0.6047, -1.9748],
            [ 0.7651,  0.0476,  0.1108,  1.2558, -1.3059, -0.1914, -0.6492, -0.6018],
            [ 0.7692, -0.2726, -1.0221,  1.0068,  0.4300,  0.8707, -0.0240,  0.2694],
            [ 1.2031,  0.8967, -0.4999,  0.5312,  1.8394,  2.5499,  0.1272,  1.1513],
            [-0.4042, -2.8156,  1.6028, -2.1370,  0.8519, -0.3975,  0.7591,  0.4199],
            [-0.2648,  0.9590, -0.5538,  1.8324, -0.7137,  0.0826, -0.2029,  0.2479]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4630,  0.9192, -0.4057],
            [ 0.1780, -0.8964, -0.1186],
            [-1.8255,  0.5452,  0.2083]], requires_grad=True), Parameter containing:
    tensor([[0.6986]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.6148, -0.2119, -1.7654,  2.1865, -1.2752,  0.9536,  2.5425, -1.0043],
            [-1.4651, -3.3907,  2.2384, -0.3334,  3.8940,  3.4860,  3.1190, -2.8719],
            [ 2.3500, -0.9301,  0.9943,  1.5596,  2.5623, -0.5496, -3.1542,  1.2069],
            [ 1.0574, -2.2059,  2.5973,  0.0347, -0.3017,  0.5658,  2.1462,  5.5883],
            [ 1.5161,  6.2566, -2.3363,  0.1210,  2.0666,  0.3422,  1.9994, -3.9834],
            [ 5.5195, -1.1217, -0.5570,  1.5936, -0.9867,  1.9907, -4.7031,  1.0093],
            [-0.0438, -0.3563,  3.7365,  0.4533, -1.8772,  0.4723,  2.7527,  4.5704],
            [ 1.5998,  1.0670,  2.7020,  2.2769,  0.0913,  3.4179,  1.9600, -0.9542]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.6304,  1.0454, -0.5789,  0.6860, -1.0656, -0.5519, -0.2119,  1.0037,
              0.2369, -0.1995],
            [-0.2944, -2.3097,  0.1967, -2.5498,  0.4134,  0.1764,  0.9794, -0.8442,
             -1.2903,  0.3075],
            [-2.4125,  3.0037, -1.7517,  3.6075, -0.3148,  1.9068,  0.3293, -0.9766,
              0.7075,  0.3169],
            [ 2.3190, -0.6292,  4.5344, -2.0094,  0.4622,  1.1014, -0.2766, -0.0196,
              0.3940, -0.3607],
            [-1.3334,  0.7484, -3.0053,  1.5892,  1.3709, -4.1212, -2.3271,  3.2133,
              1.0942, -0.8169],
            [-0.9399, -2.6491,  1.0474,  2.6667,  0.5193, -2.7435,  3.4495, -1.7968,
             -1.6737,  0.0960],
            [ 1.5070,  1.3147,  0.8403, -1.3620,  1.9071,  2.1417, -1.7715, -1.3151,
              1.7084,  0.1004],
            [ 2.3151, -1.2672, -0.9348,  0.8423, -1.4389, -2.4028,  3.8471,  0.5128,
             -1.9261, -0.1474],
            [-2.3656, -1.2970,  2.5647, -6.6449, -1.4069,  2.5707, -2.9614, -2.2752,
              0.6155,  0.1764],
            [-1.0109,  0.0217, -5.5580,  1.6852,  2.8002, -2.9648, -2.2178,  1.2727,
              0.2432, -0.0237]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.559 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
