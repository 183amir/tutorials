.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9523, 10.3810,  8.2116, 10.9628, 10.5556],
            [ 6.8004,  1.7199,  7.6977,  8.6317,  8.2719],
            [ 9.1478,  5.4069,  9.5158,  2.2359,  8.9678],
            [ 4.9402,  1.6874, 11.9570,  3.2227,  4.9483],
            [ 8.4565, 12.6845,  1.9110,  9.4081,  7.1346],
            [ 4.9402,  9.3470,  7.2639,  8.5834,  4.9483],
            [ 9.1478, 10.2618,  6.5367,  4.0414,  8.9678],
            [ 6.8004,  2.4128,  4.8792,  9.0438,  8.2719]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9974,  0.4437, -0.4782,  0.0800, -0.5513,  1.0785, -0.3334, -0.2249],
            [ 0.1655,  1.7576, -1.4434,  1.8057,  1.0795, -0.4725, -0.7952,  0.8792],
            [-1.1235, -0.8871,  0.0078, -0.4872,  0.8683,  0.7204, -0.4969,  1.4991],
            [-1.1951, -0.7087,  0.8986,  0.0889, -0.2210,  0.4276, -0.3808, -0.2896],
            [-1.1221, -1.2975, -0.0895,  0.0285,  0.0582,  0.7720, -0.7282,  2.2291],
            [ 0.7851,  1.8459,  0.6944, -0.7396,  0.7308, -0.3557, -0.9044, -0.1577],
            [-1.0823, -1.5340, -1.8034, -0.1586,  1.5148,  0.4895, -1.4178, -1.6811],
            [-0.5063, -0.6959, -0.7425, -0.1398,  1.5752, -1.5943,  0.2803,  0.0802]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3255,  0.0125, -1.3833],
            [ 0.6229, -0.9413, -0.4127],
            [ 0.0591, -0.4882, -1.3632]], requires_grad=True), Parameter containing:
    tensor([[-1.2312]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.4725,  0.1241, -5.5791,  0.6242, -4.0067,  0.0809,  0.5417, -4.6293],
            [ 5.2515, -2.6764, -6.8733, -2.7653, -0.2152, -4.4890,  0.4669, -2.1905],
            [ 3.9433, -3.6169, -9.3403, -1.1642, -2.3162, -0.9195, -1.0027, -2.1197],
            [ 1.8078, -1.6892, -8.5433, -0.7966, -0.3510, -2.7093,  1.9471, -2.2276],
            [ 0.6578, -4.2501, -0.7319, -0.0422, -1.2071, -0.8010, -1.4552,  3.0080],
            [-3.5962,  4.8511, -4.6992,  1.2035, -0.9331, -3.7935, -1.1884, -3.1474],
            [ 1.6309,  0.8999,  2.5553, -0.7179, -2.8112, -3.1977, -2.1941,  2.5209],
            [-0.2631,  0.6781, -5.3579, -4.1732, -4.7350,  0.5576,  0.2915,  2.8790]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.4168e-01,  1.3198e-02, -4.7983e-01,  4.3896e-01, -1.0978e-01,
             -2.0873e+00, -1.8278e+00,  3.1303e-01,  6.7658e-01,  7.4920e-01],
            [ 3.0750e-01, -5.1697e-01, -3.6669e-01,  8.0028e-01,  5.2852e-01,
             -7.4176e-01, -1.6476e+00, -9.3568e-01,  6.8915e-01,  2.7075e+00],
            [ 2.2182e-01,  3.1886e-02, -1.7780e+00, -2.7566e+00,  2.7700e+00,
             -6.7670e-01, -2.6542e+00, -3.1339e-01,  2.1238e+00,  2.2063e+00],
            [ 2.2411e-01,  6.0226e-01, -3.2794e+00,  1.0810e+00,  6.3989e+00,
             -3.5061e-01, -2.7796e+00,  4.3779e-01,  1.8703e+00,  1.0892e+00],
            [ 4.6817e-01,  4.1853e-02, -4.2106e+00, -2.2558e-01,  3.0769e+00,
             -1.3795e+00,  6.2830e-01,  4.2380e+00, -1.3489e+00, -1.7427e+00],
            [ 8.2427e-01, -9.4287e-01, -2.3857e-01,  3.0337e-01,  5.1746e-01,
             -2.4953e+00,  2.2109e+00,  2.5117e+00, -1.2329e+00, -1.6429e+00],
            [-4.1479e-01,  2.4753e-01, -1.4622e+00, -2.1265e+00, -2.1531e+00,
              5.7724e-02,  3.3340e+00,  2.9901e+00, -2.0731e+00, -2.7612e+00],
            [-5.3704e-01,  1.8778e+00, -7.1559e-01, -2.0235e+00,  9.6126e-02,
              1.5208e+00,  1.9297e+00, -6.3719e-02,  1.9908e+00, -6.9672e-01],
            [ 9.6144e-03,  8.0109e-01, -2.3132e-01, -1.6573e+00,  1.3088e+00,
             -1.1430e-02,  4.0870e-01,  2.9029e+00, -1.6175e+00, -1.2085e+00],
            [ 5.8497e-03, -1.0025e-02, -4.7754e-01, -7.1322e-01,  1.0036e+00,
              7.5693e-01, -7.5229e-01,  1.3105e+00,  2.4143e+00, -8.9542e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.496 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
