.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.3230,  8.1760,  3.5230,  2.2576,  2.5426],
            [14.5921,  8.4639, 12.2384,  2.2617,  5.4846],
            [10.9475, 16.4099,  6.4725,  7.4574,  8.4793],
            [ 0.7969,  5.4277,  8.0677,  5.7705,  6.4899],
            [ 6.3226,  7.9198,  9.1802,  4.9999, 16.9252],
            [ 0.7969,  8.5628, 10.2718,  8.7814,  6.4899],
            [10.9475,  5.3606,  6.9009,  7.1491,  8.4793],
            [14.5921, 12.8441,  2.5800,  1.6038,  5.4846]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.4508,  0.7021, -1.5299, -0.7345,  0.8730, -0.2069,  1.2763,  0.8066],
            [-0.4322, -0.4566,  0.0074,  0.9738,  0.9311,  0.3248,  0.1370,  1.0136],
            [ 1.4228, -1.0705,  0.7179,  0.0099,  0.4436, -1.4815,  0.1703,  0.4229],
            [-0.9730,  1.7364,  1.2770, -0.0776, -2.6083, -0.5322, -1.2586,  0.8268],
            [ 1.5211,  1.0687, -0.0922,  0.3923, -0.4797, -1.3944, -0.7321,  0.7407],
            [-0.6386, -1.6210, -1.2478, -0.3967, -0.8088,  0.6412,  0.8541, -1.1221],
            [-1.8624, -0.1137,  0.7123, -2.5047,  0.2702, -0.5054, -0.7952, -1.4988],
            [-0.4114, -1.3108, -0.8459, -0.4486, -0.6956, -0.2002, -0.5434,  0.5836]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.7615e-01,  1.0082e+00,  1.2432e+00],
            [ 5.6002e-01,  1.0342e-03, -7.5384e-01],
            [ 1.4894e-01,  1.5196e-01, -5.1656e-01]], requires_grad=True), Parameter containing:
    tensor([[-0.6423]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.8909, -1.9326,  0.5044, -1.0020, -1.6635, -2.2764,  0.0629, -0.1960],
            [-1.9957,  1.8032,  2.3858, -2.3464,  0.0366, -1.4095, -1.9206,  0.3814],
            [ 4.6146,  0.6730, -6.7528, -1.8007, -2.9749, -3.7259, -2.1363, -1.1609],
            [-2.3963, -0.0285, -0.2733,  0.2915,  0.8563,  1.9134,  1.7427,  1.6054],
            [ 0.1326, -2.4982, -2.2079, -1.4285,  1.1466, -0.0298, -4.5063, -1.4289],
            [ 0.9704,  1.4478,  0.9240,  2.5460,  5.2480,  0.1390,  0.2542, -1.4739],
            [ 3.7184,  0.5188,  0.4596,  1.2210,  1.4144, -2.6982, -1.9531,  0.3488],
            [ 0.2497, -2.2744, -3.3517,  0.9934, -3.6974, -1.4692,  1.6999, -0.8392]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.0995e-01,  1.8479e+00,  3.0505e+00,  9.3891e-01, -1.7501e+00,
             -1.9219e+00, -2.2508e-02,  9.7039e-01,  5.5409e-01, -1.0028e+00],
            [ 8.1787e-01,  6.1030e-01, -1.4967e+00, -2.3307e+00, -1.0498e+00,
              1.5352e+00,  5.6013e+00,  2.2685e+00,  9.1908e-01,  1.4035e+00],
            [ 2.4340e-01,  8.6577e-01,  1.5664e+00,  1.3158e+00,  2.6943e+00,
              3.3825e+00,  2.2391e+00,  2.5609e+00,  1.3855e+00,  2.2898e+00],
            [ 3.2495e-01,  1.5748e+00,  1.5279e+00, -2.5462e+00, -4.9146e-01,
              5.7030e+00, -4.1295e-01, -8.0024e-01,  6.8857e-01,  1.3907e-01],
            [ 6.0501e-01,  8.0480e-01,  1.4116e-01,  6.1446e-01,  9.7708e-01,
              1.5137e+00,  8.3932e-01,  2.8144e+00,  2.0877e+00,  5.4083e-01],
            [ 1.0558e+00,  2.5815e+00, -4.9258e-01, -4.8532e+00, -1.0502e+00,
              1.1600e-01, -1.5939e+00,  2.3663e-01,  3.1906e-01, -2.0258e+00],
            [ 1.5402e+00, -4.5306e-01, -2.1796e+00,  2.9068e+00,  3.0888e+00,
              1.1943e+00,  2.7792e+00,  9.4615e-01, -8.8388e-01, -1.5769e+00],
            [-4.9642e-02, -1.1154e+00, -3.5932e+00,  1.0938e+00,  3.0491e+00,
              1.2311e-01, -4.4824e+00, -3.5368e+00,  1.1058e+00,  8.2093e-01],
            [-1.0231e+00,  3.6037e-01,  1.9850e+00, -5.1684e-01, -9.2180e-01,
             -8.2527e-01, -4.9587e-01,  9.2286e-01,  7.0698e-01, -4.0955e-01],
            [-2.7794e-01, -2.3249e-01,  1.1319e+00, -2.1524e-03, -4.2337e-01,
             -5.6630e-01, -6.7475e-02,  1.0480e+00,  2.7550e-01, -3.4772e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.565 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
