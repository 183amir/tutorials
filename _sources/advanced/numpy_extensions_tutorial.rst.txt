.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.6206,  9.2269,  7.7351,  5.1915, 12.6129],
            [18.8844,  7.3836,  6.1573,  3.7261,  3.5809],
            [ 8.2131, 16.7915,  5.8722,  6.9317,  9.7468],
            [ 8.6227, 11.4650,  7.4501,  2.5185, 11.9933],
            [ 0.6314,  6.0224,  5.5953,  4.7309,  1.8862],
            [ 8.6227,  1.1136,  3.4939,  2.1408, 11.9933],
            [ 8.2131,  1.3121,  7.0719, 12.7626,  9.7468],
            [18.8844,  1.7218,  4.7771,  5.9062,  3.5809]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4912e+00, -1.8190e+00, -2.3044e+00, -1.2359e-01, -4.7940e-01,
             -1.3469e-03, -1.0115e+00,  5.0255e-01],
            [-2.7190e-01,  4.0696e-01,  1.4127e-02,  1.8002e+00, -1.8483e+00,
             -5.1451e-01,  2.9526e-01, -7.0486e-01],
            [ 2.1161e-01,  9.4745e-01, -1.6444e+00,  4.5652e-02,  1.6325e-01,
             -1.5929e-01, -3.8109e-01,  4.5266e-01],
            [-3.9853e-01,  1.2743e+00, -6.7422e-02,  9.5462e-02,  8.8770e-02,
             -4.6824e-01, -2.0912e-02,  4.8639e-01],
            [ 1.1229e+00, -1.5399e-01,  3.6165e-01, -2.6951e-01,  1.1748e+00,
              2.1400e-01,  1.7086e+00,  9.9369e-01],
            [ 8.8331e-01,  1.1301e+00, -6.2075e-01,  2.2385e+00, -5.0308e-03,
              1.0581e+00, -7.1564e-01,  1.7139e-01],
            [ 1.8614e+00,  2.5942e+00,  1.0682e-01,  3.3448e-01,  4.8487e-01,
              1.3582e-01, -2.5259e-01,  1.3009e+00],
            [ 1.3079e+00, -9.0494e-02, -4.8256e-01, -2.6673e+00,  2.7007e-02,
              2.1395e-01,  1.8712e-01,  1.1921e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9764, -0.4710,  1.6185],
            [ 1.5510,  1.1104, -0.4209],
            [ 0.7090, -3.2767,  0.1522]], requires_grad=True), Parameter containing:
    tensor([[-1.0944]], requires_grad=True)]
    Output from the convolution:  tensor([[  3.1419,   0.3332,  -2.8594,   2.0425,  -4.2468, -12.8632,  -2.2121,
              -0.4965],
            [  2.6974,   0.9573,   1.6635,  -6.8863,  -1.3841,  -2.2143,   6.3076,
              -7.0070],
            [  0.1768,   1.3329,  -3.5123,   9.3381,   4.1165,  -1.9328,   0.8309,
               6.2305],
            [ -1.2689,  -4.5733,  -0.9694,   1.3178,  -5.9811,  -5.7062,   7.0580,
               0.3487],
            [ -1.8142,   2.8852,  -2.9458,  -3.3663,   2.0380,   2.0589,  -5.7537,
              -2.0434],
            [ -2.8814,  -3.1658,  -3.4815,  -1.0046,  -0.5385,  -9.8397,   5.9260,
              -4.5992],
            [ -4.8022,   0.6126,  -3.9662,  -3.5974,   0.4149,   3.3365,  -2.5131,
               0.8706],
            [  4.2172,   1.1071,   3.0974,   0.6031,   3.3169, -11.9289,   3.9094,
              -9.4047]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -1.5079,   2.1856,  -4.2324,   2.2551,  -3.1379,  -0.4647,  -3.4734,
              -1.2221,  -0.5502,  -1.9729],
            [ -0.8286,  -0.9724,   3.5138,  -3.5029,  -2.2245,  -3.7006,   1.8387,
              -4.5658,  -2.9869,   2.0005],
            [  0.7047,   7.3632,  -9.2667,   4.8539,   3.6960,   1.7912,  -3.3265,
               0.2459,   5.7295,  -0.5281],
            [  1.8657,  -5.9854,   6.0009,   0.3786,   0.1427, -12.8425,   8.7025,
              -0.8733,  -2.0471,  -0.2796],
            [  3.4733,   5.5565,  -0.8677,  -0.0206,  -0.4507,  -3.9443,   3.3321,
              -0.5718,  -0.1948,   0.6427],
            [  3.3116,  -5.0004,  -2.7518,  -2.8347,   8.9846,  -8.2454,  12.8684,
              -2.3176,   1.7250,   1.0278],
            [  2.0850,  -4.6723,   0.8922,   7.2815,  -4.8085,   2.5117,  -3.5499,
               2.6977,  -3.4154,  -0.8134],
            [  2.7428,  -0.6640,   1.2618,  -3.0364,  -4.8570,  -5.6057,  -1.8671,
              -2.3288,  -3.0050,   1.2048],
            [  2.4852,  -1.1719,  -4.0217,   1.3913,  -6.3966,   7.0611,  -3.0121,
               6.2204,   1.6819,  -0.2984],
            [  0.8490,  -3.7579,  -1.9855,   6.4706,  -1.2870,   5.9448,  -3.1966,
               2.1868,  -1.9968,   0.0892]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.344 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
