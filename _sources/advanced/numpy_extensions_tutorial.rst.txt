.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.6731,  8.3160,  7.8436,  2.6457,  6.0617],
            [ 2.4732,  6.5866, 14.1324, 14.8978, 12.4794],
            [ 4.4724,  5.2414,  2.6460, 10.9094,  2.1463],
            [ 2.3246, 13.8061,  9.6787,  5.7124,  6.7016],
            [ 6.3652, 13.4302, 17.4744,  2.4441, 10.1800],
            [ 2.3246,  7.1409,  8.5350,  8.9623,  6.7016],
            [ 4.4724,  7.3800, 10.7742, 11.9744,  2.1463],
            [ 2.4732,  6.7537,  7.8323,  0.7527, 12.4794]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0306,  1.6687,  1.1054, -1.3489, -0.8060,  0.5033,  1.5433,  0.2532],
            [ 0.3310, -1.1760, -0.7519,  1.4871,  1.8802,  0.1556,  0.2644, -0.9292],
            [ 1.2764,  1.9698,  0.5178, -0.4475, -1.0989,  0.0991,  1.0024, -0.9604],
            [ 0.3093,  0.3579,  1.4806, -0.4622,  1.8464, -2.3998, -0.4832, -0.6603],
            [ 0.3754, -1.7640,  1.1460,  2.1925, -1.6831, -0.8593,  0.2596,  0.4030],
            [ 2.3622, -1.0731,  0.1904,  1.3930, -0.1711, -0.7184, -0.9171, -0.6094],
            [-0.8592, -0.6197,  0.3078,  0.4227,  0.1654,  1.4399,  0.7583,  2.0868],
            [-1.3624,  0.2361,  1.3197,  0.7139,  0.2578, -0.2030, -1.6689,  0.6543]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4251, -1.0209, -1.4491],
            [ 0.7529,  0.7657, -1.4499],
            [ 0.5095,  1.6745,  0.7221]], requires_grad=True), Parameter containing:
    tensor([[-1.9536]], requires_grad=True)]
    Output from the convolution:  tensor([[  1.0823,  -2.0774,  -4.5721,  -4.0150,   0.7911,  -2.4433,   3.0134,
               1.6700],
            [ -4.3811,  -3.5902,   2.8117,  -0.9403,   2.2431,  -2.5595,  -6.6215,
              -5.7628],
            [ -0.4929,  -4.0699,  -6.5186,  -3.6434,  -1.0673,  -2.2288,  -1.2575,
              -0.6532],
            [ -0.5712,   1.5703,  -1.1359,  -5.1723,  -2.4417,  -3.6485,   1.9815,
               4.9513],
            [ -8.1595,  -3.9036,   0.4607,  -0.0436,   2.4376,  -5.6188,  -0.7191,
              -7.5299],
            [ -0.4702,  -7.3528,  -7.4276,  -6.3135,   0.1525, -10.7364,  -2.9554,
              -5.5100],
            [  0.8125,  -5.4226,  -1.6688,  -7.2367,  -1.0716,   0.3016,  -0.2975,
              -0.2574],
            [  6.0170,  -0.2645,   2.7222,  -0.9491,  -3.5604,  -8.8214,  -5.4560,
              -7.5185]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1620,  1.8225,  3.4512,  2.6119,  2.4756,  1.1536,  3.5092,  1.6451,
              0.8718, -0.9803],
            [ 1.6731,  0.4995,  1.3602,  2.8170,  3.0606, -3.1862, -2.9950, -0.3243,
              0.4255, -1.6469],
            [ 0.2120, -2.8410, -1.6735, -5.0424,  2.6028, -2.3951, -4.9553, -0.7612,
              0.6404,  1.3676],
            [-0.1887, -2.2475,  1.4647, -4.5295,  7.6336,  7.1702,  2.7061, -1.9736,
             -3.0322,  0.4473],
            [-1.5817, -0.2097,  1.5647, -2.4819, -2.1403, -1.8958,  4.6987,  5.8752,
             -1.0799, -0.1250],
            [-2.7778, -0.6342,  0.2670,  1.8665,  0.5268, -2.8555, -6.4997, -3.8931,
             -1.3374, -0.2507],
            [ 1.4821,  0.3234, -7.7162, -2.2450, -0.4745, -1.5158,  0.7003, -1.4621,
             -3.3665, -4.2289],
            [ 0.7517,  6.3620,  0.4792, -2.1819, -3.9503, -0.5144,  4.2243,  2.8370,
              7.2027,  1.2018],
            [ 0.3271, -0.9526, -0.1022,  7.3493,  1.1905, -0.2971,  2.3706,  0.0884,
              2.5592, -0.0877],
            [ 0.1507, -0.7188, -3.4198,  0.0448,  2.2107, -0.0385, -1.4969, -2.8675,
             -1.0152,  0.0811]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.553 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
