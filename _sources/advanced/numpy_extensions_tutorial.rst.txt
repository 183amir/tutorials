.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0562,  7.4790,  7.5029,  3.0364, 13.5461],
            [12.9302,  7.0933,  6.3270,  3.4164,  9.6207],
            [10.3086, 12.4897,  9.2536,  2.4171, 11.6838],
            [ 5.9912,  7.9689,  8.1882,  8.5985,  7.3028],
            [ 6.7435,  3.6440,  4.8529,  5.6207, 19.7268],
            [ 5.9912,  5.7790, 11.6596,  2.4228,  7.3028],
            [10.3086,  5.8735,  2.3083,  7.7720, 11.6838],
            [12.9302,  9.3125,  6.2848,  8.8440,  9.6207]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8182, -0.2571, -1.8689,  0.4565,  0.6876, -1.2378,  0.5037,  0.4364],
            [-1.2861, -0.4968, -1.1235,  0.3083,  0.5471, -0.4996, -2.3001, -0.7209],
            [-0.4145, -0.3149,  0.9353, -1.1469,  0.8366, -0.5917, -0.4192,  0.0353],
            [ 0.5004,  1.4883,  1.6177,  0.6825,  0.3572,  0.7420,  0.3703,  0.2561],
            [ 1.2357, -0.2711, -1.1796, -0.1530,  0.4534,  1.0113,  0.0184,  0.2315],
            [-2.4010,  0.4063, -0.4713,  1.8015, -1.0581,  2.5359, -0.1171,  1.9384],
            [-0.0610, -1.1035, -0.4201,  0.2787,  0.7297,  0.3690,  0.1543, -0.4598],
            [ 1.9896,  0.5098, -1.5435, -1.1184, -0.4198,  1.6594, -0.7800,  1.0255]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5039, -1.8206, -1.3135],
            [-0.4360, -0.5786,  0.3565],
            [-0.1756,  0.8766,  2.2380]], requires_grad=True), Parameter containing:
    tensor([[-0.9049]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5916, -1.7955, -2.9994,  2.6868, -2.1839, -6.6701, -1.2849, -4.2456],
            [ 2.8397, -1.4822, -5.8084,  1.8837,  1.8567, -3.9917, -2.3136,  4.7846],
            [-5.6615, -1.6121,  2.2352,  0.6780,  3.0519,  7.6587,  4.1717, -5.9501],
            [-0.0638, -1.4837,  0.8097,  3.4898,  3.7789, -0.9410, -4.9044, -0.5530],
            [ 5.0641, -1.8270, -2.6405, -1.8859, -0.8633, -6.6083, -5.6899,  2.4071],
            [-0.1502, -1.9380,  3.9593, -0.7220, -6.0762, -1.9356, -0.5082, -5.6078],
            [-3.7140,  2.3215,  4.6042, -2.3084, -3.3989,  0.8011,  4.9525,  0.3444],
            [ 1.1424,  4.5642, -4.5782, -3.9918, -4.0130, -2.2073,  2.0094,  5.3553]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  2.7941,  -5.3802,   1.2731,  -0.2692,  -0.3082,  -0.8744,  -1.5118,
               3.4497,   2.3672,   0.2076],
            [ -0.5257,  -1.7108,   3.2979,  -1.3437,  -1.9890,  -1.1488,   3.8653,
               0.2155,   0.5397,   0.9954],
            [ -1.2858,   1.2755,   4.2430,  -0.3068,   3.7767,   2.0209,   0.5373,
              -2.9560,  -5.6095,  -1.9778],
            [ -2.1193,   4.4434,   2.5417,  -2.7396,   5.7788,   1.8174,  -6.6623,
              -5.7460,   2.2587,   0.2742],
            [ -0.3804,   1.6514,  -1.6179,  -1.2715,   0.0467, -13.3445,   1.0329,
               3.3089,   1.5257,   1.9746],
            [  1.4110,   0.0288,  -7.9665,   1.5304,  -2.0318,  -3.8344,   7.5282,
               0.3822,  -1.9463,  -2.6579],
            [ -1.3735,   0.8900,  -2.2299,   0.9047,  -0.6562,   7.3132,   1.4927,
              -7.4072,   3.6062,   0.3053],
            [ -1.0923,   2.5963,   0.1663,   5.1734,  -2.3628,   1.5710,   0.3094,
               1.3282,   3.1774,  -0.2491],
            [  0.5459,  -0.4491,  -1.1604,   1.8161,  -0.3939,   2.1139,   1.8596,
               4.0212,  -0.3619,  -1.2175],
            [  0.1598,  -0.8509,  -1.4910,  -0.8177,  -3.0239,   0.2885,  -2.2744,
              -0.8907,  -1.0121,  -0.7051]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.491 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
