.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.9421,  5.0515,  1.8771, 10.9143,  1.9624],
            [ 6.2145,  4.7612, 10.8004, 14.8388,  9.5222],
            [ 0.6681,  4.8865,  6.1827,  7.3677, 11.5119],
            [ 5.7706,  5.8746,  5.4855,  7.0236,  6.4734],
            [ 8.4958,  9.3706,  1.5833,  5.0767,  5.0872],
            [ 5.7706,  4.7216,  4.4695,  9.7436,  6.4734],
            [ 0.6681,  5.4056,  6.1072,  9.2591, 11.5119],
            [ 6.2145,  9.0144,  8.0975,  1.0147,  9.5222]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 6.0851e-02, -3.2414e-01, -1.2338e+00,  1.0326e+00, -1.3819e+00,
             -2.3751e-01,  4.2643e-01, -6.8443e-01],
            [-7.0628e-01, -2.7514e-01,  8.7155e-01,  1.0122e+00,  3.8237e-02,
             -1.2297e+00, -7.5222e-01, -6.6503e-02],
            [-1.3316e-03, -3.4555e-01,  1.9557e-01,  7.6951e-01,  6.7024e-01,
             -9.1876e-01,  1.0191e+00, -1.9548e+00],
            [ 7.2355e-01,  4.8997e-01,  5.4598e-01, -2.5704e+00,  3.8829e-01,
              2.2858e-01, -1.0436e-01, -5.8350e-01],
            [-4.8067e-01,  7.0431e-01, -6.7244e-01, -3.1959e-01,  7.6022e-01,
              2.0578e+00, -1.2429e+00,  1.2325e+00],
            [-3.9331e-01,  1.5754e+00, -8.4670e-01, -9.1777e-01, -1.3243e+00,
             -1.6267e+00,  2.3166e-01, -3.2271e-01],
            [-8.7133e-01,  1.2529e+00, -9.9165e-01,  1.3343e-01,  6.8341e-01,
             -1.6224e+00,  6.8626e-01,  3.7490e-01],
            [-1.5720e-01, -5.8049e-04, -1.2331e+00,  1.8943e-01, -4.9854e-01,
             -1.3912e+00, -8.6161e-01, -1.5204e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5324,  0.2988, -0.7152],
            [-1.1451,  0.1899,  0.3507],
            [-0.3828, -0.7709,  0.4624]], requires_grad=True), Parameter containing:
    tensor([[0.2575]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.3467,  0.2308,  1.0232,  2.3255,  2.8123, -1.8673, -0.5648,  0.4551],
            [ 3.2468, -5.2712,  1.9260, -1.4984, -0.5604, -1.7258,  0.9400,  1.1345],
            [ 3.8831,  0.3796, -0.6336,  0.7975,  2.2472, -3.3548,  2.8628,  4.1185],
            [-3.4063,  2.4480, -3.1020,  1.4042,  2.3760,  1.3416, -0.2709,  0.1483],
            [-2.9777,  2.2471, -0.7389,  1.6831,  0.0423,  0.2546,  1.3089,  1.2184],
            [ 1.3182,  1.5014,  1.3262, -3.1568,  0.2680, -1.6221,  1.2386,  0.5804],
            [ 2.1787,  2.3579, -0.9084, -2.3614,  1.3564, -1.0284,  2.3462,  2.6300],
            [ 1.0730,  2.7028, -1.7259, -3.6393, -0.2850,  2.7483, -1.1117,  5.0398]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5316, -1.5541,  1.0542, -1.7833, -1.6462,  0.5339, -1.4783,  0.3632,
              0.3658,  0.4466],
            [ 0.9544, -3.1401, -0.4485,  0.1082, -2.1437,  1.8451,  1.7750,  0.5334,
             -0.2679, -0.6359],
            [ 0.2867, -1.4817, -0.2750,  1.7568, -0.7395,  0.7682,  1.2877,  0.1150,
              0.2141, -0.1498],
            [ 1.2223, -1.6467,  1.8037,  4.2537, -0.0047, -1.1296,  0.2001, -0.7017,
             -0.6204,  0.2129],
            [ 2.7926, -0.0443,  0.7967,  1.1262,  3.0423,  0.2983, -0.9834, -1.1615,
              0.4550, -1.4453],
            [ 2.1450,  1.5852, -1.0174,  1.0460, -1.9485,  0.1910, -1.6274, -2.5756,
             -0.6752,  1.1586],
            [-0.5017,  3.6588, -1.1105,  2.0528,  1.1851, -0.6622, -0.2563, -0.7080,
              0.2776,  1.3787],
            [ 0.3973,  0.5418,  2.7015, -0.3162, -1.2487, -0.2849,  0.9235, -0.7743,
              0.6658, -0.9140],
            [ 1.1567,  0.5830,  0.6207,  2.0365, -0.5421, -1.2350,  1.0250,  1.4952,
             -0.3296, -0.1603],
            [ 0.3400,  0.6861, -0.5142,  0.1568,  0.5940, -1.1724,  0.1644,  0.1781,
             -0.5786,  0.2667]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.573 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
