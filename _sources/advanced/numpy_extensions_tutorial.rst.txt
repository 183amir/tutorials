.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.2336, 15.4395, 11.8961,  7.9366,  7.8174],
            [14.9139,  9.2703,  6.7474,  5.2567,  7.3969],
            [ 5.3162,  6.1637, 11.9989, 13.3840,  3.0417],
            [ 2.2848,  9.1252, 10.5175, 14.0177, 10.0526],
            [15.4109,  9.1342,  1.9394, 13.3467,  2.8317],
            [ 2.2848,  3.7967, 10.1406, 11.9338, 10.0526],
            [ 5.3162, 10.8162,  1.5706,  5.9858,  3.0417],
            [14.9139,  4.8539,  0.6320,  4.9452,  7.3969]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2319,  0.7192,  0.3626, -0.1813, -0.0660, -1.0875,  2.0287,  0.1331],
            [-0.8981,  0.8615,  0.2403, -0.6466,  2.2273,  0.9891,  1.4520,  1.4194],
            [ 0.6255,  0.7277,  0.0473, -0.6993, -0.7683, -1.5935,  0.8114, -1.1204],
            [ 0.4503,  0.1636, -0.5081,  1.7169, -1.3482, -2.0845, -0.9779,  0.6549],
            [-0.5743, -1.9388,  0.9927, -1.1073, -2.6396,  0.8733, -0.2034,  0.6364],
            [-0.9945,  1.5400, -0.4364, -0.9083,  0.6222, -0.9459,  2.9524,  0.1489],
            [ 1.3883, -0.4658, -1.4673, -1.0331, -1.4874, -0.1046,  0.0857,  1.2854],
            [-0.0071,  0.4589,  1.7268,  0.0859, -0.0770,  0.3010,  2.2337,  0.4099]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2355, -1.7410,  1.4331],
            [ 0.8835,  0.3299, -2.1149],
            [-0.1142, -0.4475,  0.0674]], requires_grad=True), Parameter containing:
    tensor([[-0.1322]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.9880e+00, -5.4483e-01, -1.1191e+00, -4.7912e+00, -2.5244e+00,
              1.7163e+00,  4.7853e+00, -8.1727e+00],
            [-3.2938e-01, -9.1126e-01,  1.8586e+00, -4.5228e-01,  9.4232e-02,
             -1.2880e+00,  6.1853e-01, -1.4132e+00],
            [ 4.2047e-01,  4.7743e+00, -5.1491e+00,  5.2941e+00, -2.0352e+00,
              2.5076e+00,  6.3083e-01,  3.4401e+00],
            [-1.0078e+00,  7.8210e-01,  5.7707e+00, -4.0479e-01,  2.2630e+00,
             -1.0096e+01, -2.1638e-01,  2.5952e+00],
            [ 3.9424e+00, -2.3009e-02, -5.4778e+00, -1.3309e+00, -9.1756e-01,
              5.9582e+00,  4.1524e-01, -2.4562e+00],
            [ 7.8534e-01,  8.9714e-02, -3.5453e+00,  1.9605e+00,  9.1039e-02,
             -3.9564e+00, -5.7465e+00, -5.4752e-01],
            [ 2.4141e-01, -2.3469e-01,  2.0970e+00, -4.6506e+00, -3.7034e-03,
             -7.0492e-01,  5.5887e-01, -4.1427e+00],
            [ 3.1793e+00, -3.0248e+00,  2.7903e+00, -1.4551e+00, -2.6296e+00,
             -4.9327e+00,  5.6718e-02,  3.9519e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.6263e-03,  1.7856e-02,  2.7426e-02,  2.3149e+00,  1.6914e+00,
             -2.0458e+00,  4.5143e-01, -1.7805e-01, -4.6303e-01,  9.1262e-02],
            [ 3.5405e-01,  2.9066e+00, -2.8939e+00, -4.0341e+00,  8.0312e-01,
              4.6424e+00,  4.1202e-01,  1.0304e+00,  4.3676e+00, -3.2032e+00],
            [-8.9887e-01,  2.8645e+00, -1.2313e-01,  3.6854e+00,  4.7118e-01,
             -3.6177e+00,  3.0095e+00, -5.4004e+00, -2.2532e+00,  6.6540e+00],
            [-1.3953e+00,  2.8207e+00,  1.1231e+00, -2.7689e+00,  2.0525e+00,
             -2.2173e+00,  7.3456e-01,  3.4250e+00, -4.3614e-01, -2.2867e+00],
            [-1.0539e+00,  4.5263e-01,  4.3276e+00, -3.4630e+00, -8.3470e-01,
              1.9864e+00, -2.9148e+00,  3.9001e+00, -4.4645e+00, -6.1585e-01],
            [ 3.3484e-01, -1.0736e+00, -6.7678e-01,  5.1290e+00, -4.2421e+00,
              2.1552e+00, -4.2508e+00, -4.2383e+00,  4.5524e+00, -1.5981e+00],
            [ 6.3625e-01,  7.7534e-01, -4.4307e+00,  9.9078e-01,  3.6125e+00,
             -2.7743e+00, -2.2705e-01,  8.5366e-01, -5.5000e+00,  2.9601e+00],
            [-5.8872e-01, -2.2123e+00,  3.8843e+00, -2.0089e+00, -2.2602e+00,
              4.7067e+00,  9.1527e-01, -5.1832e+00, -3.0394e-01, -8.0570e-01],
            [ 1.4364e+00, -2.3208e-01, -4.9749e+00,  2.4238e+00,  3.1560e+00,
             -1.3931e+00, -6.7412e-02,  1.9133e+00, -2.8035e+00, -3.3565e+00],
            [-1.8354e-01, -6.2677e-01,  5.9309e-01,  3.5203e-01, -3.7726e-01,
             -4.1401e-02, -1.0693e-01, -7.5788e-01, -6.4576e-01,  1.1020e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.569 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
