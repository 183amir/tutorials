.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.9385, 10.4041,  6.6610,  4.9890,  6.0407],
            [ 9.2943,  1.8011,  6.8369,  3.8133,  8.0813],
            [ 8.5684,  5.6504,  5.4360, 14.8496,  8.8079],
            [ 6.9486, 10.7125,  3.1066,  7.4251,  5.2779],
            [ 6.1466,  6.7481,  5.0700,  4.0396,  2.6927],
            [ 6.9486,  5.6331,  2.2915,  9.4098,  5.2779],
            [ 8.5684,  4.1586,  9.6546, 15.7617,  8.8079],
            [ 9.2943,  7.1603, 11.6525,  1.6671,  8.0813]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5382, -0.2423,  0.6457,  0.2498, -1.3191,  0.7735, -1.9982,  0.2085],
            [-1.4851, -0.9437,  0.1272,  0.8209,  0.1971, -0.4065,  0.4942, -1.1441],
            [-0.9776,  1.3055,  0.8886,  0.4435,  0.5147, -1.0599,  0.0812, -1.5979],
            [-0.6881, -0.1968, -2.3589,  0.0897, -0.6352, -0.5146, -0.1456, -0.6068],
            [ 2.4366, -0.2947,  0.0957, -0.4848,  1.0103,  1.3661, -0.9362, -0.3699],
            [ 0.5981,  0.9622,  1.1531,  0.0519,  1.2028,  1.1703, -0.3718, -0.8146],
            [-0.4880,  1.7267, -1.5232,  0.6729, -0.7140, -0.3497,  1.4604, -0.9583],
            [-1.5805,  0.5805,  0.6899,  0.4896, -0.6389, -0.0534, -1.2631,  0.1776]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2465,  0.1138,  0.1281],
            [ 0.3700,  0.7619, -2.1120],
            [ 0.5968, -0.4211, -0.9485]], requires_grad=True), Parameter containing:
    tensor([[-0.6098]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.8828, -4.0176, -3.7494,  6.0671, -1.3427,  4.6785, -2.4626, -6.1463],
            [ 2.4459, -2.6132, -2.9305, -0.5439,  3.1283, -1.0697, -4.9803, -4.0284],
            [ 3.1739, -3.0275, -1.3158, -0.4150, -2.1238, -2.0624, -4.6772,  3.4330],
            [ 1.0424, -1.5687, -0.2032, -2.9214,  1.7058, -1.3557,  0.4328,  1.0516],
            [-0.0495, -0.9828, -5.5308, -0.8109,  0.8584,  0.3968,  1.9059, -3.9568],
            [-2.9549, -0.1031, -4.4328, -2.7169,  0.0858,  4.9513,  0.2459,  0.1155],
            [-0.4303,  0.5732, -4.8197, -2.1085, -0.3321,  2.5678,  1.5536, -0.2012],
            [ 0.1681, -3.7830, -2.7597,  0.5903, -3.1918,  0.0213,  1.1749, -1.9534]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1405e-01,  1.6321e-01, -2.9072e-01, -2.2500e-01,  5.3254e-01,
             -2.2005e-01,  9.8273e-02, -2.0344e-02,  3.3806e-03,  6.0285e-02],
            [ 3.3899e-03,  4.5546e-01, -1.2920e+00,  2.6511e+00, -1.6578e+00,
             -2.9192e+00,  2.7600e+00, -2.7373e+00,  1.0791e+00, -9.6201e-01],
            [ 3.1679e-01,  9.2256e-02, -9.7134e-01,  3.6000e+00, -6.6778e+00,
              1.0698e+00,  1.6105e-01,  3.7681e-01,  2.7294e+00, -9.1877e-01],
            [ 1.0295e+00, -1.0496e+00, -1.7944e+00,  1.2718e+00, -3.8545e+00,
              2.1770e+00,  1.5500e+00,  7.3119e+00, -1.4286e-01, -9.1251e-01],
            [ 5.0523e-01, -1.4009e+00,  3.6848e+00, -4.5874e+00, -1.7038e+00,
              1.9085e+00,  4.8064e+00,  2.6127e+00, -3.1172e+00, -3.3698e+00],
            [-1.1287e+00,  7.0587e-01,  4.1380e+00, -1.0088e+00,  7.3153e-01,
             -4.2919e+00, -1.6316e+00,  3.5144e+00, -5.4962e+00, -6.7780e-01],
            [-1.3542e+00, -1.0269e+00,  3.0445e+00,  5.9865e+00, -4.3094e+00,
              1.4146e+00, -1.4219e+00,  9.0218e-01, -1.8917e+00, -1.9035e-01],
            [-7.6745e-01, -1.4580e+00,  4.6428e+00, -3.8050e-01, -5.0081e-01,
              2.5975e+00, -1.2989e+00,  1.7087e+00, -1.3950e+00, -1.6191e+00],
            [-8.0791e-01,  1.6965e-01,  3.3841e+00, -2.4716e+00, -1.1577e+00,
              1.4263e+00,  6.4473e-01,  3.1683e-01,  1.7158e+00, -4.1982e+00],
            [-5.6304e-01,  8.4383e-01,  7.8791e-01, -1.2761e+00, -1.4108e-01,
              8.8085e-01, -3.4201e-01,  1.0556e+00, -4.0087e-02, -1.5670e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.525 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
