.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.4452,  1.4769,  4.4473,  8.5307,  8.5797],
            [ 2.0036,  4.0406,  6.0376,  3.5668, 10.0870],
            [ 9.3652,  2.1091,  4.8373, 11.9901,  7.2080],
            [ 4.4561, 14.2403,  8.1071,  4.5513,  7.8876],
            [ 3.0184, 16.6115, 15.1596,  8.1604, 20.5968],
            [ 4.4561,  8.0068,  4.5621, 12.4703,  7.8876],
            [ 9.3652,  8.9362, 15.3153, 11.5168,  7.2080],
            [ 2.0036, 11.1637,  9.1671, 10.4601, 10.0870]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 3.2264e-02,  1.9927e+00, -1.0446e+00, -6.6906e-01,  1.2215e+00,
             -1.6636e-01, -8.1013e-01, -1.0375e+00],
            [ 2.8321e-01, -2.7735e-01,  2.0479e+00, -1.3130e+00,  1.1755e+00,
              6.6106e-01, -1.4229e+00,  7.9352e-01],
            [-2.4970e-01, -2.5582e-01,  4.4391e-01, -6.2813e-03, -5.3316e-02,
              1.9419e+00,  3.2091e-01,  7.6007e-01],
            [-6.3744e-01,  9.0816e-03,  1.8199e+00,  2.3200e+00, -8.3481e-01,
             -2.1548e+00, -9.6661e-01,  3.4430e-01],
            [-9.9674e-03, -1.9338e+00, -2.3979e+00, -5.4146e-01,  4.9130e-01,
              1.3846e+00, -2.9251e-01,  1.4076e+00],
            [ 1.7324e+00, -1.3106e+00,  2.8152e+00, -1.0574e+00,  3.3879e-01,
              5.4791e-01,  1.3387e+00, -6.2525e-01],
            [ 4.8078e-01,  1.1860e+00, -1.0770e+00, -1.8237e+00,  5.4539e-01,
             -1.4527e-01,  1.6006e-03,  1.5175e+00],
            [ 9.2029e-01, -1.3699e+00,  5.1762e-03,  1.0174e+00,  5.8018e-02,
             -1.8892e+00,  7.3676e-01, -8.7396e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-2.0456e-01,  6.0017e-01, -3.2684e-02],
            [ 4.6954e-01,  1.3849e+00,  7.8611e-01],
            [ 2.2572e+00, -2.8850e-02, -1.1080e-03]], requires_grad=True), Parameter containing:
    tensor([[-0.1958]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.5446, -2.0116, -0.2024,  3.3961,  1.5615,  6.6543,  1.4824, -4.0802],
            [-3.9637, -2.7162,  1.9146,  3.0950, -0.1570, -1.1639, -3.3158,  1.2507],
            [ 0.7389, -0.2278,  0.6335, -0.4222,  3.1479, -1.3622, -0.8085,  4.9268],
            [-0.0528, -1.5321,  2.8595, -1.9460, -1.0812, -1.2315,  1.9007,  5.1093],
            [ 1.0183,  0.7661, -2.9040,  2.7501,  0.3959,  0.0987,  4.5353,  2.9875],
            [ 0.2841,  1.5015,  0.4559, -1.6496,  0.9332,  1.2221,  4.4506,  0.3654],
            [-0.8275, -5.2975,  0.5086,  1.5906,  0.7739,  0.9160,  1.9761,  0.8910],
            [ 2.1480,  2.2880, -0.3779, -1.2868,  4.3973,  2.2668, -1.3320,  1.2499]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.3161e-01, -1.0300e+00, -8.3545e-01,  7.9464e-01, -9.5638e-01,
              1.5312e+00,  5.1936e-02, -3.4130e-01,  8.4788e-02, -3.6777e-03],
            [-9.6212e-01, -3.4939e+00, -2.7969e+00, -6.5710e-02,  7.4542e-01,
              3.1942e+00,  1.1229e+00, -1.8755e-01, -8.2934e-02,  7.7384e-02],
            [-4.7603e+00, -2.9209e+00,  1.2645e+00, -3.0548e+00,  3.9071e+00,
             -1.9118e-01, -2.5061e+00,  9.6665e-01,  1.4001e+00,  2.5042e-01],
            [-2.1193e-01, -2.3163e+00, -2.2622e+00, -3.3643e+00, -8.1406e-01,
             -9.5262e-01,  1.4287e+00, -1.6373e-01,  1.7763e+00,  3.2828e-01],
            [-9.5000e-01, -3.8893e+00, -1.7347e+00, -1.6990e+00,  2.9029e+00,
             -5.4264e-01,  2.6437e+00,  6.2402e-01,  1.9198e+00,  1.1780e+00],
            [-3.6849e+00, -1.5245e+00, -4.8059e+00,  4.5870e-01,  1.9552e+00,
             -1.5858e-01,  1.8015e+00,  7.4968e+00,  2.0418e+00,  6.4471e-01],
            [-4.3034e+00, -3.7165e+00, -8.1948e-01,  1.0603e+00, -1.8833e+00,
              8.2604e+00,  1.6148e+00,  2.6992e+00,  1.5647e+00,  3.5216e-01],
            [-1.2892e+00, -1.4990e+00,  1.9611e+00,  2.8011e+00,  3.2889e+00,
             -7.0200e-02, -7.1574e-01,  2.2091e+00,  2.3586e+00,  9.1560e-01],
            [-2.7240e+00,  1.2662e+00,  3.7989e+00,  2.7408e+00,  1.3461e+00,
             -3.6277e+00, -1.4716e-01,  2.1093e+00,  4.3061e-01,  1.5563e-01],
            [-1.1811e+00,  9.5018e-01,  3.2752e+00, -5.9884e-01, -1.2818e+00,
             -2.6944e+00,  5.7770e-01,  4.4500e-01, -6.0256e-03, -2.2118e-04]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.473 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
