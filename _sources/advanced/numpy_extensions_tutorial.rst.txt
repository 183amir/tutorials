.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.6326, 10.3696,  4.8548, 11.1369,  2.8397],
            [ 9.8712,  5.7130,  5.1070, 11.8191, 12.2766],
            [11.4188, 11.8536,  2.3106,  6.3185,  9.0728],
            [ 4.2687, 10.5880, 10.6521,  8.7736,  8.7051],
            [ 1.9955, 18.4853,  2.5325,  9.9877,  4.0196],
            [ 4.2687,  5.1575, 10.9781,  8.2828,  8.7051],
            [11.4188,  4.0337,  9.4854,  2.3500,  9.0728],
            [ 9.8712,  4.1011, 12.3697,  9.7742, 12.2766]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2256,  1.8033, -1.2293, -0.5291, -1.3558,  0.3122, -1.7167,  1.5300],
            [-2.4578, -0.5854,  1.4505, -1.7019,  0.7446,  0.6907,  0.0409,  0.1373],
            [ 1.4260, -0.9413,  1.7235,  0.9212, -0.1345, -0.1815,  0.5084,  0.4772],
            [ 1.8829, -0.1124,  2.1927,  1.1395,  1.7417, -1.4166, -0.7258,  1.2444],
            [ 1.2098,  0.3544, -0.2748, -0.7013, -1.0656, -0.9036,  0.9716, -0.3206],
            [ 0.0322, -1.8425, -0.1783,  2.3788, -0.8374,  0.3684, -1.8397, -1.3015],
            [ 1.4589,  0.3435,  0.3317,  0.4255, -1.0352, -1.0080, -0.9318,  0.1200],
            [-0.3944, -0.1148,  0.6687, -1.2223,  0.2575,  1.2584, -0.4542, -0.2255]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5791, -0.6387, -0.8820],
            [-0.6401,  0.9621, -1.2624],
            [ 0.0165, -0.4975,  1.2821]], requires_grad=True), Parameter containing:
    tensor([[-0.8843]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9651,  0.1040,  2.1117,  3.4812, -1.9703, -2.0950,  1.5723,  0.6918],
            [ 0.3611, -0.9826,  1.4646, -1.8439,  0.4802, -1.9252, -7.6180,  4.4647],
            [-4.4840,  0.7995, -0.8426, -1.0378, -2.9574,  2.7568, -3.6822, -4.1307],
            [ 1.4755, -6.0654,  3.7685,  1.7559,  0.1395, -1.9090,  3.6801,  0.7694],
            [-3.9552,  0.9965, -0.9959,  0.5145, -0.8543,  3.9977, -3.0570, -2.3291],
            [-1.0496, -1.3751,  0.8513, -0.1018, -3.0956, -2.7035, -1.4800,  0.1960],
            [ 2.1081,  2.6662, -3.5162, -2.2706,  1.6793, -3.7546,  3.6139, -1.1409],
            [-0.2700, -4.1730,  7.1428, -5.7851, -1.0881, -0.7077,  1.9275,  0.3511]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.8787e-01,  2.6906e-01, -2.5909e-01, -1.1997e+00, -7.2033e-01,
              7.4234e-01,  9.7540e-01,  9.0685e-01,  9.9142e-02,  9.1310e-01],
            [ 3.4500e-01, -1.4455e+00, -6.3155e-01,  4.2548e-01, -1.1801e-01,
             -4.6422e-03, -8.0877e-01,  1.6247e+00, -1.9091e+00,  1.0702e+00],
            [ 8.1132e-01,  5.1921e-01,  5.3838e-01, -1.1712e+00, -2.6398e+00,
              1.4657e+00, -1.3112e+00, -1.9317e+00,  1.7326e+00, -1.4191e+00],
            [ 1.5871e+00, -1.5820e+00,  3.3683e+00, -4.4444e-01,  5.1036e+00,
             -9.0802e-01,  1.8703e+00,  3.2370e+00,  1.3080e+00,  1.4756e-01],
            [ 1.0482e+00,  4.5349e-01,  1.3262e+00,  3.2004e+00,  9.6105e-01,
              2.2988e+00,  4.1848e+00, -4.8810e+00,  3.6876e+00, -1.5731e+00],
            [ 1.7333e-01, -6.6417e-02,  2.3536e-01,  1.4971e+00,  8.1611e-01,
              4.5195e-02, -1.4639e+00,  1.0270e+00, -4.2215e+00,  1.5160e-01],
            [-1.1052e+00, -3.0597e-01, -2.2601e+00, -3.5261e+00,  1.1070e+00,
             -2.9951e+00, -2.0930e+00,  3.1577e+00, -1.0327e+00, -7.6419e-02],
            [-5.0534e-01,  2.7126e-01, -8.1295e-01, -1.6449e+00, -1.2366e+00,
              2.5851e+00,  5.8028e-01, -2.0572e+00,  1.3068e+00, -3.6440e-02],
            [ 3.8772e-01, -1.9037e+00,  2.9213e+00, -2.1301e-01,  1.2166e+00,
             -2.7908e+00,  5.8708e+00, -2.2731e+00, -9.6491e-01,  2.1032e+00],
            [-9.4134e-03,  3.0266e-01, -1.2788e+00,  1.2617e+00,  4.1277e-01,
              1.2328e+00, -4.2121e+00,  1.8366e+00,  6.1387e-01, -1.1929e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.513 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
