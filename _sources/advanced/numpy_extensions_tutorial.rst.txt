.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.1402,  9.9830, 15.3667,  2.8504,  1.0915],
            [ 3.2107,  8.9705,  6.7120,  7.8372, 14.4453],
            [ 6.2431,  6.5241,  8.2764,  7.9803,  3.8765],
            [ 7.6602, 11.9637,  1.2417,  6.3475,  7.1023],
            [ 5.3988,  1.0164, 11.1166,  5.3571,  9.3183],
            [ 7.6602,  5.7023, 10.2814,  2.4170,  7.1023],
            [ 6.2431, 13.1489,  8.8124,  5.7042,  3.8765],
            [ 3.2107,  4.7932,  1.6872,  2.4510, 14.4453]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3716,  0.6360,  0.4100,  0.3374,  0.8636,  2.6697, -0.1131, -1.4675],
            [ 1.5380,  0.6637, -0.2134, -1.2125,  0.1857,  0.0959, -0.9974,  0.4591],
            [-0.2944, -0.5140,  0.5688, -1.6833,  0.0142,  0.5137,  0.0814, -1.4034],
            [-0.8502, -0.2651,  0.5998, -0.6794,  2.7218,  0.0193,  1.0626, -1.1736],
            [-0.9042, -0.1835, -2.2277,  0.1334,  0.4521,  0.5022,  0.3139, -0.1467],
            [ 0.1036,  0.0484, -0.0272, -0.5529,  1.6644,  1.2272, -1.2262, -0.4782],
            [-1.5330,  1.2711,  0.8715,  0.4492, -2.4410, -0.4663, -0.4278, -0.1803],
            [-0.4966,  0.6388, -0.9715,  0.5585,  0.0803,  0.1026, -0.5524, -0.9439]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0294, -1.7274, -0.1096],
            [ 2.4963, -0.8540, -0.5863],
            [-0.4005,  1.5968,  1.4599]], requires_grad=True), Parameter containing:
    tensor([[-0.7069]], requires_grad=True)]
    Output from the convolution:  tensor([[ -1.3121,  -3.6889,  -8.7804,  -0.3535,   2.7055,  -0.1022,   5.6465,
              -4.7631],
            [ -2.9384,  -1.2167,  -1.6461,  -3.9826, -12.4035,  -4.0316,   1.5367,
               4.0303],
            [  5.8098,   3.9359,   0.6770,   2.9021,   2.3775,  -3.6418,  -6.9663,
               2.8088],
            [ -9.8459,  -6.3941,   2.9751,  -0.8215,   0.4909,   2.7673,  -0.6011,
              -6.0737],
            [  0.1875,  -2.6002, -12.3490,  -7.6245,   3.1988,  -4.0573,   0.7795,
               0.7489],
            [  0.7802,   2.0872,   2.7538,  -0.5192,  -5.7375,  -5.5557,  -0.4218,
              -3.0746],
            [ -5.0801,  -2.6105,  -4.4171,   3.2451,   6.5463,  -3.9785,  -5.1782,
              -5.1447],
            [ -0.5069,  -2.5000,   0.4366, -10.1519,   2.8742,   6.6980,   1.7033,
               2.1634]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7807, -2.1446, -2.4937, -2.5378,  0.1788,  2.8943,  0.0195, -1.5684,
             -0.6112, -0.0336],
            [ 1.4543,  1.6930,  2.2164, -0.5936, -4.5433,  1.9283,  7.4804,  2.4211,
             -2.3690, -0.2977],
            [ 0.6259, -2.1529,  5.5356,  4.4658,  5.9135, -2.0532, -5.4993,  5.0516,
             -1.0611, -0.3634],
            [ 0.0899,  0.1511, -3.8589, -1.9811, -1.3411,  1.5378, -3.0527,  0.3626,
             -0.4345,  0.7021],
            [ 0.0664,  0.7079, -2.1204, -4.4249, -2.1837, -3.5165, -3.1709, -2.6014,
              4.2387,  2.9686],
            [-0.0898,  0.7521,  1.7983,  1.7496, -3.0732, -3.1157, -1.7480, -5.0933,
             -1.2233, -0.5772],
            [ 0.9501,  0.9161,  2.5911, -0.7379,  4.7546,  1.3853,  1.3863,  0.3317,
             -1.7971, -1.5529],
            [-1.4752,  0.4662, -2.4497,  3.6881, -2.4636, -2.3506,  2.6474,  3.5280,
              2.9322,  0.3456],
            [ 0.3154,  0.0280, -0.3764,  0.2916,  1.8201,  0.4957,  0.7860, -1.1320,
             -0.6018, -0.1663],
            [-0.0153, -0.0964,  0.6390,  0.3949,  1.1812,  3.0062,  0.9342, -0.2497,
             -0.3939, -0.4307]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.517 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
