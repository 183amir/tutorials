.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.4080,  7.1111,  7.6310,  4.4345,  3.6465],
            [15.7752, 16.2228, 12.6400,  1.5527,  5.4677],
            [ 3.8240,  2.7519,  8.0044,  4.7076,  2.7901],
            [ 2.6545,  7.5163,  4.8928,  5.8462, 13.0017],
            [ 5.3045,  5.7794,  4.8556,  7.0233, 12.5576],
            [ 2.6545,  6.5576,  1.0359,  3.3245, 13.0017],
            [ 3.8240,  9.5578,  9.7614, 11.6339,  2.7901],
            [15.7752,  5.2534,  4.2238,  3.9290,  5.4677]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1851, -0.9950, -1.2293,  0.5031, -1.4649, -0.1484, -0.2256,  0.9909],
            [-0.8244, -1.8040, -0.4514,  0.7439, -0.4047, -0.6107, -1.7358, -0.2694],
            [-0.0921, -0.1043, -0.3773,  1.0073,  0.2522, -1.6965, -0.6209, -1.5014],
            [-0.0771, -0.1488,  0.5752, -0.1849,  0.4023,  0.0580, -0.3194,  0.7857],
            [ 0.4744, -0.9096,  1.0341,  1.5333, -0.7370, -0.0267,  1.6623,  1.0649],
            [ 1.2826, -0.3567,  0.7617, -0.5965, -1.2206,  0.0597,  1.9516, -0.5399],
            [ 0.1340,  1.0935, -1.2052, -0.3143, -0.1170,  0.9927,  0.4438,  0.7121],
            [-1.3778, -1.6657, -0.5531, -1.8371,  1.8080,  0.5864,  1.5559, -0.9491]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3041, -3.2383,  2.5978],
            [ 1.2337,  0.0984, -1.7193],
            [-1.4226, -0.6546,  1.0515]], requires_grad=True), Parameter containing:
    tensor([[-0.3573]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0016,  0.8364, -0.0297, -1.6214, -2.4329, -1.8976, -2.9792, -2.5235],
            [-0.8733, -6.1096,  0.3497,  7.6958, -5.6660,  2.3080,  6.4663, -1.1267],
            [10.3009,  4.6804, -9.5404, -2.6151,  6.2102, -4.4612, -3.2006,  7.9759],
            [ 1.8389,  0.5745, -0.8259,  0.2864, -2.9245,  5.5040,  2.5885, -6.4721],
            [-3.2359, -0.5484,  1.8620,  0.5215, -0.3411, -3.4216,  0.5743,  6.3689],
            [ 7.0769, -8.8560, -3.3789,  1.2118,  3.6602,  0.7181, -4.0274, -4.8522],
            [-1.2748,  0.4585,  5.7210, -6.9142,  4.2713, -7.3673, -2.9915,  7.4609],
            [-9.4176,  0.5637,  0.9476,  7.2929, -6.2937,  2.0169, -3.3680, -5.1645]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1689, -1.7959,  1.4793, -1.1515,  5.9078, -0.7226, -6.8600,  3.9252,
             -3.1488,  2.2406],
            [ 0.4330,  2.7087, -2.3680, -3.8346,  2.8652,  1.1662, -1.9170,  0.3210,
              0.5281, -0.1645],
            [-1.9334,  0.5781,  2.0982,  0.7506,  0.4531,  2.4661, -6.6021,  1.4637,
              1.7298, -1.7721],
            [ 0.5721,  1.6794, -3.0623, -0.2888,  3.1389, -1.0451, -2.5405, -2.9088,
             -2.6970,  4.1440],
            [ 0.0262,  2.2810,  0.5821, -3.2297, -0.3970, -2.9612, -2.8753,  4.5153,
              4.3357, -5.8108],
            [-0.1849,  5.0030, -8.3469,  2.8514,  1.7315, -2.1292, -4.2921, -5.2385,
              4.4763,  1.9403],
            [-1.4099, -0.3617,  3.8135, -8.0674,  1.5145,  0.4761,  6.6470,  2.8211,
             -2.2359, -2.6732],
            [ 2.0575,  0.5596,  0.4786,  6.7652, -1.8194, -5.3267, -9.0630,  7.4724,
              1.3948,  0.7595],
            [-1.2835, -0.1871, -0.2116, -0.5828,  1.5945,  3.1823,  1.8944, -1.0177,
              0.7681, -0.7904],
            [ 1.1659,  2.2326,  1.7391, -0.0136, -1.5215, -2.1529,  0.9021,  1.9654,
             -1.0134, -0.0493]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.348 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
