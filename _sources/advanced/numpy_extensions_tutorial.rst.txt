.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.2154,  6.9588,  3.1940,  8.8381,  4.2651],
            [ 8.7089,  9.4726,  1.3462,  4.9510, 10.3298],
            [ 7.8217,  7.2756,  4.2896,  6.6521,  7.6702],
            [ 9.0553,  1.4096, 12.8919,  8.2287, 12.7947],
            [ 2.6554,  6.8214,  7.9716,  9.2046,  3.0018],
            [ 9.0553,  4.6909,  8.3360,  1.7693, 12.7947],
            [ 7.8217,  3.6802,  5.9022,  9.7545,  7.6702],
            [ 8.7089,  4.7714, 13.0976, 18.9387, 10.3298]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5586, -0.4533, -1.5310,  0.7629,  0.7598, -0.7229,  0.8868, -0.6230],
            [-1.6351,  0.6529,  0.1567, -0.4090,  0.3363, -1.3160,  0.1318,  0.3789],
            [-0.8248,  1.2736, -1.4907, -0.9862,  1.8263,  0.2312, -1.7958,  1.3722],
            [ 0.3447,  0.9322,  1.1282, -0.3022,  2.2349,  1.2994,  1.0844,  0.4323],
            [-1.5944, -0.1413,  0.2927,  0.2204, -1.2366,  2.8557,  0.1442,  0.0978],
            [-1.4350,  0.5338,  0.5741,  0.3935,  0.6115,  0.8741, -1.8080, -0.1318],
            [ 0.5859, -2.0524,  1.1116,  0.2481,  0.1733,  0.5137, -0.2926, -0.3894],
            [-0.4887,  0.0298,  0.7991, -0.8234, -1.2117, -0.7932,  0.5788,  0.2822]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7222,  1.0467, -0.1122],
            [ 1.2349,  0.9557,  0.5704],
            [ 0.1011,  0.7930, -1.2496]], requires_grad=True), Parameter containing:
    tensor([[1.7211]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.6000, -1.9897,  4.1736,  2.1906,  0.6927,  0.4487,  0.2833, -1.2629],
            [-1.9164, -0.4419,  0.2847,  0.9319, -0.9386, -2.8760,  1.6081,  0.6932],
            [ 2.6833,  3.6363,  3.8331,  2.4364,  2.2771,  3.8868,  5.6461,  5.8249],
            [-1.7150,  4.9118,  2.8218,  4.9552,  2.5104,  2.0910,  3.9804, -2.8587],
            [-1.8383,  1.6694,  3.0854,  3.0186, -2.1295,  0.4303,  2.9430,  0.0971],
            [ 5.8597,  6.1787,  2.1360,  1.4102, -5.6262,  2.5014, -2.1055,  0.1192],
            [-1.9936,  0.6840, -0.5978, -2.0215, -2.4072,  6.0278,  2.6597, -2.1644],
            [ 0.8895,  3.6104,  3.2781,  0.4832,  2.2074,  5.0030, -0.4931,  2.9050]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4240,  0.6698, -1.1635,  1.1094,  1.9699, -1.3387, -1.7996,  1.9728,
             -1.5206,  0.1535],
            [ 0.4221,  1.3090,  0.9906,  2.4303, -1.3025, -3.7418, -1.9869, -0.9600,
             -0.7929, -0.7979],
            [ 0.0763,  1.4359, -1.5476,  1.8324, -0.3672, -3.3198,  4.8149,  3.6921,
             -2.6079,  1.9308],
            [ 1.4824, -0.3947, -1.7751,  2.6327,  2.3234,  0.3128, -0.4131, -0.6959,
             -1.5410, -0.9580],
            [-0.1551, -1.9378, -2.5601,  3.1790,  0.7265, -4.8710, -2.0980, -2.0296,
              0.6020,  1.9424],
            [-1.1973, -3.4134,  2.7111,  6.4822, -4.2714, -4.2748, -1.7864, -1.2872,
             -0.9467, -0.9607],
            [-0.2305,  1.3076,  0.6079,  0.4457, -2.6144, -4.8527, -3.0544, -2.0889,
             -1.1872, -0.3468],
            [ 0.5242, -5.1782,  3.5268, -0.6210, -3.5194,  4.6069, -3.4030, -2.9382,
              2.1533,  0.8271],
            [-1.6451,  1.0530,  0.4930,  1.6352, -1.9246, -1.7955, -3.0619, -0.4227,
              0.4743,  0.5422],
            [-0.1320, -0.8146,  3.3553, -3.0077, -1.1293,  2.4662, -1.6269,  0.4557,
              1.8293, -0.7098]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.528 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
