.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.4163,  8.0768,  7.3685, 11.4462, 10.9671],
            [ 7.2637,  6.1785, 16.7214,  5.8320, 10.7727],
            [ 5.1096,  4.9844, 13.2715, 10.7962,  8.1668],
            [ 2.3857,  9.9129,  4.2111,  3.3511,  6.9774],
            [ 4.0994, 11.8503,  8.0710,  6.0887, 17.6038],
            [ 2.3857,  1.4944,  8.3093,  8.0086,  6.9774],
            [ 5.1096,  2.4242,  3.9844,  9.4960,  8.1668],
            [ 7.2637,  5.6605,  1.9035,  1.5313, 10.7727]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1587,  1.3822, -1.1118, -0.0311, -1.6223, -0.3322,  0.5267, -1.2426],
            [ 0.5551, -0.8936,  0.8223, -2.0278,  0.2710,  0.2413, -0.3544, -1.0482],
            [ 0.3406,  0.7305, -0.1223,  0.0265,  0.0334,  0.3420,  0.0722,  0.5177],
            [-0.2227,  0.8576, -0.7607, -0.7641,  1.0762,  0.8930,  0.5794, -1.7592],
            [ 0.9053,  1.6475, -2.0946,  1.5048, -2.3930,  0.5471,  0.0364,  0.5847],
            [ 0.8747,  0.0911, -1.5848,  0.3278,  1.8767,  0.4580, -0.6456,  0.0628],
            [ 0.3595,  0.8069,  1.1461,  1.4225, -1.7079, -1.0849, -0.6818,  0.9921],
            [-0.4733,  0.3903, -0.1675,  0.3449, -2.6782, -0.0073,  1.1121, -0.2049]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4070,  1.1483, -0.6980],
            [-1.2782, -1.2770, -0.9387],
            [-0.4213, -0.2034,  0.0196]], requires_grad=True), Parameter containing:
    tensor([[-0.2509]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2839,  1.8622,  0.1534,  1.8041, -1.6624,  0.0076,  6.2833,  2.5816],
            [ 3.3614, -0.3114, -0.6164, -1.5437,  1.5158, -3.8664, -1.5902, -4.3610],
            [ 3.1401, -3.0839, -1.7181, -4.1375, -1.9250, -4.2998, -2.7449,  0.8768],
            [ 4.1711,  0.9713, -0.0688, -0.9811, -0.0148, -1.1052, -1.5797, -1.8853],
            [ 5.3505,  1.9859,  1.7430, -1.4532, -1.4222,  0.0573,  0.2068, -2.0380],
            [-3.0384, -3.4758, -0.6909, -3.3182, -4.8264, -0.2305,  5.1168,  0.8526],
            [-2.6806,  1.4313, -1.0478,  1.6581,  0.7601,  0.1375,  0.1377, -2.5209],
            [-2.1046,  4.1047,  0.5831,  2.6832, -0.5434, -1.6757,  1.9150,  1.2737]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7234,  1.9451, -0.9186, -0.3055,  0.1305, -0.0122,  0.2094, -1.0271,
              0.4805,  0.2175],
            [-3.1449, -0.5072, -2.8414,  0.7945, -0.5025,  1.0400,  2.9705,  0.9612,
              2.0722, -0.1167],
            [-3.7905, -3.2344, -5.9387, -5.5750, -4.8167, -2.0589, -4.8965, -2.2960,
             -1.1729, -0.1215],
            [-1.7842, -0.3561,  1.7743,  4.7402,  0.4291, -0.5582,  1.0039, -0.7792,
              3.7219, -0.3864],
            [-0.1079,  1.1544,  5.3731,  3.2618, -1.1875, -0.2086,  0.3302, -2.2418,
              2.0198, -2.4678],
            [ 0.4034, -1.9019, -1.0873, -0.0639,  4.1566,  1.5762,  1.5226,  0.1398,
             -1.2311, -1.9835],
            [ 0.5445,  2.0933,  3.7911,  1.0273,  1.9475, -2.2377, -0.1846, -0.3720,
             -3.3041, -0.4534],
            [-1.0470, -2.8528, -1.2975, -3.4453, -0.4663, -0.8561, -0.4680, -3.6842,
             -0.9022,  0.6033],
            [-0.4974, -2.1893, -2.7257, -3.6878, -1.7767, -1.2630,  0.4298,  1.7095,
              1.9498,  0.4833],
            [-0.0176, -0.4668, -0.5354, -0.5161, -0.1774, -0.1650,  0.4555,  0.4892,
              0.0805, -0.0102]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.381 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
