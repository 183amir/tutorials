.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.0265,  2.9520,  8.2489,  6.7583,  6.2197],
            [ 2.4598,  2.0939,  8.7486,  3.3212,  8.3543],
            [10.0104,  6.4863,  9.7319,  5.3574, 12.2474],
            [ 8.2922,  6.4349, 10.3004, 12.3267,  8.1390],
            [ 2.8297,  2.1909,  8.1107,  3.7716,  9.6967],
            [ 8.2922,  9.8199,  2.4969,  8.5912,  8.1390],
            [10.0104,  8.2036,  9.9612,  7.0677, 12.2474],
            [ 2.4598,  6.3598,  2.1799,  8.8449,  8.3543]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1552,  0.3716, -2.4656,  0.9943,  1.2968, -0.2766,  0.5296,  0.1141],
            [ 0.6399,  0.8420,  0.1309, -1.2119,  0.0321,  0.3159,  1.4592,  0.3438],
            [ 0.5815,  0.2452, -0.6259, -0.8624,  0.8420,  0.2214, -0.6395, -1.3541],
            [-0.3397, -0.0428, -1.0118,  1.3277, -0.3315, -1.4625,  0.4736, -0.2143],
            [-1.2312, -0.5476,  1.1375, -0.2754,  0.0816,  0.0571, -1.4901,  0.3295],
            [-0.7279,  1.3519,  0.0337, -0.7807,  0.6217,  0.5679,  0.3569, -0.4371],
            [ 1.1835,  0.4265, -0.1382, -0.6066, -0.4225,  0.9051,  1.0254, -0.6602],
            [-2.2435,  0.2221, -1.0712,  1.5538, -1.3473,  1.1498, -2.1181, -1.0105]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2927,  0.2315, -0.7120],
            [ 1.2358, -0.9755, -0.1542],
            [-0.2660,  1.3583, -0.0760]], requires_grad=True), Parameter containing:
    tensor([[0.0122]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1019,  1.5494,  1.4064, -5.1561,  0.1634,  0.3262,  0.6636, -3.5189],
            [ 0.8214,  3.5318,  1.8333, -2.8427,  1.6839,  1.4941, -0.2354, -1.2694],
            [-0.0856, -0.2521,  0.0202,  0.2303, -1.3930,  3.6103, -5.4107, -0.9615],
            [ 1.0866, -0.0601, -1.2120,  0.7826,  3.4642, -5.1605,  0.7193,  0.9119],
            [-0.7698, -2.6798,  0.5909,  3.7577, -3.4002,  1.6714, -2.2491, -1.6267],
            [ 4.9136, -1.8164,  2.4750, -0.1831,  5.7301, -3.3115, -2.7973,  2.4668],
            [-0.1709, -2.5574, -3.7115,  2.7868,  1.1063, -0.8981,  0.4815, -2.3258],
            [-0.1460,  1.5462, -0.2620,  1.5066, -1.6486,  4.5858,  1.9255, -1.0573]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.4721e-01, -3.6585e-01,  7.5667e-01,  1.0762e+00,  1.4825e-03,
             -1.0187e+00, -1.7029e+00, -3.4307e-01,  1.1089e+00,  1.1701e+00],
            [-9.5330e-01,  2.9290e-01,  2.2472e+00,  8.9904e-01, -6.8442e-01,
             -1.7558e+00, -3.4821e+00, -1.6545e-01,  2.3866e+00,  4.2878e-01],
            [ 3.0877e-01, -9.5968e-01,  1.5414e+00, -1.4095e+00,  3.3551e+00,
              1.8430e+00, -1.9462e+00, -3.6012e+00, -1.7737e+00,  2.5546e-01],
            [-1.0699e+00,  1.5907e+00,  2.8779e-01, -6.8893e-02,  4.6845e-01,
              5.4495e+00, -1.5273e+00, -2.2200e+00,  3.8209e-01,  2.8502e-01],
            [ 1.0742e+00, -3.6035e+00,  6.1603e-01,  1.1494e+00, -9.4620e-01,
              1.6701e+00,  2.1162e+00, -5.7740e-01,  3.9834e-01, -2.0177e-01],
            [-1.3929e+00,  2.4207e+00, -3.9226e+00,  3.3457e+00, -6.0739e-01,
              8.0629e-02, -8.9170e-01, -2.2208e+00,  1.2637e-02,  3.6766e-01],
            [ 3.9848e-01, -2.6895e+00, -2.7195e-01, -1.0327e+00,  3.8439e+00,
             -5.9288e-01, -1.2646e+00, -2.4667e-01,  2.0530e+00,  9.3945e-01],
            [-2.6403e+00,  2.9739e+00, -4.5487e+00,  1.4383e+00,  1.8508e+00,
              5.7628e-01,  1.1732e+00, -4.8612e-01,  1.3328e-01, -4.0944e-01],
            [ 1.4663e+00, -5.4864e+00,  2.4076e+00, -3.3217e+00, -1.2403e+00,
             -1.4699e+00,  2.1669e+00, -1.6367e+00, -2.6309e+00, -4.5083e-02],
            [-1.9101e-01,  1.3585e+00, -1.9810e+00, -1.3274e-01,  5.9535e-01,
             -3.9490e-01, -1.4420e+00,  1.4559e+00,  1.1350e+00, -6.8628e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.518 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
