.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.8804,  8.6063,  2.3397,  0.2763, 20.0517],
            [ 9.1519,  7.8109, 11.4223,  1.5733,  9.7733],
            [ 1.6796,  3.7223,  5.1301,  7.8581,  6.8206],
            [ 9.5531,  7.4634,  8.1750,  5.4587,  6.1651],
            [ 2.5363,  7.6867,  4.0520,  8.6585,  0.0604],
            [ 9.5531,  3.8710, 11.0222,  5.3429,  6.1651],
            [ 1.6796,  1.7199,  2.2785,  4.5860,  6.8206],
            [ 9.1519,  6.2540,  6.3724,  7.9362,  9.7733]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8058,  1.0445,  0.2786, -1.3970, -0.9855,  0.8025,  0.6117,  0.5162],
            [-0.4659,  0.2377,  0.2577, -0.1708,  0.1309, -0.0815, -0.2939,  0.0728],
            [ 1.4323,  0.5126, -0.6512,  0.0814,  0.2228, -0.0705, -0.4371,  0.8604],
            [-0.9492, -0.8722, -0.1985,  1.1967, -1.4578, -0.1674, -1.2702, -0.4616],
            [ 0.5896, -0.0501, -0.2838,  1.6507, -0.6481, -0.8495, -0.9817, -0.7390],
            [-0.9997,  0.1560, -1.1552,  0.3247,  0.9597, -0.3294, -1.8956,  1.1858],
            [-2.2702,  1.4465, -0.6455,  1.2860, -2.2410, -0.2854, -0.1306, -0.1475],
            [ 0.2273,  1.0390,  1.0332,  0.2282,  0.1876,  0.4629, -0.7425,  0.6031]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1361, -1.0446,  1.7578],
            [ 0.1558, -0.8045,  0.5042],
            [-0.6252, -1.0119, -1.2089]], requires_grad=True), Parameter containing:
    tensor([[0.6392]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.7711,  2.3260,  1.5353, -3.1634,  2.7916,  1.8544, -2.8027,  2.0188],
            [ 4.0080,  1.3350,  1.6601,  2.9192,  2.0828,  1.1779,  1.2449,  2.3020],
            [ 3.0133, -2.0965, -0.5815,  1.7840, -2.3142,  2.8563,  5.1474,  1.8818],
            [ 1.6351, -2.3461,  1.7683,  1.9319, -3.6891,  2.5963, -0.7909,  0.8130],
            [ 0.4703,  1.0648,  0.5408,  5.2425, -2.0540,  0.5745, -2.0859,  0.5032],
            [ 1.7465,  3.1764, -4.8500,  0.5498,  2.0823,  3.5162,  1.0947, -4.0810],
            [ 0.6305,  2.4685,  3.9439,  0.4389,  2.4128,  4.5038,  3.8687,  2.5158],
            [-0.8865,  1.7106,  6.0502,  2.5475, -1.2231,  2.4526, -0.0376,  1.5859]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1344,  1.1387, -0.7869, -0.1057,  0.5969, -3.5599,  1.3563, -2.2252,
             -2.4073,  3.0924],
            [-0.1323,  0.7876, -0.5929,  1.4543,  1.1211, -5.3946,  6.6975, -4.0743,
             -0.6531,  1.3836],
            [ 0.2688, -0.7307,  6.9133,  2.5162,  3.1529,  4.4023,  1.3000,  0.4649,
             -2.9951,  0.4136],
            [ 0.1975, -4.3148,  4.3387,  3.4377, -1.5683,  2.9515, -3.2154, -0.4055,
             -0.2172, -1.3381],
            [-1.2712, -4.2486, -1.5348,  0.4126,  1.1942, -0.1193,  2.4889, -2.6276,
              1.2052, -6.6670],
            [-1.2508, -4.1875, -2.3755,  2.3617, -0.1275,  0.8919,  2.5315,  3.0212,
             -0.4880, -0.4334],
            [-0.5089, -2.7312,  1.3875, -1.8996, -1.0551, -1.7025,  2.0045,  4.9035,
              1.8564,  2.3944],
            [-0.4693, -4.5367,  2.5133,  2.4567, -1.4917,  2.8810,  1.2626,  4.2307,
             -1.7529,  0.0633],
            [-0.6859, -1.6906, -0.5915,  4.0177, -1.6344,  1.7243, -0.0611,  3.1705,
              0.3723,  0.4541],
            [-0.9225, -2.0785, -1.9386, -1.1539, -0.6822, -2.8104,  0.8541,  1.7714,
              2.3872, -0.0323]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.484 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
