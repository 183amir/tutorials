.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.2125, 13.3203,  8.6283, 10.7799,  3.5400],
            [ 7.6950,  5.1550,  8.0309,  6.2072,  6.1443],
            [ 9.7129,  6.7521,  7.6386,  9.1202, 16.3354],
            [ 2.5581,  2.6186,  5.8588,  8.6749,  8.7120],
            [ 5.3846,  9.2182,  7.8759,  9.5535,  2.8709],
            [ 2.5581,  3.4671, 12.9017,  1.8440,  8.7120],
            [ 9.7129,  9.2809, 13.7032, 13.3730, 16.3354],
            [ 7.6950,  9.5218,  7.3470,  1.8481,  6.1443]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8514, -0.7326, -0.9945, -1.1672,  1.4147, -0.3583,  1.2744, -0.2442],
            [-0.4558, -0.1377, -2.7812, -0.1982, -0.2483,  0.0879, -0.4300, -0.1379],
            [-0.1016,  0.3007,  1.9043, -2.6532, -1.4413,  0.8699, -1.2377,  0.3988],
            [-0.3217, -1.0087,  0.5770,  0.1606, -0.7343, -0.3236,  0.9451,  1.1430],
            [ 2.1145,  0.8026, -0.2293, -1.6454,  0.4489,  1.2867,  0.8532,  0.8183],
            [-2.0125,  1.3239,  0.1169, -0.5121, -0.3199, -0.3277,  0.6506,  0.4079],
            [-1.7405,  0.3546,  1.4400, -0.6863, -1.8525,  0.7411, -0.5584,  0.8548],
            [ 0.1126, -1.5306,  0.1302, -1.7152,  2.1245,  0.6486,  0.6648, -0.1967]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8954, -0.5962, -0.6491],
            [ 0.4750,  0.4664, -0.5129],
            [ 1.6883, -1.4887, -0.7370]], requires_grad=True), Parameter containing:
    tensor([[2.8821]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.0686,  2.1458,  3.5505,  3.9605,  4.7245,  4.8962,  2.3064, -0.6483],
            [ 5.4807,  5.6464, -0.4665,  3.3119,  4.5018,  2.3157,  5.8558,  3.3078],
            [ 5.7923,  1.9246, -1.6101,  7.6877, -2.6914,  7.3159,  8.3315,  2.4083],
            [ 8.6830, -0.7207,  0.1622,  3.0248,  1.9464,  2.8468,  0.1731, -1.5337],
            [ 4.8848,  2.1235,  7.5495,  2.0216,  6.3268, -0.7112,  3.6643,  3.7162],
            [ 4.8314,  7.2035,  0.8017,  0.2943,  4.9849,  2.0288,  1.7438,  2.6378],
            [ 2.0701,  2.8591,  4.3531,  5.3710,  3.3939,  5.4087,  2.5391, -1.1272],
            [ 3.6219,  4.2220,  5.2697,  4.4832, -1.3001,  4.5692,  0.3213,  4.2827]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4044, -0.5680, -0.2527, -0.0998,  0.4874,  1.0174, -0.3069, -0.1580,
             -0.8113, -0.0141],
            [-1.4929, -2.1750, -1.7585, -1.5078,  1.1765, -1.8218,  0.2636,  1.8928,
              0.6843,  1.3562],
            [ 1.5257,  2.3046, -0.9278, -1.2165, -1.4397, -1.7434,  5.8170, -2.6414,
             -1.8951,  0.7678],
            [ 4.1037, -0.3291, -6.2888,  0.7164, -1.0283,  1.9016, -3.3569, -5.4482,
              3.4257,  1.8202],
            [ 0.0980, -0.3975,  3.3751,  6.0128, -1.9730, -2.5052,  4.4719,  2.1347,
             -0.6296,  0.2109],
            [-1.6832,  2.9740,  1.7125,  0.8360, -6.2376,  2.3653, -2.2834, -6.3510,
             -0.1136,  0.2737],
            [-0.0965, -3.5604,  2.6971,  5.2854, -0.2359,  0.5272,  3.8365,  2.0829,
              2.6793, -0.1334],
            [-1.2683, -3.9398,  3.6767,  0.2377, -0.0747,  2.1226,  0.3851,  0.1650,
              1.3038,  0.1107],
            [-0.1275,  1.1119, -3.3246,  3.8581, -1.8781,  2.2125, -6.9695,  3.4717,
              2.3384,  0.4724],
            [ 2.0879, -3.3955,  1.4036,  0.6671, -0.7247, -4.5713,  1.0777,  2.0982,
              2.2264,  0.6404]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.537 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
