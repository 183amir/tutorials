.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.6204,  5.4071, 11.4835,  8.1271, 12.1389],
            [ 5.3393,  4.4234,  1.4787,  2.4388,  1.6844],
            [11.0781, 10.5382, 16.2746,  4.8094, 11.9160],
            [ 8.0060,  3.1615,  7.1646,  0.5677, 10.1835],
            [ 5.0499,  6.5681,  9.5310,  4.0499,  2.3265],
            [ 8.0060,  9.5496,  5.3585, 10.6938, 10.1835],
            [11.0781, 11.8039,  5.3579, 12.4577, 11.9160],
            [ 5.3393,  2.5098,  9.5669,  8.9691,  1.6844]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0293,  0.0653,  0.2108,  3.3344, -1.6957,  0.8043, -0.7555,  0.4348],
            [-1.2453, -0.4444, -0.4828, -0.6584, -0.6087, -0.7578,  1.3481, -0.0731],
            [-1.0738, -1.3351, -0.0649, -0.6433,  1.2482, -0.6240, -0.7695, -0.4267],
            [ 1.2088,  1.5996, -0.2032,  0.6903, -0.4138,  2.0953, -0.5989,  0.3862],
            [-0.2840, -0.1564,  0.1589,  1.2644, -1.5351, -1.3344,  0.4051,  0.8768],
            [-2.0012, -0.2012,  2.1553, -0.7149, -0.8807,  1.0807,  0.5340,  0.0261],
            [-0.8219, -1.5613, -0.3622,  0.4383,  0.4652,  2.0594,  0.8714,  0.0626],
            [ 1.0670, -0.6268,  0.7124,  0.8148, -0.5276,  0.3499, -0.3489,  1.0544]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8191, -0.6331,  0.1032],
            [-0.0038, -0.1274,  2.6910],
            [ 0.2909, -0.7760,  0.9250]], requires_grad=True), Parameter containing:
    tensor([[-0.6806]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4760e+00, -6.8802e+00,  4.4375e+00, -4.9333e+00, -2.6726e-01,
              1.5579e+00, -2.7251e+00, -3.5422e-01],
            [-3.3017e+00, -1.6383e+00,  4.0940e-01, -5.2716e+00,  5.6301e-01,
             -7.6251e-01, -3.7930e+00, -3.2055e+00],
            [-1.6525e-03,  5.4351e+00, -1.3237e+00, -8.2790e-01,  3.1246e+00,
             -5.4391e+00, -5.9597e+00, -3.4337e+00],
            [-1.4481e+00, -1.2897e+00, -1.5462e+00, -8.9983e-01,  9.3550e-02,
             -2.1064e-01, -1.4961e+00, -5.8127e-01],
            [-1.1114e+00, -1.4583e+00, -6.0042e-01,  1.0832e+00, -3.3847e+00,
              9.2294e-02,  2.9896e+00, -6.6946e-01],
            [-1.8185e+00,  2.1400e+00, -8.9865e-01, -8.6937e-01, -5.3976e+00,
             -3.5255e+00, -1.7475e+00, -2.0220e+00],
            [-2.7422e+00, -2.4815e+00, -2.5834e+00,  6.0657e+00, -9.6884e-01,
              2.4982e+00,  5.2432e+00, -4.8772e+00],
            [-6.4443e+00,  1.7270e+00, -8.6981e-01, -2.5266e-01, -8.3791e-01,
             -3.1507e-01,  2.0055e+00,  3.0391e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0717, -1.1143,  1.8714, -0.1269, -1.0292, -0.1425,  0.1169, -0.2009,
              0.2437, -0.0464],
            [-0.5328,  0.8476, -1.2915, -3.5111,  4.6321,  1.4143,  0.0612, -1.5527,
             -2.0215, -1.0200],
            [-0.6546, -0.3907, -0.6615,  0.7840, -4.3599, -2.3582,  2.1354, -2.4167,
              3.4978,  4.4855],
            [-0.0752,  2.7247, -5.0272,  0.5789, -2.1402, -0.0465,  1.8947, -2.5950,
             -3.0079,  1.0704],
            [ 1.7948, -0.2327, -1.4206,  8.4220, -2.3558,  5.0271,  0.2520,  4.0701,
             -0.4196,  0.6603],
            [-0.2269,  0.1653,  5.1386,  6.0512, -2.1187,  1.2333, -0.0266,  4.7243,
             -5.1800,  1.0767],
            [-0.1012, -0.7576, -1.0259,  0.8540, -1.6841,  4.1392,  0.9894, -4.4382,
             -2.0609, -2.5677],
            [-0.2115,  0.6571, -2.0359,  1.0110, -4.4815, -3.4654, -1.4856, -4.7249,
              5.8880, -0.8763],
            [-0.2928,  0.8596, -1.9914,  1.9022,  1.9591,  3.1331,  2.0460, -0.9657,
             -3.9352, -3.4492],
            [-0.0441,  0.2271, -0.1166, -0.0807,  0.0944,  0.8794, -0.2046,  1.4805,
             -0.8933, -1.2153]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.102 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
