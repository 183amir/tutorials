.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.1480, 10.4927,  9.3154,  7.9265, 10.1560],
            [ 6.6021,  6.4359,  3.4256,  5.5208,  6.0490],
            [11.9689, 13.0003,  6.0416, 11.3216,  5.7773],
            [ 5.6317,  4.9607,  6.2280,  7.4637,  2.7839],
            [12.7728,  6.8679,  3.2525,  5.2815,  0.9893],
            [ 5.6317,  6.7978,  5.8349, 10.3773,  2.7839],
            [11.9689, 11.1853,  5.7577,  8.4776,  5.7773],
            [ 6.6021,  0.3715,  7.8034,  6.9847,  6.0490]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0259,  0.2502,  0.1075,  0.8558,  0.4249, -0.7730,  0.6971,  0.8632],
            [-0.9481, -1.8311, -0.5054, -0.3914, -0.0075,  0.7244,  0.8187, -1.4015],
            [ 0.7552, -1.1283, -0.9276, -0.3023, -1.1246, -0.3709,  0.5073, -0.1249],
            [-0.4851, -1.7862,  0.0400,  0.7415, -1.7429, -1.0344, -1.7150, -0.4977],
            [-0.9438,  1.5321, -0.9970, -0.8013,  0.4579, -0.2993,  1.6222, -0.0881],
            [-0.8557, -0.6509, -0.5500, -0.7821,  0.9635,  1.4889,  2.3663, -0.1279],
            [ 0.1380, -1.2133,  0.4141,  0.4316, -0.1680,  0.1568,  1.0105, -1.6238],
            [-1.9345, -0.0594,  0.2224, -0.9721, -0.0475, -2.0950,  0.4370, -0.8414]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4984,  0.6145,  0.2927],
            [ 0.7928,  0.9037,  0.9612],
            [-0.7769,  0.6787, -0.4842]], requires_grad=True), Parameter containing:
    tensor([[1.3574]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2174, -2.0013, -2.1453, -0.2808, -1.9771, -2.1296,  0.2369,  2.0523],
            [-0.7842, -1.4401,  2.2384,  0.3167,  0.9119, -1.8361,  1.0900,  1.2380],
            [ 3.5592,  3.9845,  2.3285,  2.4432,  0.3434,  0.8791,  0.3488,  2.1827],
            [ 1.1304,  2.2118, -1.3954, -0.5906, -0.6587,  0.9400,  4.5032,  2.9332],
            [ 1.0450, -0.9250,  2.6636,  0.6788,  1.9145,  0.6509,  3.9580,  1.2539],
            [ 0.9350,  1.6899,  2.2294,  2.3435,  0.6396,  0.8007, -2.8012, -2.4029],
            [ 2.4794,  0.5029, -1.5013,  1.1679, -2.3763,  0.1560,  2.1240,  1.8137],
            [ 2.8647,  0.4217, -0.2272,  4.2249, -1.7049,  5.2023, -0.6119,  3.1939]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2567,  0.7453,  0.6145,  0.2266,  0.2793,  0.8403,  1.0858,  0.8400,
              0.3727,  0.0873],
            [ 0.9895,  1.5336,  0.7839, -0.6932,  0.1907,  1.8771,  2.2052,  1.6203,
              0.8783,  0.2665],
            [ 0.5470,  0.9589,  2.6394, -0.9557,  1.4072,  0.2389,  1.3626, -1.0192,
              0.3088,  0.0406],
            [ 0.0635,  3.2300,  2.6612,  4.8077,  1.8230,  3.7188, -2.1313, -0.7918,
              0.3832,  0.9879],
            [ 1.7761,  0.4116,  0.0667, -0.5381, -3.2470, -1.0341, -4.0989, -2.8691,
              0.5516, -0.2362],
            [-0.9277,  1.8984, -0.8211,  0.2988,  0.1395,  1.0358, -2.2203, -1.3520,
              0.6158, -0.7439],
            [ 0.4463,  1.2176,  0.1252,  0.6772,  3.2614,  4.4279,  0.0496,  3.2183,
             -1.4167,  1.4014],
            [ 1.8772,  4.7731,  3.2673,  5.8984,  3.4680,  3.2064,  2.2544, -3.4544,
              0.8750, -0.3108],
            [-0.8272,  0.5034,  1.9884, -1.0133,  4.1009,  1.3848,  1.0473, -1.0315,
             -0.0481, -0.1791],
            [-0.6230,  0.6232, -1.5610,  0.6292, -1.7091,  1.1443, -0.7447, -0.0471,
              0.1107,  0.0430]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.517 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
