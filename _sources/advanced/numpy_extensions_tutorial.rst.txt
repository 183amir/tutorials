.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9487,  2.5700,  2.1582,  4.4330,  0.2690],
            [ 3.3640,  4.2320, 10.9482,  4.2465, 10.4946],
            [ 8.5264,  2.4384,  3.7670,  3.2385,  4.3545],
            [ 6.9107,  3.5159,  5.3932,  5.6148,  6.3474],
            [ 2.6493,  4.8715,  2.6908,  5.2702,  4.1591],
            [ 6.9107, 10.4185,  8.5818,  7.7311,  6.3474],
            [ 8.5264,  5.5980,  5.8603,  2.6368,  4.3545],
            [ 3.3640, 22.8000,  7.8282,  5.5046, 10.4946]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8690,  1.0361,  0.3907,  0.5883, -0.3710, -0.9327, -1.5050, -0.9086],
            [-1.5550, -0.7616,  0.2982,  0.9638,  1.1515, -0.3756, -0.2788, -1.3757],
            [-0.5733, -0.8893,  1.3351, -0.5320,  1.5904,  0.5171,  1.4527,  0.1910],
            [-1.4125, -0.3813,  0.5564,  0.2612, -1.6722,  0.5743,  0.9326, -1.3494],
            [-0.1747, -1.1896, -0.6638, -1.7632, -0.5266, -0.5689,  0.1208,  0.5521],
            [ 1.4701,  0.2580, -0.8727, -0.1215, -0.7977, -0.0804,  0.4011,  0.1159],
            [ 0.6022,  1.5104, -0.3461,  0.2691, -1.6276,  0.2988, -0.2906, -0.1106],
            [ 1.0227, -0.1381, -0.7252,  0.4712, -0.4761, -0.2335, -1.1645,  0.9956]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4071,  0.5644,  1.5656],
            [ 0.6516,  0.3427, -0.5434],
            [-0.4149,  1.9741,  0.9057]], requires_grad=True), Parameter containing:
    tensor([[-0.8546]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5242, -6.8592, -2.0708, -5.1401, -2.8833, -1.7525, -1.5820, -2.3294],
            [-2.2871, -0.0525, -2.8567,  4.3779,  0.0461,  6.0754,  2.1767, -2.7557],
            [-2.1337,  1.6360,  2.0750, -4.6056, -2.3371, -0.5640,  1.3639, -1.0514],
            [-5.3873, -5.4072,  1.4617, -0.1167,  2.2632,  0.7151,  0.2166, -0.0326],
            [-3.1405,  3.4258,  2.0139, -2.0606,  0.2143,  1.0569, -1.9191,  0.1188],
            [-3.6498, -1.5420, -0.4153,  1.4181,  0.0697,  1.5910,  1.5710,  2.9057],
            [-2.6274, -1.5256, -0.0754,  3.1865,  0.4060, -0.6629,  1.3702,  0.8062],
            [-0.3401,  2.7549,  1.0614, -2.4082, -0.3498, -3.3076, -2.1066,  3.5443]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.8883e-01, -3.6947e-01, -1.5365e+00,  1.6045e+00,  4.9724e-01,
             -8.3901e-01,  1.2212e+00, -1.3286e+00,  7.2957e-01,  8.2558e-01],
            [-8.2639e-01,  5.5085e-01,  1.7386e+00, -1.1295e-01, -1.2387e-01,
              1.8806e+00, -1.4407e+00,  1.0586e+00,  2.7728e-01,  2.7461e-01],
            [ 9.0545e-02, -3.8293e+00, -2.0227e+00,  2.9321e+00,  2.5074e-01,
              1.7559e+00, -5.7922e-01,  9.3663e-01,  1.4848e+00,  2.2732e+00],
            [-1.2657e+00, -3.9246e-01,  2.5571e+00, -2.5040e+00,  1.8013e+00,
             -2.6648e+00, -3.8534e+00, -2.6868e+00,  2.3636e-01, -1.8346e+00],
            [ 8.9593e-01, -3.3923e+00,  6.6617e-02,  1.9873e+00, -5.8808e-01,
             -5.1970e-01,  4.7117e-01, -3.1872e+00,  1.6421e+00,  1.9818e+00],
            [ 5.0940e-01,  1.2618e+00, -1.1888e+00,  2.4653e+00, -3.1521e+00,
             -5.2708e+00, -2.3273e+00, -7.8076e-01, -3.2687e-02, -4.5096e-03],
            [ 9.4535e-02,  2.0475e+00,  1.4117e+00, -2.9983e+00, -2.9816e-02,
             -3.0944e+00, -3.1677e+00, -1.2278e+00, -4.3332e-01, -1.0246e+00],
            [ 3.7894e-01,  2.9003e-01,  3.0208e+00, -2.5531e+00, -6.4078e+00,
              2.2878e+00, -2.0426e+00,  2.2722e-01,  2.7737e+00,  3.6328e+00],
            [ 3.3677e-02,  1.6020e+00, -8.2553e-01, -8.1864e-01, -6.0253e+00,
             -3.2775e+00,  1.9381e-01,  2.0311e+00, -3.9177e-01, -1.4711e+00],
            [-1.5126e-01,  4.8094e-01,  1.9703e+00, -1.7098e+00, -1.5153e+00,
             -1.8260e+00, -2.5755e+00, -1.6940e+00,  3.4308e+00,  1.6053e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.536 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
