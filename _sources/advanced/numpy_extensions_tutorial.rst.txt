.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.9592,  5.8526,  3.0282,  9.7164,  2.1673],
            [13.7481,  8.3748,  7.3911, 14.5663,  2.5546],
            [ 2.8729, 13.3674,  1.1319,  7.1171,  2.4123],
            [ 5.5264,  2.3190,  7.7592,  5.9333,  8.6940],
            [ 6.2716,  3.7980,  2.8974,  4.4253, 11.5467],
            [ 5.5264,  6.9433, 10.0261,  4.9346,  8.6940],
            [ 2.8729,  9.1049,  1.9219,  2.2954,  2.4123],
            [13.7481, 10.8045,  1.7704, 10.2864,  2.5546]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8203, -0.3558,  0.4457,  2.0482,  1.5564, -0.8276,  1.1693, -1.8610],
            [-0.6725,  0.2119, -1.3043,  1.3806,  0.3723, -0.4048, -0.5024, -0.3245],
            [ 0.9086,  0.4574, -0.9343,  0.4948, -1.2023, -1.4866,  0.8252, -0.3529],
            [-0.7567, -1.5556,  1.2993,  0.0147, -0.9571,  0.3882, -0.2660, -0.1239],
            [ 0.9044,  0.2071,  0.1776, -0.1031,  1.2248,  0.8156, -0.2226,  0.9825],
            [ 0.0303,  1.2762,  1.2192, -0.6459, -0.7266, -0.3350,  0.1524,  0.6114],
            [ 1.4946,  1.3834,  0.8835,  0.6829,  0.0739, -0.0265,  0.6681,  0.4045],
            [-0.0360,  1.2004, -1.4525,  2.2312,  1.1250,  1.3299,  0.7189, -0.1544]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.5568,  0.3977, -0.3491],
            [-0.2591, -1.4735,  0.8730],
            [-0.3707,  0.3176, -1.7551]], requires_grad=True), Parameter containing:
    tensor([[2.7875]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.3565,  4.4510,  2.9964,  4.6594,  5.4968,  9.5373, -4.3288,  1.8190],
            [ 5.5574,  6.4079,  0.6764,  6.3554,  5.3685,  2.1651,  4.5610, -1.3315],
            [ 5.2744,  0.9071,  4.8780, -1.4967,  6.0873,  1.4509,  2.2789,  3.9545],
            [ 2.7401,  8.6788,  3.0885,  5.0600,  2.1904,  5.3952, -0.3647, -1.3160],
            [-2.0016,  1.6360,  4.0439,  2.6802,  1.8383,  0.4717,  9.7330, -0.5323],
            [-0.2127, -1.2428,  6.3942,  4.6002,  4.5927,  2.9159, -0.6820,  6.3406],
            [ 1.2096,  5.4696, -3.2592,  1.1224,  2.8595,  0.6557,  6.8664,  0.9272],
            [ 2.6051,  3.2147,  5.5960,  0.0441,  1.7256,  5.8112,  1.6838,  2.7291]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.1392, -1.6038, -1.1326, -0.0467,  1.5874,  0.3394,  1.9332, -0.4398,
              0.4279, -0.0394],
            [-1.8608, -4.3701, -0.0437, -0.5210,  0.4588,  2.8578,  0.6801, -0.7677,
             -0.3926, -0.3138],
            [ 3.7064, -1.8627, -2.1469, -3.4870, -1.0383, -1.1969,  5.7519,  1.5356,
             -0.3823,  1.1251],
            [ 1.0499,  3.6126, -3.3233, -2.2033, -2.9238,  2.4473, -0.5625,  0.8229,
              2.5811, -3.1751],
            [-1.0784,  1.6315,  4.2075,  1.0946,  2.5049, -3.5934,  7.8944, -0.1216,
              0.3033,  2.8234],
            [-0.2324, -3.1767,  1.5203, -2.5889,  1.8282, -0.3858, -4.6428,  7.8095,
             -0.7607, -2.8303],
            [-1.6435, -0.6520, -5.3862,  1.2176,  0.1049,  5.3742, -0.0290, -5.0352,
              7.9995,  1.6541],
            [ 1.0641, -2.9607,  1.6497, -3.3866,  0.8852, -3.5732,  1.7353, -1.2581,
             -4.4898,  1.0756],
            [-0.0546,  0.8411, -2.6402,  1.7782, -4.3448,  1.3846,  0.1911,  1.5431,
             -1.2373, -1.1182],
            [ 0.2965, -0.5191,  2.2366, -1.9675,  2.8531, -0.8464, -0.7653, -0.4360,
              0.1050, -0.0903]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.512 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
