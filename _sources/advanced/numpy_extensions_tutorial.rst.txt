.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.5242,  8.1602, 13.2514, 12.8518,  4.3258],
            [12.3113,  9.5226,  6.7209, 17.0012,  3.6965],
            [ 4.3561, 10.0368,  2.4052,  5.8026,  4.3164],
            [17.2330,  5.7693,  8.6401, 10.7077, 11.7342],
            [ 8.0030,  9.6354,  6.1540, 14.5842, 11.1862],
            [17.2330, 10.2505,  2.6712,  3.0713, 11.7342],
            [ 4.3561,  7.7029,  3.2423,  6.7147,  4.3164],
            [12.3113, 13.8145,  6.6235,  6.0828,  3.6965]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5056, -0.8487, -1.2831,  0.3120, -0.6430, -0.8655, -1.2964, -2.4659],
            [ 1.8339,  0.3887,  1.0790,  0.8861, -0.8430,  1.7783,  0.7017, -0.4528],
            [ 1.4298,  0.0430, -0.8544,  1.3004, -0.7369,  2.0916, -0.3006, -0.1473],
            [ 1.2161, -0.6936, -0.6050, -2.3365, -0.3696,  0.6244,  1.2596,  1.8124],
            [-0.5380,  1.9742,  0.5347,  1.4902,  0.1529,  0.8618, -0.7847, -0.1361],
            [-0.5800,  0.3761,  1.4450, -2.0433,  0.8260, -0.8906, -1.4539, -0.7505],
            [ 0.3810,  1.0638, -0.4278,  0.6755, -1.7642, -1.0226,  0.8885, -2.3180],
            [-0.0334,  1.6135,  1.4857,  0.1278, -1.8567,  1.2552, -0.2586, -1.2786]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6366, -0.9947,  1.6875],
            [-0.0590, -1.6386,  0.8288],
            [ 0.3723,  0.7247,  0.7817]], requires_grad=True), Parameter containing:
    tensor([[1.1980]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9596,  3.6571, -3.6099,  4.0073, -1.0128,  3.7019, -0.1659,  2.7975],
            [-2.4205, -2.7166, -0.5864,  3.3202, -0.2943,  4.5328,  1.0631,  1.1281],
            [ 4.1996, -2.8211,  6.4868,  0.9204, -3.8271,  0.0215, -2.0649,  2.1791],
            [ 3.2581, -5.1448,  6.4199, -0.3775, -1.1887,  5.0071,  1.1336,  1.9809],
            [ 1.0356, -4.4205,  5.0085,  0.7867,  2.7286,  2.0387, -0.6876, -3.4729],
            [ 4.1675,  2.9742,  2.5492,  2.6199, -4.0283,  2.3959,  1.6129, -1.9623],
            [-0.3618, -2.3827,  6.8866,  5.2133, -2.4234, -0.5487,  3.3277, -2.5604],
            [ 1.7646, -1.2304,  3.6740,  0.0893, -0.0386, -1.4958,  6.5592, -1.8221]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0333,  1.1628, -1.1318,  1.9665,  2.0300, -0.0287, -1.1698,  1.6267,
             -1.0679,  0.0306],
            [ 0.1427, -0.6044, -1.8498, -2.1280,  3.6814, -1.8059, -0.6256, -0.7291,
              0.3584, -1.7442],
            [ 0.1560, -1.3409,  5.8649, -3.9692,  3.8029,  1.8050,  2.5731,  0.0466,
              2.4487,  1.2873],
            [ 0.7571, -1.7603,  7.2837, -4.4816, -2.3537,  2.2319, -2.4984, -4.1205,
             -1.3508,  1.3933],
            [ 1.1308, -4.1841,  3.2590, -1.2082, -2.6045,  4.8313,  0.6151,  0.1019,
              2.2448, -0.0292],
            [ 0.3220, -3.5043,  4.2941, -0.7914,  1.5437,  1.2212,  1.4971, -2.8619,
              4.9204, -1.5075],
            [ 0.1463,  2.1100,  1.4056, -2.3381, -3.2014, -2.9885,  3.7974, -4.3827,
              2.8266, -2.1800],
            [-0.7301,  2.0496, -4.6198,  2.8765, -0.6796, -1.5810,  1.4050, -3.3194,
              4.8010, -2.5301],
            [-0.2184,  1.4795, -2.4643,  0.6477, -1.1594,  0.5332,  0.1427, -2.1175,
              2.7515, -1.1379],
            [-0.4621, -0.8076, -1.1478, -0.6643, -1.2278, -0.6231,  0.2432,  0.7349,
              0.4197, -0.7134]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.520 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
