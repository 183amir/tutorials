.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.0389,  8.5084, 13.0247,  9.4057,  9.5073],
            [ 8.8154,  6.1281,  9.7195,  8.9148, 13.9281],
            [12.5239, 11.6628,  1.7566, 12.0670,  2.9269],
            [12.5639,  7.4157,  7.1736,  8.4592,  8.1287],
            [ 6.3078,  4.8955,  6.0695,  8.7147, 10.5719],
            [12.5639, 11.9960, 14.0543,  8.6243,  8.1287],
            [12.5239,  6.0451,  1.9344, 16.0848,  2.9269],
            [ 8.8154, 16.6799,  1.6606,  7.0834, 13.9281]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.7089,  1.5972,  0.2693,  0.6145, -0.1591,  1.6957, -3.1949, -0.8620],
            [-1.0279,  1.6418, -1.6958, -0.4760, -0.5732, -0.9426,  0.3151,  0.6535],
            [ 0.7173,  1.6108, -1.0684,  0.6373,  0.2567, -0.1348, -1.6991,  1.5325],
            [ 1.7702, -1.6791, -0.3594, -0.3245,  0.5140,  1.6070, -0.1543, -1.4095],
            [ 1.0928, -1.2417,  1.0148,  2.2319,  1.3344,  2.7826,  0.6415,  1.6580],
            [ 1.6533,  0.5272, -0.8428,  0.3265,  0.4711, -0.0236,  1.4575, -0.9584],
            [ 0.5609, -1.4056, -1.6574, -1.4089, -1.0335,  0.9678,  1.2826, -0.1687],
            [ 0.2971,  0.4272,  0.6928, -0.8423, -0.4559,  1.0021,  0.1372,  2.1371]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5352,  0.5327, -0.4475],
            [ 0.3889,  0.2166,  0.1319],
            [ 1.4201, -1.5180, -0.1196]], requires_grad=True), Parameter containing:
    tensor([[-0.2007]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0484,  1.2503, -2.1703, -0.5585, -1.9438, -3.9443,  1.7455, -1.6233],
            [ 0.3623, -2.3661, -1.7582, -1.0039,  0.1070,  2.2355,  0.4813,  2.1683],
            [ 1.4314, -0.7192, -0.9986, -0.1094, -1.6590,  4.6557, -4.6610,  1.5289],
            [ 2.2103,  0.4240, -2.5685,  2.5598, -2.3721, -1.1787,  2.5289,  0.7942],
            [-1.1166, -1.6320,  0.2082, -0.9040, -0.4458, -0.8667,  0.3190, -2.2510],
            [-2.6487,  0.3076,  0.4393, -2.3236,  0.8513,  2.1185, -3.1350,  1.4319],
            [-2.6655,  0.1866, -4.6117,  4.1074, -0.8043,  0.3941, -0.3922, -3.2122],
            [ 3.4621, -3.8912,  3.5047,  0.5101,  0.3766, -2.5983, -0.7913,  1.2139]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3812,  1.3896, -0.7735,  0.2454,  0.5884, -0.3726,  0.0859, -0.2813,
              0.1048, -0.2501],
            [ 0.3988, -0.3032,  0.0334, -0.5968, -0.0289,  0.6259, -0.2192,  0.8050,
             -0.3269,  0.1509],
            [ 0.7732, -3.3286, -0.6138,  1.8059, -0.6983,  1.4522,  0.7174, -0.0461,
             -0.1598, -0.0733],
            [ 0.2136, -1.6950, -1.2478,  1.4642,  2.2148, -1.0974,  1.3036, -3.1716,
              0.3051,  0.2283],
            [-0.1265, -1.0145,  1.0692,  0.8544, -1.6614,  0.5078, -2.0552,  1.9525,
              0.1911, -0.5733],
            [-1.4658,  1.4339, -1.0044, -0.9235,  1.9670,  0.6592, -2.5926,  2.5258,
              1.1440,  0.3838],
            [ 1.5795, -3.5539,  5.4860, -1.4001,  4.1414, -5.2316,  2.9763, -2.0271,
             -0.7735, -0.8093],
            [ 0.5783, -0.5354, -0.8107,  0.9916, -8.8069,  3.4812,  0.4091,  1.0107,
              0.5146,  0.1115],
            [-1.5815,  2.2355, -2.6366,  1.0242, -1.2855,  5.7992, -3.3098,  3.5574,
             -1.8024, -0.1309],
            [ 0.6163, -1.6161,  2.2272, -2.9734,  3.4063, -2.1230,  1.6793, -0.9968,
             -0.5120, -0.0316]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.496 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
