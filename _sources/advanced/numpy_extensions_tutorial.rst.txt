.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.5099, 11.2266, 10.9359,  7.2034, 19.2487],
            [ 7.6721,  9.8077, 12.1012, 11.4859,  7.0773],
            [ 5.0622,  2.3905,  7.5993,  7.2581,  5.6440],
            [ 9.7632,  5.7120,  1.6214,  6.7580,  3.9200],
            [ 8.0583,  8.3933,  7.3662,  2.7579,  7.0608],
            [ 9.7632, 14.5171,  6.8879,  3.3404,  3.9200],
            [ 5.0622,  4.7736, 10.2036,  6.5631,  5.6440],
            [ 7.6721,  2.0125,  7.5109,  8.6844,  7.0773]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0045,  2.2957,  0.1908, -2.1428,  0.3621,  0.2978,  1.2639, -0.3716],
            [ 0.0798, -2.5757,  0.6515, -0.9811,  0.6867, -0.0145,  1.7071,  0.4403],
            [ 0.9218, -1.8067,  0.1856,  0.7408,  0.4519,  0.1182,  0.9884,  0.6205],
            [ 0.7010, -1.6333,  1.3921,  0.5756,  0.2171, -0.3411, -0.1126,  0.4183],
            [-1.2620, -1.3288, -0.5536, -0.0113,  0.3502,  0.5962, -0.8228, -0.2777],
            [ 0.1480, -1.6696,  0.1555, -0.4376, -1.2257,  0.1929,  0.6286,  0.1364],
            [-0.3096, -0.0774,  2.6279, -0.3133, -0.5403, -0.7379,  0.0753,  0.2384],
            [-1.8876, -1.1175, -1.3323, -1.7691,  0.2489, -0.8674,  1.3774, -0.0759]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.3199, -0.2258,  0.5841],
            [ 0.4039,  0.1836,  0.0472],
            [ 0.1181,  0.8076, -1.7091]], requires_grad=True), Parameter containing:
    tensor([[1.3667]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.0337e+00,  1.0701e+00,  3.1869e+00,  2.1777e+00,  3.6878e+00,
              5.8327e-03,  1.2343e+00,  2.3054e+00],
            [-1.2228e+00,  2.7442e+00,  9.3559e-02,  1.2039e-01,  3.7859e+00,
             -8.3575e-01, -3.7102e+00,  2.0251e+00],
            [ 9.2181e-01,  1.4616e+00,  6.6414e+00,  9.8942e-01,  5.4922e-01,
             -1.2964e+00,  5.1083e-01,  1.9051e+00],
            [ 5.9875e+00, -1.2467e+00,  4.7951e+00, -3.6606e+00,  3.5158e+00,
              3.9127e+00,  2.4003e+00,  3.6941e+00],
            [-3.7607e+00,  2.2597e+00,  7.9088e-02,  3.2149e+00, -3.8989e+00,
              2.7858e+00, -4.2271e-01,  2.4235e+00],
            [ 2.5065e+00,  2.3036e+00, -2.6896e+00,  4.3607e+00, -5.2969e+00,
              5.4748e+00,  1.3468e+00,  5.7498e-01],
            [ 2.1562e+00,  2.4078e+00,  4.7399e-01,  6.4009e+00,  1.5585e+00,
              3.7421e-02,  6.6273e+00,  3.0997e+00],
            [-9.3662e-01,  2.4347e+00, -2.3474e+00,  5.6815e+00,  1.6299e+00,
              1.9472e+00,  3.9941e+00,  8.7239e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2330,  1.3145, -1.4459,  2.2593, -2.3500,  3.4788, -3.1684,  4.0770,
             -1.3504,  1.1429],
            [ 1.1637,  0.9361,  0.2420,  1.9271, -2.4299,  1.0608, -1.5805,  0.7959,
              0.0122,  0.2393],
            [-0.0636,  2.2339, -0.3631, -0.9399,  1.4523, -1.4862,  2.7892, -3.5580,
              4.2558, -3.2206],
            [ 0.6194, -0.0615, -0.2408, -0.3034,  1.8649, -3.4201,  1.6435,  1.4641,
              0.0217,  0.0791],
            [-0.6039, -2.4512,  0.7010, -1.0831,  1.1186,  0.8108,  1.3861, -2.2381,
              0.6071, -0.7010],
            [-0.8066, -0.3036,  0.5552,  1.4409, -1.6045,  0.6341, -4.4786, -0.4070,
              2.3880, -1.8349],
            [ 2.3606, -0.1305,  2.0054,  3.3058,  1.9671, -2.6873,  1.4618, -1.6459,
             -0.7390,  0.9411],
            [ 1.4599, -1.2032,  3.4121,  1.8869, -2.6930, -0.8022,  3.3065,  0.2420,
             -0.6229,  0.9405],
            [ 0.4531,  1.3729, -2.4643, -0.5803, -0.2913,  0.8573, -1.2086,  0.7212,
             -2.4450,  0.7198],
            [ 0.0639,  0.3126, -1.6556,  2.6896, -1.0554, -0.6622, -0.6453, -2.4431,
              2.5834,  0.0868]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.501 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
