.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[28.5515,  3.3910,  9.2121, 11.9718,  4.1862],
            [ 9.7701,  0.4271,  5.3210,  9.4122,  2.6899],
            [ 5.7193,  5.0083, 15.3775,  5.2995,  4.6431],
            [ 9.5288,  6.5802,  1.5149,  5.2817,  6.6286],
            [12.3149, 14.4028, 13.4090,  6.3508,  1.7982],
            [ 9.5288,  7.5874,  2.5540,  3.7701,  6.6286],
            [ 5.7193,  7.8926,  8.5280,  0.5893,  4.6431],
            [ 9.7701,  3.9669,  5.6127,  4.9291,  2.6899]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4779, -0.3952, -1.5265,  0.9871,  1.9207, -0.4512, -0.5061,  1.0557],
            [-0.0917, -1.0445, -0.0167, -0.2304, -1.7399, -2.5500,  0.0436, -0.3925],
            [-0.4049, -0.0140,  0.2105,  0.0647, -0.4953,  0.1412,  0.5303,  0.9082],
            [-1.5644,  0.2940,  0.9578, -1.0423, -0.5778, -0.9805, -1.3257, -0.7749],
            [-1.1115, -0.4185, -1.4798, -0.2321,  1.6780, -0.3445, -2.0523,  0.0392],
            [-0.5943, -0.3516, -0.6015, -1.5206, -2.0607, -1.5793, -0.5490,  0.7628],
            [-2.6316, -1.0067,  0.4010, -1.4351,  0.5604, -1.0056, -1.1260, -0.4561],
            [-1.2640,  0.2271, -0.2418,  0.3573, -1.4472, -1.0692,  0.2595,  0.2750]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5815,  0.5580,  2.8277],
            [ 0.9306, -1.0826,  0.4261],
            [-0.8656, -0.8322,  1.6855]], requires_grad=True), Parameter containing:
    tensor([[1.6710]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.4687,  1.4703, -2.2709,  4.1949,  8.2585, -0.7287,  1.5726, -5.9891],
            [-3.4212,  2.7481,  4.4499, -1.3136,  1.9924, -1.9579, -0.1837,  4.0271],
            [ 0.0594,  5.1009, -0.1966, -1.6055,  4.1073,  1.3341,  0.8096,  1.1103],
            [ 0.2450, -0.1593, -1.1641, -3.0730, -2.0852,  3.3272,  5.6414,  5.0691],
            [-0.3642,  4.1900,  2.8196, -1.4858,  5.8382, -0.7796,  0.3374,  2.3836],
            [-0.1473,  2.9477,  2.7559,  0.2509, -8.7373,  1.6392,  0.1952,  4.2461],
            [ 1.3353,  7.0794, -0.9251,  6.9365, -3.1379, -2.4750,  3.4305,  6.1062],
            [ 0.9996, -0.2781, -4.8919, 10.3401, -3.5938,  2.3361,  3.6186, -2.2828]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.8421e-01, -3.2953e-01, -1.3591e+00, -2.3276e+00, -5.6078e+00,
              3.0295e+00,  4.4087e+00,  2.3523e+00, -2.5617e+00, -1.2671e+00],
            [-8.7050e-01,  1.1689e+00, -2.7959e+00,  1.2573e+00,  3.6992e+00,
              4.7366e+00,  3.9623e+00, -1.8590e+00, -3.5556e+00,  1.0512e+00],
            [-1.3841e-01,  8.3908e-01,  8.3925e+00,  3.3897e-02, -5.8416e+00,
             -1.8554e+00,  5.9032e-01,  1.0490e+00, -7.4211e+00, -2.4517e-01],
            [ 1.4040e+00, -1.1724e+00, -6.1005e-01, -1.8087e+00,  8.4453e-01,
              1.3620e+00, -4.6946e-01,  9.3263e-01, -5.4879e+00, -3.9819e+00],
            [-1.1858e+00, -2.8144e+00,  4.8248e+00,  4.6558e+00, -1.0535e+01,
              1.5815e+00,  1.2702e+00, -4.0893e+00,  1.1611e-01, -3.8336e+00],
            [-1.2267e-03,  1.6592e+00, -8.5141e+00,  1.4622e+00,  6.8838e+00,
              1.7307e+00,  4.8622e+00,  1.2323e+00, -2.2625e+00, -1.0125e+01],
            [ 1.3515e-01, -1.6800e-01, -1.3990e+00, -2.4047e+00, -3.5840e+00,
             -3.9028e-01,  2.4338e+00, -9.0974e+00,  4.1085e+00, -1.4211e+00],
            [-1.4275e+00,  1.0401e+00,  6.3333e+00, -5.0126e+00,  6.9764e+00,
             -4.4440e+00,  1.4932e+00,  2.5304e+00, -5.4922e+00, -3.9351e+00],
            [ 2.7524e+00,  8.6592e-01,  1.4757e+00, -4.9204e+00, -3.3389e-01,
              6.3848e-01,  2.3123e+00, -2.2041e+00, -1.5328e+00,  9.1781e-01],
            [-1.8317e+00, -1.9596e+00,  2.6928e+00, -2.0972e-01,  2.5298e+00,
              1.2600e+00, -5.1431e-01,  8.8725e-01, -2.7743e+00, -7.6771e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.566 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
