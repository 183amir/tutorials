.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.8685,  1.5580,  5.4738,  6.3628, 18.3371],
            [11.7048, 12.5560,  7.0796, 10.2295,  3.6764],
            [ 7.5406,  1.3911,  1.9403,  8.3224,  2.9976],
            [11.6897,  5.8707,  3.8875, 12.1264, 13.3734],
            [ 4.6141,  2.1583,  3.5677,  5.2001,  8.2878],
            [11.6897,  5.0662,  8.7052,  5.4049, 13.3734],
            [ 7.5406,  5.3436,  3.3286,  6.3270,  2.9976],
            [11.7048, 11.7402,  4.5935, 11.5086,  3.6764]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4633, -0.6747,  0.2365, -0.2222,  0.9267, -0.6272,  0.4722, -0.4974],
            [-0.0816,  0.9580,  0.1637, -0.4652, -1.2567,  2.1960, -0.4852,  0.4709],
            [-0.8706, -0.5191,  0.4791, -1.8876, -0.7454, -1.2509, -1.0215,  1.7989],
            [ 0.2272,  0.3257, -2.4832,  0.2776, -1.1938, -0.2176,  1.0025, -0.0878],
            [-0.4396,  1.0334, -1.8511,  1.0498, -0.8226,  0.0130,  0.6395,  0.2966],
            [-0.9123, -0.5022, -0.9427,  0.3761, -0.4722, -1.8935, -0.3277, -0.0401],
            [-0.5504,  0.4350, -0.4944,  1.5096,  0.1384, -0.0936, -0.0164,  0.2780],
            [-0.8658,  1.5754,  1.6926,  2.3996,  0.5218,  0.8599, -0.8064,  0.8598]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5634, -0.8108, -0.0271],
            [-1.1680,  0.2498,  1.2779],
            [ 0.0572, -1.3466,  0.2575]], requires_grad=True), Parameter containing:
    tensor([[-1.3206]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.1692, -0.0629,  1.6422, -3.1292, -2.3030,  1.5308, -2.5900,  0.4137],
            [ 0.9330, -3.9420, -3.7621, -2.5972, -0.3569, -4.6686,  0.7181,  0.8905],
            [ 2.0909, -3.5105,  2.2522,  2.0559, -3.7588, -0.9987, -4.8429, -3.6391],
            [-0.4012, -2.8124, -5.3573, -1.5650,  6.1659, -0.0916,  0.1279, -2.3153],
            [ 1.9780, -6.4702, -1.5709,  1.9546, -4.9541, -1.6684,  1.2655, -5.7946],
            [-3.1861, -0.0412,  1.9420, -3.4350,  1.1590, -2.3834, -1.0165, -1.1288],
            [-0.7735, -4.9942, -0.3830,  2.3906, -1.8727, -3.9213,  0.1894, -1.6546],
            [-2.2881,  0.7232, -4.8580, -1.4612, -0.4153, -6.3681,  1.4215, -2.1164]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2898, -2.3405, -0.4615,  4.4553, -2.9221,  1.1927, -1.9370,  0.0683,
              0.4157,  0.0129],
            [ 3.0652, -0.7471,  2.5797, -5.2478,  0.7646,  2.6044,  0.8955,  0.8873,
             -1.6934, -0.6200],
            [-0.4310, -0.3148,  2.7603,  2.5393, -4.2374,  0.2140, -2.0077,  0.8699,
              2.2346,  0.3096],
            [-3.3020, -2.1069,  3.1287, -1.0758, -1.6385,  2.9223, -0.6208,  0.3686,
             -2.4068, -1.5429],
            [ 1.4727, -1.8612, -0.9756, -0.7012, -1.0792,  2.2644, -0.0620,  1.4367,
              1.0065,  0.1258],
            [ 1.0488,  0.1199,  5.2990, -0.5813, -2.9782,  4.0463, -4.3963, -0.1791,
              1.0953,  0.2194],
            [-1.4412,  2.2479, -0.2958, -0.2524,  1.2947, -0.3388,  2.0222,  3.3546,
             -1.7089, -2.0824],
            [ 3.9910, -1.0324, -1.5223, -1.4985,  3.4713,  1.2626, -6.7146,  0.6588,
              4.6789, -0.1611],
            [-2.6263, -0.7490,  1.9031, -2.3333, -1.3123,  6.3206,  0.7104, -2.5656,
              0.2055, -0.6239],
            [ 0.1276, -2.9096, -1.5591, -0.1362, -2.7491, -0.6204,  1.1099, -0.3583,
              0.7402, -0.1358]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.581 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
