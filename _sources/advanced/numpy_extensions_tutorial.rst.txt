.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.4239,  7.5964,  7.7171,  6.0875,  8.3916],
            [ 3.0038, 15.2761,  5.1407,  4.4571, 12.5367],
            [12.8421,  7.4697,  8.2610,  9.6471,  1.2842],
            [11.5224, 11.9143,  6.1800,  8.5539,  3.2641],
            [20.5251, 10.7957, 11.1190,  7.7349,  9.9533],
            [11.5224,  8.0909,  3.5664,  9.6554,  3.2641],
            [12.8421,  2.3976, 11.3353,  2.5299,  1.2842],
            [ 3.0038,  5.4178, 11.5020, 14.0870, 12.5367]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4369, -0.0369,  0.5173,  0.2407,  2.1105,  0.2726,  1.5376, -1.6899],
            [ 0.0216, -0.8752,  0.6395,  0.4147, -0.4942, -1.5941,  0.1596,  1.1454],
            [ 0.6271, -0.3370, -0.8709, -0.4499,  1.0180, -1.6421, -1.1549, -0.7412],
            [ 1.8631,  1.0881, -0.7999, -0.2161,  0.2370,  1.0974,  0.9086,  2.9328],
            [ 0.6743, -0.4709, -1.3428, -1.4799, -0.1099,  2.9210, -0.5159, -0.5480],
            [ 1.7934,  0.6288,  0.1021,  1.6588, -0.4611,  0.4334,  0.3611,  0.2820],
            [-0.7663, -2.7103, -0.8653, -1.3570, -0.1722, -0.3615,  0.1874,  0.5287],
            [-0.2542,  0.8456, -0.3906,  2.0311,  0.9181, -1.1502,  1.9928, -1.3447]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3384,  0.0524,  0.3961],
            [-0.3013, -0.0842, -1.8089],
            [-0.4178, -1.2995,  0.7933]], requires_grad=True), Parameter containing:
    tensor([[-0.5302]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4608,  0.5820, -1.7611,  2.1019,  4.7459, -0.2991, -2.2145, -0.9686],
            [-1.1637,  3.6139,  4.5169,  2.0840, -2.6529, -0.5129, -0.4378,  0.0558],
            [ 0.3203, -1.9055,  0.1768,  3.4946, -1.7380, -0.5031,  2.3508, -2.6883],
            [ 2.7782, -0.1621,  2.7743, -0.5079, -2.3402, -1.7334, -1.8901, -2.0237],
            [-3.6544,  0.9740,  1.1620, -3.6020,  3.7895,  1.2304, -2.5756, -1.5191],
            [ 2.1161, -1.7871, -3.8497,  2.0090, -3.1568, -3.4632, -2.5944,  2.2262],
            [-2.7014, -1.3379, -1.7922, -3.0054, -2.6310, -0.4221,  1.0915,  0.3704],
            [ 2.5385,  0.1515,  0.3733,  0.1241,  0.8123, -3.9127,  0.8896, -3.0927]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1126,  0.5642,  0.2912, -0.8654, -0.2251,  0.4741, -0.2255, -0.3118,
              0.1785,  0.0363],
            [-0.0233,  0.6342, -0.1759,  2.1895,  0.7273, -0.4651,  0.3256,  1.6460,
             -0.4944, -0.2148],
            [ 0.4659,  0.2910,  2.7533, -0.2184, -0.6324, -1.2212, -2.0652, -1.0650,
             -0.8936, -0.7691],
            [ 0.1806,  0.9787,  4.4047, -1.5630, -2.6392, -3.0742,  0.5155, -0.7315,
             -1.3316,  4.5681],
            [ 0.3127,  2.0908, -3.1261,  0.8197, -0.5984, -0.6878, -3.0362, -0.2135,
              5.7392, -1.9978],
            [-0.4404, -0.9008,  2.4964, -1.5562, -3.0494, -4.3037, -1.1227,  2.2190,
              0.5821,  3.4215],
            [-0.2975,  0.3451,  0.6624,  0.5633, -2.4067, -0.7481,  0.7291, -0.8760,
              1.7910, -2.4905],
            [ 0.1454,  0.7341, -0.9603,  0.6979, -0.7187, -2.1396, -4.5999, -1.4198,
             -1.0883, -0.5253],
            [-0.0675, -0.8445,  3.4532,  2.0053, -1.6209,  2.0779,  2.5500, -0.9321,
              0.4647, -1.3732],
            [ 0.4817,  1.7918, -0.1016,  0.0957,  3.5515, -0.8374, -0.7639,  0.9604,
             -2.1777,  0.8966]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.511 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
