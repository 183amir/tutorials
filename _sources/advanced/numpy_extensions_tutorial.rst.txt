.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.7469,  0.4703, 13.4211,  2.4669, 11.5793],
            [ 3.8887,  6.5190,  9.9483,  5.1270, 10.7900],
            [10.1416, 10.9055,  0.9514,  3.1481,  7.0161],
            [ 6.9733, 17.0120,  6.8206, 12.2196,  5.3512],
            [11.1751, 12.3710,  7.0232,  8.5558,  3.8319],
            [ 6.9733,  8.5351,  5.5200,  6.6309,  5.3512],
            [10.1416,  6.6682,  8.8978,  9.5802,  7.0161],
            [ 3.8887,  9.9560,  7.8998, 11.9435, 10.7900]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-8.2536e-01,  6.7580e-01, -2.3702e+00,  1.9542e+00, -7.6588e-01,
              8.4795e-02, -4.3124e-01, -8.7017e-01],
            [-1.0605e+00,  9.3638e-01, -2.4061e+00, -2.2699e-01,  1.0602e+00,
             -6.4099e-01, -1.7183e+00,  7.2611e-01],
            [ 5.7011e-01,  4.0849e-01, -2.8663e-01, -6.6867e-01,  1.4361e+00,
              1.4688e+00, -5.3356e-01,  5.3757e-01],
            [ 4.1143e-01, -1.2993e+00, -5.8934e-01, -5.0400e-02, -6.6763e-02,
             -1.9444e-04, -5.2621e-01, -1.5257e-01],
            [ 3.3384e-03, -1.0993e+00,  9.4526e-01, -2.9729e-01, -2.3828e-01,
             -1.0273e-01,  8.7553e-02,  1.6042e+00],
            [-4.7714e-01, -9.3529e-01, -1.2437e+00,  3.2169e-01,  6.1596e-01,
             -8.1816e-01, -4.4756e-01, -2.9695e-02],
            [ 2.0680e+00,  1.4853e+00,  2.4798e+00,  1.8909e+00, -1.3799e+00,
             -1.2960e+00, -2.2548e+00,  4.3400e-01],
            [ 2.5501e-01,  5.8858e-01, -1.1851e+00, -1.2803e+00,  1.5611e+00,
              1.3301e+00,  6.4956e-01,  2.3735e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5946, -0.2607, -0.5296],
            [-1.0365,  0.8648,  0.1552],
            [ 0.3219,  0.6433, -1.1093]], requires_grad=True), Parameter containing:
    tensor([[0.4559]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8370, -1.4502,  4.1712, -2.0012,  0.4665,  2.4578,  1.9113,  1.0577],
            [ 1.7622,  0.8311,  1.9614, -1.1931,  3.7114, -0.8743, -0.2772, -0.9939],
            [-0.1715,  0.6876,  1.8401, -4.0239, -0.9084, -1.5054, -0.3277, -0.2340],
            [-2.5381,  2.3151, -1.9004,  0.2842,  3.8595,  2.2024,  0.6989,  1.6559],
            [-0.5967,  4.1805,  0.5219,  3.1165, -0.5908,  2.2744,  1.6745, -1.8763],
            [-1.7135,  0.5992,  1.0896,  2.4299, -0.3371, -0.5298, -1.3032, -0.1227],
            [-2.8403,  2.3814,  3.3449, -6.0846,  0.2814,  0.6557, -0.1056, -3.7436],
            [ 0.7992, -2.8566, -3.4010,  0.5916,  5.8617, -0.9416,  1.8926,  2.2350]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.7819,  0.1186,  1.0039, -0.2956, -0.8699, -0.8102, -0.0398,  1.4363,
              1.3484,  0.9576],
            [ 1.4802, -1.3094,  0.6501, -1.1270, -2.2249,  0.6037,  1.3312, -0.9700,
             -2.3422, -0.8533],
            [-0.7242, -0.4940,  0.9525,  0.7272,  1.6323,  0.1828, -2.1846, -0.7153,
              2.4348,  3.3296],
            [-1.1766,  0.1499, -0.2310,  0.1654, -2.5608,  2.8621,  1.6662,  1.0357,
             -1.7228, -1.9758],
            [ 0.3771, -0.8046, -0.2942,  1.4689,  1.3822,  0.1324, -2.8243, -1.9462,
             -0.3524,  2.8193],
            [ 1.0391, -0.2886,  3.8997, -3.1056, -2.2094,  0.6866,  0.9235,  1.2670,
              0.1666, -1.3359],
            [-1.4801, -0.9309,  1.3518, -3.6870,  2.4299,  0.8899, -1.4609, -0.0426,
              0.9053,  0.9573],
            [-1.8847,  0.3811,  1.2566, -2.6111,  1.4164, -0.1623,  0.2525,  1.1099,
              0.0675, -0.1497],
            [ 1.2319, -0.7374,  0.2304, -1.9944,  0.8550, -0.6045,  0.3171,  0.3271,
             -0.1598,  0.4227],
            [-0.1717,  0.2063,  1.3359, -2.4296,  1.8519,  0.3880, -0.5966, -2.5306,
              0.5417,  1.3595]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.276 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
