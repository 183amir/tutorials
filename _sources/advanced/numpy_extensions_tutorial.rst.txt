.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[13.5704,  5.2610,  2.3120,  5.4500,  1.4565],
            [12.1965,  6.9110,  8.0926,  7.5618, 13.1593],
            [ 6.1565, 11.2382,  3.1450, 14.7924,  9.0991],
            [ 4.8126,  7.6694,  8.1328,  1.3538,  5.3397],
            [ 2.5251,  9.6461,  7.8465,  2.4011,  4.8652],
            [ 4.8126,  2.5343, 10.2160,  8.8458,  5.3397],
            [ 6.1565,  4.7379,  3.7371,  5.3798,  9.0991],
            [12.1965,  3.9708,  4.3560,  2.4340, 13.1593]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-3.9417e-02,  1.4808e+00, -2.2670e-01, -5.3095e-01,  2.3009e-01,
             -8.4503e-01,  4.7586e-01, -3.7973e-01],
            [ 6.1943e-01,  2.0575e-04, -1.0523e-01,  5.6665e-01, -1.0542e+00,
              1.3272e+00,  1.4115e+00,  2.0757e+00],
            [-6.0930e-01, -1.8060e-01,  1.4217e+00,  2.1538e+00,  2.4371e-01,
              1.6260e+00,  5.5565e-01,  2.8994e-01],
            [ 1.5330e-01,  1.5709e+00,  4.7616e-01, -9.1864e-01,  1.7533e+00,
              1.5128e-01, -1.8221e-01,  7.6433e-01],
            [-1.3604e+00,  1.6220e+00,  5.6565e-01,  4.9935e-01, -1.0679e+00,
             -7.9452e-01,  7.1107e-02,  1.2465e+00],
            [ 1.0890e+00,  1.0721e-01, -1.7232e+00, -1.7383e-01, -3.6515e-01,
             -6.5053e-02,  5.4681e-01, -1.4119e+00],
            [ 9.1692e-01, -2.4855e-01,  9.2755e-02, -7.1866e-01,  1.0017e+00,
              3.1035e-01,  9.0026e-01, -6.5467e-01],
            [ 6.4517e-01, -1.5233e+00, -7.0647e-01, -7.1186e-01,  9.8178e-01,
             -5.3378e-01,  8.0164e-01, -4.4078e-02]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3172,  0.8162, -0.9335],
            [-0.0261,  1.2153, -0.7083],
            [ 1.7329, -0.7491,  0.2607]], requires_grad=True), Parameter containing:
    tensor([[0.4496]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.7064, -1.7119,  6.2308, -1.7689, -3.0039,  0.0856, -1.3127,  4.2681],
            [ 1.3175,  0.1214,  4.3816, -5.9246,  0.3772,  1.4332,  0.9402, -3.8126],
            [ 7.5273,  0.1301, -2.0150, -0.2767, -0.8254,  0.2080, -1.0988, -1.2522],
            [ 0.2078, -2.2476,  0.3077, -1.4050, -0.9049,  1.4242, -2.3677,  3.4623],
            [ 0.0707,  3.7239,  0.3668,  1.0318, -2.7900,  3.1283, -5.1228,  5.0865],
            [ 3.2301,  2.4772,  0.2862,  0.6258,  3.5790, -6.3474,  2.0192, -2.2368],
            [ 3.9864, -1.2137,  3.4881,  3.6227, -1.3587,  1.3298,  2.6706, -3.7359],
            [-1.4612,  2.8957, -1.3345,  0.8337,  4.6380, -4.7451,  6.2092,  1.7411]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0617,  0.1315,  0.2588, -1.4134,  2.1989, -1.4811,  0.7639, -0.8612,
              0.8644,  0.0602],
            [ 0.0394,  0.2269, -0.5224, -0.4692,  1.4091, -1.0292, -0.7959, -0.9222,
             -0.0317,  0.6298],
            [ 0.5952, -1.2900, -0.3906,  2.8594, -0.8769,  0.7156, -3.2679,  2.2241,
             -2.0736,  0.6713],
            [ 0.2366, -1.8172,  4.1053, -0.1310,  6.7806, -4.8577,  0.2996, -0.3990,
              0.0573,  0.9238],
            [-1.7299,  1.7635, -2.9080,  0.4909,  4.0450, -3.3496, -0.1282,  0.3869,
             -2.1292,  0.2742],
            [-2.5257, -2.1907,  2.0305,  3.7956, -0.8285,  0.2534, -3.8830,  4.5060,
             -0.9103,  0.1708],
            [ 2.5858,  1.6190, -0.0111,  2.1326, -2.1726, -1.3202,  4.7261, -3.5076,
              0.9488, -0.3260],
            [-0.8426,  0.0080, -2.6153,  0.8934, -2.6737, -1.4732,  1.9656, -2.7320,
              1.7715, -2.0054],
            [-2.9407,  4.7551, -1.8279, -1.7283,  2.8859,  0.9069,  0.7123,  2.3393,
              0.2149, -0.5752],
            [ 4.5437, -2.7969,  0.9472,  0.1375, -1.4660,  2.0768,  0.3759,  1.7443,
             -0.7034,  0.3081]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.516 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
