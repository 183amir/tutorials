.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[4.1409e-03, 1.2367e+01, 1.2218e+01, 6.7959e+00, 1.4265e+01],
            [7.2117e+00, 7.3567e+00, 2.9771e+00, 6.1086e+00, 8.8622e+00],
            [3.7086e+00, 7.2870e+00, 4.9470e+00, 6.8226e+00, 4.2098e+00],
            [7.6478e+00, 1.1412e+01, 5.1242e+00, 1.6697e+00, 8.2944e+00],
            [9.9757e+00, 6.6575e+00, 8.2342e+00, 4.7686e+00, 2.6173e+00],
            [7.6478e+00, 7.1617e-01, 5.2644e+00, 2.5442e+00, 8.2944e+00],
            [3.7086e+00, 7.5160e+00, 6.1473e+00, 7.8539e+00, 4.2098e+00],
            [7.2117e+00, 5.4314e+00, 1.3881e+01, 8.4138e+00, 8.8622e+00]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1130,  0.1683, -1.4558, -0.6589,  0.4137, -0.4666, -0.7012, -1.5453],
            [ 0.1223,  0.0149, -0.0486,  1.2433,  1.4800,  0.0675,  0.1222,  0.0059],
            [-0.3614, -0.9980,  0.3795, -0.3596,  0.1439, -0.4559, -0.3613,  0.0638],
            [ 0.5377,  0.3046,  0.2868, -1.4012,  1.1302, -0.8086,  1.6353,  0.8984],
            [-1.6726, -0.2270,  0.4650,  0.6988,  1.4928, -0.2324,  0.7003, -0.3112],
            [-0.3440, -1.0396,  1.9066,  1.6241,  1.7051, -2.9048,  0.0713,  0.0598],
            [ 0.2553, -1.8532,  0.5231,  0.4802,  0.9388,  0.6020, -0.2281, -0.3097],
            [ 0.2229, -0.4488, -0.8500,  1.6015,  0.1175, -0.8609, -1.3800, -0.0818]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0602, -0.1606,  0.2960],
            [-1.7128,  0.2662,  1.7045],
            [-0.6200,  0.8406,  0.8559]], requires_grad=True), Parameter containing:
    tensor([[-1.2624]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6470,  0.2405,  0.5561, -2.6193,  0.0698,  2.7795, -3.1559, -2.0435],
            [ 0.3023,  2.0249, -0.4684, -0.5250, -2.0166, -0.3401, -5.5453, -0.8258],
            [ 0.4052,  3.1967, -2.5336, -1.4039, -2.2606, -3.6517, -4.3712,  0.6507],
            [ 2.7382, -1.7066, -3.2873, -1.2920, -6.5935, -1.9033, -0.9357,  0.4722],
            [-2.0612, -5.7978, -2.6381, -3.1466, -3.9004,  1.8075,  0.0583,  1.0194],
            [-2.9117, -2.3059,  0.0089, -1.9364,  1.7984,  0.9942, -1.4690,  3.9108],
            [ 2.2215, -1.3396, -1.1838,  0.4375,  0.6597, -0.5037, -2.5864,  3.1320],
            [ 1.9497, -2.3747, -3.2057, -2.2078, -3.8311, -0.6579, -0.9029,  0.8236]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5237, -0.7932, -1.4637,  0.6840, -0.4315, -1.0252,  1.3293, -0.1303,
             -0.4004,  0.1387],
            [-1.5283, -0.3136, -1.5319,  2.7467, -0.4681, -3.0941,  1.5713,  1.2508,
             -0.9043,  0.4147],
            [-2.4442,  1.1765,  2.7003,  2.6819, -2.1432, -1.7090,  0.0216,  1.7355,
              2.7490, -1.4000],
            [-3.0792,  0.6082,  4.5120,  0.5765, -3.3613,  1.0291, -0.5078,  1.1705,
              2.3713,  1.0209],
            [-2.6637,  1.0695,  3.0220,  0.3494,  0.1295,  0.0793, -2.7411,  0.2334,
              1.4907, -0.4709],
            [-1.5657,  1.2097,  1.2011,  2.4363, -2.1170, -5.9494, -2.1822,  1.9105,
             -0.3048, -2.0464],
            [ 0.1356,  2.4495, -0.0380,  0.8264, -7.0604, -4.7820,  2.3831,  2.2113,
              2.3368,  1.2480],
            [ 1.1268,  3.3203, -2.0389, -4.3341, -3.5385,  0.6234,  4.0273,  3.9343,
              3.8073,  1.2794],
            [ 0.3830,  0.4940, -1.9050, -3.0949, -1.3091,  3.8212,  2.4883,  1.9548,
              0.1554, -1.5102],
            [-0.0393, -0.0186,  0.5085, -1.0989,  0.2868,  1.6619, -0.0936, -0.2112,
             -1.1842, -0.9061]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.580 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
