.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0256,  7.3516, 15.3070,  2.8970,  0.2735],
            [ 5.1049,  6.2934,  5.5786,  5.3738,  4.2746],
            [ 9.2017,  8.8369,  4.4645, 13.2615,  7.0794],
            [ 1.6185,  4.8714, 10.0859,  3.2827,  6.6731],
            [ 2.1980,  4.7592, 11.8861,  5.0754,  0.1248],
            [ 1.6185,  7.0041,  7.5056,  8.5319,  6.6731],
            [ 9.2017,  5.8585,  3.7573,  5.5097,  7.0794],
            [ 5.1049,  9.8641,  2.1495,  4.0038,  4.2746]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 5.7834e-01, -1.2074e+00, -7.4799e-01,  1.5119e+00,  3.0782e-01,
              3.6108e-01, -1.3074e+00,  6.7676e-01],
            [-1.4890e+00,  7.1304e-01,  9.1591e-01,  1.2884e+00, -2.0663e-01,
             -1.5268e+00,  1.0971e-03,  2.7958e-01],
            [-1.5073e-01, -2.0537e-01, -1.2850e+00, -8.8849e-01,  1.9046e+00,
             -3.7318e-01, -5.7944e-01,  4.8724e-01],
            [ 2.4843e-01,  3.4870e-02, -1.2646e+00,  4.0508e-01, -1.0366e+00,
             -8.4551e-02,  5.2319e-01, -7.1886e-01],
            [ 1.1142e+00,  1.4252e-01,  3.1048e-01,  1.0623e+00,  5.1547e-01,
             -5.0873e-01, -6.8624e-01,  4.1622e-01],
            [ 1.6736e+00,  1.1735e+00,  6.9610e-01, -8.7758e-02, -5.7119e-01,
             -2.1860e-01, -9.9624e-01,  1.1641e+00],
            [ 3.5146e-01, -2.3293e-01, -7.4784e-02,  9.8495e-01,  3.0641e-01,
             -2.5832e+00, -5.5117e-01,  4.3667e-01],
            [ 1.1411e+00, -1.3748e+00, -5.1568e-01, -5.6419e-01, -1.2566e-01,
             -2.2149e-01, -1.4926e-01, -1.2178e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4544, -0.4312, -1.1132],
            [ 0.0318, -0.1649,  1.6163],
            [-0.5555,  0.4717,  0.2634]], requires_grad=True), Parameter containing:
    tensor([[0.6125]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.9318e-01,  1.9883e+00,  7.1505e-01, -6.0594e-02,  2.6748e-01,
             -3.7483e+00,  3.4539e+00, -2.0755e-01],
            [ 4.4054e+00,  5.3413e-01,  6.2636e-01,  1.0593e+00, -6.6927e-01,
              1.5913e+00,  4.6866e+00,  1.1560e+00],
            [-6.2845e-01, -2.1531e-01,  1.3246e+00,  2.7558e+00,  3.3204e+00,
             -7.9320e-02,  1.8039e+00,  1.1454e+00],
            [ 3.3028e+00, -8.3643e-01,  5.6409e-01,  2.2921e+00,  1.2399e+00,
              3.6574e+00,  1.8622e+00, -2.7395e+00],
            [-1.0943e+00,  1.3564e+00,  2.0285e+00, -3.6470e+00,  1.4584e+00,
              1.6883e+00, -4.0929e-01,  2.4808e+00],
            [-2.8121e+00,  2.8500e+00, -1.7141e-01,  4.2880e+00,  2.6345e+00,
             -1.1209e+00, -2.2870e+00, -2.0967e+00],
            [ 1.7867e+00, -1.1160e+00, -7.5132e-01,  1.9571e+00,  1.0079e+00,
              3.0033e+00,  2.4214e+00,  1.9329e+00],
            [ 3.8176e+00, -1.0617e-02,  5.2144e+00, -1.4633e+00, -5.0180e-01,
             -3.1267e+00, -3.3915e-03, -3.0312e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0139,  0.4312, -0.8713, -0.6875,  1.5520, -0.8282, -1.0731,  1.1646,
             -0.3099, -0.9940],
            [ 0.4592,  0.1333, -2.3270,  0.4327,  0.5814,  1.4456,  1.1038, -2.9514,
             -0.5191,  1.9523],
            [ 0.4262, -1.1879,  1.6797,  1.9963, -3.7045,  0.2761,  2.8157, -0.0831,
             -0.7269, -0.2082],
            [-0.3435, -0.5908,  2.7310,  0.0873, -0.2616, -2.9385, -3.2885,  3.4506,
              4.3296,  0.4743],
            [-0.1244,  0.2293, -0.8702,  0.5272,  2.0403, -2.1648,  3.3471,  1.2103,
             -1.6220, -1.4334],
            [-0.7306,  1.2204,  1.7824, -0.2317, -3.7276,  0.9352,  2.5627, -5.6580,
             -0.4112,  1.0655],
            [-1.1657,  1.4970,  0.9726, -0.8236, -1.1338,  5.5781, -6.1999, -0.8440,
              3.0007, -0.1927],
            [ 0.6954, -1.0142, -2.2262, -0.8188,  5.2287, -1.9056,  1.3080, -0.9117,
             -0.3232, -3.4137],
            [ 0.8413, -1.1072, -0.7247,  2.0280, -0.7855, -0.3911,  0.5931,  1.7450,
             -1.3125, -0.2350],
            [-0.1216,  0.0312, -0.0182,  0.6105, -0.4922, -0.4456,  0.5196, -0.0146,
              0.0090,  0.0387]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.491 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
