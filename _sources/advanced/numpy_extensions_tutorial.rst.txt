.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9811,  5.1377, 12.0142,  7.0540,  8.2590],
            [ 7.6931,  6.0424,  2.4932,  5.1733, 10.9663],
            [12.7828, 12.1551,  2.9239,  5.1406,  8.9800],
            [ 9.8853,  3.5369,  9.0986,  4.3646, 11.7404],
            [13.2164,  4.1321,  5.8662,  5.0532,  8.4392],
            [ 9.8853,  4.3252,  3.2244,  8.0723, 11.7404],
            [12.7828,  1.9645, 14.5741,  8.7619,  8.9800],
            [ 7.6931,  7.9452,  1.3817,  2.0230, 10.9663]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.0443, -1.6139, -1.6843,  1.1752, -1.3722,  0.5023, -1.0416, -0.5671],
            [ 0.1241,  0.9681,  1.4897,  0.7566,  0.8664,  0.9058,  0.7075, -0.5063],
            [ 0.0743, -1.2218,  1.1517,  0.3743,  0.3298, -1.7955,  1.2069, -0.2476],
            [-0.3265, -1.5274, -0.4756, -0.3863, -1.4590,  1.1477, -0.1585,  1.8835],
            [ 0.8615, -0.2220, -0.4500,  0.5651,  0.6111, -0.1938,  0.9259, -0.1579],
            [-0.3930,  1.9777,  0.5365,  0.5540, -0.1953,  0.4118,  1.2772,  1.0156],
            [-0.1292, -0.3210,  0.8613,  0.6402, -2.0254,  0.4874,  0.9608,  0.7423],
            [ 0.9246, -0.5908, -1.2159,  1.0951, -0.4946,  0.2348, -0.5827,  1.0340]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7296,  0.6923,  0.2962],
            [-0.3033, -0.6863, -0.1869],
            [-1.0807, -0.2085,  1.6915]], requires_grad=True), Parameter containing:
    tensor([[-0.1255]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0325, -4.1092, -5.2332,  1.5312,  0.3757,  1.7321,  2.0113, -4.2873],
            [-1.3617, -2.7762,  1.1346, -0.6574,  1.9178, -0.2518,  1.4925,  0.9977],
            [-1.6924, -1.4063, -0.1555,  0.0314,  2.3431, -0.4946, -2.8095, -0.4520],
            [-0.0754,  0.6065, -0.1325,  1.4999, -3.0505, -5.1095,  2.9488,  5.8017],
            [ 1.1220, -3.4210, -0.5664,  4.7902,  3.6420, -2.8596, -2.3863, -5.1174],
            [ 0.6893, -3.3600,  2.7066,  2.1544, -5.4238, -5.2746,  0.7809,  2.4743],
            [-0.3916, -1.2695, -1.3296,  3.7428,  4.1709, -1.3984, -3.5595, -2.7381],
            [-1.2844,  2.4843, -0.5500,  0.5614, -3.2951, -5.6110,  2.1365,  2.6522]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1781,  0.2704, -0.6222,  1.3130, -1.8496,  0.1035, -0.6432,  1.0307,
              0.0533, -0.1185],
            [ 0.1067,  0.0912,  1.5608,  0.1048,  0.9588, -1.8583, -0.1103, -0.1211,
              0.2276,  0.1034],
            [ 0.3337, -0.7518,  0.4187,  4.0334, -1.0924, -2.5451,  0.5577, -0.5593,
              1.4739, -0.7782],
            [ 0.2938, -1.3834, -0.9231,  2.2844, -0.9896, -3.7081, -1.3675,  3.3736,
              0.5962,  0.0751],
            [ 0.4396, -4.0693, -0.0660,  3.7084,  0.3449, -3.1322,  1.5769,  0.0293,
             -1.2835, -0.5321],
            [ 0.4291,  0.5831, -5.7966, -1.3285,  4.1536, -3.0385, -0.0612,  4.8263,
              2.0439, -0.5162],
            [ 0.5735, -1.9000,  0.4118,  2.5293, -3.4469,  3.5086, -0.1619, -2.3903,
             -0.0558, -0.2472],
            [-1.0360,  3.6279,  1.1702, -5.7427,  2.5809,  1.4671, -3.6365, -1.9952,
              0.1185,  0.7236],
            [-0.1807, -0.4112,  0.3045,  0.1440, -2.2032, -0.6479, -0.1378, -3.5785,
              2.3075,  3.9823],
            [-1.6285, -0.4322,  3.1455,  0.6172, -0.0863, -1.8536, -1.5960,  2.3098,
              0.0094,  0.1101]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.503 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
