.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.6138,  4.6152,  4.8760,  5.5510,  4.4729],
            [10.6634,  3.7975,  4.4776,  1.8924,  5.3383],
            [ 4.3279, 12.0338,  5.3855,  3.9982, 11.3346],
            [ 6.0342,  2.8898,  4.3842,  2.7866,  9.8152],
            [ 5.7919,  4.0519,  7.1859,  1.2849,  7.7926],
            [ 6.0342,  2.9869,  9.7442,  8.2612,  9.8152],
            [ 4.3279,  9.2115,  4.9321,  2.0108, 11.3346],
            [10.6634,  6.0695,  1.5036, 12.0446,  5.3383]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2375, -0.5792, -0.6205, -0.3495,  0.6576,  1.1259, -0.8188, -0.6209],
            [-0.2411,  0.8869,  0.0468,  0.3866,  0.8575,  0.5004,  0.4814, -0.7207],
            [ 0.4597,  0.4009, -0.9598, -0.2111,  0.3494, -1.8784, -0.0629,  0.9361],
            [-0.2580, -0.7061,  0.2330, -1.1210, -0.0069, -0.4792, -1.1294,  0.1227],
            [-1.2488,  0.1286,  0.2231, -0.3644,  0.2433,  0.5981, -1.4748, -1.6673],
            [-1.5700, -0.6263,  0.2699,  0.5486, -0.3748,  0.2109, -1.6132,  0.7908],
            [ 2.1280, -0.9686,  0.6804, -1.8351,  0.2185, -0.0638,  0.6781, -0.5692],
            [ 0.2250, -0.2659,  0.6523,  0.6483,  0.3618,  0.7831,  1.2803, -0.0845]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3674, -0.4851, -0.7660],
            [ 0.1937, -0.1199,  0.1329],
            [-0.3273,  0.9593, -1.0585]], requires_grad=True), Parameter containing:
    tensor([[0.4556]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.5042,  3.7463, -2.4918, -1.5571,  3.9611, -1.4641,  1.9504, -1.5241],
            [ 0.4727,  0.6577,  2.1002,  0.9462, -1.3433,  4.6845, -0.2000, -0.8409],
            [ 0.7895,  0.3143,  2.5730, -1.6103,  0.8198,  1.4214,  0.6878,  0.4187],
            [-2.1406,  1.3855,  0.7102,  3.0777, -2.6194,  3.1797, -0.0324,  0.8849],
            [ 3.1646, -0.6731,  2.5021, -3.7930,  1.8278, -0.6386,  2.6502,  1.7358],
            [-0.1852, -1.6481,  0.3390,  2.6836, -2.0517,  0.9666, -2.4486,  1.4156],
            [ 1.8773,  0.6808, -0.1718,  3.1404, -1.5193,  0.0526,  0.6661,  0.3601],
            [ 0.6033,  1.5436, -0.3556,  0.4519,  1.6601, -0.0758, -0.4781, -0.5191]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.5682e-01, -8.9594e-01, -4.1651e-02,  1.9671e+00,  3.3552e-01,
             -1.4520e+00, -1.7073e+00,  6.5627e-01,  3.7233e-01, -9.3239e-01],
            [ 4.8273e-01, -1.1528e+00,  4.9524e-01, -1.7725e-01, -1.2053e+00,
              6.7831e-01, -9.0312e-01, -2.7982e-01,  8.5427e-01,  1.0269e+00],
            [-2.0569e-01,  1.1475e+00, -9.1022e-01, -2.1362e-01,  4.3659e-01,
              1.0189e+00,  1.4892e+00, -3.4501e+00,  1.4876e+00, -1.0715e+00],
            [ 1.2748e-01, -5.2932e-02, -3.1995e+00,  5.1585e+00, -2.2031e+00,
              2.5705e-02,  2.0241e+00, -1.3924e+00, -9.6005e-01,  1.8258e-01],
            [ 1.1295e-01, -6.8715e-01,  1.4363e+00,  6.2923e-01, -1.0789e+00,
             -2.0224e+00,  3.4240e+00,  2.6332e+00, -2.0007e+00,  3.7004e-01],
            [-7.1048e-01,  1.6919e+00, -1.8775e+00,  6.2039e-01,  2.5386e+00,
             -1.4101e+00, -3.1756e-02, -1.1949e+00,  8.8307e-01, -8.1459e-01],
            [ 3.3225e-01, -6.9511e-01, -4.8861e-02,  1.8249e-01, -2.1247e-01,
             -1.0795e+00, -4.7642e-01, -9.2906e-01,  2.0400e+00,  1.1751e+00],
            [ 3.9431e-01, -1.0842e-01, -1.1620e+00,  1.2453e+00, -2.3987e-01,
             -1.2336e+00,  1.5077e+00, -2.4306e+00, -1.0584e+00, -3.2500e-01],
            [ 4.3398e-02, -7.8563e-02,  6.6235e-01, -9.7597e-01,  3.6502e-01,
              3.7897e-03, -1.9329e-01,  4.4739e-01, -2.2610e+00,  2.4197e+00],
            [-2.3338e-01,  6.8592e-01, -9.5732e-01,  4.7888e-01, -5.3465e-01,
              9.9900e-02, -4.1357e-01, -1.4283e-01,  9.2996e-02, -8.9836e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.532 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
