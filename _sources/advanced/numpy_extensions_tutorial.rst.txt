.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.0957,  8.4352,  9.4702, 11.7367,  7.6105],
            [ 2.5141,  5.8075,  7.6331, 10.7576, 11.4152],
            [ 7.2901, 14.7467,  4.9916,  5.6316,  4.2238],
            [ 3.9042,  5.5566,  5.0387,  7.1637, 10.7738],
            [ 4.7817,  6.1103,  2.2053,  5.3672,  3.0617],
            [ 3.9042,  8.7871, 18.9812, 18.3686, 10.7738],
            [ 7.2901,  3.9757,  7.8653,  5.6634,  4.2238],
            [ 2.5141,  6.5600, 11.7683,  0.9205, 11.4152]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1146,  2.4373, -0.2105, -2.2776,  1.2346, -0.3437, -0.1504,  0.0496],
            [-0.9435, -0.2301,  0.9999, -1.8608, -0.1879,  0.0111,  1.3538, -0.4940],
            [-0.6485,  0.1957, -1.6900,  0.7052, -0.4245, -0.6222,  2.1299, -1.9671],
            [-1.1705,  2.8150,  0.1741, -0.0607, -0.6745,  0.3792, -0.9334, -0.1917],
            [ 1.6942,  0.0155,  0.0512,  1.1813, -0.8166, -1.4658, -0.7153, -0.6712],
            [ 0.9631,  0.6741, -1.0263, -0.6044,  0.5032, -0.2927, -0.8915,  0.3551],
            [-0.4601,  0.2365,  0.0301, -2.1847, -0.7691, -0.8477, -0.1708, -0.5785],
            [ 0.8146, -1.0280, -0.1118,  1.6800,  1.7859, -1.5832, -0.5965, -1.7846]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1193,  1.1939,  0.1598],
            [-0.6375,  0.2338,  0.0883],
            [ 0.3457, -0.5418,  0.8859]], requires_grad=True), Parameter containing:
    tensor([[-0.9171]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.3407, -3.2904, -0.8398, -2.0707,  0.5813, -3.3306,  1.1417,  3.0892],
            [-3.6324, -1.6465, -2.8909,  2.2002,  0.7078, -1.1933, -3.9971, -0.6362],
            [ 0.4092, -0.8065, -2.6570, -4.4449, -0.5373, -2.3834, -1.5423,  2.8572],
            [-1.3351, -0.5195, -0.5494, -0.2557,  0.3924, -0.2577, -1.2216, -1.6382],
            [-0.8351, -3.2853, -0.1939, -6.0328, -1.6585, -5.0578, -3.7422, -5.1867],
            [ 0.1747,  0.2615, -0.5116, -0.6599, -5.6548, -2.1534, -3.7805, -0.6394],
            [-1.3935,  0.2710,  0.7903,  2.2850,  1.6081, -0.1233, -1.2788, -3.9367],
            [-2.3084, -5.7185, -3.8603, -5.3087, -2.6329, -0.4848, -1.8989, -2.3378]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.1190,  3.6693,  2.1165,  0.4631,  1.7444,  3.0969,  1.7463,  0.1072,
             -0.2673, -0.0396],
            [-0.6384, -0.6484, -0.7743,  0.1095, -1.1042, -1.7582, -0.4919,  1.1715,
              0.5892,  0.0535],
            [-0.2140, -1.1440, -0.3036, -0.2465, -0.4447, -2.9761, -2.4320,  1.3092,
              2.3263,  0.0894],
            [ 0.5004, -1.0983, -1.0201, -2.5829, -1.3028, -1.6746, -1.7695, -4.2570,
             -0.8792,  0.3967],
            [-1.8500, -1.2548, -1.3782, -2.1302, -1.5322,  1.1637,  0.9116,  0.2682,
             -1.9912,  1.3539],
            [-0.0210, -0.8340,  0.7650, -0.4024,  0.3429, -0.6688, -0.3898, -1.7341,
             -0.7486, -1.0786],
            [-0.5865, -0.9497, -0.2160,  2.5766,  1.2581,  2.1029, -1.1591,  0.0943,
             -0.6107, -0.3610],
            [-1.0549, -0.0502, -0.5409,  4.5778,  0.9508, -0.7878, -1.9769, -2.6836,
              0.3639, -0.7198],
            [ 0.4384, -0.2297, -0.7905, -1.5297,  2.0717,  0.2983,  2.5246, -1.2308,
              0.1648, -0.5790],
            [-0.3427,  0.6295, -0.4936, -0.0524,  0.4724,  1.0818, -0.1558,  0.1222,
             -1.7106,  0.1611]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.481 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
