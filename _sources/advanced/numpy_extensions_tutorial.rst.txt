.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.6450,  4.6684, 11.4497,  6.0136,  3.4504],
            [10.6875,  3.4708,  3.0731,  6.2640,  9.3490],
            [ 3.1804, 11.5484,  4.8610,  1.6793,  7.3414],
            [10.4457,  7.7245,  5.2424,  8.7770,  9.2483],
            [ 8.6374,  3.2919,  8.9883,  5.9964,  5.3551],
            [10.4457,  2.2065,  6.0330,  1.5749,  9.2483],
            [ 3.1804,  5.3245,  9.6134,  9.2180,  7.3414],
            [10.6875,  3.5557,  5.8436,  6.0513,  9.3490]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 3.4259e-01, -8.6968e-01,  6.2139e-01,  1.0513e+00,  3.8709e-01,
              1.6497e-01, -1.0207e+00, -1.6892e-02],
            [-6.9334e-01,  6.8546e-01, -3.8091e-01, -2.9997e-01, -4.7703e-01,
             -4.7289e-01, -3.2448e-01, -7.2630e-01],
            [ 5.6893e-01, -2.7354e+00,  4.6145e-01, -2.5823e-02,  1.7624e-01,
             -2.0964e+00,  3.9808e-01,  3.6274e-02],
            [ 2.4112e+00, -4.4625e-01, -5.6287e-01,  4.6600e-01, -6.6437e-01,
              5.8763e-01, -4.7191e-01,  1.0668e+00],
            [ 7.1534e-01,  4.5215e-02, -4.5502e-01,  1.9666e+00, -6.9359e-04,
              2.3052e-01, -2.7243e-01,  9.2927e-01],
            [ 5.6347e-02,  7.8950e-01,  4.2323e-01,  5.0311e-01, -7.2765e-01,
              3.6630e-02, -1.6195e-01, -8.8096e-01],
            [ 6.3430e-01,  1.2651e+00,  1.0080e+00, -3.1875e-01,  3.9582e-01,
              4.3792e-01, -4.1362e-01,  2.5302e+00],
            [-4.2888e-01, -9.5308e-01, -1.2496e+00, -6.6681e-02, -3.8960e-01,
             -1.5627e-01,  1.9231e-01,  8.2049e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5015,  1.6488,  0.6607],
            [ 1.1819,  1.9945,  0.3669],
            [-0.2905,  0.1793,  0.2034]], requires_grad=True), Parameter containing:
    tensor([[0.1380]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.7816, -0.3615, -1.6998, -0.6814,  1.7691,  2.1074,  3.8185,  3.1739],
            [-3.4973, -3.4078,  1.3765,  0.6140, -0.5424,  0.6110,  5.9666,  3.6819],
            [-4.0442, -2.3647,  1.4557,  4.2155,  1.1254,  0.5568,  2.2627,  3.9347],
            [-2.7057,  0.1173,  2.3700,  3.3612,  6.6159,  1.7351, -4.3189, -3.7709],
            [ 1.1090,  3.3233,  3.4186,  1.3635,  2.0504,  2.8383, -0.7882, -2.6160],
            [ 0.2935, -1.1470,  3.8347,  1.9822,  0.0575,  3.6683,  6.9452,  1.7164],
            [-3.2637, -4.1005, -1.4104,  0.9726, -0.5073,  2.4659,  7.0695,  4.1333],
            [-1.8834,  0.3195, -1.1652, -2.5018, -4.1045, -3.8222, -0.5193,  2.6173]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0398, -0.5993, -1.5823,  2.0729,  3.6731,  1.9102, -0.5867,  0.8352,
              1.4977,  0.7331],
            [-0.7608, -2.3291, -1.6264, -0.2768,  1.8033, -2.9878, -5.4108, -0.7087,
              3.5476,  1.3324],
            [-0.2010, -3.5300, -1.6613, -0.5714, -3.2612, -2.3223, -3.7683, -0.8173,
              2.8838,  0.9380],
            [ 3.1355, -2.3013, -7.0336,  0.6986,  1.1856, -2.1151, -1.1463, -3.4665,
             -1.6773, -0.5114],
            [ 3.7944,  3.6361, -6.1398, -5.0908, -0.9162, -2.7371, -2.3906, -1.1131,
             -1.9508, -0.1329],
            [ 3.1851,  6.2787,  1.9007, -4.1102, -1.2236, -0.0122, -2.1737, -2.5298,
             -1.1989, -0.7373],
            [ 1.6383,  4.2489,  3.4047,  2.9728,  1.6134, -1.9635, -6.7855, -6.2548,
             -3.8964, -0.7745],
            [-0.6101, -0.4345, -0.5654, -0.7197, -0.4400,  0.2522, -0.2661, -0.6882,
             -1.4003, -0.5319],
            [-0.2284, -1.9094, -2.8224, -1.5964, -0.8029,  1.1399,  3.3261,  2.7164,
              0.0194, -0.1874],
            [ 0.0500,  0.2968, -0.0912, -0.2376, -0.1189, -0.3305, -0.2603,  0.4402,
              0.2612, -0.0152]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.303 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
