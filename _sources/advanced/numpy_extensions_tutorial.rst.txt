.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.0001,  3.0566, 12.1204,  3.9841,  9.8581],
            [ 3.1159,  7.6346,  5.1844, 11.9108,  4.4324],
            [ 1.9233,  6.5934,  6.8898,  3.9378,  6.4369],
            [ 1.7884,  3.4479,  4.8495, 21.8714,  6.2074],
            [ 0.0787,  4.0542,  6.7705,  9.8643,  7.1051],
            [ 1.7884,  4.4615,  6.4902,  7.7440,  6.2074],
            [ 1.9233,  5.6105,  2.4568,  6.8516,  6.4369],
            [ 3.1159,  8.5874, 12.3839,  6.9227,  4.4324]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3603, -0.6514,  0.3782,  1.0639, -2.0354,  0.5376, -1.6802,  1.4530],
            [ 0.1457,  0.1145,  0.1889, -1.3546, -0.7503, -0.1831,  0.4747,  0.4729],
            [ 1.2732, -0.8058, -0.2238,  2.2300, -1.1287,  0.3175, -0.3270, -1.1127],
            [-0.0344, -1.7653,  0.6194,  0.2537,  0.6533,  1.0303, -1.8645,  1.2316],
            [-0.1196,  0.2256, -2.2333, -0.0574,  1.2660, -0.5920,  0.1528,  0.3083],
            [-0.0596, -1.0150, -0.4215, -0.9276,  0.9930,  1.4862, -0.5716,  0.3098],
            [ 0.2136,  0.3254, -1.3305,  0.1740,  1.2299, -0.4926, -0.7961, -0.1627],
            [ 0.0047,  1.4578, -1.6812, -0.2581,  0.5621, -0.7222, -0.4668, -0.9623]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-2.2704,  1.1889,  0.2143],
            [ 0.7933, -0.5659,  0.4040],
            [ 1.6837, -0.2468, -0.7567]], requires_grad=True), Parameter containing:
    tensor([[-2.4034]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.5170, -3.8063, -5.3477,  3.0834, -4.6032, -2.4860, -1.8283, -6.5321],
            [-2.9225,  1.4278, -7.1051, -3.9144, -2.7169, -3.0915, -5.8876,  5.2157],
            [-1.4849, -7.4582,  4.0528, -5.7790, -7.2937, -0.3564, -1.4175,  3.5061],
            [-3.0954, -2.8623,  0.3338, -2.0759, -7.0073, -3.2174,  1.8216, -6.4853],
            [-6.2491,  5.3543, -1.9014, -6.7458,  4.4712, -3.0814, -2.7687, -8.9345],
            [ 4.3013, -4.8108, -4.0885, -2.6294,  4.1305, -4.5005, -6.3027,  0.8198],
            [-2.1502, -3.0059, -9.2320,  4.2051, -3.6946, -1.1358, -4.6652,  2.7097],
            [-1.2182, -7.8704,  0.3930, -2.5297, -4.7167, -5.7243,  2.3934, -9.2926]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8585,  0.7498,  0.8833, -8.0134,  4.0546,  2.8708,  3.7829, -3.0715,
             -0.3475,  0.0225],
            [-0.6580,  2.8094,  1.0861, -1.9308,  0.8513,  0.5360, -1.5753,  0.0342,
             -0.5138,  0.1211],
            [ 3.1477, -7.5232,  4.0212,  9.7129, -5.6922, -2.4522, -0.8029, -0.7098,
              1.5498,  0.1423],
            [ 1.2819,  3.5202, -3.0468,  3.1103, -0.2000, -1.5907,  4.3675, -2.9129,
             -0.4328,  0.0174],
            [-1.4341,  1.8168, -0.6704, -6.6192,  3.7624,  0.7293, -3.1783,  4.1747,
             -1.9134, -0.1929],
            [-1.6152, -0.8200, -6.4757,  3.0835,  0.3313,  1.0738, -2.3459, -0.1915,
              1.8143, -0.9660],
            [-0.2455, -2.4007, -1.2261,  3.2841, -4.7850,  0.6243, -2.5058,  3.3609,
             -1.3154,  0.5647],
            [-0.6950, -0.2865,  5.3998, -0.4761,  3.1017, -5.0427,  2.2259, -4.2525,
              2.9911, -0.4831],
            [ 0.2671,  1.6731,  1.4238, -1.9632,  0.9229,  0.5296, -1.8764, -0.8934,
             -1.1258,  1.5814],
            [ 0.7125,  0.2902, -1.9296, -0.9022, -1.4293,  1.3995, -0.8421,  1.8369,
              0.5206, -0.8383]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.503 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
