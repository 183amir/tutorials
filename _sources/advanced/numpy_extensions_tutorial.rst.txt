.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.5734,  7.1024,  3.4155,  9.5124,  5.2040],
            [ 5.4186, 11.8326,  8.1641, 13.3353,  5.4485],
            [11.7236,  3.0960,  7.6805,  9.5713,  4.1309],
            [ 8.5374,  4.3573,  7.4298,  3.4260,  6.2650],
            [ 7.9842, 13.2083,  8.6945,  4.6863,  5.2194],
            [ 8.5374,  2.1023, 13.1610,  7.8551,  6.2650],
            [11.7236,  4.6960,  4.1566,  1.1575,  4.1309],
            [ 5.4186,  4.6490, 12.5719,  4.5491,  5.4485]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4866,  0.6537, -0.7508,  0.7791,  0.2101, -0.5968, -2.5417, -0.0101],
            [-0.7368,  1.3246, -0.2155, -0.5435,  0.9026,  1.3187, -0.1016, -0.7094],
            [ 0.4154,  0.1839,  0.3230,  0.9110, -1.3161, -1.4325,  1.4942,  0.3725],
            [-1.4741,  0.1404, -1.5632, -1.1537, -0.8497, -0.2774,  0.7072, -0.9721],
            [ 0.1126,  1.1146,  0.8345,  1.2054, -0.1282, -0.3217,  1.0739,  0.6658],
            [ 0.4958, -0.9575, -0.3640,  1.5977,  1.4921, -0.2783,  1.0139, -0.5914],
            [-0.1533,  0.8254, -0.6572,  0.6266, -0.7250,  0.6861,  0.5689, -1.2044],
            [ 0.1419, -1.2980,  0.3648,  0.3842,  0.3164,  1.6580, -2.2655, -1.7854]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0614,  0.2122, -0.0460],
            [ 0.0618, -0.6762,  1.5631],
            [-0.5498, -0.5709, -0.1914]], requires_grad=True), Parameter containing:
    tensor([[0.6961]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.1332e+00,  2.9440e+00, -2.1999e+00, -1.3097e+00, -3.8203e-01,
             -1.2016e+00, -4.9001e-01, -6.1989e-02],
            [ 6.6372e-01, -8.9450e-01,  8.9296e-01, -1.2291e+00, -9.7271e-01,
              1.3008e+00,  2.6474e+00,  9.8424e-01],
            [ 8.2052e-01,  2.9901e+00,  3.0113e+00, -1.5225e+00, -1.6961e+00,
              8.6861e-01,  3.3524e+00, -2.1017e+00],
            [ 4.1231e-01,  3.1530e+00,  5.8426e+00, -2.7534e-01, -1.6129e+00,
              2.5166e-01,  8.6891e-01,  1.7791e-03],
            [-9.1783e-01,  1.4526e+00,  1.7730e+00,  1.3297e+00,  5.2393e+00,
             -2.9338e+00,  5.8213e+00,  7.7360e-01],
            [ 6.3415e-01,  8.0556e-01,  2.4013e+00, -1.5427e+00, -9.9926e-01,
              5.9590e-01, -3.5081e+00,  3.0248e+00],
            [-8.3345e-01, -1.7559e+00,  4.3118e+00,  2.6110e+00,  3.0220e+00,
              1.8043e+00,  1.8990e+00, -2.6657e+00],
            [ 2.7421e+00,  9.3846e-01, -1.7584e-01, -7.7138e-01,  2.3697e+00,
              9.9684e-02,  4.7970e+00, -3.6349e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1034,  0.4191, -0.3027, -0.0133,  0.4200, -0.4312,  0.3706, -0.0064,
             -0.0712,  0.0132],
            [ 0.0655, -1.0977,  3.3726, -1.5554, -0.8513,  3.5664, -2.8906,  2.2476,
              0.5288, -0.4472],
            [-0.9786, -0.5740,  1.0427, -0.5283,  0.4936, -0.2596, -0.4803,  0.1162,
              0.3417, -0.0318],
            [-0.2380, -1.5740,  0.7581,  1.4692, -1.5187,  2.2435, -0.8473, -0.3505,
             -0.5924,  0.4972],
            [-0.7701, -1.6374, -1.1607, -1.0238, -2.7904,  1.2336,  0.3115, -0.2395,
             -1.9172,  2.3703],
            [ 0.1758,  0.7190, -0.4298,  0.3993, -0.2655,  0.6373,  0.6888,  0.4050,
             -0.7511, -0.0558],
            [ 0.5363,  1.3587, -2.0075,  0.1908,  0.0454,  1.4746, -2.5348,  0.5738,
              0.0352,  0.5673],
            [ 0.7544,  1.6023, -3.2880,  0.7817,  1.1049, -2.1725,  3.5380, -2.3687,
              0.3703,  0.2148],
            [ 0.7014,  0.2970,  0.3417, -3.2918,  1.7010, -0.2364,  0.5623,  0.2842,
             -2.9432,  0.8763],
            [ 0.0939,  0.8400, -0.1714, -0.9604, -0.7299, -0.0391,  0.9928,  0.6153,
             -0.0451, -0.1121]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.508 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
