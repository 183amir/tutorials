.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.9518,  3.1557, 13.8816, 12.2674,  6.9609],
            [ 7.8921, 15.0298, 10.8251,  6.2704,  8.7039],
            [ 7.1463, 14.0463,  3.3047,  4.5442,  2.1702],
            [ 3.0976,  4.9191,  3.3833, 11.6544,  7.2665],
            [ 4.8589,  4.3508, 11.7278, 14.9106,  1.7032],
            [ 3.0976,  5.4417,  5.7000,  6.6954,  7.2665],
            [ 7.1463,  2.9008,  3.1345,  6.1229,  2.1702],
            [ 7.8921,  4.7580,  4.4470, 11.0070,  8.7039]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4467,  2.3599,  0.9060, -0.3427,  0.2417,  0.9812, -0.2690,  1.1782],
            [ 0.9159,  0.3438, -1.8069, -1.0733,  0.0556,  0.9166, -0.5796, -0.7160],
            [ 0.1375, -0.7818,  1.9379, -0.1765, -0.2667,  1.2825, -2.1276,  0.3984],
            [ 1.6347,  1.1686, -2.0560, -0.1405, -0.1214, -0.2689,  0.1083,  0.2560],
            [ 1.4754, -0.9978, -0.6188, -1.7953,  0.4132, -0.1951, -0.1565,  0.9287],
            [-0.5061, -0.2976, -1.6195, -0.9827,  1.1277,  0.4956,  0.3378,  0.3505],
            [-1.3102,  0.0523,  1.2025, -0.1079,  1.7100,  0.1638, -0.1904,  1.3189],
            [ 0.0206,  1.4464,  1.0240,  0.3713,  1.2084,  1.2996, -1.3865, -0.4802]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9315, -1.1318, -0.0635],
            [ 0.2623,  0.4657,  0.2990],
            [-0.8781, -0.2981,  0.2018]], requires_grad=True), Parameter containing:
    tensor([[-0.6635]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.2730,  0.4955,  1.8353,  0.1156, -0.5986, -0.7236, -0.7757, -1.7083],
            [-0.4973, -6.1232, -4.5995, -0.7151,  0.0926, -0.2501, -2.2353, -0.7281],
            [-4.7410, -1.0007,  1.4995,  0.6931, -1.0029, -2.4674, -2.5310,  0.8414],
            [ 2.8567,  1.6844, -0.2817, -1.2411, -0.8510,  1.5993,  4.4136, -1.2048],
            [-7.2738, -6.6532, -0.3886,  2.1195, -2.1464, -3.2234, -6.3586, -6.1836],
            [-0.8545,  6.6441,  4.4270,  1.7686, -0.7736, -2.0289,  3.8606, -0.0119],
            [ 0.9157, -3.7955,  3.0009,  2.0489,  1.5432,  1.2207, -3.1483, -3.8910],
            [ 0.7255,  1.8349, -3.6983, -1.8141, -0.7172, -0.2813, -0.7052, -2.4898]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.7514,  2.8743,  0.3537,  1.9720,  0.9487,  0.3904,  3.5439, -0.1721,
             -1.1149, -0.0686],
            [-0.1749,  0.3262,  0.2136, -3.2935, -1.0773, -0.2139, -0.2515, -1.7412,
             -0.8130,  0.2761],
            [ 0.2752,  1.4011,  2.9115,  4.4069,  1.2814,  1.6059,  2.4627,  1.5397,
              0.6839,  0.4974],
            [-0.2308, -2.0669, -1.4174, -4.2490,  0.9609, -0.1303,  4.6834,  0.6735,
             -1.4903, -0.1898],
            [ 0.0637,  2.3084,  3.7768,  0.7443, -1.5827,  0.6066,  0.5972,  0.6966,
              0.0915,  0.0815],
            [ 0.8771, -0.5088,  2.3049, -2.8581,  4.4102,  4.4891,  6.0151,  4.4958,
              0.5565,  0.1831],
            [-1.7633,  0.8357, -1.1009, -1.8602, -2.6374,  1.5786, -0.7181, -2.6908,
             -1.7043, -0.4950],
            [ 3.5525,  4.0067,  2.5324,  0.1726,  6.0393,  4.3746,  1.2864,  4.2938,
              2.1270, -0.0475],
            [-1.1731, -0.5568, -1.3010, -0.8431, -1.3846,  0.1029, -0.6193, -1.4457,
             -0.6571, -0.3248],
            [ 1.2887,  1.2748, -0.0296,  0.3623,  1.6870,  0.6302, -0.2226,  1.1882,
              0.4111, -0.2837]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.558 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
