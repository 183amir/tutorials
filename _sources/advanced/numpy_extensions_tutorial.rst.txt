.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.4187, 12.5698,  8.8891, 15.6863,  1.0065],
            [ 4.5695, 10.2058,  8.7790,  9.7276,  4.9782],
            [ 3.8076,  7.9261, 13.3182, 14.8998,  0.9829],
            [ 4.1245, 10.6991, 17.5143,  3.0305,  6.9929],
            [ 0.7442,  9.0397,  5.7787,  2.8841,  2.0506],
            [ 4.1245, 21.2418,  3.0173, 14.3011,  6.9929],
            [ 3.8076, 11.2523,  7.1588,  2.3892,  0.9829],
            [ 4.5695,  2.7724,  7.1147,  5.9826,  4.9782]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3171, -2.6506,  0.4229,  0.6938,  1.0706,  1.2641, -0.5824, -0.0747],
            [-1.4430,  1.0611,  0.3821, -0.9115,  0.2285, -0.7363, -0.5757,  1.7147],
            [-1.2847,  0.7097,  2.1020,  0.9261, -0.4871, -1.5572, -0.6886,  0.3187],
            [-0.6672, -0.5330,  1.0445,  1.2610,  0.0960,  0.6242,  0.7023, -1.6303],
            [ 2.2296, -0.1691,  0.1996, -0.6559,  0.4733, -0.4406, -2.9412,  1.3456],
            [-0.0869, -2.1451,  2.4753,  1.4506,  0.0442,  0.7856, -0.1271,  0.0516],
            [ 1.9204,  2.1134,  0.4830, -1.3107, -0.6217, -0.9169, -0.1737,  0.6809],
            [ 1.4402, -0.6906, -0.1915,  0.3373, -0.1393, -0.3502, -2.7750,  0.6407]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4678,  2.9838,  0.3769],
            [ 0.1715, -0.9211, -0.8956],
            [ 0.7583, -0.0856, -1.1559]], requires_grad=True), Parameter containing:
    tensor([[0.5915]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3346,  4.8677, -0.3570,  3.9202,  2.0313, -1.1583,  8.5711,  1.6895],
            [-4.3430,  0.8845,  3.3579, -0.5570, -2.8916,  2.4536, -1.8984,  0.1703],
            [ 1.1139,  0.5304,  1.3909, -3.5078,  4.0116,  0.0374, -0.2081,  5.3108],
            [ 0.9674,  0.2761,  1.1863,  3.7593, -0.8318, -4.3403,  7.3963, -7.9467],
            [-3.6878,  0.0590, -0.7633, -0.9148,  3.0726,  2.9428,  4.7885,  4.1533],
            [ 1.8412, -5.7601,  4.6595, -1.8731, -0.5872, -2.2339,  0.5038, -3.3689],
            [ 0.0363, -2.2892, -1.5636,  5.6024,  4.0466,  2.5191,  1.6465,  4.4102],
            [-4.1252,  3.3551, -0.2661,  0.1664, -3.2147,  3.0327, -3.5172, -7.8344]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0871, -1.4922,  5.4552,  3.2577,  2.8438, -0.4618,  0.6906,  0.9686,
             -2.7766, -0.3574],
            [ 0.8391, -4.3441, -6.4037, -4.3244, -4.2966, -0.7695, -3.1732, -3.1963,
             -1.1029,  0.6547],
            [-0.4212,  2.6392,  4.3795, -0.1885, -0.9802,  6.8393,  4.7147, -1.6545,
              3.4973,  1.8914],
            [-1.7161,  0.8207,  3.9148, -4.1573,  0.1469, -5.7511, -2.4570, -0.2432,
              5.4597,  0.4034],
            [-0.0922,  0.5347, -0.1052, -6.0289,  8.3238,  4.4296, -3.6217, -3.1833,
              2.3054, -2.0533],
            [ 0.0478,  3.5850, -5.9367, -0.6005, -0.5436, -0.3431,  2.8239, -1.1027,
              2.6301, -2.3849],
            [-0.0454,  1.7396, -1.8760,  1.1319,  1.9298,  2.0848, -1.8763, -2.7233,
              5.7790, -1.4171],
            [ 1.4689, -5.6539, -1.6834,  2.6694,  6.6877, -5.4420,  0.9240, -3.8289,
             -1.3486, -2.9128],
            [ 0.5086,  0.8368, -0.9252, -0.2408,  0.6611,  0.7251, -2.9546,  2.6356,
              3.7409, -1.7211],
            [-0.8826,  0.4000,  1.5263,  0.3424, -1.6333, -0.2214,  0.0753, -1.4796,
              2.5816,  0.4554]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.564 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
