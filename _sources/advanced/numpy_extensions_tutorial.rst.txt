.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.2228,  7.2486,  4.7365, 11.1272,  3.2902],
            [ 6.9840, 16.0716,  8.9010,  6.2060,  2.8451],
            [ 5.3740,  3.9181,  4.8913, 10.6829, 10.2392],
            [ 4.8876,  8.5096,  4.3283, 10.0170,  4.7981],
            [14.1779,  6.4266,  6.2453,  8.9127,  3.9398],
            [ 4.8876,  3.4357,  3.9913,  3.3932,  4.7981],
            [ 5.3740, 11.0327,  3.7318,  9.8166, 10.2392],
            [ 6.9840,  8.4815,  6.9050,  1.9926,  2.8451]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7197, -1.2808,  0.7581,  0.6650,  1.2575,  0.8438, -0.4123, -0.5241],
            [ 1.1164, -0.1072,  0.4393,  0.9527,  0.9371,  0.9344,  0.1323,  0.2182],
            [ 1.5802,  0.3833, -0.5943, -0.0515, -1.6839, -0.5858,  0.5067,  1.1094],
            [ 2.2144,  0.7433,  0.3896,  0.6885, -1.0879,  0.6433,  0.9422, -0.2504],
            [ 0.2722,  0.3387,  1.6830, -2.9950, -0.5743,  0.6330, -0.6827,  0.7016],
            [ 0.4677, -0.8616, -0.3162,  0.0348,  2.0867,  1.5487,  1.1828, -0.2583],
            [-0.7910, -0.8468, -1.0828,  0.4605, -1.5028,  1.1422, -0.1044, -0.3199],
            [ 0.5126, -0.2825, -1.4648,  0.8022,  0.5831, -0.2141,  0.2724,  0.2006]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2473, -0.5373, -0.8691],
            [-1.2386,  0.7615,  0.4466],
            [-0.3061, -1.9327,  1.5108]], requires_grad=True), Parameter containing:
    tensor([[-1.4300]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.5436,  0.0718,  1.2607, -2.1574,  2.1306, -6.5129, -4.8924, -0.8830],
            [-3.7792,  1.3296, -7.6322, -8.5839, -0.1120,  2.8601, -6.2724, -5.5828],
            [ 0.0144, -4.2066, -2.9393, -0.3943, -1.6995,  1.8483, -2.7932,  1.1949],
            [ 1.7275, -0.6839,  1.0859, -3.0190,  0.9841,  0.4926, -2.8809,  1.8940],
            [-6.2785,  0.6521,  1.3935,  2.4467, -0.8394,  0.7833, -4.6782, -1.5947],
            [ 3.1065, -5.2715, -0.6620, -0.0415,  0.2590, -2.5167,  1.7530, -5.3830],
            [ 1.3099, -3.4549, -2.0800, -2.7333,  3.5576, -4.8801,  2.5091,  0.7748],
            [ 2.9259, -3.7991, -0.1745,  0.3774,  5.0433,  0.2065, -1.5930, -1.2656]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1114e+00, -1.2341e-01,  4.7698e-01, -1.6319e+00, -1.0551e+00,
             -1.3626e+00, -3.6110e-01,  7.3249e-01,  4.7414e-01,  6.2114e-01],
            [ 1.6557e+00, -2.7492e+00, -6.1142e-01, -7.3689e-01,  9.3576e-01,
              2.4378e+00,  2.6221e+00,  2.5540e+00,  6.7083e-01, -8.8617e-02],
            [ 1.3794e+00,  1.8939e+00, -7.5775e-02,  5.2997e+00, -1.2634e+00,
              6.4452e-01,  3.9997e+00,  1.4911e+00,  3.0241e+00, -3.1590e-01],
            [ 7.7307e-01,  2.1277e+00, -4.1742e+00,  3.7255e+00,  3.6328e+00,
             -5.7228e+00,  2.3078e+00, -1.3219e-01, -3.5894e+00,  1.6068e-01],
            [ 4.5654e-01,  2.3286e+00,  1.6400e+00,  1.6698e-01, -4.8473e-01,
             -6.3662e+00, -2.5507e+00,  9.5327e+00, -1.3517e+00, -1.2714e+00],
            [-1.7039e-01,  1.0428e+00, -3.2032e+00,  2.8262e+00,  1.1621e+00,
             -3.2169e+00, -1.6107e+00,  6.4725e+00,  4.9268e+00, -1.6370e+00],
            [-2.9798e+00, -1.0644e+00, -3.6123e+00, -6.7276e+00,  4.9170e+00,
             -1.5117e+00, -8.9189e-01,  1.9114e+00, -3.2426e-01, -1.9313e+00],
            [-3.7006e+00,  7.2605e-01, -1.7418e-01,  1.5894e+00,  2.9383e+00,
             -1.7425e-01, -1.8219e+00,  1.8023e+00, -8.9121e-01,  7.1978e-01],
            [-1.6342e+00, -2.4855e+00,  6.5515e-03, -1.2526e+00,  2.8812e+00,
             -4.9281e-01, -1.6677e+00,  2.2787e+00, -5.9234e-01, -2.4971e-01],
            [-2.4528e-01, -1.2466e+00,  2.9682e+00, -2.2929e+00,  1.9835e+00,
              4.8559e-01, -5.6261e+00,  1.1917e+00,  5.1262e+00, -2.5879e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.563 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
