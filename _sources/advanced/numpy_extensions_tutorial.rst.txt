.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.3141, 10.0682, 10.5936,  4.6341,  3.8865],
            [ 7.6308,  6.0383,  4.9939,  7.8347, 10.7377],
            [ 9.5383,  9.0235, 12.9475,  9.5567, 12.3525],
            [ 4.5452,  7.6576, 10.1939,  2.9594,  1.4348],
            [ 2.1226,  8.1222,  2.9047,  4.0090,  1.1715],
            [ 4.5452,  6.4146,  3.2957,  0.9848,  1.4348],
            [ 9.5383,  6.4059,  6.8554,  0.9730, 12.3525],
            [ 7.6308,  8.8919,  7.3629,  6.7339, 10.7377]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1216,  0.5976,  0.7714, -0.0120,  1.5629,  0.2464,  0.5641, -1.6882],
            [ 0.0303, -0.9736, -0.3482,  0.5332,  1.2789, -1.0326,  0.7764, -0.2344],
            [-0.7799,  0.3531,  0.0649,  1.2988,  0.9791,  0.7367,  1.5392, -0.5882],
            [ 0.4827,  0.0776, -0.4240, -1.0898,  0.8476,  2.0690,  0.1994, -1.4067],
            [-0.2122, -0.0100,  0.8352, -1.2605,  1.8053,  0.4369, -0.9567, -1.3266],
            [-0.6640,  0.6552,  0.2127, -1.1023, -0.4144, -0.6010, -0.7853,  0.6986],
            [-0.4164,  0.1790, -1.7418,  0.2375,  0.1609,  1.4547,  0.5694,  1.4395],
            [-0.0327,  1.5939,  1.8797,  0.4670, -0.6975,  1.3707,  0.6351,  0.5943]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1822,  0.3913,  1.4818],
            [-0.5918,  0.4079,  0.0748],
            [-0.8187, -1.4701,  0.4320]], requires_grad=True), Parameter containing:
    tensor([[1.3562]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.6275, -1.7437,  0.4992,  5.0197, -1.1536, -2.8869,  2.8926,  2.6760],
            [-3.5575,  0.8361,  1.6378,  0.9469, -0.6461,  3.2679,  6.6797,  0.2224],
            [-0.6792,  1.3959,  1.3371,  3.1520,  3.3347, -0.2660, -1.2516, -0.6338],
            [ 0.2439,  0.8501,  4.6821,  1.0589,  0.0702, -2.4520,  4.6821,  0.1245],
            [-3.4287,  2.9892,  3.5162,  1.9348,  3.7676,  1.3114,  1.2481, -1.3467],
            [-3.2287, -3.5705,  0.0709,  3.2874,  1.7640, -4.7462, -1.2618,  3.3737],
            [-4.8912,  0.3708,  4.1752,  2.7876,  2.8880,  2.6940, -2.5117,  3.2879],
            [ 5.3183, -0.7839,  2.7955,  3.1346,  2.4340,  2.5041,  3.4891, -0.0200]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-8.2199e-01,  5.4834e-02,  1.0880e+00, -3.1095e+00,  2.4336e+00,
              4.5430e+00, -7.8226e-01,  2.1275e+00, -2.4796e+00, -4.2573e+00],
            [ 6.8664e-01, -4.2563e-03, -1.8646e+00, -1.7948e+00,  2.0031e+00,
             -9.0961e-02,  1.2289e+00,  1.7402e+00, -1.4737e+00, -1.2047e-01],
            [-1.5278e+00, -4.2561e-01, -1.4301e+00, -2.1593e+00, -4.6414e-02,
              6.1567e+00,  6.6277e-01,  2.8832e-01,  3.9296e+00, -1.3016e+00],
            [-7.5573e-01,  2.4860e+00, -4.0996e-01, -1.6349e+00, -2.3256e+00,
              2.5252e+00,  2.5565e+00,  8.8758e-01, -1.7801e+00, -7.0231e-01],
            [-7.6684e-01, -1.8020e-01, -1.3203e+00, -7.4139e+00,  4.9093e-01,
              4.2351e+00,  2.6831e+00, -2.1045e+00,  4.2904e-01,  1.2754e-01],
            [ 5.3802e-01, -1.2251e+00, -2.1448e+00,  6.6047e-01, -1.9712e+00,
             -2.6457e+00,  1.3897e+00,  3.4323e+00,  9.7651e-01, -8.3731e-01],
            [-1.2101e+00,  2.2671e+00,  3.2185e+00,  1.1594e-01, -1.4263e+00,
              1.9760e+00,  3.4009e-01, -1.3636e+00, -1.0643e+00, -1.1270e+00],
            [ 1.2330e-01,  8.0753e-01, -2.8911e+00, -6.5793e-01, -3.6035e-01,
              4.9790e-01, -9.3669e-01, -1.5857e+00,  1.5595e+00, -3.2086e-02],
            [-1.0922e+00, -2.7498e+00,  1.1124e+00,  3.3327e-01,  2.9478e-01,
              2.0535e+00,  1.1042e+00,  8.5397e-01,  1.0715e+00, -3.2420e-01],
            [ 4.3797e-01,  4.5886e-01, -1.0243e+00, -1.9101e-01, -6.5097e-01,
             -4.2783e-01,  1.5583e+00, -1.6108e+00,  8.2493e-02,  6.1497e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.305 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
