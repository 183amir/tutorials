.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.7726,  3.0630,  6.6168,  7.2741,  9.0370],
            [ 1.4170,  4.0643,  5.2953,  3.6906, 10.4475],
            [ 7.1805,  6.0668,  3.0598,  1.5225,  6.8416],
            [ 2.6135, 10.4852,  6.6373,  8.3579,  7.0047],
            [ 2.8812,  2.9030,  2.0911,  1.6286,  7.1194],
            [ 2.6135,  8.3659, 10.2118,  4.4187,  7.0047],
            [ 7.1805,  3.9568,  7.3502,  9.4010,  6.8416],
            [ 1.4170,  9.7104,  6.0315,  3.8568, 10.4475]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3169,  1.0434, -0.3057,  0.0217, -0.8245,  0.2869, -0.1798,  1.0185],
            [-0.3842,  2.0472, -0.3888,  1.1857,  0.5890, -0.0550, -0.5139,  0.5136],
            [ 0.2139,  0.6208, -0.9956,  0.5161, -0.5569, -1.1084, -0.9092,  0.4994],
            [-0.9834,  0.2001,  1.3863, -0.4907,  0.3840,  0.1910, -0.3711, -0.8736],
            [ 0.7790, -0.5129,  0.4553, -0.1294,  0.6408, -0.0959,  0.4127, -0.1719],
            [ 0.8989,  0.5403, -1.8658, -0.2123, -0.0212,  1.8875,  0.3057,  0.1582],
            [-1.6385,  1.4222,  0.7252, -0.9183,  1.4683, -0.0873,  0.3915, -1.4529],
            [-0.0531,  0.3597, -0.6691,  0.0214, -0.3540, -0.3597, -0.0850,  0.8392]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3531, -1.0448, -0.6935],
            [ 0.2135,  0.4984,  0.8372],
            [ 0.5016, -0.4064, -0.3738]], requires_grad=True), Parameter containing:
    tensor([[-0.8264]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8911, -3.3677, -1.1477, -1.2531,  1.3515, -0.9243,  1.8213,  2.0836],
            [-1.7621,  0.3319,  2.7811, -2.5668, -1.6972, -1.3813, -4.7879, -4.3575],
            [-0.0049, -1.8044, -1.7399, -0.3333,  2.4680,  0.4447,  0.8275,  3.1327],
            [-2.4141, -2.0027,  1.5396, -2.1315, -3.0860,  0.6533, -1.6979, -0.1964],
            [ 1.0199, -0.8445,  1.2862, -1.7597,  0.2904, -1.2017, -2.5633,  2.0337],
            [-1.4859, -1.9094, -0.0954, -0.2529, -0.8500,  1.3852, -0.3162, -2.7352],
            [-0.7999,  0.0823,  0.7324, -3.4980, -1.2711, -3.6630, -3.2860,  0.6863],
            [-2.0676, -2.8021, -1.4702,  0.2658, -0.4882,  1.4964,  1.0881, -1.3905]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1211,  0.2482, -2.2546, -0.7181,  0.7417,  1.0807,  0.6423, -0.7396,
              0.4093,  0.4880],
            [ 0.5546, -0.2089, -1.6880, -1.4378, -0.6268,  0.8100,  0.0949, -1.2345,
              0.0729, -0.1620],
            [ 0.3697,  1.8388,  2.3348,  0.2681,  0.7251,  0.3789, -1.9112,  1.6572,
              2.3151, -0.1739],
            [ 0.3274, -0.0707,  1.8368,  3.0032, -1.8829, -0.8911,  3.3531, -1.1688,
             -3.3216, -0.1373],
            [-0.6604, -0.7799, -0.1571, -1.3945,  0.7257,  2.0538, -3.4733, -0.6644,
              1.8294,  0.4121],
            [-0.2461, -3.1453, -1.5459,  0.8615, -3.6030, -0.5806,  3.4217, -0.7560,
              1.0130,  1.0962],
            [-0.6756,  1.9201,  0.6670,  1.3974,  2.3537, -0.6685, -0.8201,  1.6575,
              0.1445, -1.9137],
            [ 0.4525, -1.2751, -0.9968,  0.6107,  0.8814,  0.2268,  1.4776, -0.6590,
              1.6791,  2.0248],
            [-0.5028,  1.2911, -0.1981, -0.9460, -0.6725, -2.2194, -1.1080, -0.9173,
             -1.3612, -1.2588],
            [ 0.2168, -0.1971, -0.4262, -0.7047,  1.2283, -0.1944, -0.2297,  0.3839,
              0.9682,  0.4716]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.259 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
