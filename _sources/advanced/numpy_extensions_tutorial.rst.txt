.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.0757,  1.4258,  7.8790,  4.8572,  1.8614],
            [10.4898,  1.0921,  8.5125,  1.3568, 11.6379],
            [ 3.6448,  3.4082,  3.7708, 10.0735,  2.7666],
            [14.2383,  2.5537,  1.5529,  1.7517,  3.4451],
            [13.0972,  9.7960, 13.7587, 11.5002, 11.8663],
            [14.2383,  7.7906, 10.0131,  4.8946,  3.4451],
            [ 3.6448,  9.0893,  4.3844,  5.7612,  2.7666],
            [10.4898,  7.9418,  6.3860,  7.3140, 11.6379]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.8404,  0.6025, -1.0794,  0.7942,  1.0564, -0.9549, -0.0204,  1.7359],
            [-0.6062, -0.4278,  0.2721,  0.1621,  0.6574,  0.4253, -0.4276, -0.2961],
            [ 1.6098, -2.4112, -1.3606, -1.1719, -0.0411, -2.0886, -0.1925,  0.1427],
            [ 0.2081,  1.1923,  2.0861, -0.8121,  0.6171,  0.9179, -1.2779,  0.2092],
            [-0.0948, -1.0222, -0.3895,  0.3813, -0.7477, -1.8606,  0.7115, -0.9475],
            [-0.5793,  1.1247,  0.4794,  1.4336,  1.0615,  0.6225,  1.0562,  0.3066],
            [ 0.0380,  0.1012, -0.4793,  0.2764,  0.5917,  0.9343,  0.2341,  0.3012],
            [-0.7828,  0.9092, -0.0929, -0.6645,  0.2562,  0.5585, -0.6353,  1.6330]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.7741,  0.7419, -0.3790],
            [ 1.1510,  0.8686, -0.8378],
            [ 0.3498,  0.4824, -1.2088]], requires_grad=True), Parameter containing:
    tensor([[0.8911]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.5794,  1.2528, -3.6229, -4.8330,  3.9603,  1.4003,  4.1734,  3.6938],
            [ 0.0356,  9.3288,  1.9475,  2.9832, -0.0889,  1.1680, -2.9127,  0.9113],
            [-1.6740,  5.8067, -0.2148,  0.1880, -1.3235, -0.4565, -0.9539,  4.0980],
            [-3.0254,  4.0843, -1.1671,  4.7633,  2.5751,  1.5700,  1.4188,  1.9770],
            [ 1.0792, -0.6661, -0.2940, -3.8824,  0.0764, -1.7197, -3.0431,  0.6262],
            [-2.8575,  3.6605, -0.0515,  4.9653,  6.0127, -4.8580,  1.5999,  5.1400],
            [ 4.9450,  3.5527,  3.6802, -2.5312,  0.8093, -2.1498,  3.5431,  1.7531],
            [ 2.1802, -2.0620, -0.5467,  2.0721,  0.2404, -0.9454, -5.5634, -1.9333]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.6361,  0.5175, -0.3169, -0.0351,  1.7155,  1.7145,  1.0397, -0.1284,
              0.3415,  0.0152],
            [-0.1592, -2.5240, -0.5277, -1.6311,  0.2584, -2.8519, -3.1855,  1.8286,
              0.1203,  0.2215],
            [-3.1768, -1.3617,  1.0831,  3.2727, -0.3198, -2.9832,  1.8645,  0.5438,
              0.5264,  0.3867],
            [ 2.6375, -0.4083,  0.3009,  4.6081,  1.2732, -0.3458, -2.4952,  1.4510,
             -0.7872,  0.6098],
            [ 0.8145,  1.4910, -1.0104,  1.9451, -0.8045,  0.0417,  0.3745, -0.1106,
              0.9072,  0.2208],
            [-0.9237, -8.7579,  2.1249,  1.4200, -3.1654, -0.4840, -1.3194, -0.9509,
              1.6123,  0.3992],
            [-3.0090,  4.3039,  5.6079, -2.0222, -1.5737, -1.5422, -3.3595,  4.7613,
              1.9243,  0.0422],
            [ 1.3474,  0.8395,  0.3629, -6.2702,  1.9674, -0.2430, -0.7415, -2.6460,
              0.7158, -0.3619],
            [ 0.4867,  0.7531, -2.5818,  2.2076,  4.5734, -2.8029, -1.2011,  1.7667,
             -0.2384,  0.5680],
            [ 0.0092,  0.1105, -0.0627,  0.1127,  1.6672, -2.2974, -0.7836,  1.0342,
              0.7476, -1.7112]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.516 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
