.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[16.4854,  6.8971, 12.4742,  2.7570, 10.5039],
            [ 4.7054,  6.5351,  3.9666,  4.8968,  3.8695],
            [ 6.9619,  7.4025,  5.4908,  4.6326,  2.7681],
            [ 8.2045,  6.4347,  5.5244,  6.3442,  7.8688],
            [10.4013,  7.3198,  6.1082,  4.7396,  5.6582],
            [ 8.2045,  5.0753,  6.7222,  3.7272,  7.8688],
            [ 6.9619, 10.0840,  4.3282,  9.9313,  2.7681],
            [ 4.7054, 13.2339,  5.0450,  5.2236,  3.8695]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6378,  0.5045,  0.1178,  1.0736,  0.9002, -0.3629, -0.8747, -1.2419],
            [-3.0180, -0.4375, -0.4858,  0.1283,  0.6831,  0.1136,  0.1903,  1.4678],
            [ 1.0985, -0.7544, -0.3864,  0.1127,  1.0999,  0.8654,  0.8216,  0.8835],
            [-0.3357, -0.5976, -0.2941,  0.2387, -0.1867,  0.4924,  0.2013,  0.3371],
            [ 0.9583,  0.7842, -0.5384,  0.8502,  1.5146,  0.4417, -0.0264,  0.9485],
            [ 0.1890, -0.6826, -2.1979, -0.0171,  0.5247,  0.1012,  0.6684,  0.9699],
            [ 0.3454,  0.2249,  0.5000,  2.2943,  0.1688,  0.5852, -0.8267,  0.7237],
            [ 1.6175,  1.3777,  0.1674,  1.5605,  0.2182,  0.2583, -0.4611,  0.2510]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1569,  1.1413, -2.3700],
            [ 0.7658, -1.7796, -0.4353],
            [ 0.1491,  0.4233, -0.8388]], requires_grad=True), Parameter containing:
    tensor([[-0.5858]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7064e+00, -5.8097e+00, -5.5450e-01,  1.7967e+00,  4.7718e-01,
             -1.6066e+00,  2.0213e+00,  1.0127e+00],
            [-1.8018e+00, -1.7517e+00, -5.1363e+00,  2.4927e-04, -5.3226e+00,
              2.1535e+00, -5.3633e+00,  8.1119e+00],
            [-8.3173e-01, -1.1387e+01,  1.9836e+00, -6.1126e+00,  1.7059e+00,
             -2.1842e+00,  4.0981e+00, -4.3719e+00],
            [-3.0423e+00, -2.8066e+00, -4.4212e+00,  4.8841e+00, -4.1709e+00,
              1.9268e+00, -1.7581e+00, -2.0288e+00],
            [ 7.8680e-01, -7.5104e+00,  4.2949e+00,  7.3699e-01, -4.1340e+00,
              2.6417e+00, -3.4595e+00,  1.7610e+00],
            [-1.5603e+00,  1.7882e+00, -4.6312e-01, -1.8275e-01, -2.5565e+00,
             -3.2892e-01, -2.8176e+00,  2.9062e+00],
            [ 2.8627e+00, -4.1849e+00, -5.7995e-02,  1.2050e+00, -4.0924e+00,
             -6.5982e-01,  1.2821e-01,  7.4723e-01],
            [ 9.4411e-01,  1.7442e+00,  1.9969e+00, -6.8214e+00,  9.4805e-01,
              3.3074e+00, -5.3971e+00, -2.0757e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.9765e-02, -3.6808e-01,  6.8592e-01,  8.3370e-01, -2.6295e+00,
              2.2695e+00, -5.3951e-01, -1.1351e+00,  1.6337e+00, -2.3373e+00],
            [-2.3212e-01,  3.0109e-01,  2.2420e+00, -4.3930e+00, -4.8089e-01,
              1.1103e+00, -1.4307e+00,  1.3110e+00, -4.5030e+00, -1.8239e+00],
            [-6.6537e-02,  9.5644e-01, -2.4180e+00,  1.9622e+00, -1.7525e+00,
             -3.4587e+00,  3.2625e-01, -3.4305e+00, -8.4488e-01,  5.0747e-01],
            [-4.4323e-02, -1.1519e+00,  5.6867e+00, -1.2759e+00, -6.4426e+00,
              6.5630e-01, -3.6135e+00, -3.4688e+00,  3.2260e+00, -5.5218e+00],
            [-8.1795e-01,  2.4921e+00, -9.9203e-01, -1.7859e+00,  4.5189e-01,
             -3.9925e+00,  2.1320e-01, -4.4710e+00, -1.7745e+00, -2.5524e-01],
            [ 6.1977e-01, -1.2089e+00, -2.8496e+00,  4.7355e+00, -6.3852e+00,
              2.9999e+00, -3.4149e+00,  1.1886e+00,  1.6469e+00, -1.3566e+00],
            [ 6.9682e-02,  2.7638e+00, -5.2855e+00, -4.8365e+00, -3.5989e+00,
              4.4324e+00, -3.0277e+00,  3.4325e+00, -2.4764e-03, -7.5202e-01],
            [ 2.1206e+00, -4.1791e+00, -1.6977e+00, -1.6836e+00, -1.0791e+00,
             -1.5896e+00,  3.2560e+00,  2.8433e+00, -4.0142e+00,  4.1198e+00],
            [ 9.5258e-01,  2.4367e-01, -3.6853e+00,  3.2040e-01,  1.3385e+00,
              9.8748e-01, -7.2980e-02,  4.0190e-02,  2.4772e+00,  4.3635e-01],
            [ 1.0357e-01,  3.5146e-01, -5.0092e-01, -7.1376e-01, -3.0248e-02,
              6.7759e-01, -3.3223e-02,  5.5588e-01, -1.1194e+00,  1.4543e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.472 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
