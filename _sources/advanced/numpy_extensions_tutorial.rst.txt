.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.3215,  5.7190, 13.6440,  7.5736, 23.6358],
            [10.2342,  3.1431,  2.8375,  7.2348,  1.5700],
            [ 2.3285,  4.7705,  3.2688, 19.6061,  7.3361],
            [ 9.5667,  2.1749,  5.4864,  4.4670,  4.8932],
            [10.4441,  9.4862,  5.0047,  3.4839,  4.6533],
            [ 9.5667,  6.4785,  4.5707,  7.3942,  4.8932],
            [ 2.3285,  9.8122, 12.1328,  3.8941,  7.3361],
            [10.2342,  6.5352, 10.3182,  2.7886,  1.5700]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1399,  1.3307,  0.4262, -0.5472,  0.1847, -1.0498, -0.2791,  0.9065],
            [-0.6205, -0.2163, -0.2282,  2.7254,  0.1396,  0.8325,  1.1430, -0.2218],
            [-0.3211, -1.3760, -1.9627, -0.1113, -0.7346, -0.6381, -1.0737,  0.1596],
            [ 0.8038, -0.5627, -0.2934,  0.4623, -0.0745, -0.0909, -2.9992,  1.7911],
            [-0.9640,  0.9527, -0.1548, -0.6063, -0.4530, -0.7691, -1.4057,  0.6832],
            [-0.7437, -0.1374, -1.4884,  1.0051,  1.3705, -1.5146,  0.1271,  0.6310],
            [ 1.4054,  1.0752, -0.2404,  0.5274, -0.2550, -0.1366, -1.2194,  0.9035],
            [-0.5431,  1.5068, -0.2089,  0.2982,  0.2517,  1.2809, -1.9273,  1.0632]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5623,  1.0104, -1.0389],
            [ 1.0524, -1.2485, -1.2043],
            [-0.3471, -0.2722,  0.2923]], requires_grad=True), Parameter containing:
    tensor([[-0.6839]], requires_grad=True)]
    Output from the convolution:  tensor([[-6.7069e+00,  5.2770e+00,  5.0269e+00, -1.0740e+00, -9.0499e-01,
             -4.7931e-01,  1.8624e+00, -2.5881e+00],
            [-5.3817e+00,  2.3924e+00,  1.4442e-01, -2.3659e+00, -2.3958e+00,
              2.4714e+00,  1.9321e+00, -8.4316e+00],
            [-5.4992e+00,  2.5872e+00,  2.6422e+00,  2.2707e+00,  1.5663e+00,
              3.1625e-01, -1.5449e+00, -2.3901e+00],
            [-1.0127e+00,  4.7598e+00,  2.1748e-01, -3.2082e+00,  7.5572e-01,
             -2.8640e+00, -4.6324e-01, -3.4663e+00],
            [-1.9998e+00, -6.0347e-02, -5.9221e+00, -3.0427e+00, -9.9459e-02,
             -4.3459e+00,  8.6129e-02, -2.4916e+00],
            [-2.0158e+00, -2.3697e+00, -5.0919e+00,  2.2649e+00,  1.9072e+00,
              1.6289e+00, -5.7291e-03, -1.8636e+00],
            [ 1.9205e+00, -6.8383e-01, -4.3484e+00,  3.0747e+00,  5.3380e-01,
             -3.7227e+00, -5.4229e+00, -3.0079e+00],
            [-1.0813e+00, -1.0374e+00, -6.2780e-01,  1.1605e+00,  4.3354e+00,
             -6.7975e-01, -2.7526e+00,  6.1850e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.7196,  3.3981, -3.6262,  0.9037,  2.0748, -1.0203, -0.6910,  0.1263,
              0.0461,  0.0196],
            [ 3.7632, -3.5876, -5.9433,  2.8853,  1.0241, -1.8154,  2.7945,  0.5074,
             -1.0475, -0.0190],
            [-0.2874, -3.2661,  1.9807,  4.5035, -3.1834,  1.4922,  0.6723, -0.1945,
             -0.7831, -1.3129],
            [-2.8713, -6.6397,  1.2516, -1.7962, -0.2737, -1.5162, -1.6935, -0.4999,
             -3.4273,  0.0297],
            [-1.7544,  4.4999,  4.7932,  1.3373,  4.3767, -0.8423, -1.8038, -0.9524,
              3.8269,  1.1807],
            [ 1.8417,  1.6450, -4.3786,  1.8187,  3.1651, -4.0864, -5.8404,  2.2143,
              0.2821, -0.0403],
            [-0.1997, -5.8070, -2.1999,  5.3822, -0.8600, -6.5564,  3.6863, -0.2625,
              1.2835,  2.1815],
            [-0.1686, -1.4748, -0.6766,  8.2534, -2.4905, -1.5162,  4.4890, -0.6012,
              0.6874, -0.5933],
            [ 0.5438, -0.8054,  1.1909,  3.3501, -4.6101,  0.3111,  1.3103,  0.0875,
             -1.0343, -0.7288],
            [-0.1235,  0.2177,  0.4429, -0.9776, -0.0884,  1.0228, -0.7305, -0.1940,
             -0.0336,  0.1559]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.506 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
