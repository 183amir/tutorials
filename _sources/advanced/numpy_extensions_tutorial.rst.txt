.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[18.7716,  4.0045,  4.2449,  6.2691, 10.3537],
            [ 5.2527,  5.1814,  2.5542,  0.6210, 11.8541],
            [11.0921,  0.4850,  7.4192,  5.1144,  6.7035],
            [15.1267, 11.2374, 13.6736,  1.7876, 11.8910],
            [ 6.8928,  2.2633, 13.1204,  9.3619,  2.3477],
            [15.1267,  7.9374,  3.5812,  6.6197, 11.8910],
            [11.0921,  8.0630,  7.2046,  9.0205,  6.7035],
            [ 5.2527,  4.3319,  4.4630,  0.1191, 11.8541]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3431,  0.0204, -1.0592, -1.4032,  0.3016, -1.5681, -0.5434, -0.1457],
            [-1.7626, -1.2753,  0.2241, -0.9280, -0.0357, -0.5983,  0.6747, -0.6156],
            [-0.3999, -0.5448, -1.6507,  0.5108, -0.1532, -0.0322, -2.0887,  0.4246],
            [-1.4052, -0.8752, -1.5185, -0.0049, -1.3944,  0.4626,  1.3608, -0.3121],
            [ 0.9175,  1.1094,  0.3220, -2.2297,  2.6306,  0.1847, -0.1391, -0.3888],
            [-0.4572,  0.2821,  0.3234,  0.4274, -0.6020, -1.1349, -0.5469, -0.6993],
            [-1.0719, -2.0136, -0.5787, -1.5589,  0.2137, -0.9017,  0.4017, -1.0547],
            [ 1.7594,  1.0436,  1.1736, -0.1307,  0.5713,  0.4944,  0.6671, -1.1070]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0153, -0.5798, -0.9260],
            [ 0.2554, -1.3639,  1.0558],
            [ 0.8929, -1.1371, -1.3023]], requires_grad=True), Parameter containing:
    tensor([[-1.1980]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.1813, -1.6692, -0.9866,  5.2430, -3.3336, -3.1080, -4.3165, -0.3802],
            [-0.8580, -1.2532, -5.3070,  3.4216, -3.1415, -2.8701, -2.2635, -4.4679],
            [ 3.4476,  2.0904, -6.1522,  1.2892,  3.4411, -4.3737,  0.9985, -2.1549],
            [-0.8024, -0.9032, -3.1022, -2.0543,  1.3951, -3.5944,  2.7652, -2.3388],
            [ 0.9114, -2.0476, -4.6376, -2.0501,  2.7995,  1.1449, -0.0175, -0.3157],
            [ 4.5307,  2.0305, -0.4849,  0.1266, -3.7953, -2.6018,  1.1710,  0.8914],
            [-5.0597,  0.6572,  2.7809, -0.2049, -2.0583, -2.5938, -2.1531, -6.4195],
            [ 1.4582, -3.2658, -0.9065,  6.0217, -2.2194, -1.9645, -1.2698, -6.0762]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0137, -0.5210, -0.6916, -1.2136, -2.0019,  0.3257,  0.3589, -0.7698,
             -0.8264,  1.6641],
            [ 0.2292, -1.2595,  0.3609, -6.3855,  1.5421, -1.3621, -0.6090, -4.8257,
              5.1223, -1.2921],
            [ 0.8019, -0.2251, -1.3917, -1.1408, -0.7349, -2.0955, -0.3327, -2.1903,
              1.4970,  3.2079],
            [-0.1292,  3.1754, -3.1438, -0.7488, -2.9168, -1.1710, -1.5316,  1.1024,
              3.6204, -1.6420],
            [-0.6273,  0.5790, -2.2998,  0.0245,  5.8965, -3.1600, -1.6514, -2.2483,
              0.0473,  1.5342],
            [ 0.1738, -0.4708,  1.5699,  1.4164,  4.4348, -0.9584, -2.6095,  8.0571,
             -2.6662,  0.2851],
            [ 0.5174,  2.5653, -4.2297, -2.5727,  3.2831,  0.6831, -0.3588,  1.3487,
             -0.0550, -0.9849],
            [-1.6411,  2.5474,  1.5439,  1.5817,  1.4162,  5.0013, -2.9827,  0.0989,
              1.0171, -0.2732],
            [-0.5765,  0.5533,  2.1009, -2.2709,  4.8679, -6.0326,  1.1175,  2.1781,
              2.4218, -0.2401],
            [ 0.0644, -1.1703,  2.1677, -2.5847,  3.9006,  3.7579, -3.5569, -1.7133,
              1.9555,  1.4198]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.274 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
