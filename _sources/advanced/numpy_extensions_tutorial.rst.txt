.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1062,  9.1700,  4.9876,  2.9486,  2.1731],
            [ 4.7334, 11.9038,  5.9961, 12.3499,  0.7938],
            [ 6.8673,  5.2844,  6.8000, 10.3025, 15.6619],
            [12.2841,  3.0436,  5.9258,  3.0391,  8.7776],
            [ 4.4570,  2.4903,  4.3319,  6.6777, 11.9696],
            [12.2841, 13.0166,  1.2613,  3.8437,  8.7776],
            [ 6.8673,  7.1647,  3.6660, 11.5811, 15.6619],
            [ 4.7334,  9.9376,  4.8140,  8.1922,  0.7938]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 8.4016e-01,  5.9796e-01,  3.8764e-01,  1.2419e-01,  1.3248e+00,
             -2.9407e-01,  2.9548e-01, -1.2285e-01],
            [-2.5644e+00,  3.6836e-01,  5.6161e-02, -5.1955e-01,  1.0146e+00,
             -1.7564e+00, -4.4500e-01, -1.0979e+00],
            [-6.4845e-01,  1.1884e+00, -8.8554e-01,  1.9390e+00, -2.3147e+00,
              1.3572e-03, -1.8722e-01,  6.6036e-01],
            [-4.9550e-01, -1.8738e-01,  5.4081e-01,  3.4209e-01, -3.4613e-01,
             -1.2101e+00,  1.1308e+00, -2.2284e+00],
            [-2.7894e-02, -1.9164e+00, -7.8310e-01, -3.6419e-01,  9.0077e-01,
              1.4452e+00,  8.3205e-01,  2.6915e-01],
            [-5.4072e-01, -8.0131e-01,  5.0133e-01, -7.0479e-01,  1.7524e-01,
              1.3213e+00,  1.0944e+00,  2.0501e+00],
            [-1.1526e+00, -5.1800e-01, -5.8151e-02,  1.4302e-01, -8.1686e-01,
              1.2460e+00, -1.1543e+00, -7.7573e-01],
            [ 4.6098e-01, -4.3752e-01, -6.0656e-01,  4.7277e-01,  1.3267e-01,
              6.3591e-01,  1.9954e-01, -8.3710e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1376,  0.7525, -0.1662],
            [ 0.4453, -1.0780, -0.7362],
            [-1.7502,  0.2222, -0.6563]], requires_grad=True), Parameter containing:
    tensor([[1.4721]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.3237,  5.8692, -0.1189,  0.4178, -0.6423,  0.6806,  4.0445, -0.0187],
            [-0.5137, -1.3474, -0.8885,  0.2307,  3.7567,  3.9927, -1.9234,  3.1121],
            [-3.3988,  2.3560,  5.7601,  4.7551,  1.5180,  0.4919,  1.4090,  3.6329],
            [ 1.2513,  2.2785, -1.4972,  2.0813,  1.2361,  5.3988,  2.8447,  5.2804],
            [ 6.3376,  0.3220,  5.0668,  5.1130,  3.9151,  0.5696,  4.7837, -0.3481],
            [ 1.8379,  5.3087,  4.3967,  0.1060,  2.3974,  2.7322,  0.2444,  1.8281],
            [ 6.0459,  3.0961, -0.2510,  1.1196, -2.1554,  1.9603,  4.2089, -0.5190],
            [ 2.6381,  1.4437, -1.3810,  2.5225,  3.7580, -1.2521,  5.1692,  1.6112]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1934,  0.9977, -0.3704,  1.0700, -0.2444,  0.8405, -0.0101, -0.2776,
              0.2491, -0.0420],
            [ 0.6290, -1.6961, -0.1654, -1.9687,  0.5915, -0.3850, -1.1056, -0.1757,
              0.4795, -0.2717],
            [-2.4698,  0.8371, -4.2173,  2.2730, -2.2036, -0.6695, -1.0362,  0.6988,
             -0.1528, -0.5103],
            [-0.0258,  0.4220,  1.3752,  0.0211, -0.3581, -1.6690,  1.3680, -3.5034,
             -0.6266, -0.0470],
            [ 0.7077,  0.2485,  2.2078, -0.3932,  0.3111, -0.0156, -4.2737, -0.2428,
             -0.6313,  0.9749],
            [-0.5123,  2.1898, -3.8258,  3.7203, -2.2415, -1.8944,  1.7074, -1.2625,
              1.9563,  1.4818],
            [-1.0703, -1.1042, -0.8514, -3.4422,  2.6929, -1.9713, -0.9766,  4.1229,
             -0.6420,  0.6835],
            [-1.8316, -0.8334, -3.9166,  1.0618, -3.5551, -3.2986,  0.0609, -2.5248,
              1.8810,  0.2473],
            [-2.0228,  0.4317,  2.4552, -2.9562, -2.5696, -1.5847, -0.8415,  0.9183,
              0.3641,  0.5224],
            [ 1.0725,  2.5693, -0.7490,  0.7098,  1.3282, -1.3935,  1.7986, -0.4541,
              0.3937,  0.0271]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.491 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
