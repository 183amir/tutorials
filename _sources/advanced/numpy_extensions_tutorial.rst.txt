.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.8912,  0.9116,  0.9350,  9.4219,  7.3300],
            [ 1.5064,  4.9602,  7.3900,  4.3929,  9.0646],
            [ 6.4220,  2.8787,  4.6257,  4.7695, 10.4851],
            [ 3.0836,  6.4095, 15.7596, 10.0240, 10.1520],
            [ 3.9652,  8.8679,  7.1707,  0.0675, 17.5930],
            [ 3.0836,  4.8040,  4.6762,  9.8817, 10.1520],
            [ 6.4220, 11.3597, 10.6802,  7.4891, 10.4851],
            [ 1.5064, 13.9185,  1.8594,  8.7469,  9.0646]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1645, -0.1948, -1.3267,  0.8810, -2.6159,  1.1846, -0.2854,  1.1186],
            [ 1.5038, -1.3121,  0.4785, -0.3264,  1.4469, -0.3903,  0.7305, -0.6030],
            [-0.2206,  0.2739,  0.3004,  1.0338, -0.7587, -1.2340,  0.5456, -0.7285],
            [ 0.0143,  0.8427, -0.5731, -1.1109, -1.9890,  0.1972,  1.3880, -1.8294],
            [ 1.0482,  0.1219,  0.9839,  0.2581,  0.3944, -1.5099, -0.7683, -0.0492],
            [ 0.8700, -1.1251,  0.7766,  0.4917, -0.4426, -0.6624,  0.8194, -1.3224],
            [-0.2305,  0.8486, -1.0426, -0.0893,  1.3644,  1.2899, -1.3499, -0.8704],
            [-1.7157, -1.6092, -0.3032, -0.8473,  0.4581,  0.5663,  0.5542,  0.5956]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4438, -0.3309,  0.0217],
            [-0.2284,  1.1680, -2.1363],
            [ 0.5995,  0.3944, -1.4762]], requires_grad=True), Parameter containing:
    tensor([[2.6586]], requires_grad=True)]
    Output from the convolution:  tensor([[ 7.8447,  7.2921,  3.6360,  2.3960, -0.4998,  5.9393,  5.3398, -3.2558],
            [10.1746,  6.3380,  1.9070, -0.7177,  0.6535,  3.4433,  3.6970,  2.0588],
            [ 4.2897,  6.0480, -1.8336,  6.8134, -0.4462,  5.5887,  6.3621,  4.0303],
            [ 6.3438, -2.1889,  1.6316,  1.6692,  4.9738, -0.2281,  7.4829,  3.4224],
            [ 0.7206,  8.0553, -2.8433,  3.7360,  9.8769,  1.7849,  4.9716,  0.7703],
            [ 3.4604,  2.5557,  0.6610,  1.7270,  6.7218, -0.2319, -0.4694,  4.4343],
            [ 3.9530,  0.4677,  8.4531, -0.7711,  6.6978,  0.9575,  0.6840,  5.0986],
            [ 3.6814,  3.3404,  4.2340,  5.4164,  3.2923,  2.4013, -0.4394,  4.5343]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.8081e-01, -1.7180e+00, -6.1170e-01, -1.7701e+00,  1.8444e-01,
             -1.6260e+00,  1.1712e+00, -2.2837e-01,  1.6808e-02, -3.1696e-04],
            [ 1.1082e+00,  9.6376e-01, -2.2501e+00,  3.9351e+00,  3.5909e-01,
              2.2963e+00, -6.7042e-01,  2.7262e+00, -1.1227e+00,  2.6709e-02],
            [-5.8792e-01,  2.5950e+00, -1.2681e+00,  7.6497e-01,  4.4382e+00,
              1.3030e+00, -2.1111e+00,  2.1502e+00, -1.3007e+00,  4.4515e-01],
            [ 3.7501e-03,  8.4660e-01,  8.2328e-01, -2.0479e+00,  7.3774e-01,
             -2.2199e+00, -5.2156e+00, -1.1525e+00, -1.4519e+00,  1.5199e+00],
            [-4.6032e-01, -6.8065e-01,  5.5253e+00, -3.7511e+00, -2.6841e+00,
              7.6442e-02, -9.9053e-01, -7.4997e+00,  4.4536e+00, -1.2141e+00],
            [ 3.3493e-01, -1.4229e+00,  1.7910e+00,  4.0296e+00, -2.7988e+00,
             -2.5122e+00,  1.9686e+00, -1.8449e+00,  2.7409e+00, -8.1862e-01],
            [ 3.3804e-01,  3.0482e-01, -5.9970e-01,  4.2526e+00, -3.2356e+00,
             -3.4393e+00,  4.0695e+00, -4.5143e+00,  5.7744e+00,  2.0610e-01],
            [-5.7930e-01,  2.0751e-01, -2.5594e+00,  3.7470e+00, -3.7771e-01,
             -2.6667e+00, -2.7566e+00,  1.0269e+00,  2.2485e+00,  1.9756e+00],
            [ 3.4276e-01, -3.1177e-01,  1.1250e+00, -1.4122e+00,  2.4481e+00,
             -1.8788e-01, -4.1689e+00,  2.1087e+00, -1.9440e+00,  1.0849e+00],
            [-2.9257e-01, -1.5815e-01,  1.3018e-01, -1.6781e-01,  2.3230e+00,
             -6.9533e-01, -1.2358e+00,  1.1500e+00, -1.0448e+00, -2.5061e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.552 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
