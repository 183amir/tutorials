.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[16.0416,  2.6711,  7.4613,  2.7047,  8.7946],
            [ 5.5360,  3.4393, 11.0556,  8.7406,  5.8218],
            [ 1.8047,  0.9408, 13.5028,  3.7378,  1.9561],
            [ 5.7224,  2.3971,  4.4020, 13.0302, 15.3207],
            [ 3.9656,  4.5160,  1.3641,  5.3810,  3.1932],
            [ 5.7224,  9.6668,  2.5119,  3.6147, 15.3207],
            [ 1.8047,  9.4600, 10.3374,  5.0400,  1.9561],
            [ 5.5360,  3.4814,  7.7318, 10.8089,  5.8218]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1543e+00,  4.5095e-01, -4.7008e-01, -8.5118e-01,  4.9637e-01,
             -9.9524e-01,  2.2650e-01,  1.2726e+00],
            [-8.2492e-01,  1.7899e-01,  1.5607e+00, -1.4811e+00, -2.6509e-02,
             -1.0046e+00,  1.4287e+00, -6.4837e-01],
            [-1.2443e+00,  1.9438e-03,  1.4155e+00, -7.3643e-01, -7.2041e-01,
             -2.3648e-01,  2.5453e-02,  2.9668e-01],
            [-2.3217e-01, -2.6789e-01,  7.8245e-02,  5.3609e-01, -5.5954e-01,
             -1.3778e-01,  2.7609e-01,  4.8222e-01],
            [ 7.0468e-02, -1.7928e+00, -1.5019e-01, -1.2125e-02, -7.8594e-01,
             -2.8169e-01, -1.4860e-02, -1.8968e+00],
            [-9.9225e-01,  4.5468e-01, -4.8430e-01, -6.4380e-01, -1.9143e+00,
              1.1315e+00,  1.7297e-01,  2.4228e-01],
            [-1.7943e-01,  4.8922e-01,  3.7043e-02, -4.1199e-01,  3.8277e-01,
             -1.1779e+00,  6.0498e-02, -2.1176e+00],
            [ 6.7612e-01, -2.5574e+00, -6.9254e-01, -2.3889e-01,  1.6066e+00,
              5.5000e-01, -1.6915e+00, -1.0154e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6938,  0.0374,  0.2373],
            [-1.5718, -0.8785,  0.6127],
            [ 0.9407, -0.1775, -0.8920]], requires_grad=True), Parameter containing:
    tensor([[-0.5697]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8852,  1.4705,  3.7223,  0.4604,  0.2413,  0.7179,  2.7189,  1.2676],
            [ 0.8378, -0.7272, -4.5911, -4.2024, -0.3991, -1.9216, -4.2328,  0.4668],
            [ 0.4253,  3.1886,  3.9883,  1.2069,  0.2651, -2.2373, -1.3173,  0.0480],
            [ 0.4468, -4.1140, -3.0432, -1.1887, -2.0192,  0.0896,  1.0266, -2.2856],
            [-2.7010,  0.7090, -0.2050, -2.8528, -0.7175,  0.5194, -2.8872, -3.1633],
            [-3.1151, -2.7787, -3.9612, -1.2792, -1.3849, -2.2652,  2.3333,  3.2304],
            [ 1.1513,  1.8528,  1.3301, -1.3389, -2.1149,  0.4607,  0.2188, -1.1721],
            [-2.7192, -0.7958, -2.1597,  1.0457,  0.6962, -2.6351, -1.3702,  1.1176]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4961,  0.6387,  0.5511, -0.3646, -0.7922,  0.0969,  0.0597,  0.6017,
              0.1420,  0.1589],
            [-1.3374, -1.1826, -1.5343,  2.7645,  3.0647,  1.1188, -1.4599, -0.8074,
             -0.1314,  0.4181],
            [ 0.4084, -0.5171, -0.6947, -2.7920, -2.8302, -2.0478, -1.2117,  0.2295,
             -0.3621, -0.3425],
            [ 2.4481,  0.5347, -0.5155,  1.0798,  0.0883,  4.8991,  4.2745, -4.3033,
             -2.1846,  0.4037],
            [-3.2286,  0.0203,  0.5154, -5.2944,  2.4098, -4.4117,  0.4575,  6.7796,
              1.1616, -1.1053],
            [ 0.7146, -0.1171, -0.3270,  0.0562, -1.4090, -1.3442, -2.7660, -4.1924,
              0.2094,  1.3292],
            [ 1.3449,  0.5996,  2.8491,  0.3478, -0.4778, -0.2150,  5.0248,  1.4039,
             -2.9100, -0.8157],
            [ 0.2006,  0.2134,  2.0670,  0.6274,  3.6077, -0.2446, -4.6000,  3.7760,
              2.5989, -0.6385],
            [-2.7827, -3.5725, -1.4822, -1.0119, -1.1136, -1.4248,  2.6629, -1.5715,
             -2.3762,  1.7070],
            [ 1.9263,  0.2494, -0.5439, -0.9389, -0.1610,  0.7328, -2.7388,  0.7627,
              1.1674, -1.2298]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.531 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
