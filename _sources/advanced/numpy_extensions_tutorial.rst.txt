.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.8181, 13.6849,  8.4182,  2.1247,  6.4268],
            [ 7.8271,  6.2367,  7.4389,  6.6663,  5.7867],
            [ 4.5310,  4.0968,  9.9036,  7.7774, 12.5173],
            [ 2.1748,  2.5917,  7.4433,  2.2607,  8.1458],
            [ 9.5953,  5.6228,  4.3752,  1.3364,  3.7920],
            [ 2.1748,  6.8482, 10.7909, 11.6308,  8.1458],
            [ 4.5310, 10.3128,  4.7983,  8.3353, 12.5173],
            [ 7.8271, 10.8329, 11.6961,  2.8813,  5.7867]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4074, -1.1432,  0.7882,  0.8490, -0.7606, -1.3339, -0.3820,  1.4198],
            [ 1.9602,  0.8575,  0.8932,  0.0056, -0.2827, -0.1701,  1.0389, -0.7372],
            [-0.8864,  0.7883,  0.0347, -1.6236, -0.7214,  1.6873, -0.5323, -0.8879],
            [-0.1805,  0.2372, -0.8259, -1.3243, -0.4828,  0.5405, -0.1070,  0.2755],
            [ 0.1662,  0.7785,  1.5013, -2.0828,  0.1958, -2.4383, -0.2375, -1.0107],
            [ 0.1678,  0.0933,  1.8224,  0.4571, -0.7390, -0.7683, -0.0765, -0.3533],
            [ 0.6851,  0.1976,  1.0216,  1.8758, -1.4336, -1.1803, -0.1451, -1.3036],
            [-0.9821,  1.1157,  0.1377,  0.1467,  0.4272,  0.8390, -0.1678,  0.0710]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7203, -0.6074,  0.9204],
            [ 0.0086,  0.1372,  0.0983],
            [ 1.7011, -0.6361,  0.3476]], requires_grad=True), Parameter containing:
    tensor([[-0.6018]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4823,  1.8534, -3.0217, -4.0655, -2.0889,  0.3044,  0.7790, -4.8655],
            [-3.6978,  1.6760, -5.0121,  0.2724, -0.4029, -0.7143, -2.3836,  0.9530],
            [-4.5894,  0.2445,  0.1132, -1.4653, -3.4392,  0.8971, -1.5454, -0.5560],
            [-3.3941,  3.0932, -2.3409, -4.7443,  1.2665,  0.1492, -4.6020, -1.5383],
            [ 1.2487, -0.6844, -1.1233, -0.0450, -0.5193,  2.1714, -3.3268,  0.5563],
            [-2.1295,  1.9103,  0.7879, -2.9354, -2.2622,  0.1533, -0.3886, -0.4904],
            [-3.9511,  3.1289, -2.6940,  0.6722, -1.4818,  3.8200,  0.3352,  1.6080],
            [ 2.7636, -3.1621,  0.7245, -3.4061,  1.5827,  1.0028, -0.9178,  0.5079]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 6.6175e-01, -3.7364e-01,  1.7929e+00, -1.1512e+00,  1.4445e+00,
              5.4267e-02, -1.4133e+00,  1.1141e+00, -9.5354e-01,  1.3428e-01],
            [-4.6712e-01,  2.2645e-01,  2.1590e-01, -2.9101e-01,  1.2144e+00,
              9.0702e-01, -5.9329e-01,  2.1453e+00, -6.6948e-01,  8.5813e-02],
            [ 4.4036e-01,  2.8055e-01,  2.5185e+00, -2.3519e+00,  9.0284e-01,
              1.4612e+00, -1.6368e+00,  1.0852e+00, -1.4976e+00,  1.8862e-01],
            [-1.9558e+00, -2.3650e-01, -8.8074e-01,  1.0821e-02, -4.5532e-02,
              3.1752e+00, -1.2262e+00, -1.9983e+00,  3.1397e+00, -9.2416e-01],
            [-4.4270e+00,  1.4149e+00, -5.7420e-01,  6.4532e-01,  1.7110e-01,
             -2.0299e+00, -1.3722e+00,  1.4013e+00, -7.3376e-01,  4.1077e-01],
            [-2.1698e+00, -5.0464e-01, -2.5179e+00, -1.0833e+00, -1.9685e+00,
             -1.3339e+00,  5.5028e+00, -3.8490e+00,  6.0116e-01,  9.3511e-04],
            [-4.3920e+00,  2.5378e+00, -1.9939e+00, -4.8675e-01,  1.2353e+00,
              3.2749e-01,  2.4686e-01,  7.5334e-01,  2.0336e+00, -8.4446e-01],
            [-2.9315e-01, -4.1042e-01,  1.1724e+00, -1.4274e+00,  2.1515e+00,
             -1.2200e+00, -2.1438e+00,  4.3233e+00, -1.4959e+00,  7.2142e-01],
            [-4.3903e-01,  1.7795e+00, -6.3689e-01, -1.1693e+00,  1.3352e+00,
              3.1386e+00,  2.3522e+00, -2.2458e+00,  1.4536e+00, -3.2155e-01],
            [ 4.8772e-01, -6.3421e-01,  2.4389e-03, -8.1824e-01,  4.3967e-01,
              3.5341e+00, -2.2342e+00,  2.4139e+00, -6.7002e-01,  2.6991e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.541 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
