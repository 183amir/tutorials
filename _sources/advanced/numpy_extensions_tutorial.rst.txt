.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.7431,  8.1931, 11.6957,  4.2851,  4.5696],
            [ 3.9675,  6.9006,  9.3672,  8.9780,  6.4519],
            [ 4.1967,  2.6218,  6.1320,  8.7964,  4.4055],
            [ 7.2244,  8.7724, 14.8564,  5.5018,  2.7855],
            [12.1577,  8.6458,  8.9622,  6.3173,  2.4573],
            [ 7.2244,  2.8715,  2.8678, 11.6564,  2.7855],
            [ 4.1967,  4.4510,  7.4313,  8.3313,  4.4055],
            [ 3.9675,  4.5876, 11.4752,  5.7920,  6.4519]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5059,  1.2785, -0.3955,  1.9091, -0.4996,  0.7179,  1.7755, -0.8630],
            [ 0.3643,  0.2987, -0.0486, -1.7512,  0.0662,  1.6676, -0.8109, -0.5887],
            [ 0.9399, -1.0086, -1.1936, -0.3770, -0.7111,  0.2760, -1.1976,  1.2643],
            [-1.4146,  1.1198, -0.7845, -1.3313, -0.1632,  0.7279,  1.5028, -0.3368],
            [ 0.1475,  0.5940,  0.4426, -0.8664,  0.6726,  0.8083,  0.1020, -0.0739],
            [-1.2156, -2.0382,  0.4735, -0.6730, -1.5733,  0.3363,  1.8682,  0.1976],
            [ 0.1363,  0.8137,  0.8370,  1.7892, -0.1897, -0.7733,  1.1082, -0.5069],
            [-0.8592,  0.3452, -0.6074, -0.2796, -0.6001, -0.0404,  0.4206,  0.0206]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9629,  1.5389,  1.6990],
            [-0.0924, -0.1727,  0.0304],
            [-0.3099,  0.1589, -0.4064]], requires_grad=True), Parameter containing:
    tensor([[0.8366]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.6133,  4.0543,  1.1765,  0.0107, -0.5388, -1.9213, -1.4862, -1.8421],
            [ 1.7595,  6.7331,  3.2735,  0.3746,  0.7634, -0.1014,  1.4342, -0.3344],
            [ 3.9000,  2.9788,  0.2544, -0.2271, -0.7237,  1.2451, -2.2650, -2.7103],
            [-1.0107,  1.3927,  1.2747,  4.7835,  6.0853,  6.3831, -0.1777,  1.6357],
            [ 1.0549, -1.2155, -4.2663, -5.2277, -1.1036,  0.5266, -0.0774, -0.8502],
            [-1.1869, -2.2866, -1.9805, -0.3487,  0.9092, -1.9233, -1.0961,  0.5239],
            [ 2.2201,  1.1350, -0.6105, -1.6471, -3.5327, -1.2409,  1.8642, -2.2588],
            [ 0.1610, -1.6433, -2.9495, -2.0414, -1.9758, -2.3303,  0.1143,  1.5863]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5047,  0.1603,  0.8371,  2.8998,  1.5352,  0.2448, -2.5267, -2.4082,
             -0.6429,  0.3703],
            [-1.6428, -3.2839, -5.5257, -4.5103, -4.1629, -1.5908,  0.4768,  0.0310,
              0.4302,  0.4366],
            [ 1.1868,  0.7210,  0.7301, -1.5525,  1.8334,  5.4182,  7.5847,  5.5424,
              1.0544, -0.4816],
            [-0.8072, -1.9142,  0.7622,  2.8274,  1.3924, -0.4511, -0.7465, -0.1312,
             -2.4746, -2.5314],
            [-0.6064,  0.5387,  1.1596,  3.2174,  1.6069, -2.4616, -4.2439, -5.1216,
             -3.5278, -0.6999],
            [ 0.1419, -0.4720,  0.8849,  2.7059,  1.6475, -1.6601, -0.4517,  1.3607,
              2.9372,  0.0421],
            [ 1.2243,  0.5522,  0.3864, -0.8372,  0.3864,  0.7280, -0.4130, -1.8044,
             -1.5360, -2.6320],
            [ 0.5073, -0.2098, -1.2638, -2.0084,  0.5080,  2.6048, -0.1392,  1.0463,
              0.3260,  1.4252],
            [-0.3865,  0.4269, -0.3981,  0.2336, -0.1251, -0.2849,  0.1695,  0.5733,
             -0.4752,  0.6945],
            [-0.1636,  0.3291, -0.0308, -0.2052,  0.4384, -0.3228, -0.1919, -0.1691,
              0.1968, -0.3229]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.573 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
