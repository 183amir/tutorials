.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.3680,  3.3466, 10.9558,  6.8640,  6.0606],
            [12.5749, 11.1888,  7.3904, 10.2863,  4.4270],
            [ 3.5443,  5.9248,  2.8612,  8.6372,  4.6885],
            [ 8.9282,  6.3907,  9.5316,  3.6132,  7.1106],
            [ 3.2635,  4.7611,  3.7482,  3.6506,  2.1962],
            [ 8.9282, 11.2310, 10.8849, 13.2909,  7.1106],
            [ 3.5443,  3.1380,  6.8014, 11.7483,  4.6885],
            [12.5749,  2.6981,  4.6140,  5.5391,  4.4270]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1331,  0.4260, -1.9271, -0.1478,  0.5904,  0.2468,  1.5194, -0.7390],
            [ 0.5286,  3.0091,  0.8285,  0.7676, -0.3098,  1.2080,  1.1680, -0.2673],
            [ 0.9538, -2.0348, -0.7484,  1.6711,  0.4456,  1.4079, -0.4141, -0.3590],
            [-0.4052,  0.7328, -0.3549, -0.0442, -0.4966,  0.8754, -0.3705,  0.2597],
            [-0.5485,  0.8950,  0.5052, -0.3554, -0.6097,  0.5479,  0.2052, -1.0903],
            [-0.8521,  0.0547, -0.4203, -0.1293, -0.2068, -1.9435,  0.8673, -1.1271],
            [-0.8403,  1.3660,  0.9379, -2.0295, -1.1276, -0.3510, -0.2649,  1.2883],
            [ 0.3236, -0.2787, -0.2568, -0.3949, -1.1090,  0.7630,  0.4096, -0.0133]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4624,  1.0646, -0.3905],
            [-2.1588, -1.2147, -0.0327],
            [ 0.0697,  0.9369,  0.8098]], requires_grad=True), Parameter containing:
    tensor([[0.9054]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5934, -0.4845, -1.0156,  3.5491,  2.5150, -1.9785,  1.1433,  2.7297],
            [-1.2485, -1.9716,  2.6164,  1.2476,  3.2423,  2.2552,  2.8582, -3.7216],
            [ 6.3781,  4.3664,  0.2447, -2.8685, -2.3068, -3.1709,  1.1038,  1.0358],
            [-7.1716, -4.4485, -1.4628, -1.1188, -0.0111,  0.5697,  4.6948,  1.5226],
            [-0.6461,  0.6657,  0.4185,  2.6528,  7.4625,  2.6401,  0.2029,  0.0632],
            [ 2.2306,  1.7017,  5.6887, -1.7509, -3.2592, -0.3427, -3.6420,  3.8324],
            [-0.6938, -4.0929, -2.0370, -0.2888,  4.4072,  5.1531, -2.6066, -0.1692],
            [ 4.8477,  2.3470,  0.2502,  0.5291, -0.5463,  0.4369,  1.7557,  1.4738]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1680, -0.2544, -1.3550,  1.9236,  1.3532, -1.2241, -0.2699, -0.6220,
             -0.0803,  0.1061],
            [-0.7141,  2.3112, -1.2238, -5.0416,  0.4864,  1.1762,  3.2173,  0.7197,
             -0.4155,  0.2410],
            [-0.7097,  1.5400,  5.1031, -0.2704,  1.5077, -2.0883, -3.8188, -1.6364,
              0.0606, -0.0111],
            [ 1.7925, -1.6133, -3.1366, -3.9510, -4.1704, -0.0476,  3.2892,  4.4004,
              1.2205, -0.7162],
            [-0.0772, -1.0571,  0.8782,  4.8645,  3.4396,  4.3275,  4.1374, -1.4173,
             -3.3656, -0.2223],
            [ 2.9444, -0.2338, -4.2364, -0.2807, -1.3352, -6.3562, -3.6397, -1.2194,
              0.6845,  0.4862],
            [-2.0004, -1.4192,  2.5639,  0.9831,  0.5771, -1.2096, -1.0312,  1.5966,
              2.3361, -1.0478],
            [-0.3191, -0.4182, -0.9622,  2.5803,  4.0990,  2.2836,  2.4226, -0.5301,
             -2.2854,  0.1871],
            [-0.3293,  1.2630, -0.7847, -1.3904, -1.0211, -1.8976, -4.4256, -1.7584,
              1.4881,  1.3517],
            [ 0.0111,  0.1097, -0.3369,  0.4660,  1.1345,  0.1619, -0.1131,  1.0730,
              0.6670, -0.2875]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.568 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
