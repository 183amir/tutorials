.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[15.5892,  4.5441,  1.9235,  5.8118,  2.7211],
            [ 2.7225,  7.2874,  7.9210,  2.4071,  8.3749],
            [11.9002,  2.7388, 12.0722, 11.2002,  8.7592],
            [13.0825,  4.5230,  1.3276,  2.2057,  7.3520],
            [ 5.4046,  2.2392,  6.3022, 10.1080, 11.5825],
            [13.0825,  6.4834,  6.5320,  5.3681,  7.3520],
            [11.9002,  8.9910,  6.9828,  2.7525,  8.7592],
            [ 2.7225, 12.8015,  5.1604,  9.9333,  8.3749]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.3594,  0.6573, -0.6335, -1.1335, -0.2350, -0.2992, -0.0571, -1.0875],
            [ 0.1496, -0.8285, -0.7070, -0.1350, -0.1634,  0.2907, -0.1205,  0.9851],
            [ 0.4771, -0.5324, -0.5596, -1.1883, -1.4927, -0.0562,  0.2430, -0.2882],
            [ 0.8162,  0.3611, -0.2412, -1.8243, -0.1881,  1.1518,  0.6252,  0.9192],
            [-1.3992,  1.1769, -2.1964, -0.2803, -0.7115, -1.6157, -1.2975, -0.5748],
            [-0.1710, -0.7743, -0.4370,  1.3231,  0.2329, -1.8648, -0.7290, -0.9342],
            [-1.2485, -0.1924,  0.4359,  1.4092,  1.2093, -0.2284,  1.3615,  1.2005],
            [ 0.7687, -1.2393,  0.9523, -2.3052,  1.0579, -0.6446, -0.8157, -0.6030]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2977, -0.9356,  1.4588],
            [ 0.9135,  0.0889, -1.0102],
            [-0.5778,  1.6388, -1.3148]], requires_grad=True), Parameter containing:
    tensor([[-0.1271]], requires_grad=True)]
    Output from the convolution:  tensor([[  1.8482,  -4.9613,   1.1480,   2.5099,   0.7309,   2.7882,  -4.0293,
               7.5411],
            [  1.7841,  -2.4637,   4.1403,   2.9830,   4.3811,  -5.0327,  -3.3216,
               2.4857],
            [  0.3000,  -5.3262,  -3.2373,   0.4566,  -1.0994,   4.0795,   0.0265,
             -10.2130],
            [  4.9170,  -0.9958,   0.2736,   0.0618,  -1.1465,  -1.6747,   2.7754,
              -0.2977],
            [  1.3018,   0.2280,  -0.5674,  -4.7240,   3.8690,   3.1107,  -4.6133,
               2.2434],
            [ -0.1929,   0.0211,  -1.5347,   4.3757,  -7.2115,   5.5905,  -2.6584,
              -1.5541],
            [ -2.2728,   4.2214,  -0.2902,   1.8959,   0.6476,  -5.2002,   3.4757,
              -0.1346],
            [ -3.3057,   1.9255,   0.8138,  -4.8019,  10.5733,  -6.0033,   0.0431,
               3.1556]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 6.9585e-03, -1.0811e-01,  2.9433e-01, -2.7520e-01, -3.9801e-01,
              6.6706e-01, -4.4325e-01,  1.9210e-01,  1.8481e+00, -3.1623e+00],
            [ 8.3860e-01, -2.6679e+00,  3.3712e+00,  1.0599e+00,  9.8664e-01,
             -4.2346e-01, -3.8783e+00, -1.7680e-03, -1.3119e+00,  3.2534e+00],
            [ 2.4386e+00,  1.1530e+00, -3.8107e+00, -1.3058e+00, -1.3951e+00,
              6.1485e-01,  6.3712e+00, -2.3447e+00, -1.6657e+00,  1.6826e+00],
            [-2.4232e+00,  6.3023e+00, -6.2083e+00,  6.7543e-01,  5.9155e-01,
             -3.8776e+00,  2.1940e+00, -9.8669e-01,  1.2533e+00, -1.0848e-01],
            [-2.1551e+00,  2.5196e-01,  5.7987e-01, -1.6516e+00,  1.4367e+00,
              7.4115e+00, -6.1281e+00,  4.8081e+00, -5.6962e+00,  4.1349e+00],
            [ 2.4862e-01, -2.0901e+00,  3.9826e+00, -1.2733e+00, -3.6913e+00,
              1.1730e+00,  2.1589e+00, -9.9609e-01,  1.3218e+00, -3.5055e+00],
            [ 1.3305e-01, -6.1050e+00,  8.5915e+00, -1.9077e+00,  5.7839e-02,
             -2.7931e+00, -3.6178e-01, -1.9882e+00,  6.7486e+00, -4.9573e+00],
            [ 3.3585e+00, -3.7919e+00, -2.9020e+00,  2.9404e+00,  8.0675e-01,
             -6.7080e-02, -1.4910e+00,  2.5212e+00, -5.7298e-01, -7.9559e-01],
            [-1.2430e+00,  6.2854e+00, -8.2752e+00,  1.8184e+00,  1.4842e+00,
             -9.5988e-01,  2.8530e+00, -3.1828e+00, -7.8003e-01,  2.4947e+00],
            [-2.2696e-01,  5.0059e-01,  7.1193e-02, -3.9088e-01, -8.8502e-01,
              2.8675e-01,  2.7673e+00, -2.6427e+00, -8.3497e-01,  1.6749e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.509 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
