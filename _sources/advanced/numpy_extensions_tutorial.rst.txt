.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.1238,  9.1780,  7.0765,  2.4269,  7.2749],
            [ 5.7485,  3.2380, 15.3746, 10.7178,  9.9213],
            [12.7519,  6.5502,  2.2992, 10.3814,  4.3319],
            [ 5.7431,  6.2067, 13.3358,  7.7862,  4.4018],
            [13.0532,  5.1808,  3.0661,  8.4033,  3.1388],
            [ 5.7431, 11.2089,  9.4881,  3.5273,  4.4018],
            [12.7519,  6.8513,  1.9286,  0.7383,  4.3319],
            [ 5.7485,  6.4888,  2.8731,  8.0387,  9.9213]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3033,  0.4761, -0.4452,  0.9945,  1.4611, -0.2386,  0.7836, -0.2597],
            [ 0.4546,  0.7018,  0.5484,  1.6839,  1.7268,  0.2631, -1.0677,  0.4175],
            [-1.1997, -1.3896, -0.6187,  0.6226, -0.6423, -1.7847,  0.6062, -0.1454],
            [-0.2528,  0.0419,  1.2666,  1.4183,  0.3884,  0.7239, -1.2814,  0.3366],
            [-1.0169, -1.2171, -0.5016,  1.5234, -0.8934,  1.2177,  0.8484,  0.1955],
            [-0.8688, -0.1525,  1.7367,  0.1956, -1.7470,  1.5074, -0.1789,  0.7535],
            [-0.2684,  1.7086, -0.4264, -1.0647, -0.0538, -0.9490, -1.9524, -0.6381],
            [-0.4967, -0.2784, -0.3385,  0.7047,  0.4319, -0.8818,  1.6194, -0.2878]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1426, -0.9406, -0.4815],
            [-0.4001,  1.5955, -1.2031],
            [ 0.2263, -0.9154, -0.7701]], requires_grad=True), Parameter containing:
    tensor([[-1.2909]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7084, -0.9502, -2.3363, -3.1555,  7.1542, -5.0822, -0.5140, -3.8476],
            [-0.1739,  0.6114, -2.0398, -0.1016, -3.9272, -1.0876,  3.4877,  3.5243],
            [-2.5401, -2.6322, -2.3287, -0.2463, -1.0789, -3.1967, -1.1851, -0.5147],
            [-5.7140, -0.9584, -2.8334, -1.0710, -2.3848,  0.4647, -3.5133,  2.3409],
            [-1.1772, -2.2428, -2.6270,  0.1445,  2.6611, -3.9848,  1.8576,  0.1428],
            [-4.6456, -0.0589, -3.9460,  2.1679, -5.4880,  2.4914, -4.8207, -1.2800],
            [ 0.3431, -1.9060, -1.0989, -3.5376,  1.2166,  2.0030, -2.1913,  3.6749],
            [-4.5584, -1.4094, -2.4882,  0.0602, -1.7252, -5.9806,  3.1230,  0.8071]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0432, -0.2908, -0.2221,  0.7889,  0.5352, -0.7655, -1.3398,  0.3241,
             -0.9093, -0.6104],
            [-0.1538,  0.8146, -0.6722, -1.4479,  0.8946,  1.2741,  1.7595, -1.9759,
              1.9799, -1.8530],
            [-0.0146,  0.3394,  0.8577, -0.1378, -0.4686,  0.1643, -3.2220, -0.3034,
              0.1560, -1.3092],
            [ 0.3723, -1.1090,  0.1540, -3.1725,  2.3936, -3.8435,  2.6615,  4.7611,
             -1.7797,  1.8934],
            [-0.2053,  0.2527,  5.7251, -4.9612, -0.2987, -2.5174, -1.1370, -2.7595,
             -2.1546,  4.3077],
            [ 0.1365,  0.3969, -1.9952, -0.0827, -0.4579, -0.1041,  0.0954, -0.9309,
              0.4056,  3.1018],
            [ 0.0735, -0.5316,  2.0660, -1.6773, -3.1697, -0.4662, -0.8211,  1.4677,
             -0.8051,  0.5825],
            [-0.2612,  1.0161,  0.7179,  1.4235, -0.3814,  1.4468,  0.4716,  2.7946,
             -4.4135, -0.6010],
            [ 0.1678, -0.2770, -1.1208, -0.1292, -1.3953,  0.4550, -0.1250,  2.6905,
              0.5206, -1.3194],
            [-0.0643,  0.0666,  0.9744,  0.6116,  0.5424,  0.9236,  2.4413,  1.1302,
             -1.5372, -0.9209]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.570 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
