.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.4541,  6.2830,  0.9022, 10.9797,  2.8772],
            [ 6.7961,  7.2528,  3.9778, 11.7962,  9.6783],
            [ 1.4218,  8.9896, 13.8823,  7.2009,  9.4095],
            [ 7.4807,  7.6281, 14.9849,  1.8251,  4.6370],
            [ 3.4930,  3.4725,  8.3882,  2.6079,  4.4430],
            [ 7.4807,  5.5189,  9.2112,  4.3243,  4.6370],
            [ 1.4218, 12.1541,  9.1519,  8.3126,  9.4095],
            [ 6.7961,  1.6140, 10.3662,  7.5750,  9.6783]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3146,  0.9373,  1.7068, -0.5357, -1.8917,  0.6690,  0.3040, -1.2906],
            [ 0.8524, -0.5070,  0.4708, -0.4514, -0.5993, -0.7390, -1.1637, -1.1170],
            [-0.5648, -1.9439,  0.1336,  0.3693,  0.4198,  0.4278, -0.7494,  0.6207],
            [-0.4015,  0.3052,  1.9856, -1.3557, -0.6904, -0.2307,  0.0354,  0.9752],
            [ 1.4148, -0.2253,  1.0149, -1.5032, -0.2730, -1.5342, -0.2204,  0.5867],
            [ 2.2166, -0.5657, -0.9230,  1.1003,  0.4893,  0.5755,  0.3221,  0.5472],
            [ 0.9231,  0.6032, -1.3960,  0.4558,  0.2131,  1.3862, -0.7561, -2.0900],
            [-1.0616, -0.6760, -0.4330,  1.1474, -1.0537, -0.0137,  0.0724,  1.9067]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4912, -2.3761, -1.7818],
            [-1.2217, -0.4647, -1.0043],
            [ 0.4998,  0.9716,  0.1614]], requires_grad=True), Parameter containing:
    tensor([[-0.1200]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1799,  6.9313,  7.2350,  7.8802,  3.6144,  1.5924,  3.0010, -1.2068],
            [ 7.9005,  6.9322,  2.7014, -0.1078,  0.3458, -3.1366, -4.0828, -1.0220],
            [-1.3066, -3.1290,  1.8635,  6.7103,  3.2244, -4.2307, -1.9602,  1.9427],
            [ 2.8054,  1.2647,  0.2682,  2.7892, -3.3372, -6.6897, -5.5256, -0.3678],
            [ 1.9662,  1.3574, -3.3678, -1.9474,  0.5404, -1.9284, -0.4936, -1.0252],
            [-0.4196,  2.3283,  3.4621,  0.5815, -8.3207, -2.5869, -3.0078, -0.4989],
            [ 4.9811,  4.5370, -1.2756, -7.6943, -5.1511, -2.2836, -4.9720, -3.6214],
            [ 7.9849,  7.9339, -3.6022,  1.7691,  5.3880, -4.0933, -2.6604, -5.5456]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0729,  1.3977, -4.7065, -4.9963,  3.0426,  5.3451,  2.1899,  1.4788,
              1.7508,  0.6119],
            [-0.3721,  0.3014,  0.1835, -0.4173,  0.8360,  1.9620,  6.5661,  0.7898,
              3.9438,  3.8209],
            [ 1.4855,  0.8900, -0.4166, -6.5257, -0.9232, -2.5679, -0.7106,  8.0467,
              1.3770,  1.5449],
            [-0.9240, -3.3988, -1.9660, -2.2970, -3.1415, -2.9786,  0.0375,  1.4751,
             -1.0336, -0.0131],
            [-1.0139,  5.2973,  6.5034,  4.2852, -0.4079, -2.4310, -6.6683,  1.2793,
             -0.7577, -0.7841],
            [ 2.9778,  0.5187, -0.9308,  1.0051, -1.3534, -2.6009, -1.9672,  0.4222,
              4.4636,  1.7740],
            [-2.9390, -0.0169, -3.1152, -2.9641,  0.9261,  3.7471, -0.3175,  0.2838,
              1.7979,  1.2649],
            [ 1.9976,  2.6538,  4.4145,  0.2418,  1.3403, -2.5099,  3.7814, -1.1391,
              0.0315,  1.0005],
            [ 0.1777, -0.4938,  1.5811, -1.2133, -0.6019,  0.4204,  1.1498,  2.1400,
              0.1548,  0.7742],
            [-0.3891, -0.7864, -0.2920,  0.1557,  0.6701, -0.5795, -1.1387, -0.3200,
             -0.6864, -0.1213]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.525 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
