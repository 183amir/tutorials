.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.0511,  6.8611,  8.2168,  0.5117,  8.6574],
            [ 4.7309,  1.8630,  3.0890,  8.7460,  8.5369],
            [ 7.7802,  6.7385,  2.1008,  6.2510,  8.2524],
            [ 2.7417,  4.5514, 14.3077,  5.8234,  8.0993],
            [10.7165,  4.2326,  5.3211,  7.6189,  5.5833],
            [ 2.7417,  9.0719,  1.4288,  8.5755,  8.0993],
            [ 7.7802, 10.4483,  7.9210,  2.6342,  8.2524],
            [ 4.7309,  3.8684, 10.8916,  2.5399,  8.5369]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 5.9640e-01,  7.5531e-01, -6.3538e-01,  2.0800e-01, -1.9884e-01,
              7.6393e-01, -2.3569e+00, -7.1313e-05],
            [-1.3844e-01,  5.9509e-01, -2.2501e-01,  1.5377e+00, -5.1883e-01,
              3.8252e-01,  3.1895e-01, -3.3761e-01],
            [ 5.5383e-01,  1.0895e+00, -1.2030e+00, -8.4423e-01,  5.9294e-01,
              1.4450e+00, -6.8178e-01, -7.4457e-01],
            [ 1.3294e+00, -4.8843e-01,  1.0194e+00,  3.8706e-01,  2.7763e-01,
              4.6626e-01,  8.5236e-02, -6.0489e-01],
            [-9.3722e-01,  9.7082e-01,  9.9650e-01, -9.1272e-01, -1.9514e+00,
             -5.6071e-02, -6.1948e-01,  8.0219e-01],
            [ 4.8312e-02,  9.6678e-01,  3.7835e-01, -9.4986e-02,  4.2562e-01,
             -1.8864e+00, -3.3824e-01,  1.8839e-01],
            [ 6.6404e-02, -1.3869e+00, -6.1442e-02,  8.3417e-01,  1.4285e+00,
              3.8118e-01,  1.8433e-01, -4.1170e-01],
            [ 4.5950e-01,  2.6295e+00, -1.6986e-01,  3.1355e-01,  5.6547e-01,
              6.0058e-01,  4.0583e-01,  8.0539e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2177,  0.1381, -1.3224],
            [ 0.2986,  0.3655,  0.6099],
            [-0.3721,  0.2269,  0.8282]], requires_grad=True), Parameter containing:
    tensor([[-1.3009]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4780,  2.8265, -1.6520,  0.2917, -3.5666, -2.3655,  0.9461, -2.1406],
            [-1.4682, -2.6719, -2.5295, -1.3978,  1.1452, -0.4618,  0.0851, -2.4760],
            [-3.5869, -3.0235, -1.7563, -1.7808, -0.8972, -1.9793, -1.7755, -1.3885],
            [-2.0746, -1.3898, -1.1079, -3.8230, -3.2370, -1.8166, -0.4242,  0.6348],
            [ 0.0694, -0.5809, -1.8940, -1.3160, -2.0758, -2.9035, -1.5710,  0.3634],
            [-0.0659, -1.8617, -0.3497, -0.0794, -0.0168, -0.7064, -3.1255, -3.3327],
            [-0.1067, -0.2261, -1.0706, -1.9935, -2.0859,  0.2499, -1.8524, -1.0638],
            [-3.2567, -1.9440, -0.4112,  0.5411, -2.4960, -2.4269, -1.3307, -0.4590]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2980, -0.1617, -2.1657,  1.9633,  0.5811,  0.7190,  1.5135, -1.8075,
             -1.5066, -0.0684],
            [ 0.6355,  0.2027, -1.3748, -1.8028, -0.3231,  0.8309,  0.1284,  2.6960,
              0.5241,  0.8076],
            [-0.2880,  1.2090,  1.8963, -0.7253,  0.3990, -5.5701, -0.2001,  2.8504,
              0.8559,  0.6014],
            [-0.2634,  0.3503, -1.0664, -1.4273,  0.4985,  1.4299, -1.2775, -2.3714,
             -1.3622,  0.8573],
            [ 0.4842,  0.8587,  0.7915, -1.7875, -0.3512,  5.3254, -1.5272, -2.1536,
              1.5438, -0.6561],
            [-0.4877,  0.2049,  1.9320, -2.5932, -1.1280, -0.9833, -0.9510, -0.5680,
             -0.4921, -2.5481],
            [ 0.2368,  0.7953, -1.1023,  1.1241, -1.9694, -2.0376,  2.6283,  3.0202,
             -1.7482,  0.6501],
            [ 0.4863, -0.2939,  1.5824,  2.7771, -1.0077, -2.4579,  0.3975, -3.0298,
              0.8916,  0.1850],
            [-0.5312, -0.0100,  0.9407,  0.5511,  0.5658,  0.7856, -1.4002, -0.4088,
             -0.1333, -0.2695],
            [ 0.0270,  0.1290, -0.1267, -0.6058,  0.3490, -0.1418,  0.0766,  1.1201,
             -0.4825,  0.1440]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.472 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
