.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[19.4142, 12.8382,  4.0732,  3.2104,  5.7073],
            [ 2.0746,  6.3439,  2.3428,  3.9319,  5.0861],
            [ 6.0834,  7.7866,  8.3866,  8.6698,  3.4479],
            [ 6.6852,  8.9411,  2.9624,  9.3080,  6.9184],
            [ 4.5022, 23.6816,  7.3632, 10.9880,  1.7353],
            [ 6.6852,  6.9460,  1.5754,  6.9315,  6.9184],
            [ 6.0834,  7.3112,  2.6513,  9.1937,  3.4479],
            [ 2.0746,  7.2620,  8.3557,  8.8722,  5.0861]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5420,  0.7043, -0.1673,  1.8938, -1.6660, -1.3284, -0.5460, -0.8711],
            [-0.8750, -0.9295, -0.3647, -0.9675, -1.0503, -1.5766, -0.1130,  0.7180],
            [ 0.1922,  0.2866,  0.1165, -1.0396,  0.3167, -0.5365, -0.1996,  0.1317],
            [-0.8695, -1.4573, -1.3344, -1.1525,  1.7011,  0.9630,  0.7330,  0.8970],
            [ 2.3724, -0.2689,  0.4515, -0.8422, -1.0442, -2.3665, -2.2229, -0.5660],
            [-0.0177, -1.1609, -1.0372, -0.3525, -1.1653,  0.2061,  0.6436, -0.7326],
            [ 1.0661,  0.8601,  0.1399, -0.0568, -1.6458, -0.1575, -1.4405, -0.5639],
            [-0.6919, -0.4252,  0.4416, -2.1468, -0.2200, -0.5987,  0.1011,  0.8766]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.1861,  1.3079, -1.4026],
            [-1.2000, -0.8500,  1.1918],
            [-0.0260,  0.3938,  1.6836]], requires_grad=True), Parameter containing:
    tensor([[-0.5750]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.3515, -0.4061, -7.1549, -1.4456,  0.3810,  4.6693, -2.1498, -4.5652],
            [-1.4006, -1.6683,  5.2258,  2.0904, -3.6913,  0.7515, -0.1322,  0.6004],
            [ 0.5840, -3.0815,  4.0378,  5.2708,  1.5669, -1.6848,  3.7181,  2.1653],
            [-5.3236, -0.7594, -5.0645, -0.3242,  5.7783, -3.5980, -5.3696, -0.3605],
            [ 4.9729, -0.0360, -2.0771, -5.2181,  0.0866,  0.6508,  0.0096,  2.4995],
            [-1.6879, -1.0556, -0.3760, -1.6309, -2.8560,  3.5430, -4.6401, -3.3933],
            [ 2.2632,  5.9040, -0.9170, -6.0899, -0.2702, -2.1071,  0.3852,  0.5320],
            [-1.5309, -5.5464,  1.5329,  2.8912, -0.3700, -3.4545, -1.3832, -4.1586]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.6805,   1.1770,   1.3942,  -2.4221,  -0.7995,   1.8995,  -2.3074,
               2.1817,   1.6277,  -1.2872],
            [  0.4654,   2.1258,   4.0131,   1.5533,  -1.0473,   1.8733,   0.8032,
              -3.0108,   0.6035,   0.4393],
            [ -1.6119, -10.4969,  -5.1178,   8.3788,   5.7309,  -0.4160,   2.8659,
              -2.4688,  -4.1685,   3.7567],
            [ -1.6997,   0.7755,   2.3980,   3.3225,  11.1239,   0.6531,  -0.3667,
               2.5388,  -1.1269,   0.1076],
            [  6.5902,   9.5097,   2.1245, -10.5632,  -7.8838,   2.0358,   6.3290,
               2.0982,  -0.2361,  -1.2243],
            [ -5.6837,  -5.1178,  -1.8875,  -4.3214,   3.0038,   5.1157,   3.8805,
               2.3642,   4.2086,  -2.4797],
            [  4.4514,   4.5037,   3.3413,   2.0278,   1.4525,  -2.9629,  -3.1163,
               3.7984,   2.7932,  -2.4886],
            [ -0.3189,  -4.0198,  -7.0867,   0.6749,   0.3001,   0.6520,   1.4009,
              -6.7712,  -0.4309,   2.0880],
            [ -0.7394,   1.3217,   5.8943,   2.3319,   0.6012,  -3.7530,  -0.0222,
              -0.5223,  -3.0631,   0.9628],
            [ -0.0153,   0.2592,   0.5991,  -2.3772,  -2.7756,  -1.8379,  -1.2462,
               0.5448,  -3.2145,  -0.6668]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.364 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
