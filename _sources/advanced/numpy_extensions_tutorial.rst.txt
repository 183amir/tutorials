.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.2902,  3.0219,  6.9510,  7.5057,  5.4411],
            [ 2.8503, 13.4981,  1.4293,  5.9862, 10.9493],
            [ 5.0204,  6.1627,  8.2431,  9.1447, 10.8787],
            [ 3.5891, 14.1795,  1.9252,  6.7675,  7.2886],
            [ 4.8212,  8.9928,  7.6603, 10.1480, 10.2020],
            [ 3.5891, 18.3179,  7.1264, 12.9547,  7.2886],
            [ 5.0204,  4.4627,  9.4459,  5.8615, 10.8787],
            [ 2.8503,  6.4032,  3.5508, 11.2747, 10.9493]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.9357, -0.5239,  0.5092, -0.3600, -1.1416, -0.6311, -0.9761, -1.0244],
            [ 1.3452, -0.4720, -0.2410, -1.3492, -1.7849,  0.3141, -1.3049,  1.2764],
            [-0.9599, -0.6662,  0.4642, -0.0651,  0.2223,  1.5477, -0.2930, -0.9981],
            [ 0.5348, -0.4482, -1.2125, -0.3692,  0.3172, -0.1085,  1.6293, -0.3007],
            [ 0.6358, -0.2451, -0.4474,  0.1837,  0.4131, -1.5881,  0.4659, -0.0331],
            [-1.1797, -1.4832, -0.9717,  0.6787,  1.4018,  1.5223, -1.5924, -0.5250],
            [ 0.5667,  1.7221, -0.0602,  0.0897, -2.2433,  0.7918,  0.9816,  0.4925],
            [-1.4857,  0.7674, -0.3353,  0.2337,  1.1208,  0.3430, -2.6795,  1.3033]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8515,  0.1915, -0.8392],
            [-0.7659, -0.4120, -0.4516],
            [-0.2685, -0.5162,  0.0345]], requires_grad=True), Parameter containing:
    tensor([[1.0186]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7783, -0.7462,  1.5560,  0.4237, -1.6287, -2.1417,  0.8261, -0.0964],
            [ 3.2140, -0.1491,  1.5051, -0.5167, -1.8312,  1.0027,  2.6900,  2.9288],
            [ 0.1703, -0.3093, -1.3927, -0.3957,  0.5115,  3.3116,  2.2041, -1.5583],
            [-1.5396,  2.6907, -0.9209,  1.1892,  3.8324,  3.6041,  1.0657,  0.5169],
            [ 2.5604,  1.0381,  1.5428,  2.2187,  1.4196, -0.7926,  0.8737,  3.0091],
            [ 3.4397, -0.3512, -0.0183,  2.6511, -0.9764, -0.4150,  1.2364,  1.1409],
            [ 0.8130,  2.4758,  1.9169,  0.3079,  0.7273,  1.0805,  3.8025, -0.9621],
            [ 1.4062,  0.8358, -1.5593, -1.4248,  0.8639,  3.1655,  2.3873,  0.9576]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3414, -0.6834, -1.1361,  0.0657,  1.4139,  0.3480, -0.2401,  0.2989,
              0.2028, -0.4031],
            [ 1.5651, -0.7082,  0.4280,  2.7223,  0.0437, -0.0435,  0.9583, -2.0629,
             -1.3852,  1.8125],
            [-0.0258,  0.8387, -0.6893,  0.8747, -0.2081,  0.6459, -0.7306,  4.3594,
              0.8210, -0.6394],
            [-0.8087,  1.9164,  0.8814, -0.2374,  0.7212,  1.8293,  1.3406, -0.4554,
              0.0930, -1.0918],
            [-0.8599, -3.0192, -1.5658, -0.7995,  2.1649,  1.0640, -0.2286, -1.9503,
             -1.1197,  1.6660],
            [-0.2596, -1.2052, -0.6121,  3.4635, -0.0096, -1.1223,  1.6871,  1.1851,
              1.2448,  2.1826],
            [-0.9071,  0.8935,  3.9426,  2.6503, -0.0217, -0.0095,  4.6607,  1.0200,
              0.5489,  1.6031],
            [-0.3420,  0.7077,  2.0044, -2.4036, -1.2119,  0.0100, -0.8478,  0.0076,
              1.3635,  1.0790],
            [ 1.6300,  1.4028,  0.2659, -0.9563, -0.2640,  1.1080,  0.1335,  0.8159,
              1.3893,  0.2889],
            [ 0.4471,  0.8629, -0.1067,  0.0092,  0.3492,  0.3139,  0.4487,  0.6947,
              0.3416, -0.0251]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.492 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
