.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.5396,  3.4444,  5.7364, 11.4627, 17.2528],
            [ 2.6799,  1.7277,  7.5879,  5.7140,  3.2286],
            [ 3.9934,  5.1838,  1.8224,  3.2267,  6.4614],
            [ 9.6590,  0.7337,  5.2056,  9.1630,  1.8338],
            [ 3.1214, 13.6534, 13.5895, 12.7391,  8.4964],
            [ 9.6590,  7.4167,  4.0282,  5.8381,  1.8338],
            [ 3.9934, 17.4971,  5.7350, 13.7348,  6.4614],
            [ 2.6799,  1.6856,  5.1013,  1.7995,  3.2286]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4923,  0.1487, -1.6102, -1.8334, -0.7737,  1.1480,  0.5897, -0.1230],
            [ 0.5062,  0.7171, -1.2328,  2.2895, -1.8076, -0.6197,  0.1630,  0.5821],
            [-0.8903,  1.6246, -0.8216, -1.2027,  1.4670, -0.5265, -1.1377,  0.5459],
            [-0.3762, -0.2470, -0.2170,  1.8295, -0.3897, -0.0892,  0.0963, -1.6116],
            [ 0.5703,  0.3309, -0.2376, -0.3256, -0.7614,  0.8312,  1.4205,  0.1126],
            [-1.0774,  0.6256, -1.3441,  0.5028, -2.3212, -0.3354,  1.0902, -0.5358],
            [ 0.5789,  1.7289, -0.1746, -0.4014, -0.3570,  0.1400,  0.1018,  0.6363],
            [-1.4074,  0.1203,  1.0276,  1.6553,  0.4999,  0.9618, -0.5623, -0.3232]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1552, -0.8864,  2.6115],
            [ 0.3016, -2.1296,  0.9716],
            [ 0.3272, -0.5635,  0.2536]], requires_grad=True), Parameter containing:
    tensor([[-0.9025]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.6120,  5.3693, -4.3941, -3.2192,  1.5527,  2.8779, -8.7460, -0.2137],
            [ 0.2851, -1.4668,  3.5340, -1.0200, -5.5498,  5.9852, -2.3919,  3.9556],
            [ 1.8332, -6.4252,  4.1647,  2.3669, -5.7778,  0.4380, -6.2473, -0.9107],
            [ 2.5637, -1.9632, -1.1879, -0.3648, -2.6706, -1.3458, -0.8059,  0.8510],
            [-4.5650,  1.9492, -1.6273, -1.1104,  1.8902, -5.6806, -0.8249, -2.9559],
            [-7.3941,  3.9155, -2.5648,  0.8336, -0.3491, -1.3710, -3.4033, -1.1820],
            [-6.3127,  2.2605,  2.0030,  0.3667, -3.3049,  5.2429, -6.0529, -1.9923],
            [ 2.2860, -5.0176,  1.2264,  1.1261, -7.0709,  6.9094,  1.3914,  1.3811]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0730, -0.5352,  1.5864,  0.0193, -6.7477,  4.8868, -4.6563, -0.1116,
              1.8866, -2.8713],
            [ 0.1604, -0.9923, -0.1072,  9.4488, -4.4934,  7.0245, -0.6620, -4.7591,
              2.8194, -0.1511],
            [ 0.3194, -0.8858, -1.8597,  0.0802,  2.3816, -1.0021,  2.3805, -5.7946,
              5.9257, -1.7644],
            [ 0.1196, -0.2710, -1.7730, -4.0134,  2.2318,  0.3071,  1.1134, -3.1888,
              4.3616,  3.0394],
            [-0.2161,  2.5834, -2.1740, -1.4276,  2.0586,  0.7375, -1.0386,  0.3288,
              0.0990,  5.0322],
            [-0.5828,  2.0145,  1.3865, -3.8050, -2.2191,  1.8812, -4.7222,  2.5124,
             -1.2443, -0.1336],
            [-0.1053, -1.2384,  3.5076,  1.8755, -3.3500,  5.0338, -6.8536,  5.7888,
             -1.9119,  1.1731],
            [ 0.5104, -2.5916,  3.1436,  2.7224, -3.3471,  9.8667, -9.3791,  2.8615,
             -2.9318,  2.7856],
            [ 0.5469, -2.8528,  0.2878,  0.4493, -4.6909,  6.4700, -2.1413,  1.2970,
             -2.6916,  1.0433],
            [ 0.4437, -0.6228,  0.2681,  0.4238, -1.4775,  1.2888, -0.2147,  0.2594,
             -0.5560,  0.2339]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.623 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
