.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.0877,  7.2201, 12.4057,  1.7257,  2.9983],
            [13.4185,  9.3194,  6.9147,  5.9206,  3.4877],
            [ 8.5366,  4.2950,  5.8337,  3.5797,  9.2745],
            [ 3.1901,  5.9991, 10.3058,  4.5876, 11.4171],
            [ 1.0743,  5.9324,  5.4812,  7.3462,  1.1161],
            [ 3.1901, 10.6338,  6.5687,  7.2481, 11.4171],
            [ 8.5366,  7.8315,  6.8408,  2.9482,  9.2745],
            [13.4185,  0.4702, 11.2255,  1.8379,  3.4877]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2066, -0.7598,  0.4729,  1.1167, -0.0356,  0.2788, -0.0981,  0.4308],
            [ 0.6531,  1.5672, -0.9364, -1.8324,  0.2782, -0.0997, -0.5616, -0.4601],
            [ 0.5440, -0.0136,  1.0585, -1.3474,  0.0802, -1.0287,  0.5839,  0.3004],
            [-1.1324,  0.3020, -0.7935, -0.8362, -1.1184,  0.2878,  0.4832,  0.2356],
            [-0.8161,  0.8345, -0.5251, -0.7463, -1.0790,  0.5662, -0.0989, -2.9655],
            [-0.8173, -0.7083,  0.9169, -2.0428,  0.0371, -0.7243, -0.2970, -1.8031],
            [-0.4602,  0.3536, -0.3696,  0.1076, -1.4679,  0.5903,  0.6348, -0.4414],
            [ 1.2407,  1.7706,  1.2654,  0.6578, -0.1276, -0.8822, -0.8525,  0.7490]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4723,  0.8662, -1.4969],
            [ 0.0299, -0.1601, -1.8843],
            [-0.5831, -1.1177, -0.6246]], requires_grad=True), Parameter containing:
    tensor([[-0.1028]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4020,  2.7507,  5.0394, -1.4021, -4.7071,  1.2047, -0.7922, -3.2764],
            [-1.4910,  4.3131,  1.0631, -4.4484,  1.2515, -1.4851, -1.3852,  2.6772],
            [-4.9482,  1.0062, -1.9759,  0.3828,  0.6331, -1.2971,  1.1948,  0.8149],
            [-4.9612,  0.1749,  3.0665,  4.2327, -4.7421,  4.2756, -1.6753,  1.0109],
            [ 1.7102,  1.9257, -0.9157,  1.3617, -5.0374,  4.4588, -0.4419, -1.8706],
            [-2.8093,  1.6644, -3.9244,  0.4093, -4.0571,  5.0054,  0.5944, -0.9553],
            [ 1.0810,  2.2156, -4.3090, -1.3774, -0.8269, -0.1586,  0.7885, -1.5502],
            [ 2.5196, -0.5465, -3.0564,  0.4337,  0.5442, -3.5546, -1.9217, -0.3951]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.0784e-01, -3.3800e-01,  8.3425e-01,  7.8278e-01,  7.1421e-01,
             -6.6729e-01,  1.1398e+00, -2.8468e+00, -8.8836e-01,  1.9099e-01],
            [ 2.0543e-01, -3.7322e-01,  2.5181e+00,  1.5728e+00,  2.2509e+00,
             -2.8598e+00,  4.4070e+00, -7.3678e+00,  1.0323e+00,  1.4583e+00],
            [ 3.8817e-02,  2.3958e+00,  7.0671e-01,  2.5649e+00, -2.9897e+00,
              3.0447e-01, -7.3825e-01, -8.8620e-01,  5.7021e-01,  3.8398e+00],
            [-1.7693e-01,  8.5441e-01, -2.1006e+00, -2.1953e+00, -4.5802e-01,
              3.5412e+00,  6.1531e-01,  2.6561e+00, -2.5450e+00, -4.8406e-01],
            [-5.2206e-01, -1.6917e+00, -2.6589e+00, -3.2779e+00,  9.8903e-01,
              3.3353e+00,  4.3441e-01, -3.3939e+00, -3.9097e+00, -4.8005e+00],
            [-1.2609e+00,  1.0565e-02, -4.4105e+00,  3.7894e-01,  1.4040e-01,
             -1.1893e+00, -5.3073e+00, -5.1457e+00, -5.2528e+00, -1.1417e+00],
            [-4.0770e-01,  7.8614e-02, -6.3772e+00,  2.8698e+00, -4.6258e+00,
             -3.0077e+00, -4.9289e-01, -8.2639e-01, -6.9300e-01,  1.4174e+00],
            [-1.2256e+00, -1.1407e+00, -3.3310e+00, -1.9395e+00, -1.1362e+01,
             -1.3791e+00, -8.4052e-01, -5.8438e-01, -2.0710e-01,  4.5534e+00],
            [-5.3006e-01, -1.0433e+00, -3.4595e+00, -5.1885e+00, -4.1145e+00,
              2.6557e+00, -3.5098e-01, -8.9039e-01,  1.6606e+00,  5.1622e+00],
            [-5.5073e-01, -1.9553e+00, -3.4533e+00, -2.5990e+00, -4.4089e-01,
             -2.7290e-01, -5.5231e-01,  2.0137e+00,  3.5424e+00,  1.7457e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.511 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
