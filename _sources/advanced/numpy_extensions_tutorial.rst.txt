.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.8692, 11.1515,  4.5170,  3.6445, 18.5649],
            [15.6911,  2.6993,  3.8305,  9.9709,  8.3189],
            [11.3007,  7.7932,  2.2767,  7.9368,  8.3194],
            [11.0666,  8.9551,  5.4967, 11.5786,  7.5089],
            [ 5.6125,  4.2046,  9.9440,  9.6145,  6.3822],
            [11.0666,  7.6481,  8.4364, 11.6222,  7.5089],
            [11.3007,  4.6505,  6.6751, 10.0440,  8.3194],
            [15.6911,  7.1280,  8.5868,  0.7871,  8.3189]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.2653e+00, -2.7834e-01, -1.7009e-01,  3.2620e-01, -1.9497e-01,
              2.6145e+00, -2.1599e+00,  1.4745e+00],
            [-2.4908e+00, -5.0147e-01, -1.8270e+00,  3.9266e-02, -3.1055e-01,
             -1.5442e+00,  7.2366e-01,  1.4646e-01],
            [ 6.2778e-01,  4.4413e-01, -3.3316e-01,  1.0387e-01,  1.2141e-01,
              1.3869e+00, -1.4788e+00, -1.1163e+00],
            [-1.8413e+00,  1.0283e+00, -7.9950e-01, -7.6762e-01, -7.1336e-01,
             -9.1478e-02,  9.9639e-01, -8.7989e-02],
            [-2.3042e+00, -3.2026e-01, -1.5991e+00, -1.3246e+00, -6.2472e-02,
              3.7617e-04,  5.1913e-02, -8.1716e-01],
            [ 2.2447e-01, -2.3799e-01,  1.5375e+00,  2.0013e+00, -6.0105e-02,
              3.0974e-01, -5.1269e-01, -2.5937e-01],
            [ 5.2465e-01,  1.4913e-01,  2.8058e-01,  9.6776e-01, -5.4562e-01,
              5.1702e-01,  9.0014e-01, -2.6134e-01],
            [ 7.6236e-04,  8.2546e-01,  1.0070e+00,  1.5867e+00,  1.5933e+00,
              2.3347e-01, -1.3767e-01,  8.0094e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9674, -1.0970,  0.1271],
            [-0.2914, -1.6936,  0.8520],
            [ 0.0254, -0.9606,  1.8673]], requires_grad=True), Parameter containing:
    tensor([[-0.7134]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9742, -5.0454,  5.3011, -2.2940,  2.6010, -0.1113, -8.3706,  3.1281],
            [ 1.9916,  0.0489,  3.9274, -0.6697, -0.7386,  1.0536, -3.6343,  2.6405],
            [-0.6479, -0.8725,  1.9936, -1.7006, -3.9269,  0.6048,  0.2610, -0.5721],
            [ 2.3449, -3.8502, -5.6479, -4.6746, -1.9716, -0.3235, -0.3433, -2.2457],
            [ 1.0256, -6.8818,  2.1181, -0.0659,  4.9323, -0.7454, -4.1124, -1.0195],
            [ 1.8264, -6.0848,  2.9197,  0.4642,  4.5866, -4.7039, -2.7231,  4.3844],
            [-2.7814, -5.2656,  6.9714,  0.5414, -0.6429, -3.7101, -1.3007,  1.7956],
            [-3.9251,  1.6780,  1.0383,  0.3833, -4.0975, -5.4897,  1.4281,  1.8425]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.7190e+00, -3.4227e+00, -1.9567e+00, -4.8654e-01, -2.0521e-01,
              4.1308e-01, -5.8372e-01, -2.6200e+00, -1.0945e+00,  1.4609e-01],
            [-5.4826e-01, -3.6710e+00, -1.6509e+00,  1.2727e+00,  3.0291e+00,
              1.9046e+00, -6.7395e-01, -2.6718e+00,  2.0608e+00,  6.6937e-01],
            [ 4.7590e-01, -2.2514e+00, -1.5017e+00,  6.8564e-01,  4.3385e+00,
              2.0588e+00, -1.7149e+00, -6.0347e+00,  7.7119e+00,  3.6824e-03],
            [ 1.5037e+00, -2.6738e-01, -5.0812e+00, -1.8070e+00,  4.6670e+00,
              3.1486e+00, -2.2237e+00, -5.4176e+00,  8.2764e+00, -5.0462e+00],
            [ 1.3790e+00,  4.2638e+00, -5.1716e+00,  4.8920e+00,  5.8628e+00,
              4.1917e+00,  1.2583e+00, -3.2005e+00,  3.9385e+00, -1.2676e+00],
            [ 1.2404e+00,  5.6359e+00, -2.6914e+00,  6.5984e+00,  3.0096e+00,
              3.4861e+00, -4.0952e+00, -4.1353e+00,  6.9070e-01, -4.1979e-01],
            [ 7.1347e-01,  1.4314e+00, -1.0188e+00,  2.9082e-01,  2.5361e+00,
             -1.7384e+00, -1.8021e+00, -1.6590e+00, -8.5664e-01,  6.4653e-01],
            [-6.3942e-01,  3.5635e-01, -4.1471e+00,  3.6303e+00,  1.5103e+00,
             -2.9468e+00, -1.7966e-02, -1.1258e+00,  1.9341e+00,  2.8208e-02],
            [-2.3674e-01, -7.8236e-01, -2.0768e+00,  5.7133e+00,  3.7625e-01,
             -3.5392e+00,  7.9296e-01,  1.3082e+00, -3.1824e+00,  1.2929e+00],
            [ 1.9631e-02, -7.4463e-01,  1.5430e+00, -1.6283e-01,  1.3791e+00,
             -3.6952e+00,  1.4289e+00,  4.2525e-01, -9.3796e-01,  6.0474e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.526 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
