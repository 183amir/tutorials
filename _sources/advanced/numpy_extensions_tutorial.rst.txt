.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.2556,  9.2272,  5.8572, 15.1727,  4.5400],
            [ 5.8022,  1.3794,  8.8678,  3.6624,  4.1851],
            [ 2.8631,  6.2159, 10.3357,  4.4590,  7.5074],
            [ 3.6371, 12.1975,  6.0494,  4.6575,  6.3227],
            [ 1.0096,  6.6488, 10.2647,  2.9236,  0.5081],
            [ 3.6371,  5.6788,  8.3957,  8.5538,  6.3227],
            [ 2.8631,  8.9372,  8.9143, 12.8615,  7.5074],
            [ 5.8022, 12.2084, 14.3898,  3.0358,  4.1851]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 3.8752e-02, -1.8174e+00,  4.8201e-01,  1.6840e+00,  1.1280e-01,
             -9.7914e-01, -3.4654e-01,  3.4073e-01],
            [ 5.1845e-01, -3.7354e-01, -1.3226e-01,  2.2572e-01, -2.2451e+00,
              1.1612e+00,  4.4064e-01,  4.9664e-01],
            [-3.8596e-01, -7.1508e-01, -7.4767e-02, -2.0652e-01, -2.0266e+00,
             -8.5320e-01,  1.6163e+00, -1.2799e-01],
            [ 1.7516e+00,  1.0285e+00,  5.4825e-04,  8.7046e-01, -3.2614e-01,
             -1.7068e+00, -1.1803e+00, -9.6065e-01],
            [ 4.2237e-01,  2.2657e+00, -4.9508e-01,  4.3955e-01, -4.8660e-01,
             -2.6335e-01, -8.4498e-01, -1.0570e-01],
            [ 5.3920e-01,  4.8566e-01,  1.8192e-01, -2.3611e-01, -4.5756e-01,
              2.1363e+00, -3.8700e-01, -9.5469e-01],
            [ 3.0514e-01,  2.0830e-01,  9.1288e-01,  1.5248e+00, -1.2263e+00,
              1.5221e+00,  4.1822e-01, -1.9711e+00],
            [ 5.5471e-01,  1.2221e+00, -3.9480e-01, -1.6505e+00, -3.6331e-01,
             -1.8447e-01,  6.7998e-01, -3.6351e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3527, -0.9811, -0.2774],
            [-2.3565, -0.9742,  0.3233],
            [-1.0506,  1.7762, -1.2624]], requires_grad=True), Parameter containing:
    tensor([[-1.7978]], requires_grad=True)]
    Output from the convolution:  tensor([[ -1.5345,  -8.2827,   0.2261,   1.3540,   4.6895,  -2.9668,   2.3422,
              -0.5066],
            [  0.3230,  -2.2715,   7.4539,  -0.5262,  -5.9881,   0.1198,   0.8972,
              -2.0556],
            [-11.2672,   2.5486,   0.8853,  -4.6639,  -2.1274,  -2.5430,  -5.3760,
              -1.4274],
            [  3.6177,   4.2264,  -0.0910,  -1.1518,  -3.8472,   0.8188,   3.0094,
               0.9465],
            [  1.1512,   2.1490,  -4.6739,  -1.0561,  -0.1787,   3.5023,  -0.7343,
              -4.4828],
            [ -5.1200,  -4.6798,  -2.0510,   1.5554,  -4.2353,   2.2338,  -5.6766,
              -3.2777],
            [ -5.1189,   5.3354,  -4.4729,  -4.3246,  -1.3089,  -2.8955,  -3.6800,
               4.0299],
            [  2.5665,  -5.8910,  -7.2121,  -1.5983,  -6.1966,  -3.0202,   0.7419,
              -3.6957]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0104,  0.0945, -0.4914,  0.7148,  0.4667,  0.6223, -0.6927,  0.3522,
             -0.5519, -0.1808],
            [ 0.0811,  0.3060,  0.0352,  0.5386,  0.5770, -0.8939, -0.1045, -1.6566,
             -1.5402,  0.0424],
            [ 0.0738, -5.3761, -2.8565, -0.0425, -0.8801, -1.6260, -1.4575, -5.7211,
              1.0775, -0.5744],
            [-0.8742, -3.3453,  1.6871, -8.9689, -2.8818, -3.2189, -2.3986,  0.4141,
             -0.0233, -1.0170],
            [ 0.1663, -4.4660, -2.6841, -3.5768,  6.9948, -3.7288,  2.9847, -1.8008,
             -2.5161,  0.4350],
            [-1.8855, -3.2201,  1.7204, -2.3844, -2.5692,  2.4890,  0.0528,  1.3107,
             -1.2886, -1.4692],
            [ 0.8630,  1.5343,  1.1288,  2.4057,  1.1895,  2.2277, -1.9725, -5.1120,
             -2.6724,  0.5346],
            [ 0.9546, -1.4620, -1.8775, -6.9241, -5.2365,  2.3814, -0.4879, -3.0548,
              4.7505, -2.4681],
            [-0.2877, -2.9267, -5.2320, -3.1232,  1.1119,  0.4566, -2.6805,  4.3679,
              0.8639, -0.7809],
            [-0.1596, -0.8241,  0.0941,  0.5940, -0.6651, -0.5621, -0.4368,  1.3880,
             -1.8894,  1.3928]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.549 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
