.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.8007,  4.9198,  8.6805, 10.2576,  7.3821],
            [ 7.0768, 10.3215,  1.3166,  6.5249,  7.3672],
            [ 6.2976,  1.7868,  2.2552, 12.2194,  3.7967],
            [10.4255,  5.2446,  7.1524,  6.7932,  8.9900],
            [13.0742,  2.6141,  9.4446,  7.5968,  8.3472],
            [10.4255,  4.5160, 12.1348,  3.3811,  8.9900],
            [ 6.2976,  4.3932, 12.1170, 10.7979,  3.7967],
            [ 7.0768,  6.9919, 15.4253,  4.5884,  7.3672]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1875, -1.3627,  1.5431,  0.4846, -0.6796,  1.4244,  1.1074, -0.6336],
            [ 1.9599, -0.1056,  0.0299,  0.7194,  0.3769, -0.7856, -0.2430,  0.3642],
            [-0.1948,  1.7913, -0.2787, -0.9573, -0.4950, -0.0223,  1.0620, -0.2213],
            [ 1.5619, -1.7897, -0.3874,  0.6236, -0.3318, -0.1823, -0.1365,  0.8716],
            [ 0.5303,  0.1086, -1.3493, -1.0264, -0.7563,  0.1243, -2.2622,  1.5516],
            [ 1.9358,  0.1576, -0.1781,  0.0944,  1.0632,  0.4494,  0.9713, -0.4510],
            [-0.1901,  0.5588, -1.7173, -1.4188,  0.9816, -0.2832, -1.0480, -2.1950],
            [ 0.2478,  0.0359,  1.3366,  0.7883, -0.5807,  1.0448,  0.5253, -1.5485]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1341,  0.2416,  0.2546],
            [ 0.1473,  1.5324, -0.9952],
            [-1.0659,  1.5387,  0.1548]], requires_grad=True), Parameter containing:
    tensor([[-1.4712]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.0146,  1.3620,  0.4414, -2.2682, -2.1428, -2.2668,  3.0370, -2.5085],
            [-5.1638, -0.1209, -2.6213, -3.3291,  7.2612, -8.9175, -0.4763,  2.8751],
            [-1.1887,  0.3794, -1.0524, -9.4123,  3.0563, -1.6188, -4.0395, -1.9628],
            [-0.9729,  1.7576, -5.1493,  1.2792, -2.4165, -1.5637, -2.5790,  3.0340],
            [-3.3651, -0.7857, -1.8547,  1.6644, -2.5812,  0.8167, -2.0185,  6.2003],
            [-3.0995, -5.4644, -0.1903, -0.8752, -0.4098,  0.6102, -7.3229,  4.1931],
            [-4.4375, -1.1871,  2.6298, -2.5175, -0.8492, -1.3014, -4.1704,  0.4729],
            [-3.4833, -1.1460, -3.4575,  1.3373, -0.5088, -9.3040, -0.9672,  3.7659]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4032, -0.3834, -0.0137, -0.7283, -2.0573,  0.5294,  0.7333, -1.3262,
              0.2396,  0.2966],
            [ 2.5491,  0.1290,  1.2426,  0.6892, -1.6538,  4.1519,  0.3609, -0.8997,
              1.4886, -1.1776],
            [-0.8855, -3.1716,  1.8287, -1.9396, -1.2018,  5.9637, -3.4390, -3.2991,
              3.5586,  0.4174],
            [ 4.0517, -3.7557, -0.2722, -0.5541, -4.0750,  6.5772,  0.9748, -3.6446,
              0.5023, -0.6938],
            [-1.1477, -0.6511,  2.9089,  1.2871, -0.5471, -3.5243,  0.2810,  0.7484,
              1.1204,  0.1466],
            [-0.7907, -0.9416, -4.1189, -0.2452,  2.6366, -1.7543,  3.0744,  1.3548,
             -2.0393, -0.1156],
            [-0.6420,  5.0361, -0.4466, -1.6025, -1.0755, -1.7207,  0.1155,  0.4590,
             -2.0030,  1.5821],
            [-2.0414,  3.8071, -0.2927,  0.2467,  2.7624,  0.9403,  2.6858,  0.0163,
             -3.1898, -0.1482],
            [-0.2673, -0.3589,  2.1870, -4.7647,  0.8822, -0.6187,  1.3596,  0.1600,
              1.9640, -0.6656],
            [ 0.2321, -0.4139,  1.1655, -1.1171,  0.0951, -1.3065,  0.5772, -1.8232,
              0.9361,  0.1052]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.526 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
