.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[17.5483,  1.2867,  2.4411,  3.4434,  2.2914],
            [ 4.0933,  7.8663,  2.8280,  7.0000,  7.4049],
            [20.9291,  5.3710,  6.9217, 11.4583,  3.4665],
            [ 5.7094, 13.4848,  9.8230,  8.1291, 16.4267],
            [ 7.0816,  7.0469,  9.2413,  7.1750,  8.4015],
            [ 5.7094,  6.7526,  3.0569,  8.6843, 16.4267],
            [20.9291,  2.3397,  2.7707,  5.5359,  3.4665],
            [ 4.0933,  4.4322,  8.0457,  1.2444,  7.4049]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4105, -0.4004, -0.8373, -1.0769,  0.9502,  0.1818, -0.8411, -0.6529],
            [-2.9462, -1.1925, -0.4432,  0.0507, -1.6500, -1.1229, -0.2781, -1.7740],
            [ 0.4222,  1.2547,  0.1807, -0.2729, -1.7846,  0.4118, -0.7071,  0.2017],
            [ 0.9148, -0.8351,  0.2855, -0.4344, -0.4838, -0.6488,  1.1872, -0.0656],
            [-0.9301,  0.2520, -1.1283, -0.0338, -0.1152,  0.1000, -0.8660,  1.0094],
            [ 0.7164, -1.1646,  0.0614, -1.0268, -0.7645, -2.4792, -1.0047, -1.5147],
            [ 0.8672, -2.6951,  0.0925, -0.1877, -0.3170,  1.2808,  0.4592, -0.4617],
            [-1.2881,  1.8906,  1.3063, -0.1390,  0.9947,  0.4812, -0.0918,  1.1445]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3368,  0.3529,  1.9510],
            [-0.6008,  0.8055, -1.1228],
            [-0.8978,  0.6467,  2.1915]], requires_grad=True), Parameter containing:
    tensor([[0.4259]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3205, -0.5929,  0.1012, -7.4371,  0.0479,  1.1924,  2.8550, -1.5358],
            [ 0.2842,  2.3204,  1.3874,  4.7210, -0.9905,  4.4720, -1.9954,  1.3269],
            [-3.6600,  3.4817,  4.1368, -8.7692,  2.5531,  1.1923,  0.1354,  3.8833],
            [ 2.7937,  0.5696,  0.4211,  2.2179, -0.6099,  1.3788,  2.9887,  0.6746],
            [ 1.9650, -3.5727,  1.6326, -1.9001,  2.4639,  4.1132, -6.5204, -3.5757],
            [-4.9331,  5.5095, -0.2875,  4.0866, -0.9600,  0.0707,  2.7932,  0.6136],
            [ 5.8376, -2.2555, -5.2287,  2.1321,  4.4901,  3.1130, -4.0102, -1.1411],
            [-1.5413,  1.4160,  0.9257,  0.6802,  0.6582,  2.1806, -5.9084, -0.6060]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1739,  0.0602, -1.0836, -1.5467, -0.8995, -0.1841, -1.1192, -1.9959,
             -0.7850,  1.6727],
            [ 0.9183, -0.1106, -3.4678, -2.9362, -0.8743,  1.9432,  1.5156, -3.3100,
              0.4910, -0.9799],
            [ 1.3878, -0.0876,  1.1824, -1.2603,  0.3014,  2.9747, -5.8275, -4.0134,
              2.2611,  3.8769],
            [ 1.6696,  0.5691, -7.0782, -6.9047,  0.1373,  0.4961,  0.1755, -1.4710,
             -4.4879, -0.2433],
            [ 0.0298, -0.0395,  2.2307,  3.2964,  0.6015,  1.8806, -0.5871, -3.8885,
              8.7792,  1.5002],
            [ 0.2623,  0.8482, -1.1417, -4.2671, -0.8667, -1.2284, -1.4906, -0.1034,
             -2.5953,  1.8656],
            [-0.9722,  0.4203, -0.7355,  5.2494,  1.1512,  1.2222,  1.0695,  2.6341,
              3.4792,  2.1469],
            [-0.6910,  1.1696,  1.5100, -6.8710, -3.2035, -0.2309, -4.8814, -2.7649,
              5.5783,  2.1213],
            [ 0.5361, -0.3569, -1.0700,  4.6619,  0.6931,  3.1718,  1.7805, -2.0005,
              2.1896,  1.4486],
            [ 0.4789,  1.4024, -1.9906, -3.7588, -1.1658, -1.6719, -2.0473, -2.7754,
              1.8171,  3.2825]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.525 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
