.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.2163,  8.3450,  7.1678,  7.7773,  1.9733],
            [ 5.4525, 15.6668,  5.4420, 11.0171,  1.4589],
            [ 7.0035, 10.0841,  4.6457, 10.7730,  4.6781],
            [12.9932,  4.7255,  6.0180, 10.6261,  6.7527],
            [13.5417,  8.5953,  3.2218,  3.8543,  6.6741],
            [12.9932,  1.4193, 10.5710,  9.4408,  6.7527],
            [ 7.0035,  1.5425,  7.5014,  4.2222,  4.6781],
            [ 5.4525, 13.1842,  4.1589,  0.2895,  1.4589]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9392,  1.1482, -1.0458,  0.0324, -0.3334, -0.4973,  0.1075, -0.7652],
            [-0.0637,  0.8315,  0.9214, -0.5225, -0.6849, -1.1009, -0.0081,  0.4817],
            [ 1.4332,  0.8217, -0.6125, -0.1671,  0.3030,  0.5412,  0.7812,  0.6169],
            [-0.7327, -0.6103, -1.8591,  0.7498, -1.0257, -0.8729,  0.4416, -2.4866],
            [ 1.2766, -1.3397,  0.3737,  1.7449,  2.0137,  2.6722, -0.5403, -1.0166],
            [ 0.0682,  0.5082,  0.7139,  0.5463,  2.0285,  1.0177, -1.5633, -1.2789],
            [-1.1138, -0.0584, -0.3094,  1.0329, -0.1964,  0.8283,  0.9379,  0.7703],
            [ 0.5060, -0.9255,  1.0905,  0.0771,  0.8997,  0.2762, -0.1518, -0.4341]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4889,  1.3953, -0.2771],
            [-1.0912, -0.9771,  0.2438],
            [ 1.1897, -1.6131,  0.3134]], requires_grad=True), Parameter containing:
    tensor([[0.5433]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6423, -0.0685, -4.4497,  8.2343, -0.9436, -1.5666,  1.6624,  0.3459],
            [ 3.0002, -1.8826,  0.3685,  1.9486,  3.6894, -1.1804, -0.5864,  2.1739],
            [ 0.6233, -2.1668,  2.8790, -5.2786, -0.7543,  0.4522,  4.9406,  1.3673],
            [ 4.2008,  2.5249,  5.9856, -0.2852,  3.4453,  1.2266, -2.8177,  1.3801],
            [-0.8637,  2.1100, -4.5067, -2.2402, -0.3940,  1.4472, -0.7148,  3.9329],
            [-3.4083, -0.5408,  4.7259,  1.6424, -3.4692, -1.4079,  0.9476, -1.9117],
            [-2.6436, -4.4145, -0.8454,  6.2799,  5.2023, -2.1002,  2.7891,  1.2929],
            [ 1.1578,  7.1678,  1.6631, -3.8719,  1.7948,  5.7249, -4.1593,  5.0445]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.3780e-01,  4.1837e-03, -2.8962e+00,  5.3634e-01, -2.4937e-02,
              1.4891e+00,  1.9770e+00,  2.7454e-01, -2.8158e+00,  5.0083e-01],
            [-2.2148e+00, -2.3116e+00,  4.4180e+00,  4.1865e-01, -1.9414e+00,
             -2.0948e+00, -2.6268e+00, -5.7233e-01,  1.9561e+00, -3.6193e-01],
            [ 4.5268e+00, -6.1449e-01,  1.2596e-01,  1.2549e+00,  2.1527e-01,
             -7.9785e-02,  8.2430e-01, -1.2790e+00,  3.5998e+00, -7.2851e-01],
            [-3.7038e+00,  8.6049e+00, -1.6417e+00, -3.5609e+00,  2.5663e+00,
             -2.1889e-01, -2.6780e+00,  1.0624e+00,  1.7322e+00, -3.6063e-01],
            [-1.4515e+00, -6.3655e+00,  4.7749e+00, -5.5944e+00,  3.6868e+00,
              1.9540e+00,  2.4242e+00,  1.0017e+00, -2.0380e-01,  3.3923e-02],
            [ 3.8184e+00, -1.4996e+00, -2.2898e+00,  1.0150e+00, -1.6743e+00,
              1.8756e+00, -2.8908e+00, -4.8391e+00, -4.8341e+00,  1.1892e+00],
            [-1.9295e+00,  5.0628e+00, -8.4736e-01,  5.4710e+00, -2.1753e+00,
             -6.6958e-01,  5.6808e+00,  3.7636e+00, -7.2789e-01,  9.2470e-03],
            [-5.0470e-01, -5.5440e+00, -5.3872e-01, -1.0394e+00,  5.5554e+00,
             -5.7697e+00, -5.4880e+00,  2.9103e-02,  1.1880e+00, -2.8763e-01],
            [ 1.9218e+00,  1.2344e+00,  2.5705e+00, -4.8378e+00,  2.3165e-01,
              1.7735e+00,  8.5435e-01,  1.6449e+00,  3.9671e-01, -1.5176e-01],
            [-1.1532e+00,  1.6653e-01,  1.6719e+00,  1.4061e+00, -2.5531e+00,
             -6.3786e-01,  2.3587e-01,  6.2676e-01,  8.3431e-01, -2.3026e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.481 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
