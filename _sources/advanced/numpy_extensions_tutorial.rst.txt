.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.9698,  1.9791,  8.9025,  7.9986,  0.7326],
            [ 5.1133, 12.0537,  2.5272,  8.6934,  8.2633],
            [ 5.2051,  0.7087,  6.3123,  2.9670,  6.5079],
            [11.8426,  3.4716,  3.4380,  5.3591,  8.7573],
            [ 9.4520,  6.0871,  4.2168,  4.7249,  9.3191],
            [11.8426,  5.1951,  7.0804,  3.4773,  8.7573],
            [ 5.2051,  2.8743, 10.4841,  7.3225,  6.5079],
            [ 5.1133,  3.6031,  5.0495,  7.7362,  8.2633]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.4057, -1.1057, -0.7775, -1.5468, -0.4801,  0.3170, -0.8873, -1.2050],
            [-1.4200, -0.4215,  0.4101,  1.1867,  0.7415, -0.3547,  0.4611, -0.6681],
            [-0.2887,  0.1223, -1.0877,  0.1383, -0.1038,  0.6285, -1.3154, -0.0062],
            [-0.3675,  0.9678, -0.7019,  0.2021,  1.0065, -0.0530, -1.5729, -0.2379],
            [ 0.9214,  1.0844,  0.2377, -0.2479,  1.3931, -0.4368, -0.0891, -0.3870],
            [-0.8810,  1.6606, -0.9486, -0.0146, -0.2892, -0.4373,  0.0053,  0.6141],
            [-0.5948,  0.3549,  0.0794, -1.2218,  0.1338, -1.6950,  0.9945,  0.4547],
            [ 1.4210,  0.3393,  0.0179,  0.4698,  1.1858,  0.4173,  0.5396,  0.9626]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9393,  0.2837, -1.6893],
            [ 0.1704, -1.9701,  0.9688],
            [ 0.0412, -0.1990,  0.0277]], requires_grad=True), Parameter containing:
    tensor([[0.2515]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.4784e+00,  3.0559e+00,  4.8056e-03, -6.6782e-02, -8.5443e-01,
              5.8417e+00,  8.1535e-01,  2.6275e+00],
            [ 4.1137e+00, -4.6892e+00,  3.0347e+00,  2.5756e+00,  2.4536e+00,
             -3.9378e-01,  4.1366e+00, -2.1789e+00],
            [ 3.1932e+00, -3.5007e-01, -5.7291e-02,  7.6819e-01, -9.5027e-02,
              3.5258e+00, -1.1083e+00,  8.1961e-01],
            [ 2.5819e+00,  5.9525e-01,  2.8081e+00,  7.8451e+00, -3.5889e+00,
              4.0711e+00, -3.5749e+00,  5.1607e+00],
            [-2.3924e+00,  5.3317e+00,  1.1890e+00,  3.9988e-01,  3.8901e+00,
             -1.7976e+00,  4.7212e+00,  7.7181e-02],
            [-5.4698e-01, -1.2650e+00,  3.4583e+00,  3.3526e-01,  4.9672e-01,
             -5.1465e-01,  1.7465e+00, -2.5305e+00],
            [ 1.7034e+00,  4.3097e-03, -7.3139e-01,  1.3083e+00, -1.6273e+00,
             -2.6604e-01, -1.7768e+00,  5.0610e+00],
            [ 3.2550e+00,  3.9099e-01,  3.9460e+00, -2.5413e+00, -2.3058e+00,
             -1.0731e+00,  5.1646e+00, -4.8588e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2224,  0.8736, -1.1715,  0.6174, -0.1995, -2.7613,  0.5375, -0.0253,
             -1.3475,  2.3874],
            [-0.3219, -1.6531,  1.5255, -3.2223, -1.9854,  0.9656, -3.2835, -2.7154,
             -0.5999,  0.2965],
            [-1.1981,  0.3717, -4.4157,  2.0424,  0.0327,  0.5277, -5.3352, -2.8642,
              4.5668, -0.2064],
            [ 1.0725, -2.6446,  4.4436,  0.5792,  2.3811, -0.2293, -1.3492,  0.2620,
             -2.1075, -0.8020],
            [ 0.1871,  0.6561,  0.4172,  0.1465,  2.4389,  0.8978,  3.8390, -1.8620,
              4.7130,  1.3457],
            [ 0.2007,  1.4895, -2.8197,  1.0296, -3.1649,  1.3936, -2.4414,  1.3778,
              0.3428,  0.2765],
            [-0.6494,  0.5542, -0.0135, -4.5833,  0.8758, -2.5626,  1.6093,  2.3378,
              1.5775, -1.4335],
            [ 0.6484, -3.0349,  2.1007, -3.8169, -0.0218,  1.8498,  0.6536, -0.9932,
              0.3339, -1.4070],
            [-0.0750,  1.3571, -4.1634,  1.8209,  0.2259,  0.5214, -1.1255,  2.3508,
             -3.1466,  1.0994],
            [-0.0244,  0.1923, -0.3808,  0.0583,  0.0316,  0.0578, -0.1180,  0.2259,
             -0.2464,  0.0310]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.532 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
