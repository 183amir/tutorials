.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.9544,  4.9384, 14.0725, 10.5319,  5.4590],
            [13.3155,  1.0191,  5.4221,  0.9512,  6.2916],
            [ 4.0891,  8.0031,  1.5184,  9.4087,  6.1689],
            [ 9.0765, 10.7308,  5.8769,  4.8509,  6.7689],
            [ 6.6475,  8.6105,  0.2664, 10.2345, 11.1753],
            [ 9.0765,  6.9305, 10.2562, 11.5150,  6.7689],
            [ 4.0891,  8.6711,  2.0666, 14.1569,  6.1689],
            [13.3155,  7.4830,  1.9385,  7.2772,  6.2916]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3235,  0.1837, -0.4417,  0.4719,  1.4598,  0.0530,  1.4790,  0.5848],
            [-0.3715, -0.3307,  1.3915,  0.2565,  1.0134, -0.7199, -0.4065,  2.3693],
            [-0.3592, -0.6112, -0.3853,  0.8826,  0.0787,  0.4555, -0.1496,  0.3907],
            [ 0.5216,  0.7791, -0.3321,  0.3271,  1.1737, -0.8824,  2.3200, -0.3917],
            [-0.3766, -2.4536, -1.3335, -0.6776, -0.3563, -0.8238, -0.4281,  0.7897],
            [ 0.2902, -0.1827,  0.1332, -0.1437,  0.9579, -1.4989, -0.3418, -2.0379],
            [ 0.4821,  0.6402,  0.0840, -0.1807, -1.0056, -0.6812, -1.0265,  1.2318],
            [-0.7025, -0.3902, -1.7487,  2.7865,  1.3004, -1.1798,  1.1104, -0.7687]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0730,  0.8068,  1.3835],
            [-2.6404, -2.2814, -0.6519],
            [ 0.4405, -1.1564, -0.0754]], requires_grad=True), Parameter containing:
    tensor([[-0.4812]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.6394, -9.7933, -5.6693,  1.5629,  5.2475,  7.6579,  4.7553,  3.0481],
            [-0.1976, -3.5029,  4.6474,  2.5623, -4.3616, -0.5703,  3.1962,  3.9683],
            [ 3.9179, -4.5543, -4.7017, -3.4297, -4.0278, -6.2572, -1.7946,  5.5834],
            [-4.3776, -4.1747,  3.6829,  6.2452,  7.2380, 10.0000,  1.7141, -3.2908],
            [ 3.9257, -5.7814,  3.0935,  0.9218, -4.7435,  1.6448,  4.9264, -1.6621],
            [ 3.3353, -3.1111,  3.2801,  3.8425,  2.0828, -2.0504, -2.9730, -2.6599],
            [ 7.8329,  2.9365, -3.4000, -4.1463, -8.4900,  0.1636, -2.1950,  1.9674],
            [ 2.9741, -0.4992, -2.3378, -2.0864, -4.2689, -4.3087, -8.3945,  0.3390]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0857, -0.9376, -1.8064,  0.6222,  2.0479,  1.3983, -0.4266, -0.4780,
              1.1048, -0.7835],
            [ 3.0570,  3.4981, -1.0675, -3.8521, -3.9316, -0.1370,  0.3475, -1.8336,
             -3.5543, -2.9802],
            [-2.1400,  1.1702,  1.0608,  4.2683,  2.0651, -0.0242,  7.3854,  9.8039,
              9.8608,  2.1466],
            [-2.9155, -4.9847, -5.4306, -6.7511, -3.8390, -3.6369, -7.0891, -6.0481,
              1.3520,  1.1008],
            [-0.1083, -0.2635,  3.4799,  0.0528,  2.1998,  1.9562,  3.7225, -3.3776,
             -3.3842, -0.9723],
            [-0.8323,  1.4503,  1.6699,  2.7762,  2.5707,  1.3479,  3.4191,  1.2030,
             -1.3419, -1.8620],
            [-2.2985, -3.4150, -4.6302, -6.1666, -7.0467, -1.7188,  0.4890,  3.6546,
              2.1708,  1.3424],
            [-1.2008, -2.0975,  2.6665,  4.0614,  6.6596,  3.8537,  5.7827, -1.4662,
              1.8855,  0.4557],
            [ 2.6342,  4.7847,  5.3736,  4.8410,  0.1486,  5.3269,  5.5792,  2.7937,
             -0.9512, -0.2705],
            [-0.3931,  0.4290,  1.3003,  0.8625,  0.9728, -2.3657,  2.6975,  0.6155,
             -0.4257, -0.0288]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.537 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
