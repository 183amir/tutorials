.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.2665,  4.3713,  1.9206, 10.1728, 14.6774],
            [ 5.7064,  7.4514,  4.5954, 13.5916,  2.9312],
            [ 5.6610,  8.7000,  6.1288, 12.1847,  9.4241],
            [ 5.6426,  8.6476,  6.1669,  3.3304,  2.3723],
            [10.0437, 10.6920,  9.9512,  8.1315, 12.1276],
            [ 5.6426, 11.0076, 14.3377,  5.9932,  2.3723],
            [ 5.6610,  4.7734,  2.2745,  2.7462,  9.4241],
            [ 5.7064,  3.2985,  9.6878,  4.9298,  2.9312]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6174, -0.5590,  1.5601, -0.9995, -1.3173, -1.1427,  0.1591,  0.7388],
            [-0.4947,  0.9912,  0.2332, -0.0250, -0.7057, -1.4449,  0.6068, -0.3298],
            [ 2.5394, -1.0766, -0.0439, -0.2876,  1.2781,  0.1117,  0.8102, -0.7738],
            [-0.3233, -0.8735, -1.3539, -0.0820, -0.6311, -0.0305,  1.4180, -0.8155],
            [ 1.2162, -0.0029,  1.1190,  2.4304,  0.9397, -0.7198, -1.7610, -0.4365],
            [ 0.8364,  0.7937, -1.3442, -0.0635, -0.6162,  0.7529,  1.5496, -1.3027],
            [ 1.3966, -0.4739,  1.8956,  0.6703, -0.3923, -0.2733,  0.9968, -0.8294],
            [ 0.4430, -0.3459,  0.2820, -1.2704, -0.2613,  1.3568, -0.9457,  0.1073]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.7454,  0.1058,  0.9801],
            [-0.6491, -0.1102, -1.6579],
            [-0.4863, -0.7582, -0.9586]], requires_grad=True), Parameter containing:
    tensor([[0.1705]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.6805,  0.9319,  2.0073,  5.5254,  2.3267,  2.4998,  4.8683,  1.6003],
            [ 1.7535,  1.0855,  0.2655, -1.1824, -0.9726, -1.1307,  0.1992,  2.9310],
            [ 0.3602,  1.3818, -3.0957,  0.4494,  1.5581, -0.0981, -5.4623, -3.6354],
            [ 2.4518, -1.4355,  4.9971,  4.1629, -0.4595,  4.3228, -1.5255, -0.6349],
            [-4.9280, -1.3216,  2.4507, -0.6582, -0.0632,  3.8683, -3.6764, -1.2005],
            [ 3.4621, -3.9554, -1.1082, -1.0970,  0.2125,  3.1649,  0.1920,  0.7779],
            [ 5.0889, -2.4216, -3.1361, -1.9985,  5.3422,  3.0233,  2.0270,  1.3008],
            [ 1.1678,  0.5339, -2.4943, -3.4031, -0.4423, -2.4589, -0.5179,  3.6481]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.8610, -1.3476, -0.8105, -1.7876, -1.0066,  2.9385,  1.4027, -3.1677,
             -0.2577,  1.3042],
            [ 0.9369, -0.9040,  2.6568, -0.8349, -1.4852, -3.9454, -0.4218, -0.3577,
              0.0415, -1.3581],
            [-0.5747,  0.3142,  4.8637, -1.9075, -2.1933, -1.4671,  2.2498,  0.2057,
              0.1776, -3.2340],
            [-2.3506,  1.7836,  3.0188, -0.0989,  4.4478,  0.7540, -0.3130, -0.3117,
             -0.6411, -0.4262],
            [-4.6206, -1.7835,  2.0230,  3.2028,  0.7957,  0.3410, -1.6133, -5.3471,
              2.7016,  3.9568],
            [-1.8709, -2.0612, -2.9199, -1.5387,  4.1148, -0.1362, -5.1791,  0.5301,
              0.5965, -3.8061],
            [ 0.5162, -2.3443, -2.3582,  0.1839, -0.1995, -2.5623, -0.0445, -2.8618,
             -3.5612, -1.6963],
            [ 0.3258, -1.9106,  2.1310,  1.6173, -0.8936,  2.3950,  1.7300, -4.7636,
             -5.6041, -1.3307],
            [ 0.3258, -0.0617,  0.8201, -0.8558,  0.3464,  0.0863, -3.1834, -2.7971,
             -0.6928, -2.5072],
            [-0.0663, -0.6335, -0.8891, -0.9133, -0.3894, -0.8220, -0.5275,  0.5054,
              0.5049, -0.7906]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.264 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
