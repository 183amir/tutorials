.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.5988,  9.6825,  7.7118,  4.5252,  4.5232],
            [ 7.9211,  2.9034,  1.6197,  8.0852,  9.5397],
            [ 8.9408,  5.7457, 14.4452,  7.4290,  7.4245],
            [ 7.3295, 10.3735,  9.3305,  1.1112,  0.9396],
            [ 8.2681,  7.8332,  2.0704,  6.9821,  1.1423],
            [ 7.3295, 15.2872,  4.3592,  9.2418,  0.9396],
            [ 8.9408,  2.8712,  6.8743,  3.1074,  7.4245],
            [ 7.9211,  1.8387,  3.9666,  5.3414,  9.5397]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8926,  1.5317, -0.1228, -1.2949, -1.1518,  0.1748, -0.9773,  2.0356],
            [-1.8177, -0.6015, -1.3191,  0.9813, -0.3510, -0.6251, -0.3332, -0.4776],
            [-0.4156,  1.6511,  0.3191,  0.0196,  0.6480, -0.9135,  1.3459,  1.3794],
            [ 0.7542,  0.9770,  1.1753, -0.1162, -1.8690, -0.4990,  0.2597,  0.4720],
            [-0.9179,  0.6066,  0.4233, -0.1403, -0.3310,  0.3058,  0.7511, -0.1024],
            [ 1.8456, -0.3107, -0.6997,  0.4059,  0.9139, -0.4447,  0.3374,  0.8404],
            [ 1.5573,  0.1943,  1.2200,  0.6288, -0.3953, -0.2607,  1.5259,  0.2459],
            [-0.7548,  0.6891,  0.8259,  0.5175, -0.4393,  1.6082,  1.1382, -0.9176]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.7495, -0.7397, -0.1385],
            [ 2.3805, -0.5742, -1.3153],
            [ 0.4481,  0.8654,  0.3953]], requires_grad=True), Parameter containing:
    tensor([[-0.4964]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.4394,  1.3420,  0.7137,  3.3066, -3.9998, -0.3125,  0.6833,  4.7243],
            [-3.8651, -2.3603, -1.1640,  3.4181, -0.9785, -1.5051,  3.0612, -0.0874],
            [-1.2527, -2.6457, -2.2982, -2.9069,  3.2292, -1.9579, -1.0557, -6.0670],
            [ 0.2647,  2.6121, -0.2331, -2.2683,  2.9499, -8.1160, -4.3517,  2.4076],
            [-2.2279, -0.0982,  3.9372,  1.8142,  2.8366, -1.7301, -5.2506,  5.3971],
            [ 4.3005, -7.2626, -0.8588,  4.0260,  6.1733,  2.3506, -4.7956, -2.5981],
            [ 6.6563, -5.6246, -8.3336, -4.2694,  2.6714,  5.3466,  1.9008,  2.4573],
            [ 3.8119,  5.4471, -4.8799, -1.8896, -1.9469,  1.8716,  2.9909,  4.4953]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.1695,  3.1896, -0.3205,  1.3834, -1.7670,  1.0245, -0.0335, -1.5452,
              0.5403,  0.1059],
            [ 3.5624,  6.7546,  0.1046, -4.3017,  0.4550, -1.1104,  1.7659, -3.5736,
              0.2710,  1.0373],
            [ 2.5585,  3.5038,  6.0117, -5.1521,  2.1459,  2.9664,  1.6905, -0.6760,
             -1.7949, -0.0499],
            [ 1.0544, -2.2015,  5.2935, -1.1731, -4.5384, -1.7637,  5.9852, -2.3952,
              0.3882, -0.3314],
            [-1.8786, -2.3601,  3.0765,  3.3214, -6.6625, -3.3473,  3.2635,  1.2859,
              0.0130,  2.4162],
            [-1.2732, -2.0944, -2.9005,  5.3855, -6.0948,  0.0329,  2.9414,  0.2245,
             -3.1236, -2.7280],
            [-1.7833, -1.1588, -4.4181,  0.7990, -1.3926,  0.3240,  7.2724, -1.2407,
              0.2920,  0.6710],
            [-1.1991, -0.1885, -2.5892,  2.1106, -1.6348, -3.8274,  8.6434, -3.9478,
             -1.3936,  0.5688],
            [ 1.7668, -0.8253, -6.8824,  1.9674,  3.5535, -6.0375,  1.7815, -0.1745,
              0.5972,  1.8297],
            [ 0.4414,  1.0586, -0.0161, -1.0059,  0.4050,  0.4363, -0.6510, -0.6880,
             -1.0168, -0.5837]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.306 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
