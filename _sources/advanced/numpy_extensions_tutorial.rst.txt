.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.8470,  1.0908,  4.0971,  6.4890,  6.6290],
            [ 9.4390,  3.6133,  6.2534,  5.3263,  6.9233],
            [15.8588, 11.8766,  9.3851,  3.0184,  5.3961],
            [ 5.0978,  9.3435, 10.8443,  9.0187,  8.9666],
            [ 9.8670,  4.0389,  3.8553,  9.0699,  3.8804],
            [ 5.0978,  8.5779,  6.6125,  5.2261,  8.9666],
            [15.8588,  6.1477, 20.5937,  4.3705,  5.3961],
            [ 9.4390,  9.3342,  9.4315,  5.0170,  6.9233]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.6434, -0.3449, -0.6793, -1.2676, -2.2779, -0.7352,  0.2142, -1.4450],
            [ 0.2056, -0.2363,  0.4189,  0.2115, -0.3476, -1.3362,  0.3078, -0.7061],
            [ 0.7530, -0.0031, -0.7394,  0.9675,  1.3898,  0.1109, -1.5549,  2.2270],
            [ 1.3659,  1.7617, -0.8975, -0.7751,  1.1015, -0.1578, -0.7536, -1.0525],
            [-1.1231, -1.4085,  0.1081, -1.2213,  0.4383,  0.1544, -0.4922, -0.0213],
            [-0.8997,  0.3819,  1.8263,  0.8852,  0.5612, -0.1393,  1.7578, -0.5517],
            [ 0.7797,  0.0999,  0.9993,  0.2647,  0.2811, -0.3233,  0.3055, -1.6697],
            [ 0.5119,  0.5431, -2.8930, -1.5999,  0.7512, -0.2746,  0.6156,  1.4237]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0438,  0.1626, -0.6331],
            [-0.6240,  0.1220, -0.5757],
            [-0.2065, -0.7448, -1.9132]], requires_grad=True), Parameter containing:
    tensor([[0.2995]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.6980, -1.4759,  0.7210,  2.4785,  0.4771, -0.9902, -0.4450,  3.4211],
            [ 2.7723,  0.5403, -1.0862, -0.7504,  3.2130,  3.4932,  0.3014,  3.2220],
            [ 3.2164,  3.4215,  6.0152, -0.6906,  1.7924,  1.5343, -0.4162,  5.6533],
            [ 0.9615, -0.9332,  0.3304,  2.1292,  3.3871,  2.7153, -3.8215, -2.6754],
            [ 2.1817,  1.6077, -2.6362, -0.8778,  1.9085,  3.8491, -1.4376,  2.4055],
            [-1.2665, -1.5125, -2.0976, -0.9935, -1.2545, -4.7272, -2.1516,  0.0564],
            [-3.4576, -1.2300,  3.3988,  2.3433, -0.2557, -2.2067, -2.3318,  3.0950],
            [ 0.0233, -0.6679,  0.5482,  0.2431,  4.5881,  2.1653,  2.2746,  2.3627]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.3570,  0.4437, -1.6152,  0.9627,  1.8264, -2.5333, -4.2530,  1.3660,
              2.0844, -0.4148],
            [-0.9745, -0.2218,  0.3267, -0.8014, -0.3407, -0.5566,  1.1621,  1.4383,
              1.7660, -0.5986],
            [-0.6123, -0.8424, -3.0813,  0.1210,  0.5811, -1.8588,  0.0588,  6.3918,
              5.1486, -1.5482],
            [ 0.7226,  0.0614,  0.7983, -0.2932, -1.1078,  1.5506,  1.2455,  1.0806,
             -1.0879, -0.8179],
            [ 1.6563, -0.5481, -1.0375,  1.1305,  1.5452, -1.0424,  0.7862, -1.8426,
             -1.4114, -0.1638],
            [-0.2463,  1.0659, -2.8390,  0.7663,  1.9325, -2.4431, -0.9398, -1.3105,
             -1.2052,  0.0397],
            [-0.7764, -0.6303, -1.8021,  2.2449, -0.5677,  2.0187, -1.4045, -2.9060,
             -1.5750,  2.1165],
            [ 2.2970,  0.4184, -4.2944, -0.5109, -0.2582, -1.8765,  0.0281,  4.6990,
             -0.5497,  1.0519],
            [-1.5604, -0.4988, -1.6668, -2.7024, -0.5695, -2.4569,  0.8747, -3.3082,
              2.7207,  4.0888],
            [-0.5072, -2.0294, -5.2955, -1.5809,  0.7375, -1.0929,  1.3508, -1.9902,
              0.7539, -1.6541]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.555 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
