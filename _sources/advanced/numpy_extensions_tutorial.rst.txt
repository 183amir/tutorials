.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.8156,  8.5696, 15.1302,  8.4412,  7.5600],
            [ 4.0723,  9.8158,  3.4268, 13.6101,  2.5676],
            [ 3.8739, 20.0740,  2.3667, 10.1603, 15.4751],
            [10.8125,  8.4871,  2.8868, 12.9500,  7.0412],
            [15.6698,  1.3264,  2.5576,  3.6028,  7.3087],
            [10.8125, 14.9611,  8.9778,  9.0930,  7.0412],
            [ 3.8739,  4.1812,  9.4876,  3.2112, 15.4751],
            [ 4.0723,  5.7012,  5.7974, 10.9258,  2.5676]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-7.3916e-01,  1.1758e+00,  1.7616e+00,  3.2892e-02,  2.2775e-03,
              4.7755e-01,  1.9373e+00,  2.5804e-01],
            [-1.8858e+00, -1.2238e+00,  1.0442e-01, -1.1154e+00,  7.7403e-01,
             -3.9219e-01,  7.0406e-01, -7.7410e-01],
            [-9.6853e-01,  1.5313e+00,  2.2848e+00, -2.2821e-01,  7.3665e-01,
              4.7033e-02, -1.2251e-01,  2.3420e+00],
            [-1.0818e+00,  1.6988e+00, -1.6243e+00,  2.3749e-01, -3.3205e-01,
             -7.0259e-01,  2.2460e-01,  6.6517e-01],
            [ 4.1965e-01,  6.7168e-02, -1.3435e+00, -4.2903e-01, -1.2308e+00,
              1.6638e+00,  1.8359e+00, -3.7398e-01],
            [-6.2152e-03,  2.9384e-02,  2.2438e+00,  1.1820e+00, -1.2214e+00,
             -1.0278e+00, -9.0124e-01, -8.8498e-01],
            [ 1.3385e+00,  1.1881e+00, -5.3134e-01,  2.4378e-01, -6.3208e-01,
             -1.6469e+00,  5.5979e-01, -9.1515e-01],
            [-6.2241e-01,  1.7486e+00, -7.1496e-01, -1.6749e+00, -2.1875e+00,
              1.0300e+00,  3.4597e-01,  2.4579e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9240, -0.5470,  0.2972],
            [-1.0839,  0.2976, -0.7526],
            [-2.5927,  0.0810,  1.9072]], requires_grad=True), Parameter containing:
    tensor([[-2.1969]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2489, -7.4992,  0.7589,  1.1698, -2.2619,  1.4936,  0.5473, -8.1946],
            [ 1.6419, -0.2426, -1.1779,  5.4577,  7.3062, -9.6113, -4.5563, -4.3406],
            [-1.2822, -1.7125,  1.1416, -2.1421, -1.4997,  1.7769, -1.5495, -6.2935],
            [-2.4715, -1.6403, -0.0579, -2.5311,  1.9517, -6.6675, -6.2736, -3.0467],
            [ 1.9923, -1.2573, -1.3917, -3.7758, -3.6602, -1.8197, -3.2655, -4.1142],
            [ 1.3918,  0.7739, -6.5106, -2.8855, -4.7157, -4.4481,  0.9053, -1.9103],
            [ 3.6596, -3.2452, -4.3890, -6.5732, -1.4831, -5.1738, -3.4304,  0.0713],
            [ 3.1553, -2.9615, -3.6796, -4.9321, -2.5754, -2.6715,  1.0267,  1.6840]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.4729,  -0.4920,   0.0749,   0.2164,  -0.0466,   0.8190,  -0.4313,
              -0.8441,  -0.0545,   0.1245],
            [ -1.0868,  -2.3403,   3.1448,  -0.7585,   1.3936,   0.1992,  -1.2412,
              -2.2651,  -1.5424,   0.4093],
            [ -2.7810,  -3.4781,   1.9775,  -0.3704,   1.3754,  -0.8085,  -1.0161,
              -3.6077,   0.9811,  -0.9704],
            [ -6.8003,   0.6096,   5.5748,  -0.9073,  -1.2378,  -0.6296,  -2.2980,
             -10.0149,   1.5507,   5.0757],
            [ -5.4143,   1.9787,   4.9540,  -1.0116,  -1.6436,  -3.6913,   4.8321,
               0.7665,  -3.3594,  -1.2093],
            [  0.8138,   3.0190,  -1.6243,  -3.1039,   2.7073,   1.1713,  -3.6458,
              -4.8293,   2.7579,   3.9723],
            [  0.2315,   5.2855,  -0.6622,  -6.4777,   1.0690,   4.0403,  -4.1147,
               0.8812,  -0.1457,  -0.0309],
            [ -1.9383,   1.6612,   2.2547,   0.1309,  -1.4147,   1.1471,   0.8379,
              -2.4392,  -0.6067,  -2.0918],
            [ -0.3709,   3.3075,   1.7221,  -2.5212,  -0.7049,  -4.1047,  -2.3198,
              -1.4339,   1.9538,   2.7190],
            [ -1.4459,   1.7424,   1.6327,  -3.6533,   0.4265,   0.4476,  -0.6033,
               1.5131,   0.0174,  -0.4183]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.479 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
