.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.4909,  6.1647,  6.1375,  5.2200,  3.1806],
            [ 2.5172,  6.3199, 10.9080,  9.2186,  6.0160],
            [12.3038,  1.5559, 12.2022,  6.6252,  8.4598],
            [ 3.3099,  6.1271,  8.6561, 20.7268,  6.9451],
            [ 7.2396,  8.9507, 12.6756,  3.9718,  4.4094],
            [ 3.3099,  6.8260,  3.8281,  6.2756,  6.9451],
            [12.3038,  3.7521,  1.6468, 12.4063,  8.4598],
            [ 2.5172,  5.6035, 13.3262,  6.5360,  6.0160]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0529, -0.8228, -0.9105,  0.4354,  0.2263,  1.8109, -0.2580, -0.3678],
            [-2.2523,  0.6369, -0.0788, -0.8411,  1.0738, -1.0873,  0.3470, -1.1902],
            [ 0.6161,  0.7312, -0.1362,  0.4699,  0.1014,  1.1034,  0.7081,  0.1897],
            [-0.1444, -1.4525,  1.2617,  1.1771, -0.0440,  0.0813,  0.1894,  0.7108],
            [ 0.2814,  0.7924, -1.4930,  1.4486, -1.2924, -1.9518,  0.1424, -0.0588],
            [-1.4970, -2.3253,  1.6029,  1.5519, -1.6509, -1.1460,  0.1836,  0.2260],
            [-0.4297,  0.7376,  0.8914, -2.6825,  2.5429, -0.2190,  0.5825,  0.6235],
            [ 0.2248,  0.3704, -0.0059,  0.0661,  1.3988, -0.4799, -0.3983,  0.1171]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0676,  1.5801,  1.4023],
            [ 0.6198,  0.6569, -0.4437],
            [ 0.5125,  0.4327,  1.0005]], requires_grad=True), Parameter containing:
    tensor([[-0.2758]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.6172,  6.1677,  0.2651, -2.6082, -0.8753,  1.1093, -0.3469,  1.6698],
            [ 0.0402, -1.4043,  1.1254,  2.3304,  6.4837,  1.4772,  0.6902,  0.8662],
            [ 0.5374,  1.1798, -2.1212,  0.1838, -1.4625,  0.1631,  2.6955,  1.3958],
            [ 0.4716, -2.3802,  0.5186,  0.3900,  0.2577,  3.5023,  0.7862,  2.0476],
            [-1.6159, -1.6942, -1.8385, -1.7452,  2.3359,  2.1439,  1.9438,  2.5053],
            [-2.6110,  1.9873,  2.1687, -1.3077, -0.5607,  0.6531,  0.5896,  1.0681],
            [-0.1900, -1.4250, -4.3988,  0.4323,  5.9464,  2.1045,  2.4824,  3.1986],
            [ 1.0515,  1.6792,  6.4892,  4.5837, -4.3580, -3.7075, -1.1460, -0.9557]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.6203e-02,  1.3909e+00, -7.4358e-01,  4.6550e-01,  2.0022e+00,
              1.2138e+00,  1.0212e+00,  2.3621e-01,  1.5444e+00,  1.2094e+00],
            [ 5.1897e-01, -3.3461e-01,  1.2618e+00,  4.5331e+00,  1.5061e+00,
             -2.3972e-01, -1.2247e+00,  4.1326e+00,  2.2602e+00, -1.6832e+00],
            [ 3.6116e-01,  1.2297e+00, -9.3262e-01, -5.2907e+00, -5.0092e+00,
             -3.7716e+00,  1.6774e+00,  1.4535e+00,  1.5977e+00,  3.1088e+00],
            [ 2.5733e-01, -1.4612e+00, -1.8933e+00, -5.9421e-01, -2.5437e+00,
             -4.2434e-01,  5.2649e-01,  2.9145e-02,  1.1297e+00, -1.2287e+00],
            [-9.2837e-03, -2.5869e+00, -1.7150e+00, -6.9085e+00, -1.9072e+00,
             -1.8164e+00, -2.0786e-01,  5.1048e-01,  3.9130e+00,  3.1624e+00],
            [-6.7836e-01, -1.4632e+00, -2.0883e+00, -2.3956e+00, -1.5403e+00,
             -7.3199e-02,  3.1009e+00, -2.7106e-01,  1.1690e-01,  1.4767e+00],
            [-8.0915e-01, -1.4649e+00, -2.1906e+00, -1.5058e+00, -2.7933e-01,
              4.3578e+00, -5.8916e-01,  2.2033e+00,  1.6672e+00, -5.6725e-01],
            [-6.2243e-01, -1.4011e+00, -1.0560e+00, -1.3406e-01, -7.8012e-01,
              1.7862e+00,  4.0562e+00,  4.0010e+00, -3.1007e-02,  1.9264e+00],
            [-5.1449e-01,  7.5565e-03, -3.9658e-01, -8.1380e-01, -5.5000e-02,
              2.4013e+00,  1.2961e+00,  1.8664e-01, -3.5348e-03, -1.0131e+00],
            [-2.2318e-01,  1.9328e-01, -2.1856e-01,  3.5265e-01,  1.8035e-01,
              3.6561e-01,  2.1446e+00,  1.3227e+00,  1.0991e+00,  1.0586e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.532 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
