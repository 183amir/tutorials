.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.1559,  8.3507,  8.9286, 14.7747,  3.2551],
            [ 3.3420,  4.6775,  6.9412,  1.0095, 11.7014],
            [ 6.6558,  5.3430, 11.7225,  8.6361,  5.7097],
            [ 2.0652,  5.6033,  3.2959, 12.9772, 12.8222],
            [ 7.6980, 10.2428, 10.7300,  6.3111,  0.1192],
            [ 2.0652, 11.8422,  3.8655,  6.3748, 12.8222],
            [ 6.6558,  1.8253,  2.4059,  9.1153,  5.7097],
            [ 3.3420,  4.9637,  5.2911,  2.7881, 11.7014]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9536,  0.0197, -0.9568, -0.7283,  0.1916, -0.1495, -0.4599,  1.1507],
            [-0.7201, -0.1480, -1.3670, -0.3632, -0.6736, -0.8119, -1.2790,  0.9909],
            [ 1.2909, -2.5747, -0.9132, -0.1361, -0.6190,  0.1266,  0.3510,  0.4384],
            [-0.6649, -1.4861,  1.4991, -1.0223, -1.0552,  0.4093, -0.5256,  0.7991],
            [ 1.0728,  0.2915, -0.4517,  0.1328,  0.6223,  0.0792,  0.0439, -0.2738],
            [-0.3446, -2.4605,  1.1663, -0.4203, -0.1157, -0.3163,  0.9380, -0.6044],
            [-0.6014, -0.3504, -0.0482, -0.0385, -1.8750, -0.4598, -1.0590,  1.7014],
            [-1.0755, -1.7645,  0.1881,  1.1869, -1.5040,  2.4720, -0.7139, -1.1401]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4823,  0.1354, -1.1659],
            [ 1.4125, -0.3688, -0.2399],
            [-0.3479,  0.4384,  0.9884]], requires_grad=True), Parameter containing:
    tensor([[-1.0805]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7804,  0.2174, -4.8465,  0.2563,  3.4431,  3.5385, -0.0928,  0.3781],
            [-0.9855, -2.6175, -4.9459,  0.1450, -3.8412, -0.8037, -2.4655, -4.2385],
            [ 4.3789, -3.4107,  2.2658, -4.5391, -2.8728, -0.2166, -2.5574, -1.1898],
            [-4.1029,  0.6648, -0.2355, -3.8328, -2.7720, -1.0993, -0.7853, -0.3622],
            [-1.7192, -2.3510, -1.8631,  0.3748, -0.9830, -0.9060,  1.2211, -3.0953],
            [-0.4752,  0.2486, -3.5362, -2.8962,  0.7848,  1.4010, -0.6756,  0.3879],
            [ 0.5764, -3.2447,  4.5176, -1.5742, -6.8045,  2.1581, -2.2626, -0.8029],
            [-9.0418, -0.6517, -0.7131, -3.7275, -0.4041, -2.4156, -3.5971, -1.9007]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5032,  0.3302, -1.2789,  0.0433,  0.1562, -1.5714,  0.6190, -2.2840,
              1.0054, -2.1054],
            [ 1.2464, -1.1152, -0.4529,  1.1107, -1.3375,  2.4898, -3.5704,  1.7395,
             -0.3841, -0.9085],
            [-0.5165,  1.4688, -2.1110, -1.5977,  2.6478,  0.6449, -1.5109,  1.7076,
             -2.1304,  3.0056],
            [ 1.7861, -0.8698,  0.7111,  0.5888, -0.5448, -0.3346,  3.2023, -1.8551,
             -1.4712,  3.1715],
            [ 1.5422,  1.6082,  1.4737,  1.8086,  1.7099,  0.3716,  0.0515, -3.6801,
              0.8282, -3.7160],
            [-3.0686, -2.1513,  2.3620,  2.3691, -2.1327, -1.0759,  0.9935,  3.7219,
             -0.2240, -5.7061],
            [ 1.9460, -0.5619, -1.7225, -3.5668,  5.0319, -0.1638, -2.0688,  5.4610,
              1.3042,  1.5484],
            [-0.7208, -0.1424,  0.2089,  2.9477, -0.8958, -3.6753,  1.6824,  0.2388,
             -1.4463,  3.0327],
            [-1.1634,  1.0368, -0.6494, -1.9337,  0.2563,  4.1081,  1.0202, -3.8942,
              0.1216,  0.5397],
            [ 0.3437, -0.6476, -0.6102,  0.5237, -0.4674, -0.1575,  0.1759,  1.5890,
              1.3486, -0.5361]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.548 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
