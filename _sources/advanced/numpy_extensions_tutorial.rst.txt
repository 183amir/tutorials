.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.2765,  4.6626,  8.3455, 13.0260,  3.0401],
            [ 7.1068,  6.0925,  3.0864,  3.1908,  5.8477],
            [13.8449,  3.9663,  5.5829, 12.0982,  6.7512],
            [ 5.9552,  5.4854, 10.1961,  9.6973,  2.4354],
            [ 4.0001,  7.8768,  2.1000,  5.9549,  2.8613],
            [ 5.9552,  2.8946,  6.0805, 10.8258,  2.4354],
            [13.8449, 13.7842,  4.9354,  8.4009,  6.7512],
            [ 7.1068,  2.8785,  2.7225, 13.5721,  5.8477]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2003, -1.0187, -0.7894, -1.8090, -0.4000, -0.1740, -0.4175, -0.6006],
            [ 1.0682, -0.3113, -0.7073,  0.8400, -0.3556, -0.7062,  0.0270, -0.7746],
            [ 0.4481, -1.1418,  1.1860,  1.7111, -0.6773,  1.1892,  0.7126,  0.9413],
            [-0.0760, -0.2665, -1.3500,  1.5272,  1.1906,  1.3134,  0.5635,  0.3115],
            [ 0.5649,  0.8018, -0.8839,  0.4623, -0.9858, -1.0971,  1.6111,  0.1974],
            [ 0.7774, -1.6457, -0.8912,  1.2577, -1.4680, -0.2798,  0.3843, -2.5281],
            [-0.3619,  0.5262,  0.1667,  1.2014,  1.8601, -1.3016, -0.1895,  0.2059],
            [-0.9267, -0.4209,  0.7155,  0.3211,  0.6358,  0.3353,  0.0263,  0.5513]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7305,  0.2623, -1.1409],
            [-1.1929, -0.9202, -0.7308],
            [ 1.7321,  0.4917, -2.4974]], requires_grad=True), Parameter containing:
    tensor([[0.0397]], requires_grad=True)]
    Output from the convolution:  tensor([[ 7.8848, -1.3256, -5.0365, -2.4533, -3.4281,  2.4763, -0.4445, -0.1101],
            [-1.8783, -5.4957,  3.1775,  2.3360,  2.1907, -0.4761, -2.2074,  3.7336],
            [ 2.7356,  3.4266,  0.6987, -3.1886, -1.2675,  1.5491, -1.8346,  1.5110],
            [ 2.8713, -3.8145, -1.0052, -1.0888, -3.2724,  6.4525,  4.0945, -7.2206],
            [-1.9166,  3.4996,  7.4902, -2.0789, -4.2955,  2.5449, -6.7553,  5.9873],
            [ 8.4270,  1.7375, -7.2659,  6.9678, -2.4774,  2.1857,  3.9250, -7.0291],
            [-1.0895,  4.1629,  1.4246,  0.5680,  1.9718,  2.7767, -6.7748,  4.7686],
            [ 2.3933,  4.4835, -5.9528,  2.5615, -2.9280,  0.2639, -0.0468, -3.0727]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5783, -0.8395,  1.4867,  1.6548, -0.7658, -0.5513,  0.6554,  0.2478,
             -2.0911,  0.5470],
            [ 0.5063,  1.2697,  1.4250,  0.7313, -1.7738, -2.0531, -3.5051, -0.1355,
             -1.5957,  0.1512],
            [-0.7038, -2.5049,  2.4505,  3.9489, -5.0576, -3.0324, -1.2414,  0.1650,
             -3.7279,  0.5884],
            [-1.1438,  0.7246,  5.6964,  7.4570,  0.4172, -3.6877, -1.5127,  4.7670,
             -2.8691, -1.3639],
            [ 0.7584, -2.6124, -2.6413,  7.4858,  2.1965, -2.3421, -7.0093,  1.4015,
              2.3554, -1.6739],
            [-0.6879, -1.0578,  2.7550,  2.5365, -1.6219, -3.6070,  1.1092,  9.1439,
             -4.4967, -2.2283],
            [ 0.8421, -3.3603, -8.6880,  3.8916,  7.3570, -3.0465, -2.6998,  2.4105,
             -0.7407, -0.8265],
            [ 1.8103,  2.7963, -4.3193, -4.6064, -2.2186, -4.2658,  3.5108,  6.4567,
             -4.8018, -2.7737],
            [-0.4905, -1.8488, -1.1188,  3.4109,  0.6085,  0.0708,  1.3398, -4.8917,
             -4.5073, -0.5240],
            [ 2.7728,  0.8335, -6.1728, -0.2895,  1.1683, -0.8155,  6.3272,  2.3097,
             -4.0691, -2.7595]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.523 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
