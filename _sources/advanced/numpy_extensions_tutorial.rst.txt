.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9961,  8.4518, 10.3857,  9.7694,  4.5818],
            [12.7941,  2.9154, 11.7016,  3.4868,  7.4841],
            [ 3.8967,  2.1729, 12.3228,  7.5836,  9.4158],
            [ 8.8806, 10.3527,  5.1698, 12.7146,  5.0379],
            [14.1221,  3.6199, 11.3051, 12.3416,  7.3472],
            [ 8.8806,  4.7701,  1.9624,  2.3739,  5.0379],
            [ 3.8967,  8.4188,  6.1778,  3.7082,  9.4158],
            [12.7941, 12.4313,  8.9132,  1.2063,  7.4841]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2726, -2.0244,  0.4781,  0.5053, -1.4544,  0.1360,  0.3122,  0.9259],
            [ 0.2086,  0.4809,  1.3146, -1.9511,  1.2465,  1.1044,  1.4628,  1.9261],
            [ 1.0961, -0.1222,  0.4197, -1.5191, -1.9485, -1.2840,  0.1287, -0.3863],
            [-0.1960,  0.2173, -0.9076, -0.5741, -0.7236, -0.2471, -2.5448,  1.5574],
            [-0.1901, -0.6451, -1.1839,  0.8777,  0.0178, -0.7195, -0.6152, -0.3807],
            [ 0.8870,  0.2098, -0.0474, -0.8546,  0.5709,  0.1229, -2.9970,  0.2110],
            [-0.1171, -0.2126, -0.9137, -0.9799, -0.0095,  0.4729, -0.3810, -0.1148],
            [ 1.2188,  0.6956, -0.7484,  1.7834,  1.5937, -0.0984, -1.0387,  0.6804]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6052,  1.4433, -0.1426],
            [ 0.6651,  1.6952, -0.1698],
            [-0.1833,  1.1648,  1.2796]], requires_grad=True), Parameter containing:
    tensor([[0.2740]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.6693e-01, -5.3577e+00, -6.9557e-01,  5.3988e+00,  1.4830e-01,
              8.7443e-01, -1.4534e-01,  5.9885e-03],
            [ 3.4753e+00, -2.0856e+00, -2.6246e+00,  2.0620e+00,  2.4523e+00,
              5.0632e+00, -1.0969e-01, -1.0241e+00],
            [ 2.8617e+00, -4.6519e-01, -2.3395e+00,  8.6446e-01,  9.2504e-01,
              3.1207e+00,  6.7273e-01, -1.0528e+00],
            [ 6.3109e-01, -1.2048e+00,  2.5116e+00,  7.5228e-01, -5.1271e-01,
              2.4084e+00,  2.4246e+00, -3.1690e+00],
            [ 3.1486e+00, -1.7421e+00, -1.0001e+00, -5.0616e-01,  2.0905e+00,
              3.6512e+00, -2.4567e+00, -5.1677e+00],
            [ 3.0917e+00,  4.6979e+00, -2.7194e+00, -5.1291e-01,  3.0981e+00,
              4.4963e+00, -4.9868e-01, -1.8458e+00],
            [ 8.8239e-01,  6.3326e+00,  3.6346e+00, -2.8360e+00, -6.8298e-01,
              5.8118e+00,  1.9235e+00,  3.3238e+00],
            [-2.0848e+00, -1.2177e+00,  6.7439e+00,  5.6065e+00, -5.2068e-01,
              1.7529e+00,  1.6966e+00,  2.9482e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.8959,  2.6659,  0.0633, -2.8153,  0.5443,  2.1918, -2.2138, -1.2654,
              0.6567, -0.0493],
            [ 1.0982,  3.4514,  0.5408, -2.2882,  2.3600,  3.4792, -4.1010, -1.4248,
              2.1973, -0.1933],
            [-0.1914,  1.9546,  3.9500,  1.0535,  0.5501,  3.9578, -0.5208, -3.7742,
             -1.1839,  0.4686],
            [ 0.3056,  1.0911,  0.0559, -0.1268,  3.8344,  5.5560,  0.3240, -5.1720,
             -0.7952,  1.3723],
            [ 0.7546,  0.7083, -4.4320, -4.9476, -0.3756,  4.1853,  1.6937, -5.3939,
             -2.4785, -1.5841],
            [ 0.6977,  2.7035, -0.9229, -5.2648, -2.0737,  2.3724,  2.4591, -5.0006,
             -2.3898,  0.6627],
            [ 0.1824,  3.0934,  3.5478, -1.1756, -1.5503, -1.0756,  2.5861, -3.8323,
             -2.1281, -1.5433],
            [-0.9361, -0.0958,  7.0358,  4.6619,  1.9327,  1.0278,  8.3223, -1.1448,
              1.8810,  0.3138],
            [-0.5078, -0.9280,  2.1188,  1.1696,  3.5460, -0.3362,  7.3551,  2.5175,
              0.5513, -0.1418],
            [ 0.1601, -1.3174,  0.9178,  1.1904,  0.0546, -1.7305,  1.1136,  4.5392,
              2.8483,  1.8128]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.582 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
