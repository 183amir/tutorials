.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.1790,  6.9851,  2.9255,  7.7248,  7.1655],
            [ 7.4766, 13.6743, 18.7527,  3.9785,  6.4445],
            [ 7.8018, 14.6914,  7.1656,  4.2010,  2.4818],
            [ 4.9604,  8.1547, 10.1465,  9.1173,  9.4080],
            [ 6.3331,  8.8898,  2.8694,  4.3819,  2.0113],
            [ 4.9604,  5.1287,  5.7931,  4.6225,  9.4080],
            [ 7.8018,  8.6600,  5.0203,  4.2362,  2.4818],
            [ 7.4766,  9.1168,  2.8931,  5.4652,  6.4445]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.0155e+00, -1.3596e+00,  7.4403e-01,  8.3925e-01,  1.1654e+00,
              1.5118e-01,  2.0481e-01, -1.0739e-01],
            [-1.1979e+00,  9.6161e-04,  1.1526e+00,  1.1699e+00,  1.5561e+00,
             -6.2918e-01,  7.0603e-01, -1.0289e+00],
            [ 2.2874e-01,  1.5396e+00,  1.5737e+00, -3.3787e-01, -5.9449e-01,
              2.3849e-01, -4.7569e-01, -4.1797e-01],
            [-5.1929e-01,  1.2276e+00, -2.7445e-01, -9.4495e-01,  2.1414e+00,
              2.1604e+00, -6.8285e-01,  1.2441e+00],
            [ 9.1578e-01,  4.1686e-01,  1.3340e+00,  5.0865e-01,  9.3088e-01,
              2.7554e-03, -2.2253e-01, -7.5128e-01],
            [ 1.4640e-01,  4.4733e-01, -9.1550e-01, -7.9854e-01, -1.4905e-01,
             -3.9690e-01, -1.1540e-03,  6.0283e-01],
            [ 1.9496e+00,  5.9826e-01, -1.4491e+00, -1.3297e+00,  1.8695e-01,
             -1.5524e+00, -1.2209e+00,  2.2843e-01],
            [ 3.6354e-01, -1.2112e+00,  1.0358e+00,  1.2584e+00,  6.7093e-01,
             -6.4393e-01,  1.3839e+00,  3.8167e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2792, -0.9910,  0.0855],
            [ 1.8115, -0.8192,  0.8917],
            [ 0.8318,  0.2824, -0.0423]], requires_grad=True), Parameter containing:
    tensor([[-0.9611]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.1949, -0.9634, -2.0107, -0.9578, -0.8476, -2.4581, -2.3019, -0.0531],
            [-0.9457,  2.3484, -1.0152, -1.1233, -5.9377, -2.3952,  0.1239, -2.1249],
            [-0.8727,  0.4450, -5.4291,  2.9186,  1.2503, -0.3890,  2.7079, -2.5954],
            [ 0.3281,  0.6363,  0.5220, -2.8634,  3.5269, -1.7581, -3.2025, -6.0230],
            [-2.3103, -0.2190,  3.4698, -3.9652, -0.3515, -0.4105,  0.7013,  1.2157],
            [-0.2849, -6.1908, -0.3869, -4.2040, -1.8310,  0.2673,  1.3977,  5.7041],
            [-2.4797, -1.5714,  0.8379, -0.0560, -0.9068, -0.1840, -2.6110, -4.4293],
            [ 2.5335, -0.6095,  3.2693,  2.1830, -0.4209, -0.1850, -6.1995, -1.6203]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.2405e-01,  6.7790e-01, -1.7484e+00, -1.7114e+00, -2.0806e-02,
             -8.7437e-02,  1.2082e+00,  1.2543e+00,  3.9961e-01, -3.9586e-02],
            [-1.6066e+00, -4.6794e+00,  4.3190e+00, -3.4670e+00,  1.7400e+00,
             -7.9876e-01, -1.6450e-01,  2.2691e-01,  7.9296e-01, -4.9853e-01],
            [ 3.8218e+00, -2.2680e+00,  3.5348e+00,  1.8385e+00,  2.8579e+00,
             -1.1337e+00,  1.4741e+00, -4.1858e+00,  1.1614e+00, -8.7388e-01],
            [ 1.4317e+00,  2.1037e+00, -7.5214e-01,  4.1156e+00, -4.9653e-01,
             -1.0364e+00,  1.7357e+00, -1.8353e+00, -4.7982e-01,  9.5912e-02],
            [ 2.0547e+00,  1.6376e+00, -8.6258e-01,  5.9660e-01,  2.5561e+00,
             -3.9287e+00, -6.9589e-01,  2.5017e+00, -6.1863e-02,  4.6220e-01],
            [-9.4336e-01,  2.1685e+00, -1.5793e+00, -3.7942e+00,  1.7810e+00,
             -2.0079e+00, -3.5001e+00, -3.2722e+00, -6.5878e-01, -6.8150e-01],
            [-3.0373e+00, -2.7887e+00, -4.1821e+00, -2.6167e+00, -4.2287e+00,
              3.0956e+00,  1.2673e+00,  2.7761e+00, -3.5217e+00,  1.7600e+00],
            [-1.3453e+00, -1.8650e-01, -3.2985e-01,  5.1571e-01,  2.0860e+00,
             -1.1771e+00, -3.3595e+00,  7.8198e+00, -3.0325e+00,  1.8490e+00],
            [ 2.9374e+00,  2.5373e-03,  3.2051e+00, -4.4676e-01,  1.6095e+00,
              3.8071e+00, -3.6590e+00,  3.0651e+00,  4.6933e-01, -1.3028e-01],
            [ 1.1343e+00,  3.6235e-01,  3.9540e-01, -1.3720e-02, -8.9774e-02,
              1.5705e+00,  2.8985e-01, -1.9799e-01, -5.7746e-05,  1.8483e-03]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.505 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
