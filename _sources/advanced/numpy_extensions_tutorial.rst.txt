.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.0690,  9.7153,  6.0269,  8.7264,  3.0734],
            [ 7.1683,  8.3379,  1.4401, 13.5555, 13.3801],
            [ 0.6861,  0.7755,  8.8148,  2.1278, 18.7391],
            [10.5517, 11.1885, 11.8698, 12.1199,  3.8558],
            [22.8579,  1.4523,  6.0286, 18.2078,  3.5931],
            [10.5517, 17.1586,  6.3917, 15.9748,  3.8558],
            [ 0.6861, 12.2533,  6.4019, 11.1552, 18.7391],
            [ 7.1683,  7.1303,  5.0603,  2.8976, 13.3801]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0647, -0.0918, -0.5255,  1.1764,  1.8821, -0.3447,  0.3120, -0.7797],
            [ 0.2262,  1.6118,  0.4980,  0.0434,  0.0216, -0.7520, -0.3738,  2.4463],
            [ 0.8572,  0.4647, -0.1440, -0.1154, -1.2770, -1.7667,  0.6618, -0.5482],
            [ 1.5436,  1.1161, -0.2541,  0.0372,  3.5190, -1.9553,  1.1117, -0.1978],
            [ 0.2102, -0.2952,  0.5528, -1.2327, -1.9341, -0.2851, -2.2682, -1.3871],
            [-1.2810, -0.2054, -0.5109,  1.6816,  0.9605,  2.7489, -1.5216,  1.3747],
            [-1.0331, -0.2303, -1.4704,  1.0830, -1.0782, -0.8437,  0.6224,  0.3692],
            [-0.0804,  1.6915,  2.9416, -2.2426,  0.4725, -0.1266, -2.2077,  1.1265]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3833,  1.3539, -0.8176],
            [-1.5556,  0.2455, -0.1737],
            [-0.1222, -0.5225, -0.5409]], requires_grad=True), Parameter containing:
    tensor([[-1.5024]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.3460, -1.8013, -3.0928,  1.5288, -4.5239, -0.6292, -2.1774, -0.5901],
            [-0.3364, -3.4391,  0.2954, -2.7265, -3.8989,  0.7236, -0.4961, -0.7133],
            [-2.1205, -8.1327,  0.7649, -0.3738, -0.8779, -2.0656, -2.3479,  1.5086],
            [ 1.0720, -2.6291, -3.5326, -1.8425, -0.8206,  1.7252,  0.2584, -3.6646],
            [-0.0732,  2.4283,  1.1863, -3.8645,  0.9252, -4.5919,  0.9745,  0.1147],
            [-0.8649, -3.2027,  3.1657, -3.6142,  2.9260, -1.0852,  2.4411, -4.2639],
            [ 3.5980, -3.4794, -2.6579, -1.5271,  1.8265, -7.5627,  1.3235, -2.8664],
            [-1.8218, -0.2365, -3.5126, -3.0046, -2.3928, -3.5254,  2.0911, -3.4054]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0924,  0.5305, -1.5950,  2.4202,  0.1792, -1.9284,  1.5339,  0.1032,
             -0.4028, -0.1316],
            [-0.1786, -0.1932, -0.7311, -2.6496,  0.0097, -4.4264,  2.3544,  0.3480,
             -1.2868,  0.2254],
            [ 0.5484, -1.0364,  1.4952,  2.0691,  2.7156, -2.4024, -1.1429, -2.9457,
              2.1578, -0.8669],
            [-0.5801, -1.0717, -0.2067,  2.0289, -0.3444,  1.9320,  7.6660, -7.6912,
              3.2981, -0.9397],
            [ 1.0013, -2.2567, -0.4008, -3.5615,  3.9840, -6.6163,  5.0770, -0.0718,
              0.2551, -0.9609],
            [ 1.4488, -6.2721,  6.3480, -3.9856,  1.5607, -2.4145, -0.5284, -1.9103,
              1.5250, -1.2937],
            [ 4.3728, -1.2710, -2.0295,  1.4578, -0.3504, -1.0409,  1.7933, -1.4487,
             -1.6506, -0.4890],
            [ 0.0987,  1.5147, -2.1450,  4.0091, -2.8732, -2.2987, -0.0800, -4.2150,
              2.1113, -1.0037],
            [ 1.5113,  2.5661, -2.0172,  1.6828,  0.9961, -0.9482,  2.3531, -3.2373,
             -0.5022, -0.2564],
            [ 0.1227,  0.7585,  1.4152,  0.5699, -0.1128,  0.7169,  0.3709,  0.6693,
              0.7702, -0.3567]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.492 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
