.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7586, 10.0064,  5.8136, 12.6086, 12.8361],
            [ 2.0551,  0.1726, 10.8580,  5.5862,  2.2230],
            [11.0947,  3.3285, 13.2443,  7.6906,  6.6315],
            [ 6.9646,  3.7229,  5.1560,  5.9779,  8.5922],
            [ 4.9906, 11.1585,  9.9181,  9.4752,  6.4756],
            [ 6.9646,  6.6386, 12.9551,  8.7927,  8.5922],
            [11.0947,  3.1649,  5.6261,  9.4658,  6.6315],
            [ 2.0551,  1.9728, 17.4886,  5.2135,  2.2230]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9474,  2.4394, -0.2345, -1.9903,  0.5508,  0.6712,  0.6196, -0.2087],
            [-0.8498,  1.4892, -1.6694, -0.1219, -0.2231,  1.8690, -0.8166, -1.4968],
            [ 0.8886,  1.3132, -2.3245, -0.4815, -0.3037, -1.2427,  0.8370, -1.3092],
            [-0.6000, -1.5153,  0.7949, -0.2205, -0.4869,  0.6275, -0.1411,  0.9627],
            [-1.0730,  0.3768,  0.2025,  0.6664, -2.2518,  0.1581,  1.2860,  1.1550],
            [ 0.7006,  0.3460, -1.6534,  0.6495,  0.1973,  0.4642,  0.2576,  0.4590],
            [-1.4283,  0.4791, -0.6525, -0.1282, -1.3378, -1.8746,  0.4967, -0.6210],
            [ 0.5869, -0.2506, -1.7430,  0.8222,  0.6711, -0.1773,  0.4549,  1.2291]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3978, -0.4546, -0.2986],
            [-0.2335, -0.6219, -0.3711],
            [-0.7777, -0.8377, -0.4491]], requires_grad=True), Parameter containing:
    tensor([[0.0699]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.9649,  1.7386,  3.0464,  1.0843, -0.8329, -2.3762, -0.9525, -1.0200],
            [-2.0864,  0.8006,  2.2114,  0.9732, -1.7701, -0.9022,  0.6263,  1.8979],
            [ 1.4534,  2.7732,  2.0115, -0.1823, -2.3689, -0.3502,  2.4749,  1.9734],
            [-0.6851, -0.6244,  0.1593, -0.4233,  1.3594,  1.1184,  2.7789,  1.7937],
            [-0.0675, -1.1366, -0.7089,  0.7831,  0.7361,  2.3654,  1.5377,  0.5510],
            [-0.9989, -1.9168,  0.2780,  2.3705,  3.3961,  0.5702,  0.4577,  0.7654],
            [-1.2632, -2.7096, -2.0113, -0.1248,  1.4812,  2.0144,  1.8054, -0.1776],
            [-0.9314, -1.5408,  1.1490,  2.5239,  2.9403,  2.7420,  1.9006,  2.0739]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-9.0873e-02,  3.1615e-01,  4.8739e-01,  1.1065e-01, -2.7938e-03,
              2.9683e-01,  1.9991e-01, -1.0868e-01, -1.6676e-01,  7.4330e-03],
            [ 7.8683e-02,  2.1858e-01,  1.0277e+00,  1.0590e+00,  8.4966e-01,
              1.2819e+00,  1.4934e+00,  4.8831e-01,  7.6352e-02, -1.9350e-02],
            [-7.8070e-01, -3.7240e-01,  1.5868e-03,  5.8453e-01,  1.6256e+00,
              2.8410e+00,  2.5827e+00,  1.5409e+00,  4.1569e-01, -5.0992e-02],
            [-3.1694e-01, -1.3273e+00, -5.9947e-01,  1.0995e+00,  2.7135e+00,
              3.0630e+00,  3.9530e+00,  2.4172e+00,  4.7904e-01, -5.6824e-01],
            [-1.6299e+00, -3.2965e+00, -3.3988e+00, -6.4983e-01,  1.7888e+00,
              2.9518e+00,  3.1948e+00,  2.0460e+00, -3.4363e-02, -6.1982e-01],
            [-9.9034e-01, -1.5662e+00, -8.9317e-01,  1.1610e-01,  1.3219e+00,
              1.9853e+00,  1.4339e+00, -8.1762e-01, -1.3291e+00, -6.5866e-01],
            [ 7.2950e-02, -1.6843e+00, -2.0009e+00, -5.5588e-01,  1.3377e+00,
              1.5568e+00,  4.2173e-01, -1.2176e+00, -8.3519e-01,  4.6071e-02],
            [-7.0704e-01,  1.4472e-01,  1.0652e+00,  9.0546e-01,  5.2751e-01,
              6.1069e-01, -8.8175e-01, -2.0626e+00, -1.7504e+00, -3.7819e-01],
            [ 1.4338e+00,  9.5080e-01,  5.3171e-01, -7.1871e-01, -1.1965e+00,
             -2.2540e-01,  3.0709e-01, -5.6713e-01, -1.1772e+00, -5.4604e-01],
            [-2.3220e-01,  1.2041e-01,  1.4533e-01, -4.7947e-01, -1.2060e-01,
              5.5499e-01,  2.0780e-01, -1.2605e+00, -1.2899e+00, -5.6246e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.560 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
