.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5857, 10.3071,  8.0311, 10.6837,  0.2296],
            [ 6.0338,  4.4967,  8.1725,  7.5979,  1.1402],
            [10.4375,  2.8104,  7.0390,  7.3945,  6.7435],
            [ 4.2573, 12.1458,  5.5246,  3.6564,  6.4582],
            [11.1143,  3.7281,  6.6138,  5.1056,  3.0129],
            [ 4.2573,  6.2023, 12.8698,  8.2723,  6.4582],
            [10.4375,  2.5907,  6.1047,  5.0111,  6.7435],
            [ 6.0338, 11.2748,  9.1214,  6.7822,  1.1402]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1302,  1.0949,  0.6861, -0.8487,  0.0659, -0.3816, -0.3326,  0.1036],
            [-1.0619,  0.4304,  0.2159, -0.0774, -0.0803, -0.8305, -1.6720,  0.9122],
            [ 1.5991,  0.5022, -0.0794,  1.1915,  0.2353, -1.1395, -2.1473, -0.7183],
            [ 1.1523, -0.9355,  0.5148,  0.3494,  0.9684,  0.2407, -0.5080, -0.0984],
            [ 0.4332, -0.2061,  1.4881,  0.6718,  0.2121,  1.5257, -0.5290,  0.9430],
            [ 0.5058, -0.3489, -1.5531,  0.0161,  0.3798, -1.2428, -2.2431, -0.2151],
            [-0.9181, -0.2765, -0.5374, -1.4467,  0.3848,  0.4427,  1.1369, -0.0218],
            [-1.4858, -0.3424,  2.1018, -0.4463, -0.5468, -0.7341, -0.9234,  0.7082]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.8368,  0.2215, -1.5757],
            [ 0.3089,  0.6471,  1.0857],
            [-0.4847,  0.1908,  0.9182]], requires_grad=True), Parameter containing:
    tensor([[-0.0864]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1020, -3.2125,  0.1083,  3.4472,  3.8667, -1.7124, -1.2236, -0.2241],
            [ 2.9291, -0.8090, -5.2543, -2.0523,  3.5215,  2.5566, -1.5329,  0.3041],
            [ 0.4034,  5.0252,  4.1695, -4.6740, -1.4949,  0.8155, -2.0876, -1.5053],
            [-4.2038,  1.6433,  0.2288,  0.7085, -1.9349, -1.4189,  1.9019,  0.9023],
            [ 2.9839, -3.2742, -6.6625, -0.9862,  1.1819, -2.5991, -1.4937,  1.7844],
            [ 7.4962,  0.4956, -3.5255, -5.9064, -1.6861, -0.0274, -2.9887, -1.7138],
            [ 0.5247, -0.7044,  2.6572,  0.8751, -2.4578, -6.1957,  3.0822,  1.4588],
            [ 1.5060,  3.0864,  3.3174,  1.3578,  2.9769,  2.9325,  0.0189, -5.4573]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.3685,  0.4669, -0.6503, -0.3408, -3.6861,  0.4445,  2.9318,  0.5454,
             -1.1809, -0.4441],
            [ 6.8631, -0.1996, -3.0712,  2.9495,  2.0569,  2.5418, -0.4763, -0.2683,
              0.4588, -1.3984],
            [-2.8196,  0.1208,  4.9774, -0.6678,  1.2956, -0.2858,  2.6727,  2.3563,
              1.4771,  3.3196],
            [ 0.6736, -2.2073, -1.2371, -1.9081, -3.7443,  3.3924, -0.9358, -4.8497,
              1.0890,  0.2624],
            [ 1.8274,  0.6208, -0.8034, -0.9006, -0.2072, -2.3283,  0.0588, -0.4280,
             -1.6091,  1.3320],
            [-0.9789,  0.3711,  3.9276, -0.4325, -1.5968, -2.5963,  1.2341,  2.1913,
             -2.7934, -1.8773],
            [-1.1712,  2.0729,  0.0818, -0.1240,  0.8952, -1.9534,  0.1175, -2.8400,
              0.7031,  0.3826],
            [ 1.5355,  0.7087, -3.4830,  0.7091,  0.6642,  1.4715, -1.1493, -4.4559,
             -0.7223,  0.1627],
            [ 0.5268, -0.0901,  0.9597,  0.2349, -0.9687,  0.3990, -1.2252,  0.5631,
             -1.8021, -2.7084],
            [-0.4256,  0.0840,  1.1641,  0.0804, -0.3025, -0.4759, -0.3988,  1.0313,
             -0.4927, -1.1554]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.267 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
