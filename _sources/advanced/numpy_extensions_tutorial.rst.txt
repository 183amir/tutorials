.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1292,  2.0904,  6.5598,  7.6189,  0.7006],
            [ 2.2663,  5.9674, 10.3626,  2.7398, 10.2730],
            [ 4.7979, 12.2247,  3.5964,  9.2843,  6.1320],
            [ 3.7849,  6.6447, 10.3182,  8.9080,  4.8225],
            [10.4997,  2.2003,  1.6901,  6.0624,  0.1513],
            [ 3.7849,  1.0383,  6.5740, 12.4918,  4.8225],
            [ 4.7979,  8.4961,  8.2998,  4.7782,  6.1320],
            [ 2.2663,  6.4839, 10.4877,  5.0248, 10.2730]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2214, -0.1098,  1.3111,  0.6989, -0.6990, -0.3345,  0.5374, -0.0890],
            [ 0.0945, -1.7858,  0.4357, -0.4702, -0.7053,  0.0917, -0.6026,  0.4052],
            [-0.0206, -0.5878,  0.0694, -0.3812,  1.3553, -0.4697,  0.2063,  1.7786],
            [ 2.4212,  0.1712,  0.1368, -1.4882,  0.3530,  0.4760, -0.7209, -1.4417],
            [ 0.6746,  0.5241, -0.5736,  1.2690,  0.0339, -1.2851, -0.8811, -1.0824],
            [-0.6015, -0.0130, -0.0863,  0.0696, -0.9324, -0.8451, -1.6221,  1.3469],
            [ 0.5846, -0.8883, -0.7016, -0.4059, -0.1832,  1.9412,  0.2379,  0.8772],
            [-2.1320, -0.5842,  0.1229, -0.1066,  0.3696, -0.5414,  0.0252,  0.8454]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6049, -0.9731,  0.9920],
            [ 1.9301,  0.9622,  0.5242],
            [ 0.3681, -0.7165, -1.7615]], requires_grad=True), Parameter containing:
    tensor([[-0.2899]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.6178, -3.0803,  2.1147,  4.9603, -3.6114,  2.1759, -2.7220,  1.0982],
            [-2.0990,  1.9311,  2.9851,  5.4944, -3.3266, -1.0369, -0.3953, -6.3160],
            [ 2.5678,  1.2894, -4.6465, -4.8848, -2.7979, -0.8684,  6.1583,  0.4633],
            [ 0.8012, -1.5086,  1.6292,  1.6175,  7.0643, -0.2768, -3.8042, -4.6226],
            [ 5.9875,  0.1108, -4.6902, -6.3679,  0.2546,  0.7985, -3.6588,  0.1709],
            [-3.4527, -0.9679,  3.2616,  3.7309,  0.4447,  0.4190, -4.3190, -0.6483],
            [ 2.4592,  1.0345, -3.4578, -0.6660, -2.4540, -0.9183,  2.5641,  5.9367],
            [-3.4195, -1.2842, -4.5822,  0.5577, -2.9544, -4.1046,  1.6082, -4.7305]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.8289e-02, -2.2137e-02,  4.3504e-01,  2.5826e+00,  1.8242e+00,
             -4.1310e-01,  3.9709e-04, -3.3532e-01, -1.1836e+00,  4.2073e-01],
            [-4.2336e-02,  3.1024e-01, -2.1588e+00, -4.2354e+00, -4.8207e+00,
             -5.8112e+00, -6.3611e+00, -1.0663e+00,  1.3249e+00,  1.0819e+00],
            [ 3.3448e-01,  9.6985e-01, -3.3861e+00, -2.9447e-01,  4.4680e+00,
              4.0983e+00,  8.2618e+00,  8.5446e+00,  3.2549e+00, -6.8500e-01],
            [-2.0220e+00,  8.5040e-01,  1.1950e+00, -1.9155e+00, -1.1868e+00,
              4.1808e+00,  2.4544e+00, -8.3243e+00, -6.6983e+00,  3.8287e-01],
            [-2.3329e+00,  6.9721e-01,  1.1658e+00, -3.6362e+00,  2.3307e+00,
              4.3508e-01, -3.7101e+00,  2.4368e+00,  8.7755e-01,  2.7300e+00],
            [ 3.4539e+00,  2.3587e+00, -3.1147e+00, -5.7004e+00, -2.5261e+00,
             -9.5573e-01,  1.0328e+00,  4.2434e+00, -2.3569e+00, -3.0504e+00],
            [-3.6256e+00, -4.0280e+00, -7.0985e-01,  4.9342e+00,  6.9678e+00,
              6.2340e+00,  2.1109e+00,  2.0508e-01,  5.8166e-01, -1.7585e+00],
            [ 1.9530e+00,  4.0438e+00,  4.2055e+00,  3.1767e+00, -4.8049e+00,
             -7.1322e+00, -6.4860e+00,  1.9751e+00, -5.9380e-01, -4.1485e-01],
            [-2.8801e+00, -7.5236e-01, -4.6798e+00, -9.3276e-02,  1.4299e-01,
              4.4028e+00,  2.3765e+00,  3.1797e+00,  1.6759e+00,  5.0820e-01],
            [-6.0893e-01,  1.4359e+00,  1.8671e+00,  2.4437e-01,  2.2455e+00,
             -1.3992e+00, -3.0107e+00, -3.7290e+00,  4.3277e-01, -2.0664e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.466 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
