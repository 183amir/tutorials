.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.5236, 14.6540,  5.0594,  5.1524,  0.1490],
            [ 4.8687,  9.4429, 10.4960, 12.3845,  7.7542],
            [ 8.8959,  5.7834, 11.9924, 13.8502, 15.0140],
            [ 4.5862,  5.7456,  8.5345, 11.2353,  4.3500],
            [14.2398,  6.1674,  5.5973,  4.7665,  0.3280],
            [ 4.5862,  6.7118,  5.8671,  7.6283,  4.3500],
            [ 8.8959,  0.8735, 11.1529, 11.7289, 15.0140],
            [ 4.8687,  6.1817,  2.6630, 11.1684,  7.7542]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3672, -1.1893, -1.4270,  0.4256,  2.2504,  0.9730,  0.1715, -1.2948],
            [ 2.3531, -0.8013, -1.9709,  2.5476, -1.4150,  0.0734, -0.8435, -2.3826],
            [-0.1816,  0.5544,  0.7260,  0.5744, -0.0187,  1.4271,  0.6207, -0.2953],
            [-0.7053, -0.0787,  0.5064, -0.2045,  0.3571, -0.2595,  0.2868, -0.9563],
            [ 0.0170,  0.2892,  0.3489,  0.4167,  1.5966, -0.7574, -0.9056,  1.3205],
            [-2.1658,  0.6687, -0.2418,  0.6700, -0.9848,  0.7272, -0.6073,  0.0447],
            [ 0.0753,  0.3514,  0.0547,  0.7431,  0.6808,  1.8106,  1.9184, -0.0274],
            [-1.0299, -0.0895,  1.8009, -1.7683,  1.3624,  0.6725,  1.5739, -0.4974]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2660, -1.1202,  1.5207],
            [-0.9977, -0.1223,  1.5509],
            [ 1.2721, -0.3794, -0.6505]], requires_grad=True), Parameter containing:
    tensor([[1.0203]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.6644,  2.0472, -0.8158,  1.8968, -2.7947,  3.9834,  1.5862,  0.1927],
            [ 0.5430, -2.3368,  4.2177,  4.2831,  0.1529,  5.5729, -0.1833, -0.7971],
            [ 2.4306,  5.1970, -0.5853,  1.4626,  2.0050,  1.0946, -1.7336,  0.4522],
            [ 2.3139,  1.1592,  1.3303, -3.3810,  6.0929, -5.1479,  1.8885,  5.1782],
            [ 2.1631, -0.9689, -2.1023,  3.4488,  0.7018,  3.3097,  1.2034, -3.0158],
            [ 2.9350, -2.2438,  2.1528, -0.6688,  3.2540,  5.1072, -9.0115,  4.9711],
            [ 0.5265,  4.3401, -0.3543,  2.6012, -1.2378,  4.2625, -3.2205,  0.4020],
            [ 1.7743,  6.1300, -2.1752,  0.0170, -0.4220,  4.0673, -0.2439,  7.5936]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1949,  0.9568, -1.4114, -0.9720,  4.0759, -3.6012,  0.4691,  0.0149,
             -0.4022, -1.5600],
            [ 0.5389,  0.1298, -2.4535,  2.6849, -0.6754, -2.7065,  5.1541, -1.9590,
             -2.2152, -1.3360],
            [-0.4003,  2.6686,  1.1867, -8.4161, -0.6632,  3.6262,  3.4178, -3.3852,
              3.9938, -3.5550],
            [-0.3650,  0.0584, -2.1815, -1.8286,  4.6153, -2.6487,  0.7330,  8.3690,
             -1.7099, -1.7930],
            [-0.4937,  0.8374, -0.2211, -4.9541,  7.8229, -3.6663,  1.3557, -5.1726,
              0.0419,  6.0372],
            [-0.0683,  0.5035,  1.2912,  0.5435,  0.1751,  1.2122, -1.1471,  0.4225,
              0.6230,  0.1574],
            [-0.8982, -1.1540, -0.4549,  1.9092, -1.4967,  2.1872, -3.0731,  3.9281,
              1.4809, -3.3210],
            [-0.0722, -1.4279,  4.4874,  0.3554,  0.1468, -1.9918, -0.6200,  1.4323,
              0.8615, -3.4892],
            [ 0.4524,  3.7442, -4.6548, -2.8483,  1.5111,  0.3566, -1.3500, -2.2079,
              3.2887,  0.9527],
            [-0.3314, -1.9530,  2.3546, -0.2036, -0.2625,  0.6660,  1.3927, -0.9534,
             -0.7647,  0.1414]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.481 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
