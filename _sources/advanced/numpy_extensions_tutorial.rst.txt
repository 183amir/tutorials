.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.1667,  8.7217, 12.3921,  9.7967,  0.0642],
            [ 1.7350, 11.1546,  8.3112,  7.9988,  3.4383],
            [ 8.4803,  7.2611,  6.4596,  7.1205,  4.7246],
            [ 7.3278,  3.6215,  9.6010,  4.6096,  8.0695],
            [ 0.4827,  4.6653,  6.8324,  4.9063,  4.7669],
            [ 7.3278,  7.4286, 11.9356,  6.0283,  8.0695],
            [ 8.4803, 11.3389,  6.1657,  6.3554,  4.7246],
            [ 1.7350,  1.5506, 14.2502,  7.0825,  3.4383]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1016,  0.1857, -0.2576, -0.3589,  0.5356,  0.8176, -1.1717,  1.2215],
            [ 1.8483, -0.0505, -0.2402,  1.6472,  1.7633, -1.3145, -1.2239, -0.0974],
            [ 0.2779,  0.1207, -1.0996, -1.3282, -1.1559,  0.8253, -0.2192, -1.1231],
            [ 0.9344, -0.9771,  0.2166, -1.0889, -0.4074,  0.5421, -0.4331,  1.3406],
            [ 1.1039, -2.3415,  0.4123,  0.0027, -0.5264,  0.6230,  0.8392,  2.6550],
            [-0.8853, -0.1202,  0.1069, -0.1029, -0.7314,  0.7923, -0.6302,  0.3727],
            [-0.4374, -0.7757,  0.3032,  1.3030, -0.4396, -0.0975,  0.2203,  0.1085],
            [ 0.7767, -1.3455, -1.7573,  0.0850,  1.5354, -0.3535,  0.7559, -0.1162]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0530, -0.3831, -0.1251],
            [-0.8731,  0.7477, -1.2790],
            [-0.5612, -1.2150,  0.0283]], requires_grad=True), Parameter containing:
    tensor([[-0.3095]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.3687, -1.1944,  1.4121, -1.8710, -1.4393, -0.5529,  0.7135, -0.2384],
            [-0.4467, -3.3397, -1.8109, -1.0497, -4.8327,  0.9097, -3.8173,  3.2344],
            [-3.1684, -2.1084, -0.8982,  0.1865, -1.4266,  0.4615, -1.5207,  1.5400],
            [-3.0988, -3.4904, -0.9440, -1.2436, -3.6746, -1.0288,  0.5203, -1.9405],
            [-3.6990, -3.7213, -0.5059, -1.9871,  2.2116,  1.4710, -3.8937,  2.6280],
            [-3.3536, -3.0669, -4.9109,  3.1324, -2.7002,  0.5512,  2.5068, -4.6526],
            [-4.8977, -5.2672,  3.0393, -4.2259,  6.8827, -4.7131,  3.3304, -5.0562],
            [ 0.5081, -2.7801, -2.0741,  1.3665, -3.1411,  3.0519, -2.5870,  2.1778]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.4195e+00, -2.6318e+00, -2.5458e+00,  2.9203e-01, -1.2270e+00,
             -1.1940e+00, -7.8684e-01, -3.0514e-01, -7.1976e-02, -1.0959e-02],
            [-1.8519e+00, -4.3353e-01, -1.8747e+00, -8.1344e-01, -5.1716e+00,
              2.0204e+00, -2.3812e+00,  7.6786e-01,  2.3451e-01,  1.1215e-01],
            [-1.7716e+00, -2.4014e-01, -1.2795e+00, -2.3749e-02,  1.0474e+00,
              7.1164e-02, -4.0706e+00,  1.3266e+00, -3.2620e+00,  2.1473e+00],
            [ 1.2250e+00,  1.0801e+00,  2.8093e-01, -2.0514e+00,  4.6438e+00,
             -4.9943e+00,  6.3679e-01, -2.4172e+00,  1.4163e+00, -1.8266e+00],
            [ 2.6172e+00, -1.8439e+00,  7.5459e+00,  1.7908e+00, -1.6794e+00,
             -5.0376e-01,  2.5301e+00, -4.7583e+00,  7.3664e-01, -2.4799e+00],
            [ 1.8432e+00, -6.4963e-01,  9.2320e-01, -5.2774e+00,  9.7568e-02,
             -3.0392e+00, -2.3888e+00,  2.9510e-01, -1.5950e+00,  1.5270e+00],
            [ 1.3656e+00,  1.9644e-01,  1.3865e+00, -1.1676e+00,  1.3471e+00,
             -2.9525e+00, -3.7485e-01,  2.0015e+00,  3.2703e-01,  1.8042e+00],
            [-4.3396e-01, -9.9111e-01,  9.9173e-01, -2.8556e+00,  1.6757e+00,
             -4.3713e+00,  1.9339e+00,  4.4296e-03,  1.8090e+00,  1.4704e-02],
            [-3.9874e-01,  2.5612e+00, -2.6903e+00,  3.3015e+00,  1.3571e-01,
              2.3063e+00, -1.3963e+00,  7.7542e-01, -1.6406e+00,  6.0278e-01],
            [-5.6295e-01, -5.1909e-01,  1.2904e+00, -4.0601e-01,  5.2608e-01,
              9.1193e-02, -9.7215e-01, -9.4640e-01,  6.0099e-01, -1.3342e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.227 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
