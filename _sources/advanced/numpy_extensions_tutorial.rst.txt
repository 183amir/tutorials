.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.7500,  3.2119,  3.6973, 11.1689,  1.2892],
            [11.2927,  4.5216,  5.9120,  1.5434,  3.0361],
            [ 3.6825,  5.2544,  4.2123,  6.3042, 10.0930],
            [ 8.9309,  5.5961,  7.5594,  6.5750,  8.4333],
            [ 0.1621,  4.6550,  7.3213,  7.4435,  3.4314],
            [ 8.9309,  6.8718,  4.5309,  6.6752,  8.4333],
            [ 3.6825,  5.8691,  9.9363,  7.8366, 10.0930],
            [11.2927,  4.7674,  2.9873,  5.5843,  3.0361]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7263,  0.0473, -0.2710, -0.2413,  0.5990, -0.1375, -1.2641, -0.0723],
            [ 0.0688, -0.5483,  1.5316,  0.6763,  0.0031, -1.7290,  1.3783, -0.1995],
            [-0.2793, -1.1816, -1.8060, -0.4713, -0.0481,  0.0654, -0.5618,  0.5712],
            [-0.5194,  0.7122, -1.8169, -0.5814, -0.8391, -0.4598,  0.9246, -0.2074],
            [-0.6806,  0.5668,  1.4361, -0.8069,  1.2134, -0.8436,  0.7686,  0.3232],
            [-0.6066,  0.4932, -0.0872, -0.2238,  0.3431, -0.1659,  1.1934,  0.1264],
            [ 0.4609,  0.5650,  0.6503,  1.6346,  0.1295,  0.5906,  0.2408,  0.3229],
            [-1.1523,  1.2258, -0.1872, -1.1936,  0.9458,  0.8615,  0.4782,  0.5113]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8068,  0.9443,  0.5504],
            [ 0.4408, -0.1668,  0.0929],
            [-1.2843,  0.9435, -0.7038]], requires_grad=True), Parameter containing:
    tensor([[0.2921]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.0886, -1.0411,  1.8890,  1.7224,  1.5921,  3.0834,  1.8977,  0.6239],
            [ 1.2547,  0.3311,  2.3959,  0.5981,  0.1761, -0.8944,  1.0340,  2.1352],
            [ 2.6697, -3.9888, -0.8090, -3.9669,  3.0596, -2.3230,  1.6267, -3.2484],
            [ 2.2038, -0.1187,  0.7043,  1.0460, -1.5842,  3.0393,  0.9664,  2.9126],
            [ 1.4251,  1.7382, -4.4675,  1.8030, -4.1014,  3.5301,  2.1541,  2.3018],
            [ 0.7082, -1.5671,  2.9848,  1.0113, -0.5988, -2.7251,  1.2597, -3.6358],
            [ 2.4517,  1.7154,  4.3754, -1.1609, -0.1186, -2.0386,  0.4199,  1.4140],
            [-0.0333,  2.6513,  2.7597,  2.1458,  1.9203,  2.0502,  0.6864, -0.4050]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3960,  0.4484, -0.1295,  0.7818,  1.9700,  3.1014,  2.1701,  0.5473,
             -0.4771, -0.3043],
            [-0.2102,  0.2168, -0.0409, -0.4561, -1.7458, -2.5510, -3.1236, -0.7275,
              1.3139,  0.7273],
            [ 0.1294,  2.1594,  2.5905, -0.1344,  3.6318, -1.2860,  3.8109,  2.6808,
              1.0931,  1.2668],
            [ 3.2385,  0.2682,  4.5956, -1.0262, -0.1750,  4.2261, -0.9639,  0.3025,
              0.9695, -1.4060],
            [ 0.1180,  0.5584, -5.1041,  0.0632, -5.5541, -2.8327, -4.4330, -4.5196,
             -0.7023, -1.4423],
            [-0.8754,  4.8991, -1.1824, -1.7109, -3.9912,  1.1345, -1.8913,  3.1119,
             -0.8164,  0.9069],
            [-0.7316,  0.8183, -3.4833,  1.6962,  2.0622,  3.5416,  2.3487,  0.8439,
             -0.2406,  0.0987],
            [-2.8223,  0.9366,  0.9584, -1.2223,  0.0996,  0.0721, -1.5899, -2.1788,
             -0.6718, -0.6533],
            [ 1.8694, -1.7949,  2.7149, -2.7459, -0.0305,  0.5957, -2.3639,  1.7334,
             -1.2805,  0.5510],
            [-1.3648,  3.4116, -3.8949,  3.1906, -0.8812,  0.1133,  1.8175, -0.6484,
              0.4945,  0.2651]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.576 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
