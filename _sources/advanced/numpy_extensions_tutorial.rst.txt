.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.7291,  4.2257, 12.3815,  5.1767,  2.9072],
            [ 8.3956,  6.2530,  4.1307,  9.2246, 10.5465],
            [ 6.5360,  9.5954,  9.4848,  7.9057,  1.8085],
            [12.1229,  6.6011, 18.1609,  9.0757,  1.3651],
            [ 2.0754,  3.4721,  4.1411,  9.5647, 10.1807],
            [12.1229,  2.3226,  4.7723,  8.8085,  1.3651],
            [ 6.5360,  3.9617,  0.6701,  5.3792,  1.8085],
            [ 8.3956,  6.2000,  0.9063, 19.8248, 10.5465]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6514,  2.0193, -0.1992,  1.2349, -1.9742,  1.7514,  1.6428, -0.6331],
            [-1.0773,  0.4660, -1.4733, -0.8603,  0.2873,  0.2394,  0.0652, -0.5972],
            [-1.2077, -0.0039, -0.2850,  0.3393, -0.4839, -0.2373,  0.5375,  0.5086],
            [-0.1123, -0.2793,  1.8018, -0.9582,  1.4732,  0.9813, -0.1399, -0.0615],
            [ 0.4597,  0.2827,  1.9718,  0.0111, -0.4264, -0.5897, -0.9430,  0.6688],
            [ 1.3255, -0.2584,  3.6702, -0.3326, -0.7534,  2.2596,  0.3558,  0.5214],
            [-0.5698,  0.7249, -0.6715,  0.3204,  1.4843,  0.1491, -0.5956, -0.6114],
            [-0.6307, -0.4283,  1.2313,  1.5292, -1.5144, -0.3734,  1.0108,  0.0352]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8317,  0.2595,  0.7583],
            [ 0.7135,  0.4433, -0.6695],
            [-1.5737,  0.2135,  1.3626]], requires_grad=True), Parameter containing:
    tensor([[1.2863]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.4719,  1.0949,  2.1980,  1.4369,  3.2911,  2.0301,  2.6771,  5.9713],
            [-0.2064,  3.3506,  3.8132,  1.2581, -2.0740, -1.1098,  1.8163,  1.8292],
            [ 0.4122,  1.2224, -3.3519,  5.2298,  1.7659,  1.5281,  3.4865,  1.0931],
            [ 3.3042, -1.7507,  0.6680,  1.1173,  1.0627,  2.0839, -0.8339,  3.1508],
            [ 2.0294,  2.2484, -1.5058, -0.4346,  4.3589,  7.0835,  4.3544,  2.6037],
            [-0.3513,  4.5433,  7.5450, -0.7359,  1.6398,  0.6323, -2.2506, -1.7702],
            [ 4.8668,  0.3169,  4.2281,  6.6237, -2.5753, -2.6697,  1.6899,  5.5588],
            [-0.9615,  1.4211, -2.0344,  4.2060,  3.4581,  1.2207, -0.2577, -3.8030]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.8107, -0.8253,  2.6658,  0.1740,  0.8336, -1.0161, -2.2089, -1.9604,
             -0.8544, -0.7722],
            [ 0.1930, -0.2145,  0.4475,  3.5750, -1.0088, -1.3839,  1.3676, -0.1126,
              0.4070,  1.2162],
            [-2.3665,  3.7299, -4.0073, -1.0990,  6.5898,  0.9240, -3.6246,  0.4277,
             -1.5969, -1.2069],
            [ 1.2271,  0.6492, -0.7716, -1.8108, -1.2476,  3.0515,  1.0291,  0.3522,
              1.8074,  1.3465],
            [ 1.2301, -2.3618,  2.8927,  3.9619, -1.0634,  1.2064,  1.5026, -2.3157,
              0.2053,  0.7805],
            [ 0.1520, -0.1247,  4.8288, -0.2037,  0.7601, -0.5377,  2.4100, -0.8867,
             -0.2245,  0.4310],
            [ 1.9850,  0.3981, -2.5428, -3.1993,  1.9136,  3.3378, -2.5804, -2.5605,
              1.5118,  1.9784],
            [-1.5645,  1.4211,  0.7533,  2.5551, -2.0801, -0.0793,  1.9687,  4.0376,
             -0.4624, -1.7901],
            [-0.9014,  2.2474,  3.2628,  0.7039, -3.0071, -1.5647,  0.0697, -1.3634,
              1.3522,  0.5347],
            [-0.8678, -1.6804, -0.6794,  0.5317,  4.5062, -0.4594, -2.5062,  0.7300,
              0.1810,  0.2510]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.510 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
