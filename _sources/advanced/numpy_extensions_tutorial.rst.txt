.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7575,  5.7381,  9.0660,  7.5837,  2.3438],
            [ 6.1247,  9.0632,  4.8897,  9.5535,  6.9984],
            [ 4.5397,  1.3479,  3.0912, 12.6426, 10.9252],
            [ 4.8798,  4.0847,  6.6954,  1.3496,  5.3093],
            [14.1579, 16.0158,  7.1973,  3.4142,  0.8408],
            [ 4.8798, 12.1680,  9.6499, 12.6931,  5.3093],
            [ 4.5397,  6.9671,  3.5970,  6.5774, 10.9252],
            [ 6.1247,  9.1126,  2.7847, 12.3377,  6.9984]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3235, -0.5838, -0.1296, -0.5652,  1.1584,  1.4394, -0.9236,  0.2162],
            [-1.0167,  0.2470,  1.3020, -1.5751, -1.1780, -1.9884,  0.5301, -0.6725],
            [ 0.0830, -0.7809, -0.0561, -0.7321,  2.5057,  0.7025,  0.3817, -0.6897],
            [ 0.5180,  0.2633, -1.6330, -0.3335, -2.1515,  1.0755,  0.9835, -0.3602],
            [-0.7290, -0.4318, -0.0990,  0.3344, -0.0062,  1.5086, -0.3274, -0.1206],
            [ 1.2361, -0.4140, -0.1502, -1.4541, -0.1217,  0.7972, -0.0574,  0.6586],
            [-1.0294,  2.0323,  0.1249,  1.0739,  2.1305, -0.5793,  0.2156, -0.5995],
            [-1.6618,  1.0758, -0.3772, -0.5169,  1.2372, -1.4684, -1.1420, -0.6094]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8705,  1.1745, -1.1212],
            [ 0.7977,  0.5086, -0.8825],
            [ 0.0575,  1.4829, -0.8532]], requires_grad=True), Parameter containing:
    tensor([[0.3484]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8155,  1.5339, -3.5173,  2.0459,  0.8287, -3.0705, -1.7681, -1.1971],
            [-0.0638, -2.5199,  1.5623,  0.9900,  1.4539, -1.8841, -0.5593, -1.4695],
            [-3.7296, -1.7082, -2.1975, -0.4623,  1.1142, -0.5521,  1.5388, -4.6614],
            [-0.3432, -4.7191,  4.1446,  1.5040, -1.7632,  4.0592, -0.1964, -0.3460],
            [ 1.0795,  1.0700, -1.9199, -0.2970,  0.5615, -2.0404,  0.6365, -1.0214],
            [ 4.0001,  0.0123, -2.2507,  3.5752, -0.1670,  5.7999, -0.9519, -3.4323],
            [ 2.6981,  0.2735, -2.5968, -0.1526,  0.0944,  2.0197, -1.8258, -3.0753],
            [ 2.3222, -1.7326, -2.9944, -0.6842,  0.0712,  2.5641,  3.5951, -2.3911]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.7221,  0.2004, -0.5755,  3.8936, -0.5424, -2.8951, -2.2079,  1.6910,
              0.9148, -0.4126],
            [ 0.0219, -0.0580,  2.2488,  0.1934, -1.3438, -0.6743, -0.7649,  3.6059,
              2.6470, -2.7936],
            [-0.1776,  3.6868, -0.6281, -3.2732,  1.2260,  2.7251, -3.5365,  0.9128,
              2.7258, -2.2637],
            [-0.2997,  0.1989,  2.5328, -6.5989,  0.3029,  4.4973,  0.0230, -3.9363,
              2.1635,  0.2284],
            [-0.4979, -0.0709,  1.8511, -2.8690, -2.8956,  4.0692,  1.3290, -7.4336,
              1.7442,  1.7481],
            [ 0.1698, -1.4742,  1.8729,  0.0490, -1.3237,  0.6788,  1.7401, -1.0986,
             -1.4227,  0.7922],
            [ 1.0636,  2.1329, -0.3496,  3.2658, -3.3805, -1.1494,  1.7820, -4.0210,
              1.3373,  0.1829],
            [ 1.3766,  0.7424, -1.8747,  3.9561,  0.2280, -1.1146, -3.2983,  0.3068,
              2.3456, -0.3268],
            [ 0.5646,  0.4424, -0.6003,  4.2003, -1.0280, -1.8377, -0.1889, -2.3545,
              0.9627,  0.3887],
            [ 0.0365,  0.8370, -3.1957,  2.2501,  1.8727, -1.1022, -0.7865, -0.6462,
              0.9742, -0.2215]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.478 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
