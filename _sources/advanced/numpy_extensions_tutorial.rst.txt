.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[15.2505, 14.7519, 20.7591,  2.6376,  3.9788],
            [11.2307,  5.0126,  7.4554,  6.1587,  4.7290],
            [ 6.3537,  1.6790,  4.8941,  5.3286,  4.0296],
            [ 8.2126,  7.8106, 10.0121,  9.6286,  8.5053],
            [ 6.9541, 11.3754,  4.7492,  8.1277,  5.0024],
            [ 8.2126,  2.6805,  3.7792,  3.3671,  8.5053],
            [ 6.3537,  4.3927, 12.8228,  6.1574,  4.0296],
            [11.2307,  9.3668,  3.3796,  5.2401,  4.7290]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5990,  0.5940, -0.6773,  1.9645,  1.1568,  0.0880, -0.0121,  1.9916],
            [ 2.1519, -0.0534,  0.6805,  0.5103, -2.0406, -0.8491,  1.2113,  0.5336],
            [-0.3531, -0.5340,  0.6481,  0.0571,  1.1697, -0.2495,  0.2370,  1.0789],
            [ 1.4856, -0.9376, -0.4630,  1.0197,  0.3546, -0.3492, -0.6767,  1.7859],
            [-0.3558, -1.3462, -0.7843, -0.9562,  0.2919,  0.3276, -0.4957,  1.0816],
            [ 0.6472, -0.0388, -2.8863, -0.9945, -0.3967,  0.8692,  0.1240,  0.2074],
            [ 0.7990,  0.0307, -0.0871,  2.1610, -0.0436, -0.0092,  1.2134,  1.5165],
            [ 1.9334, -0.7169, -0.7611, -0.0199,  0.7510, -0.9236,  0.2148,  1.7749]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2650,  0.8098,  0.3277],
            [-0.2218, -0.3822,  0.8769],
            [ 0.4323,  0.5563,  0.3083]], requires_grad=True), Parameter containing:
    tensor([[-0.8224]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.3569, -1.1796, -1.2998,  0.3628, -1.1704, -0.6873,  1.4607,  1.4049],
            [-2.8755,  1.9710,  4.9320,  0.2947, -1.8780, -2.5304, -2.0278, -1.7839],
            [ 2.0910, -2.8980, -0.4474, -2.1311, -4.0499, -0.8896,  0.1459,  0.5410],
            [-3.3783,  2.0725, -1.2998,  1.4376, -2.8503,  0.8304, -2.1104, -1.3224],
            [-1.5277, -2.8510, -2.4627, -1.8411, -2.8614, -1.3648,  1.7169, -0.7894],
            [-0.6083,  1.3729,  1.1635,  0.1488, -0.0761, -2.2925, -0.2981, -3.1967],
            [-1.5328, -0.0888,  0.2589,  1.8390, -1.2953, -1.2355, -0.2222,  0.0145],
            [ 0.6274,  0.6674,  0.3730,  1.5105, -0.8957,  0.1368, -0.5922, -1.0982]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0171, -0.2240, -0.0053,  1.3771,  0.5985,  0.3229, -0.1666, -1.3126,
             -0.7726, -0.1050],
            [-0.3788, -0.9739, -0.3632, -0.5772,  2.1346, -0.1597,  1.1972,  1.4851,
             -0.6940, -0.1320],
            [ 0.6578,  0.8906, -1.7456,  0.7321,  2.4195,  1.0978, -0.9738, -0.9449,
             -0.3071,  0.2355],
            [-1.1639, -1.6180,  1.2127, -1.4688, -0.0247,  0.6380,  1.3362, -1.2959,
              0.1566, -0.2949],
            [ 0.8809,  0.5633, -1.5158, -0.6426, -0.6430, -2.1820, -2.8988, -1.3292,
             -0.3673, -0.8180],
            [-0.0784,  0.7994,  0.9001, -1.4745, -0.7435,  0.4600, -1.7021, -3.4145,
             -1.6472, -0.6887],
            [ 0.3981,  1.0544,  1.7790, -0.1027, -1.6652, -3.8940, -2.9005, -1.3535,
              1.2118, -0.4421],
            [-0.3939, -1.7510,  1.1708,  0.1222, -2.0454,  0.8873,  0.2682, -2.4454,
             -0.7490,  0.8838],
            [ 1.3470,  2.3357, -1.2294, -0.2877,  0.6846, -1.0965, -0.3983,  0.4439,
              0.3394,  0.5669],
            [-0.9250, -1.3386, -0.6452, -0.0941, -0.0362,  0.0519, -0.0101, -0.1004,
             -0.0097,  0.0635]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.507 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
