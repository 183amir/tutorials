.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.9391,  3.9119,  5.3217,  9.8002,  1.4811],
            [12.1554, 15.5124,  5.0403,  9.3440,  8.6746],
            [ 9.0041,  3.8299,  0.8445, 10.6783,  1.4561],
            [ 5.6196, 11.2874,  4.5290, 11.3974,  3.7727],
            [ 2.0214,  3.6426,  6.7933,  5.4144,  0.3463],
            [ 5.6196,  7.4032,  3.8407,  6.1562,  3.7727],
            [ 9.0041, 14.5787,  7.5926,  3.9791,  1.4561],
            [12.1554,  4.7294,  7.8912,  7.6244,  8.6746]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2439, -1.1533,  0.4354, -0.9752,  1.7402,  0.0177, -2.7929, -0.9886],
            [-0.5497, -0.2359,  0.2196, -1.2291,  0.0852,  0.5368,  0.8247,  0.4151],
            [ 0.0575,  1.5214,  2.7530, -0.2553,  0.8476,  0.3061, -0.7566,  1.2681],
            [ 0.6227,  1.1262,  0.8168,  0.8537, -0.5182, -0.3374, -0.8078,  0.8468],
            [ 0.3822, -0.4384, -0.9697, -0.6873,  0.1413,  1.4403,  0.3590,  0.7254],
            [-0.2831,  0.4158,  0.3327, -0.7719, -0.0284,  0.3631, -0.2158,  1.2483],
            [ 0.9279, -0.7054, -1.7957,  0.5249,  0.6187, -0.5948,  0.2324,  0.0170],
            [ 0.5995, -1.1283,  0.5748,  1.4240,  0.5830, -0.0983, -0.4821, -2.2223]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4475,  0.7505,  3.9318],
            [ 0.0592,  0.0838,  0.3103],
            [-0.4452,  0.4378,  0.0967]], requires_grad=True), Parameter containing:
    tensor([[0.1000]], requires_grad=True)]
    Output from the convolution:  tensor([[ -1.2549,  -1.0449,  -1.3247,   2.1277,  -1.4787,  -5.7531,  -0.1112,
               2.1958],
            [  5.3312,  -3.6170,   0.6890,   5.5048,   5.7342,   5.7156,   2.7520,
              -1.8553],
            [ -4.1971,  -0.6754,   5.3016,  -5.5458,  -2.8925,   0.5082,   4.2081,
              -8.0483],
            [ -7.6522,  -3.5275,   1.0943,   4.2002,  -8.1048,   1.0144,   0.9020,
               2.3950],
            [  0.1991,   7.1773,  -5.5660,  -4.3703,  -0.7026,   1.5284,  -1.9081,
              -0.7086],
            [ -6.3919,  -3.1480,   3.1051,  -6.2146,   0.9031,   5.8048,   0.7390,
              -4.5751],
            [ -2.1272,   4.8125,  -2.9629,  -4.6313,  -1.4331,   2.0672,   0.9027,
             -10.5324],
            [  8.8629,   1.2565,   1.8365,   1.9500,   0.1521,  -1.0671,  -2.5173,
              -3.5713]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.2504e-01, -1.1557e+00, -1.2054e+00,  7.8420e+00,  4.5057e+00,
             -1.4761e+00,  1.3971e+00,  3.6428e+00, -4.7743e+00, -1.2585e-01],
            [ 2.4468e-01, -3.6154e-01, -2.1589e+00, -1.4641e-01, -2.4918e+00,
              9.6834e-01,  5.7942e+00,  3.8171e-01, -1.4689e+00,  4.8403e+00],
            [ 5.2640e-01, -1.8366e+00, -2.2016e+00,  2.0197e+00, -4.2601e+00,
             -1.7294e+00, -2.6851e-01, -1.6241e+00,  5.2388e-01, -4.5316e+00],
            [ 7.1619e-01, -9.4566e-01, -3.6406e+00, -3.7092e+00, -8.3820e+00,
              6.5187e+00, -3.2048e+00, -6.8187e+00,  9.4766e+00,  1.0331e+00],
            [-3.5173e-01,  4.1677e-01,  6.0016e+00, -1.9311e+00, -3.8695e+00,
              4.2662e+00, -2.8909e-01,  2.3176e+00, -1.1127e+00,  2.1215e+00],
            [ 4.3615e-01, -4.8907e-01,  2.5752e+00,  3.3221e+00,  4.6522e+00,
              1.8092e+00,  5.5843e-01,  3.7946e+00, -1.8589e+00,  5.4207e+00],
            [-1.3532e+00,  2.4452e+00,  6.8267e+00, -4.2739e+00, -2.1411e+00,
             -4.4414e+00, -6.9408e-01, -6.8179e+00,  5.6344e+00, -7.4788e-01],
            [-1.2852e-01,  3.4860e-01,  3.9605e-01, -3.6831e+00,  1.2213e+00,
             -3.2688e+00, -6.8181e+00, -1.1071e+00,  4.5106e+00, -5.2365e+00],
            [-7.3300e-01,  1.1499e+00, -9.2616e-02, -2.3147e-03, -8.1354e-01,
              6.1050e-01, -2.0312e+00,  5.0856e-01,  2.5689e-01, -4.4562e-01],
            [-9.5926e-02,  5.5190e-01, -5.2668e-01,  1.3804e-01,  6.6313e-01,
             -6.6108e-01, -8.2356e-01,  1.0768e+00, -4.7414e-01, -1.2956e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.475 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
