.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[13.8968,  4.5735,  4.4798,  7.9005,  7.4542],
            [ 6.8832,  3.5026,  8.0267,  6.1195,  9.8689],
            [ 7.4308,  6.6654,  1.4403,  6.1034,  8.0218],
            [ 1.9545,  4.6178,  2.2088,  8.6554,  6.2028],
            [ 7.8668, 15.8257,  6.6745,  8.9321,  5.7857],
            [ 1.9545,  9.7034,  8.9273,  8.6962,  6.2028],
            [ 7.4308, 11.1574,  3.4913,  9.9107,  8.0218],
            [ 6.8832, 13.4378,  3.0247, 10.9461,  9.8689]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0027, -1.3963, -0.4683, -0.7796, -1.1948, -1.0799, -0.6442, -0.5406],
            [ 0.2674, -0.5871, -0.2370,  1.5065, -1.3962, -0.0556, -0.4837, -1.7593],
            [ 1.1371, -0.9373, -0.3022, -0.7609, -2.1571,  0.1347,  1.1150,  0.8603],
            [-0.0577,  0.5170,  0.8966, -0.3357,  2.2902, -2.0735, -0.4603, -0.9477],
            [-0.1417, -1.1865,  1.0024, -1.1612,  0.3108,  1.1086, -1.4135, -1.5731],
            [-0.0173, -0.1817,  1.0151,  1.2655,  1.4093, -1.1299, -0.5383, -0.6754],
            [-1.1585, -0.9514, -1.3008, -0.3373,  0.4669,  1.8833, -0.2777,  0.8592],
            [-0.0686, -1.0982,  0.4527,  0.0360, -0.6397, -0.4432, -0.6300,  1.1448]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3004,  0.2460,  0.2229],
            [ 0.8531, -1.0633,  0.9596],
            [ 0.1902,  1.2907,  0.4957]], requires_grad=True), Parameter containing:
    tensor([[0.6858]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.2385,  3.1411,  0.9442, -1.8383,  2.8282, -2.9814,  2.1661, -0.4575],
            [ 1.7435, -3.5659,  0.2500, -0.4997,  0.1125,  3.8193, -0.7110, -0.2543],
            [ 0.7957,  1.5083,  0.4592,  0.8582,  0.5829,  0.5303,  3.9176, -0.7375],
            [-3.8914,  3.4342, -0.5300,  0.0287,  2.9187, -0.8900,  2.8240, -4.3472],
            [ 3.5761, -1.8030,  0.0044,  3.2083,  0.9937,  0.8327,  3.2614,  3.6824],
            [ 1.9109,  1.6807,  1.5707,  4.3771,  3.6088,  4.2290, -0.3345,  2.2604],
            [ 1.8631, -1.0442,  4.0932, -4.0448,  4.0834,  3.3411,  1.9380, -0.7849],
            [ 0.3753,  3.3381, -3.9435,  1.1974, -0.5071, -2.9333, -0.8858, -3.8811]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3958,  0.0594,  0.8520, -0.4021, -0.3195,  0.4797,  0.6925, -0.2032,
             -0.4237, -0.0958],
            [ 1.3064, -0.8194, -0.8228,  2.7470, -1.1358,  0.1812, -0.5912,  1.4964,
             -0.4289, -0.2902],
            [-0.6274,  2.8573,  1.0784, -0.2503,  0.7058,  2.7531,  1.6211, -1.8782,
              0.1804,  0.2416],
            [ 0.9454, -2.0326,  1.9879,  0.2057,  2.2479,  1.9316,  2.4953, -0.0629,
              4.2301, -0.1300],
            [ 0.3135,  1.4004,  0.1666,  2.2384,  1.1197,  1.5209,  2.3689,  2.1177,
              1.0110, -0.4603],
            [-0.3693,  0.6972, -1.9942, -0.7870, -1.9612, -0.4282, -4.9625, -0.0944,
             -1.8811,  0.2831],
            [-1.0330,  0.2376, -0.2220,  0.1018, -3.4600,  0.0328, -3.8987, -1.4846,
              1.1321,  0.2413],
            [ 1.3449, -3.1168,  1.9220, -1.3282,  2.4536, -0.5744, -0.7420,  1.7384,
              1.5895, -0.1529],
            [-0.8871,  3.2823, -1.4391,  1.5803,  0.4939, -1.2051,  2.9773,  0.1515,
              0.1116,  0.2924],
            [-0.2509, -1.6199, -0.0487,  0.6198,  0.9950,  1.5271,  0.2924,  0.9866,
              0.9906,  0.2270]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.554 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
