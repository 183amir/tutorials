.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.5619,  1.9000,  4.8209,  3.2614,  9.2446],
            [ 2.1219, 10.9880,  7.5657,  1.9232,  2.9130],
            [ 4.4005, 11.6185,  4.8644,  6.0056,  5.8669],
            [ 3.2802, 11.9899,  7.8423, 12.3500,  5.6920],
            [ 2.4616,  7.6067,  9.6951,  7.4918,  8.6456],
            [ 3.2802,  5.2663,  6.6597,  8.7170,  5.6920],
            [ 4.4005,  5.1166, 12.6243,  8.4820,  5.8669],
            [ 2.1219,  8.2232,  9.8165,  3.0431,  2.9130]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1281, -0.0942,  0.7742,  0.4936,  0.5671, -0.3967, -0.6698,  0.6867],
            [ 0.3145,  0.4720,  1.0515, -0.0704,  0.0108, -0.2579, -1.3306, -0.5504],
            [ 1.1038,  1.2524, -0.7906, -0.6793,  0.1351,  0.6946,  1.5566, -2.0964],
            [-0.0674, -1.3165,  0.5878,  0.5627,  0.3522,  0.8238, -0.4332, -0.1272],
            [ 0.9420,  1.1806,  0.1594, -1.0306, -0.4475, -1.7277,  1.4096,  0.8658],
            [-0.7822, -0.6768, -0.9514,  0.1535, -0.6432,  1.1277,  0.7487,  0.9446],
            [ 0.4302, -1.5353, -0.3450, -0.0354, -0.1212,  1.0363,  0.6465, -1.0810],
            [-1.2441,  0.3446,  2.2355,  0.7366, -0.3812, -2.0150,  1.4571,  0.4737]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3984, -0.5331,  1.7642],
            [ 0.8168, -1.7248, -0.2009],
            [ 0.2371,  0.5636,  1.3333]], requires_grad=True), Parameter containing:
    tensor([[-0.7949]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2795,  2.6435,  1.7593,  1.9134,  2.5638,  0.8419, -1.3943,  3.7373],
            [-2.3227, -3.0303, -5.3278, -3.6095, -2.9425,  0.8051,  1.2632, -1.9376],
            [ 0.9222,  1.8458,  2.8425,  4.7675,  2.4461,  1.3922, -0.3849, -0.9987],
            [-0.9435, -4.8226, -5.8935, -2.6185, -1.3995, -1.8536,  0.2972, -0.3370],
            [ 6.5748, -1.8240,  0.0921,  2.2073, -1.1483,  2.9133, -0.7080, -0.5769],
            [-2.9224,  0.5237, -4.7545, -0.7764, -0.8521, -6.1189, -0.4416, -2.4098],
            [-8.1056,  3.9787, -3.2980,  2.9400,  0.7264, -0.0915,  6.3960, -4.3221],
            [-4.2159,  1.3626, -7.5324,  0.9578,  0.6768, -3.2124,  2.8490, -2.5959]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.5465e-01,  3.3345e-01, -9.0391e-01,  5.3270e-01, -3.6788e-01,
              2.0123e-01, -1.5290e+00,  9.7915e-01,  2.3569e-01, -4.9787e-01],
            [-4.5546e-01,  1.0745e+00, -1.1763e+00, -4.1686e-01,  1.2036e-02,
              1.9653e-01, -6.0051e-02, -2.7695e+00,  2.0535e+00, -1.0369e-01],
            [-4.0202e-01, -2.3425e-01,  3.6663e-01, -2.7757e+00, -7.3393e-01,
             -6.2081e-01, -1.4599e+00, -5.2733e-01,  6.1761e-01,  1.9280e+00],
            [-4.4038e-01, -1.3656e+00,  1.6634e+00, -1.6210e+00,  7.4416e-01,
              3.8346e+00,  8.8164e-01, -5.6458e-01, -3.0463e+00,  8.8301e-01],
            [ 3.4112e-02, -2.2269e-01,  4.8562e+00, -3.3313e+00,  8.1211e-01,
             -4.1957e+00, -2.2936e+00, -6.8200e-01,  4.8935e-01,  1.1772e+00],
            [ 1.4896e+00, -3.0702e+00, -1.1691e-01, -5.4583e+00,  5.6474e+00,
             -2.4637e-01,  6.5032e-01,  5.5683e-03, -2.0417e+00,  9.8942e-01],
            [ 4.7284e-01,  6.3638e-01,  2.3314e+00,  1.8209e-01,  1.5707e+00,
             -2.4682e+00, -1.8472e+00, -6.9328e-01, -1.6647e+00, -1.8708e+00],
            [-6.6658e-01,  2.7119e+00,  1.6374e+00, -2.3254e+00,  6.6339e+00,
             -3.5636e+00, -2.4914e+00, -3.3256e+00,  9.6548e-01,  3.3814e+00],
            [ 1.6465e-01, -1.7032e+00, -6.6596e-01, -2.4702e+00,  6.4365e-01,
             -3.2211e+00,  3.5633e+00, -5.9303e-01, -5.3036e+00, -1.5487e+00],
            [ 1.3806e-01,  2.9896e-01,  9.0995e-01, -4.4109e-02,  1.5990e-01,
             -2.8043e+00, -1.6031e+00, -1.7656e+00,  2.2245e+00,  2.4278e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.499 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
