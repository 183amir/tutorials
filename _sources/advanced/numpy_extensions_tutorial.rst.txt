.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.2760,  8.3430, 13.0620,  4.4251,  1.4653],
            [ 4.1614,  3.0266,  8.2883, 10.9276,  3.2001],
            [16.4555, 10.6709,  6.7086, 13.0338, 11.7144],
            [ 5.3455,  2.3486,  4.1519,  5.9855,  7.1438],
            [11.9331,  3.2730,  4.7087,  8.5967, 14.9009],
            [ 5.3455,  5.5442,  5.7554,  4.7656,  7.1438],
            [16.4555,  8.8231,  6.6642, 13.1581, 11.7144],
            [ 4.1614, 10.4362,  5.0111, 18.1633,  3.2001]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6304,  1.1605,  0.4038, -2.5122, -0.7383, -0.1171,  1.3317, -1.7387],
            [-0.7586,  0.8668, -0.3495, -1.0693,  1.1941, -0.6806,  0.2882,  0.1004],
            [ 1.0643,  1.3257,  1.1551, -0.1545,  1.9463, -0.1408, -0.4098,  1.2832],
            [-0.4263,  1.2033,  2.4574, -0.2497,  0.2427,  0.3321, -2.6725,  1.6210],
            [ 0.0455,  0.6230, -0.8237, -0.0969,  0.3608,  0.1733, -0.3877, -1.4619],
            [ 0.3066, -1.3319, -1.3183,  0.5448, -0.9111,  0.7381,  1.1343, -2.0388],
            [ 1.7524,  1.3993,  1.1260,  1.0588, -0.0532,  0.3318,  1.4902, -0.4230],
            [-0.8351,  1.4586, -0.2032, -0.9397, -1.0202,  0.6125, -1.6516,  1.0271]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2969,  1.5867,  0.8422],
            [-1.4480,  1.6456, -0.4789],
            [ 0.5612,  0.6065,  0.2601]], requires_grad=True), Parameter containing:
    tensor([[-1.1774]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7763, -2.4126,  4.5866,  1.0746,  2.9358, -2.5221, -3.3807,  1.7585],
            [ 4.8843, -1.1612, -6.4156,  0.9066, -3.6056, -2.9153, -0.7059, -2.1283],
            [ 8.6601, -4.5932,  1.7480,  3.2546, -0.3739, -4.1402,  0.7584, -5.1850],
            [-3.1259, -5.9665,  2.5001, -2.1443,  0.9310, -3.9145, -1.7595, -0.3310],
            [-5.5364,  0.8190,  3.2142, -2.9454,  2.0485, -0.1500, -2.5121, -2.6107],
            [-1.7298,  1.5714,  2.1148, -2.7380, -1.1524,  3.6186, -0.4400,  4.6028],
            [ 0.0801, -2.2464,  4.4207, -5.2327, -0.8098,  0.6428, -4.7868,  0.2570],
            [ 3.3759, -5.0222,  0.6799, -4.1546,  9.7941, -1.7597, -3.5572, -3.2099]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1435,  2.1201, -2.3494, -1.7133, -1.2190,  0.1400, -0.3926, -0.1527,
              1.2481,  0.4843],
            [-0.6459,  2.4787, -0.5109,  0.2357,  1.8911, -1.0893, -0.6546,  1.7875,
             -3.3192, -2.1341],
            [ 1.8381, -3.1254, -3.2234, -2.0307,  0.8565, -4.7983,  1.9045,  1.0884,
             -1.9496,  1.8150],
            [ 2.7734,  1.2938, -1.4978,  1.8386,  0.5649, -0.7299, -5.8046, -2.5111,
             -0.9590, -1.6740],
            [-1.8512,  1.5692, -4.7475, -2.7928,  1.1472,  0.7337, -3.2686,  3.6701,
              0.9711,  1.6637],
            [-0.1848,  0.1743,  0.2718,  0.0814, -2.0159, -3.8335,  1.9082, -1.5074,
              0.3764, -1.0875],
            [-0.5649, -1.8119, -0.8959,  2.9084,  2.5238, -0.5058,  4.5317, -2.3673,
              1.4992,  1.3168],
            [ 0.3117,  1.2896, -1.0934, -2.3377,  2.1483, -3.2459,  7.9286, -1.9545,
             -0.9608, -1.5926],
            [-0.3404,  2.4420, -0.5207,  1.0023,  0.0798, -1.6178,  3.3622, -0.4629,
             -1.2189,  0.8478],
            [ 0.0945, -0.6189, -0.9643, -0.3796,  0.5293,  1.5383,  0.7541, -0.7815,
             -0.9807, -0.3186]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.528 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
