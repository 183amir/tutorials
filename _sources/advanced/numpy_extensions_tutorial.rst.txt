.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.4872,  3.9896,  8.0533,  6.4843,  0.2653],
            [ 6.5029, 10.9184,  7.4113,  2.8064,  5.7935],
            [ 4.4658,  6.4327,  5.1041,  7.5577,  8.5129],
            [ 1.1502, 12.7242,  2.6754,  4.2421,  7.3211],
            [ 0.6715,  7.0465,  6.5835,  5.0813,  0.3806],
            [ 1.1502,  9.7753, 17.3203,  6.7382,  7.3211],
            [ 4.4658,  8.7712,  6.2339, 12.5670,  8.5129],
            [ 6.5029,  5.2115, 13.1852,  5.6738,  5.7935]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5481, -0.8545, -1.8694,  0.7390,  1.4452,  0.6841,  0.7657,  0.1186],
            [-0.5807,  1.4104,  0.2995, -0.4827, -0.5415, -0.2773,  0.8358, -0.0070],
            [ 0.2310, -0.5715,  0.4345,  0.1406, -0.1269,  0.1280, -1.9932,  1.7354],
            [ 0.1844,  1.4966, -0.2886,  0.3322,  1.4691,  1.1172, -1.3199, -2.1057],
            [ 1.1741,  0.8458,  0.5030, -1.3463,  0.6156,  0.4783,  0.7643, -2.0306],
            [-0.5307,  0.2393, -0.7368,  0.2235,  0.2415, -0.8416, -0.1911, -0.5420],
            [-0.7544,  0.6516,  0.0390, -1.5448, -0.3792, -0.4592, -0.9763,  0.5526],
            [-0.0453,  0.3594,  1.5018, -1.6813, -1.7986, -1.3101,  0.2999,  1.1909]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5376, -0.5421,  0.1780],
            [-1.4809,  1.0456, -0.0242],
            [ 0.5673, -1.0640,  0.2094]], requires_grad=True), Parameter containing:
    tensor([[1.4013]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.6872,  1.0249,  0.3151,  7.2653,  2.8873, -3.4682,  2.2568,  0.5755],
            [ 1.1158,  0.3220,  0.3110,  0.9037,  1.3997,  3.6069, -0.1236,  3.0269],
            [-1.6321,  1.7301,  1.5363,  0.1682,  1.4887,  0.6867,  2.1313,  0.5801],
            [ 4.2276,  1.0707, -0.8046,  0.3244, -2.1432,  5.5788,  2.9429,  0.6132],
            [-1.4272,  3.6618,  2.6524, -2.2138,  3.1016,  0.6232,  1.4491,  0.6107],
            [ 3.6450,  1.8604,  1.2896, -0.5444,  2.7200,  1.8034,  1.9453,  2.1312],
            [ 1.5885,  0.9157,  0.4160,  3.9004,  2.2463,  0.4022,  2.2673,  1.3324],
            [ 3.7871, -1.2853,  4.7322,  2.5090, -2.0019,  1.6310,  4.3722,  0.2468]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.6380e-01, -8.3693e-01, -2.6479e-02,  8.8053e-01,  4.9367e-01,
             -4.4806e-01,  2.2826e-01,  6.1125e-01, -1.0825e-01, -1.6173e-02],
            [-1.3987e+00, -5.6162e-01,  1.1476e+00,  2.6796e+00, -1.1379e+00,
             -1.8397e+00,  3.1825e+00, -5.9745e-01, -6.0703e-01,  1.0791e-01],
            [ 5.2047e-01, -4.3860e-01,  1.7823e+00,  3.9822e+00, -4.4882e+00,
              4.0920e+00,  1.3361e+00, -8.1929e-01,  2.5784e-01, -2.1562e-03],
            [ 6.4301e-01,  5.4982e-01,  2.2418e+00, -1.8939e+00,  3.7819e+00,
             -1.2873e+00,  6.5027e-01, -7.3970e-01, -5.2058e-01,  1.3460e-01],
            [-1.5685e+00,  3.0329e+00, -1.0740e+00,  2.7019e+00, -2.4590e+00,
              5.6776e-01, -1.8383e+00,  2.5218e+00, -7.0328e-01,  9.7681e-02],
            [ 3.6882e-01, -3.1597e+00,  3.3085e+00, -3.2553e+00,  4.1280e+00,
             -3.8102e+00,  3.5695e+00, -1.5890e+00,  7.0739e-01, -1.0190e-01],
            [-2.0496e+00,  1.1410e-01,  4.5882e-01,  4.4396e+00, -1.8396e+00,
             -7.0506e-01,  1.8268e+00,  2.8974e+00, -1.3291e-01, -3.1230e-01],
            [ 4.5522e-01, -1.9929e-01, -4.0271e+00,  6.9951e+00, -2.4073e+00,
              2.2932e+00, -9.6311e-01,  3.1307e+00, -2.1148e+00, -1.3580e-02],
            [ 1.5157e+00, -3.2440e+00,  3.2904e+00, -4.6497e+00,  5.6033e+00,
             -2.5140e+00,  9.7181e-01, -1.2268e+00,  2.5484e+00, -4.8063e-01],
            [-4.8719e-01,  1.6035e+00, -1.8105e+00,  1.0731e+00, -9.6467e-01,
              1.0693e+00, -5.5581e-01,  6.4559e-01, -4.5126e-01,  7.2581e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.314 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
