.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.3417,  2.3593,  7.4591, 14.0377,  7.9061],
            [ 7.7204,  2.4013,  6.7881,  8.6929,  9.5199],
            [10.7497, 11.5836, 11.6642, 12.0367,  5.0905],
            [ 4.4269,  6.9378,  6.8721,  4.1134,  8.5545],
            [ 7.0556,  5.1933,  8.6788, 10.0227,  2.1623],
            [ 4.4269,  9.4181, 12.2585,  7.5885,  8.5545],
            [10.7497,  7.3799,  6.8144,  7.1238,  5.0905],
            [ 7.7204,  6.9896,  7.1191, 10.0913,  9.5199]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.9877, -0.7527, -1.0526,  0.0147, -0.8377,  1.6179,  0.1783, -0.6477],
            [-0.1160,  1.8567, -1.3008,  0.8669,  1.4347, -0.1263,  0.1124, -0.0631],
            [ 1.5206, -1.0624, -0.2629,  0.0843,  0.9966, -1.1923, -0.6126, -0.3967],
            [ 1.1800, -0.3467,  0.7092,  0.8357, -0.4653, -1.5811, -0.7280, -1.0030],
            [ 0.4681, -2.2704,  1.0136, -0.7839, -1.0171,  1.4978,  0.0145, -1.5907],
            [ 1.5731, -0.9604,  0.2177,  0.6481,  2.2779,  2.1384, -0.3713,  0.3008],
            [-0.0648,  1.7769,  1.4757,  0.7242, -1.5621,  0.1932,  0.3434,  0.3422],
            [ 0.2850, -1.1217, -0.3600,  1.0766, -0.2104, -0.6280,  0.7970,  0.2705]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.7446, -0.7382,  0.1477],
            [ 1.2900,  0.3229,  0.4186],
            [ 0.0930, -1.1358, -0.6310]], requires_grad=True), Parameter containing:
    tensor([[-0.9131]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8247,  1.7397, -0.4173, -3.0389, -1.0563, -5.7881, -1.9062, -3.0389],
            [-0.9102, -1.6917,  1.6025,  1.5284, -2.3958,  0.3855,  0.2279,  0.2348],
            [-2.1144, -2.4994, -0.5193, -2.5298, -0.1330, -0.8092, -5.5809, -1.4096],
            [ 0.7984,  2.8507, -0.7177, -0.5868, -2.2885, -0.6582,  1.1361, -1.0551],
            [-5.2427, -2.5270,  0.2978,  0.1286, -1.8095, -1.8747, -3.7638, -2.4773],
            [ 1.7986,  1.1555, -1.4985, -4.7226,  0.0185,  1.3898,  2.8725,  1.8242],
            [-0.9887, -4.2520, -2.6581,  4.7132, -0.1176, -0.4314, -1.3624, -6.5640],
            [ 1.9297,  2.2573,  2.2036,  0.8667, -4.0822, -4.9398, -3.1239,  2.4016]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0353, -0.4213,  1.8363, -2.4177, -1.5315, -3.2601,  3.0264,  2.9328,
             -0.0730, -0.0618],
            [-0.3812, -1.0682,  1.2948,  0.7913, -3.6966, -0.3423, -2.3091,  3.1685,
             -0.0935, -0.4218],
            [-0.7012, -0.4541,  0.6103,  6.4418, -2.4635,  0.7516, -4.1064, -1.9943,
              1.0686, -0.3603],
            [-1.2033, -1.1419, -2.2337, -1.4750,  3.3657, -2.8465, -0.9115,  0.0197,
              2.7462,  1.3322],
            [ 2.2731, -0.5421, -1.8379,  1.5818, -0.0476,  0.7946, -3.4558, -3.8039,
             -1.7161,  0.0083],
            [-0.6143, -3.0142,  1.5454, -0.7192,  2.9279,  0.6785, -0.0556, -0.1840,
              0.7971,  0.1436],
            [ 1.3832, -0.4052, -2.6153, -2.2533, -3.0881, -2.0587,  2.9660,  4.2722,
              0.0968, -0.9662],
            [-1.2294,  1.6106,  2.0098, -0.7518, -1.6531,  3.5640,  1.0943, -6.5493,
             -2.5756, -0.9994],
            [ 0.2928,  0.2506, -1.8042,  0.6338, -0.5847, -0.9748, -0.6627,  0.8118,
              3.5412,  1.9811],
            [ 0.0252, -0.3526,  0.3108,  1.3587, -1.8047, -1.8142,  0.6951,  0.4342,
             -1.0617, -0.5396]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.511 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
