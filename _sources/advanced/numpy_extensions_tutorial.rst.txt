.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.0941,  7.0691,  7.1383,  2.6674,  4.5535],
            [ 3.3611,  1.1275,  1.8445,  8.9354,  3.9748],
            [12.2554,  5.9201,  3.1343,  3.9446,  5.9408],
            [ 0.8414,  9.0286,  2.8273, 11.0648, 10.2638],
            [ 5.5085,  9.1903,  5.0538,  4.3207,  0.5195],
            [ 0.8414,  4.1022,  9.2872,  3.9555, 10.2638],
            [12.2554, 12.8326,  1.4669, 10.4826,  5.9408],
            [ 3.3611,  9.4287,  4.4550, 13.0098,  3.9748]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8900, -0.4295,  0.5964, -1.5027, -1.2058, -0.4983, -0.0523,  0.2781],
            [ 1.0826, -0.4819, -1.1840,  0.7478, -0.2360,  0.1334,  1.7965,  0.3782],
            [-0.3938,  2.5363,  0.4517,  0.7883, -0.7745, -0.2407, -0.6072,  0.4943],
            [-1.0846,  0.7712,  0.4099, -0.5767,  0.4675, -2.2007,  0.3620,  1.2785],
            [-1.2093, -1.6962, -0.1324,  0.5288,  0.8110,  0.2884, -0.4869, -0.4376],
            [ 0.4090, -0.1802, -0.4180,  0.6007, -1.2326,  1.3606,  0.9382,  1.6363],
            [ 0.9348, -0.2052,  0.1999,  0.3560, -0.5760, -0.0617,  0.7127, -0.2837],
            [ 1.4513, -0.6785, -0.4673, -0.1304, -1.1535,  0.1832, -0.7487, -0.4324]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3033,  0.7225,  1.4308],
            [-0.3181,  1.2043, -0.1585],
            [ 0.3959,  0.3284, -1.1575]], requires_grad=True), Parameter containing:
    tensor([[0.0462]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.5144,  2.3029, -1.9634, -0.9895, -1.2077,  1.4193, -4.3490,  3.9744],
            [-0.1283, -7.2240, -1.9427,  0.9112,  0.6314, -1.6671,  3.7028,  1.8168],
            [-0.7649,  0.4932,  0.9606, -1.6477,  0.7825,  3.5760,  4.3619, -0.8104],
            [ 4.0054,  2.4437, -0.1340, -2.5662, -0.2392,  1.3375, -2.8878, -1.1015],
            [ 1.3316, -5.4697, -0.7837, -2.0620,  3.7004,  1.7180, -1.3049,  2.7898],
            [-2.5925, -1.8160, -0.3903, -0.3285,  7.4568, -0.9322,  3.1166,  1.1141],
            [-0.0530,  3.4067,  0.5257,  3.8378, -0.4050,  1.0716,  5.2965, -2.7746],
            [-1.0814,  1.9301,  0.6513,  0.3098, -2.0141,  3.9242, -1.8191, -0.8848]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2798,  0.3685,  2.5783, -0.2660, -1.6034,  1.4035,  0.1256, -1.3187,
             -3.1538, -0.3327],
            [-0.1037,  0.9774, -0.8298, -5.9534,  3.0464,  1.1315, -0.8558, -2.3040,
              1.7614, -1.4682],
            [ 0.6179,  0.3994, -3.6753, -1.5032,  2.4523, -2.1129, -4.2182,  0.3425,
              2.2899,  1.0374],
            [ 0.1099, -2.3233,  0.2250,  2.6964, -1.2798, -2.4392,  0.1507,  3.3864,
             -1.5452,  0.0207],
            [ 0.6956, -2.3526, -1.4025, -2.0937,  1.6653,  2.2989,  1.7762,  3.4307,
             -0.0211,  1.4637],
            [ 0.1910, -2.4052,  1.6735,  0.7390,  1.4510,  4.0109, -2.6832, -0.4373,
              2.9526,  1.0006],
            [-0.0864, -2.9559,  3.3273,  0.5418,  2.3682, -1.9851, -5.0493,  0.2636,
              0.5009,  0.4246],
            [ 0.2760, -1.2345,  1.6068, -1.6435,  4.6163, -2.2160, -2.7191,  1.8291,
             -2.5592, -2.2359],
            [-0.4807, -0.2180,  1.7709, -0.7701,  2.0692, -3.2831,  1.9118,  1.1982,
             -0.8230, -1.3658],
            [-0.0253,  0.0466,  0.4231,  0.7969, -0.9914, -2.6895,  1.9445, -1.2108,
              0.7121,  1.4468]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.530 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
