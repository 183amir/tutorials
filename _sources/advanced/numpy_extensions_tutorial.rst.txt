.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.2954,  6.1997,  8.5911,  4.5616, 16.6622],
            [ 7.6710,  6.7943,  6.8747, 15.0212,  7.9116],
            [11.7784, 11.7299, 10.5614,  9.7180,  1.8611],
            [ 6.8163, 17.8896,  4.2389,  3.7991,  2.5412],
            [ 4.2165,  9.2978,  7.6427,  5.1896,  0.6882],
            [ 6.8163,  7.6896,  0.5242,  4.2764,  2.5412],
            [11.7784,  2.0713,  8.2969,  9.9294,  1.8611],
            [ 7.6710,  8.4023,  9.8978,  4.9952,  7.9116]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1796, -0.7897,  1.7618,  0.9798,  1.8343, -0.2932, -1.6604, -0.3530],
            [-0.5872,  1.2906,  0.6068, -0.9768,  0.5180, -0.2639,  1.2155,  1.2031],
            [-1.1586, -0.3093, -0.4072,  0.0892, -0.5348,  0.5641,  1.4994, -1.6719],
            [-1.5596, -0.2853,  0.2979,  1.3109, -0.5346, -0.2060,  0.8769, -2.2327],
            [ 0.3342, -0.6070,  0.9718, -0.3182, -1.6018, -2.5798, -1.0726,  0.9972],
            [ 0.9952, -0.5729,  1.9140, -1.0654, -0.1215,  0.8980,  1.4500,  0.4670],
            [ 1.9909, -0.0660,  1.5875,  0.0095,  0.3494,  0.7111, -0.4511, -1.0867],
            [ 0.9589, -0.3964,  0.1856, -1.3396, -0.5034, -0.7096,  0.0030, -0.0805]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2921,  1.9203, -0.7962],
            [-0.3709, -0.0186, -0.5627],
            [-0.6517,  0.7953,  1.9912]], requires_grad=True), Parameter containing:
    tensor([[1.7643]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.6703,  2.8010,  2.4555,  6.5608,  5.2206,  2.9311, -3.7202,  0.0331],
            [-0.1424,  1.5981, -3.3069, -2.3395,  2.4038,  1.9958,  5.3108,  4.3754],
            [ 2.1847, -1.4508,  3.5197,  2.9418,  3.0626,  2.8180,  3.7631,  2.2810],
            [ 0.5403,  3.1348,  3.9479, -6.8200, -5.6584,  4.7649,  3.7241,  0.0138],
            [ 7.5817,  9.8619,  1.4375,  3.5157,  1.0032, -1.9224,  2.5103,  1.7537],
            [-4.4487, -1.8723,  5.1116,  5.4661, -0.7722, -1.4906,  9.6405, -1.0782],
            [ 1.4847,  5.9863,  6.8964,  5.0556,  2.7411, -3.6262,  3.1899, -3.1349],
            [ 2.1774, -0.8921,  4.9944,  2.4378,  4.6272, -1.9472, 11.5398,  5.6514]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3764, -2.7485, -0.8329, -0.0435, -2.5700,  2.0296,  4.0471,  0.2623,
             -2.4695,  0.6626],
            [-0.0814, -3.6116, -0.0743, -0.6912,  1.6241,  1.6333, -1.6980,  2.7648,
             -2.9132,  0.8502],
            [ 1.7799,  1.7907, -0.4742, -1.3556, -0.9746, -4.3330, -1.9700,  7.1113,
              2.4096, -2.1876],
            [ 1.1561,  0.1485, -4.4878, -3.9006, -6.4710,  4.8192, -5.0541,  4.1987,
             -0.2897, -0.4414],
            [-1.1300, -2.2427,  4.8024,  7.9124, -2.0223,  3.5412, -2.8343,  1.5424,
             -0.9282,  2.9732],
            [-0.0517, -0.2198,  0.1760,  0.1096, -1.2561, -1.2680, -2.6064, -4.3376,
             -1.0932, -1.7681],
            [ 0.7438, -1.7686, -0.0173,  4.1863,  6.4483,  4.3785, -2.6442,  1.6651,
              5.1457, -0.9569],
            [ 0.2740, -0.7901,  0.6358, -3.7181, -2.0579,  4.5304,  1.8206, -3.4625,
              0.8371, -3.7940],
            [ 0.4134, -1.5560, -0.3730,  3.4701,  1.2646,  2.0416,  2.8959, -3.9034,
              0.8944,  1.6801],
            [ 0.1404, -0.4864,  0.1287,  0.8019, -1.0412, -0.4953,  2.9186,  1.2289,
             -0.2774,  2.8266]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.527 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
