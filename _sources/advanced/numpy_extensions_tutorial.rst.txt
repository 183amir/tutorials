.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.0238,  4.4757,  6.5960,  3.5872,  1.9730],
            [ 6.7338,  7.6807,  3.6757,  9.2093,  8.9549],
            [ 8.1633,  5.4916, 12.4730,  4.3100,  3.8176],
            [10.0766,  5.3116,  2.8359,  4.1670,  4.6783],
            [ 9.8216,  2.0590,  2.3233,  3.7473, 15.5391],
            [10.0766,  4.9157,  5.3866, 10.7265,  4.6783],
            [ 8.1633,  6.7066,  7.9224,  8.8284,  3.8176],
            [ 6.7338,  7.2979,  9.5408,  8.1907,  8.9549]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.6467e-01, -1.1062e+00,  6.3258e-01,  1.2024e+00,  7.7890e-01,
             -1.4982e+00,  1.1869e+00,  2.2797e-02],
            [-1.2624e+00,  7.1904e-01, -1.4935e+00,  2.6863e-01,  1.0580e+00,
              1.2140e+00,  1.1004e+00, -1.7915e-01],
            [-2.6706e-01,  1.1702e+00,  6.0303e-01, -1.1055e+00,  1.3301e+00,
              4.6743e-01, -6.8246e-01, -3.4030e-01],
            [ 1.3867e+00, -5.1937e-02,  3.4545e-01,  1.9663e+00, -5.7937e-01,
              1.1912e+00, -1.1336e-01,  4.4546e-02],
            [ 5.4951e-01,  4.1073e-01,  6.6618e-01,  1.3761e+00,  2.4812e-04,
              1.0724e+00,  1.1385e+00,  6.5184e-01],
            [-1.4358e+00,  2.6154e-01,  5.8488e-01, -6.4422e-01, -1.7229e+00,
             -1.1372e-01, -7.6087e-01, -6.6212e-01],
            [ 1.2137e+00,  4.3466e-01,  1.7668e+00, -9.2281e-01, -9.5182e-02,
             -2.7433e-01,  7.5294e-01, -4.7785e-01],
            [-6.4951e-01,  1.0159e+00,  3.4163e-01,  2.5274e-01, -1.8324e-01,
             -1.3105e+00,  5.4293e-01, -3.0256e-02]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2061, -0.9655, -0.6957],
            [-0.0415,  0.3672,  0.4957],
            [-0.4742,  0.3170,  0.4793]], requires_grad=True), Parameter containing:
    tensor([[0.2709]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7324,  1.1439,  1.1509,  1.0193,  0.7921, -0.5978, -1.9755,  0.0989],
            [ 2.1933,  1.1808,  0.2019, -2.9310, -1.0978,  2.0819,  1.5174, -1.3899],
            [ 0.8948,  2.2954,  0.0187, -0.7917,  0.0939, -0.6402,  0.5780, -0.7927],
            [ 1.7825, -0.3565, -1.3360,  1.4745,  1.4857, -1.4433, -1.0887, -1.2714],
            [-0.1396, -0.9229, -0.2412,  1.3990, -1.8555, -4.3801, -1.9529,  1.0282],
            [ 1.8601,  2.2659, -0.3719, -0.2194,  0.5562,  3.2522,  2.2099,  2.4913],
            [ 1.1159,  1.7419, -0.5860, -1.7588, -1.6693,  0.1072, -1.0990, -1.8789],
            [ 0.5459, -0.1925,  0.1935,  0.4416,  1.0476,  2.0238,  0.7370, -1.3755]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0285, -0.3220, -0.7926, -0.2063, -1.4529, -1.3654,  0.8002,  0.3620,
             -0.9656, -0.6672],
            [-0.2236, -0.6891,  1.4156,  2.0042,  0.2101, -0.1715,  0.7231,  0.6461,
              1.0751,  1.3291],
            [-0.1808, -0.1058,  1.6798,  0.0840,  0.4314,  1.7543, -0.4101, -1.6380,
             -0.2051, -0.4417],
            [-0.6275,  0.9082,  1.0265, -1.9328, -2.0756,  2.1073,  0.0577, -0.6358,
             -1.5216, -1.4662],
            [ 0.3081,  3.1807,  2.9370, -1.5021, -1.5619, -0.6338, -1.7943, -0.7348,
              1.6666,  1.1665],
            [-0.1692, -0.4688, -2.4345, -1.3850,  0.0683, -0.1674,  1.2058,  0.5733,
              0.1772,  0.7068],
            [ 0.8524, -1.7264, -1.7063, -1.0265, -0.8785,  0.6042,  1.2885, -0.8674,
             -2.4638, -1.3205],
            [-0.0059,  0.3704,  1.1926,  0.3051,  1.0897,  1.0974, -0.6751,  0.5105,
              0.4555, -0.0881],
            [-0.6360,  0.4532,  0.1913, -0.4204,  0.5226,  0.1129, -0.2826, -1.0321,
              0.6814,  1.3608],
            [ 0.1774, -0.2460,  0.1167,  0.2574, -0.7214, -0.0136,  0.8167, -0.9433,
             -0.1414,  0.5676]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.328 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
