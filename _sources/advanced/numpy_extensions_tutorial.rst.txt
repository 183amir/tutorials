.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3662, 15.6537,  8.2408,  8.3049,  1.4436],
            [16.2836,  7.3641, 10.2712,  4.5391,  7.8499],
            [10.5920,  8.1595, 10.7532,  7.6054, 13.7376],
            [ 7.3590,  6.5433,  4.5160, 11.9345,  9.4413],
            [ 3.5799,  7.9514,  9.2409,  5.3565, 12.2571],
            [ 7.3590,  6.5778,  6.3010,  1.6054,  9.4413],
            [10.5920,  4.2485,  6.8208,  3.2284, 13.7376],
            [16.2836,  5.6558, 13.3309, 14.8619,  7.8499]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7713,  0.0224, -1.0429,  2.2701, -0.3217, -0.4938, -2.4287,  0.0224],
            [ 1.6763, -0.9023,  1.1306,  1.8770,  0.3110, -1.4297,  0.1902, -1.8244],
            [ 0.3279, -0.8447,  1.5827,  2.7239, -0.0494, -0.1997,  1.3808,  1.2469],
            [ 0.5093,  0.0224, -1.4234,  1.4083,  1.0910,  0.0610,  1.0241,  1.0354],
            [ 0.1380,  0.8384, -0.3794,  1.3448,  0.9375, -0.5844,  0.4938, -1.2921],
            [-1.4089, -1.5299, -0.3673, -1.3269,  0.7642, -0.2297, -0.3729, -1.5553],
            [-0.9342,  0.1416,  1.2721,  0.6381, -1.3718, -0.5341, -0.2721, -0.8882],
            [-0.2340, -0.2191,  1.0816, -0.7702, -0.8087,  2.3075, -1.2632, -0.4311]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5452,  1.1345, -0.4728],
            [ 0.0666,  1.7012,  0.5466],
            [ 0.9874, -1.5897, -0.4774]], requires_grad=True), Parameter containing:
    tensor([[-1.1138]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2147, -1.9799, -1.2798,  0.1265, -3.5281,  1.3026,  2.5477, -3.1999],
            [-8.7714, -4.6304,  1.6075, -0.9864, -2.4716, -3.2192,  1.8876, -0.6711],
            [ 4.8425, -1.6691,  2.3215, -0.9577,  0.3841,  2.0023, -6.2536, -5.3235],
            [-7.9156, -1.1620,  1.8340,  3.3958,  3.1564, -1.4694, -3.0087, -3.5178],
            [-5.2596, -4.5582, -1.4672, -0.7982, -6.9756, -1.3357, -4.1814, -2.4069],
            [-5.1006,  2.4834, -5.2660, -0.8142, -4.0494, -6.4210, -2.2557, -2.9839],
            [-2.8499, -0.9518,  7.0648, -5.5912, -6.4700,  3.2129, -2.0863,  1.2996],
            [ 3.6279,  0.2132, -4.9578, -0.1820, -4.3059, -0.0107, -1.2361, -5.8166]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.4800, -2.3362,  0.5245, -1.6330,  0.0406,  2.6382,  1.0597, -0.1382,
             -0.5562,  0.1302],
            [ 0.5119, -2.9166, -0.1177,  1.6714, -2.2807, -0.0846, -1.7735, -0.2829,
              0.5564, -0.1435],
            [-1.4273,  3.4057, -0.6811, -0.1316,  5.7384,  1.6809,  0.3097, -2.5789,
             -0.5698, -0.1771],
            [ 0.6914, -0.6340,  2.2867, -4.9809, -2.1816, -2.5022,  1.7581,  8.1787,
              1.9687,  0.3062],
            [ 3.9528,  4.1271, -2.4796,  0.0977, -2.9488, -2.7630, -5.3928, -0.2448,
             -0.2120, -0.3113],
            [-1.3570,  4.5862,  3.3410, -1.6005, -0.2670,  0.5360,  2.4882, -4.6336,
              0.3430, -0.2050],
            [ 3.9892, -6.7924, -4.0359, -0.5854,  1.2289, -2.6275,  1.2686, -4.5280,
             -1.9984,  1.3060],
            [-0.0966,  4.5781, -3.9772,  1.1595, -0.4173, -0.2949, -5.4583,  0.2990,
             -4.7318, -1.6799],
            [ 1.0613, -2.3972,  1.5011,  2.9753,  0.0495,  0.1504,  2.0043,  2.1477,
              5.4289,  1.3128],
            [ 0.5920, -1.3878,  1.1641, -0.3769, -1.6740,  0.6361,  0.3262, -1.2677,
             -0.9996, -0.1727]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.523 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
