.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.4724,  3.5548,  7.6084,  4.2122,  2.6553],
            [ 1.3188,  4.2045,  4.0706,  7.1779,  2.1167],
            [ 1.1272, 14.0813,  9.0264, 11.7112,  5.0574],
            [ 5.0378,  8.2985,  5.0597,  8.2332,  3.7346],
            [ 5.6404, 12.6992,  7.0207,  5.2691,  6.0881],
            [ 5.0378,  6.3306,  5.9508,  3.7369,  3.7346],
            [ 1.1272,  7.0962, 13.4505, 14.4117,  5.0574],
            [ 1.3188,  6.0326,  3.7062, 12.4475,  2.1167]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4892,  0.8141, -0.6720, -1.3437,  0.4843, -1.1529, -0.8758,  0.2225],
            [-0.7220, -0.6952, -0.0849, -2.0042,  0.1257,  1.5838, -0.2252,  0.7975],
            [-0.9563, -0.3600, -0.0082,  0.6236, -1.3038,  0.8752,  1.4917, -1.6066],
            [ 0.7152,  0.6144, -1.5391,  1.8366, -0.8079, -0.1059, -0.9032, -1.5516],
            [ 1.2986,  0.4766,  1.3765, -0.5171, -0.6211, -0.3957, -0.8602, -0.2119],
            [-2.1891, -1.1373, -0.6127, -0.8172,  0.7697,  0.9386,  0.2764, -0.8450],
            [ 0.0839,  1.3815, -0.7897, -0.1541, -0.8050,  0.2347,  1.0680, -1.2023],
            [-0.8065, -0.5386, -1.2626,  0.4049,  1.3006, -0.9789, -0.4986,  0.4058]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0786,  0.6105,  0.5069],
            [ 0.5631, -0.2090,  1.5338],
            [ 0.5363, -0.2288,  0.6040]], requires_grad=True), Parameter containing:
    tensor([[0.5127]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.1076,  2.6596, -1.7088,  0.5373,  1.5613, -1.5617,  1.6939, -4.8582],
            [-0.7735,  3.6498, -2.8515,  1.5603, -2.4517, -1.2702,  2.3369, -1.9517],
            [ 0.0300,  0.6111,  0.5019, -2.6139,  2.9839, -0.4198,  0.9606,  3.1565],
            [ 1.8162, -0.2086,  0.7389, -1.2076,  0.3847,  3.7619, -0.2737,  4.2215],
            [ 1.8399,  0.4056, -0.9936, -0.7115, -1.2236,  2.6954,  3.6666, -0.8129],
            [-1.9971,  3.2859, -2.2509, -1.5771,  0.3181, -0.9306,  5.0163, -0.7143],
            [-1.1882,  0.7787,  3.2626,  1.4217,  1.1996,  2.5912, -0.1842,  2.2866],
            [ 2.4163,  0.2193,  3.1540,  0.4729,  4.9848,  4.0581, -1.7474,  2.6620]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0432, -0.3112, -0.0507,  0.4024, -0.1867, -0.4715, -0.1352, -0.5437,
             -0.4042,  0.0762],
            [-0.3568, -0.1953, -1.8943, -1.1292,  0.1147, -1.7620, -1.6759,  0.2485,
             -2.0958, -0.4387],
            [-0.6218, -0.3307, -0.9162, -2.7945, -0.4275, -1.5113, -2.2322, -1.6647,
              0.8337, -1.7400],
            [-0.3010, -1.1779, -1.0519, -1.0830, -2.7082, -0.4246, -0.4480, -2.1270,
              2.3941,  0.9189],
            [-0.3928, -0.3929, -0.4417, -0.4262,  0.6508, -2.6712, -0.0516,  2.2003,
             -0.0740,  3.4405],
            [-0.6092,  1.1215,  0.5034,  1.5119,  0.6131,  0.0377,  0.9286,  0.1386,
              1.4853,  0.2868],
            [ 0.1396,  2.0720,  1.7822,  2.5864,  0.0231, -2.5016,  3.4544, -1.5513,
              1.5595, -1.2095],
            [ 0.5949,  2.0279, -0.2855,  3.0435, -2.5116, -1.9177,  2.2855,  0.5571,
             -1.0674,  0.3296],
            [ 0.4062,  1.3177, -1.3462,  1.7967, -1.1316, -2.1820,  1.3010,  1.7979,
             -1.2619, -0.2659],
            [ 0.1528,  0.3001, -0.4693, -0.1637,  0.4430, -0.7504,  0.2175,  0.3684,
             -0.2869, -0.2719]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.507 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
