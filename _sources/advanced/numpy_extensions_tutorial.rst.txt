.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.8406,  4.8150, 17.1398,  5.5426,  7.6081],
            [ 5.2589,  1.2588,  5.8091,  5.7670,  5.3890],
            [ 3.5216,  5.5027,  5.0403,  6.7094,  7.5116],
            [ 3.0470, 12.0388,  5.7048,  2.1953,  5.8575],
            [ 1.0721,  8.3766,  1.6876,  1.6733, 14.9625],
            [ 3.0470, 10.3030,  5.5138,  0.9837,  5.8575],
            [ 3.5216,  7.3665,  2.5630,  2.2990,  7.5116],
            [ 5.2589,  1.8583,  6.4317,  8.8136,  5.3890]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4286,  0.5639,  2.2905, -0.0488,  0.7334, -0.9554,  1.4388, -0.3616],
            [-1.1544,  0.6551, -0.6698,  0.7831,  0.3059,  0.2009,  0.9397,  0.6420],
            [-0.7138,  0.1509,  1.3558,  1.3511,  0.1680, -0.8583,  0.2979, -0.4902],
            [-0.8308, -0.0269,  0.0314,  0.3173, -1.2816,  0.6330,  1.9015,  2.0996],
            [-0.5718, -0.4221,  1.1905,  0.6031, -0.4792, -0.3236,  0.3125, -0.1597],
            [-1.4498, -0.1621,  0.5499,  1.5083, -0.6296,  0.4859,  0.0910, -0.6658],
            [ 0.6277, -0.2628, -1.0602,  0.5436, -1.6099,  0.5441,  0.4792,  0.4794],
            [ 0.0564, -0.0154, -0.5932,  1.1502,  0.0633,  0.5036, -0.2444,  0.2622]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7134, -0.1991,  1.5309],
            [-0.5197,  2.3298, -0.3827],
            [ 0.4837, -0.4480,  0.0680]], requires_grad=True), Parameter containing:
    tensor([[-0.9009]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4513,  3.0776, -7.1511,  4.1361,  0.5888,  0.1450, -3.3516, -3.1065],
            [ 1.2554, -4.3505,  4.8634, -2.1110,  4.2482, -2.6114, -0.9515, -1.1946],
            [-4.7525,  0.5903, -1.5123, -3.3007, -3.4753,  0.9379, -1.5190, -4.5971],
            [ 1.3348, -0.2018, -5.7130, -2.1640,  0.5736,  1.3354, -6.4259,  2.3897],
            [-4.0637,  0.8371, -0.1284,  0.6917,  2.2414, -6.5933,  0.2633, -0.4853],
            [ 5.5428, -5.6053, -0.1482, -2.2509, -6.2008,  1.8512, -4.5371, -6.4368],
            [-5.2705,  2.0817, -2.1135,  0.5122, -0.1323, -5.2583, -1.1490, -4.8057],
            [-1.3225,  4.8715,  1.8127, -0.3372, -2.5336,  1.4803, -7.6846,  5.4326]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1198,  0.9295, -3.2035,  1.0134, -1.5588, -0.8448, -1.0734,  0.5950,
             -0.7294,  0.6281],
            [ 1.4166, -3.3732,  4.1557,  0.4757, -0.9835, -1.2539,  0.9949, -4.8178,
              0.4719, -0.9339],
            [-0.8300,  1.4710,  2.2734, -2.5388,  1.9052,  0.8829, -3.6979,  0.7813,
             -2.2509, -0.1702],
            [ 0.1044,  1.9190, -4.4156, -0.5216, -3.3423,  1.2371,  2.1078, -0.9475,
             -1.3633,  1.8696],
            [-0.2655, -1.1011, -1.3510, -4.7704, -2.4001,  1.8488, -1.0174,  0.2021,
              4.9773, -0.3888],
            [-0.1595, -1.4397, -3.1166, -1.4192, -1.9796, -2.1082,  5.2761,  2.2453,
              2.2347,  3.1053],
            [ 0.2331, -1.3217, -0.0687, -1.5235,  0.7943,  3.5557, -4.6654,  5.3408,
              3.2581, -0.6882],
            [ 0.5006,  2.1851,  1.6548,  1.4572, -0.5538, -4.4396,  2.5525, -4.2600,
             -1.0202,  0.8492],
            [-0.5945,  2.1588,  5.2460, -2.8507, -2.1998,  0.6717, -5.3027,  0.1705,
              1.1767, -0.1797],
            [ 0.6883,  0.5501, -1.6939,  0.2636,  0.1498, -0.9281,  0.8358,  0.2046,
             -0.2332,  0.0325]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.560 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
