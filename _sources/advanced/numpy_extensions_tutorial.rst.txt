.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.8755,  8.7260,  4.6452,  8.1627,  0.9317],
            [ 7.4721,  3.7571,  2.6388,  7.8368,  3.1020],
            [10.2123,  9.3421,  3.7903, 10.7450,  2.1666],
            [14.7912,  4.0573,  4.1624,  4.9755,  8.7624],
            [ 2.7786, 12.2939,  6.0385,  4.1175,  2.7069],
            [14.7912,  2.2932, 15.4270,  2.0615,  8.7624],
            [10.2123,  4.8672,  9.0531,  3.9765,  2.1666],
            [ 7.4721, 15.7536,  5.8502,  7.6925,  3.1020]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 7.3147e-01, -6.8947e-01,  7.3609e-01,  3.9287e-01, -1.5595e+00,
             -1.1319e+00, -4.2874e-01, -1.4546e+00],
            [ 1.9896e+00,  9.1746e-01, -1.8732e-01,  6.7596e-01,  1.7937e-01,
             -1.1804e+00, -1.5633e+00, -9.6866e-01],
            [-1.0984e+00,  4.7156e-01,  4.0632e-01,  6.0793e-01, -9.7964e-03,
              8.0930e-01,  7.7507e-01, -5.7709e-01],
            [-1.3895e+00, -2.2719e+00, -7.4485e-01,  2.6079e-01, -1.6025e+00,
             -2.6241e+00, -2.0879e-01, -7.9740e-01],
            [ 3.1876e-01, -3.1822e-01, -5.1107e-01,  6.3046e-02, -1.3660e-03,
              1.0666e+00, -1.5395e+00,  4.3323e-01],
            [ 4.7192e-01,  8.4191e-01,  4.8612e-02, -7.5043e-01,  1.8947e-01,
             -1.2169e+00,  6.0260e-01,  1.4327e+00],
            [ 1.8603e-01, -6.2638e-01, -1.6184e+00, -7.5843e-01,  4.9180e-01,
              2.1509e-01,  9.0316e-01,  1.6609e-01],
            [ 1.6188e+00,  1.1954e+00,  3.4519e-01,  9.7362e-01, -1.4914e+00,
             -1.1054e-01, -5.1168e-01, -4.5073e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8098, -1.0231,  0.1281],
            [-0.6863, -0.3431,  0.1922],
            [ 1.5036,  0.3448, -0.5149]], requires_grad=True), Parameter containing:
    tensor([[-0.7851]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.5897,  0.8236, -1.1139, -2.5823, -1.5792, -0.7588, -4.8893, -1.9071],
            [ 1.3508, -1.1028,  0.1598,  0.2453, -0.7578, -1.7898,  0.4375, -3.1935],
            [-1.6399,  0.2994,  2.6910, -2.4103, -1.3735, -3.2416, -0.7157, -1.4101],
            [-0.6891,  1.4653, -0.3175,  2.4449, -2.6288, -2.5563,  5.3195, -1.6775],
            [-2.5793, -3.7798, -0.8122, -1.6923,  1.7252, -1.1828, -6.4677, -3.9152],
            [-2.3783,  2.3310,  1.9624, -1.5301, -0.2809, -1.8454,  2.0395,  3.1921],
            [-2.0392, -1.0200, -1.5344, -5.1430, -0.3108,  0.2720, -1.9444, -1.3679],
            [ 0.6923, -0.4442,  2.1719,  0.4475, -1.8657, -1.6758, -2.2340,  1.4513]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2250,  0.1809,  0.0608,  1.1865, -1.4441, -0.1228,  0.0086, -0.3372,
              0.8608, -0.1145],
            [-0.8197,  2.3604, -2.5645,  1.1915, -1.8712,  1.1392,  0.6074,  0.2921,
              0.6386, -0.2228],
            [-0.2055,  0.9879, -0.9550,  3.2912,  0.8874, -0.9670,  0.2063, -2.2879,
             -0.3893,  0.4668],
            [-1.5964,  1.2976, -1.4988,  0.2634, -0.6361, -2.7662, -0.5688,  0.1292,
             -1.4721,  0.4985],
            [-0.7006, -0.4718,  2.8288, -3.3375,  1.7784, -0.0930,  3.7764, -1.9398,
              0.8796, -0.3268],
            [-0.6166,  2.0324, -1.0938, -0.6721,  2.9205, -1.4282, -1.1574,  2.4154,
              1.6078, -1.0457],
            [ 1.1233, -4.5839,  1.9765,  2.6634,  1.4971,  0.2413,  0.9471, -2.6372,
             -1.3861,  1.0450],
            [-0.1626,  2.2344,  0.0233, -4.6232, -0.4069,  0.4557, -0.1664,  1.2447,
             -0.8981,  0.0799],
            [ 1.1156, -0.9956, -0.7656,  1.6491,  0.1032, -2.7640, -0.7246,  0.9933,
              0.0247, -0.1054],
            [ 0.4533,  1.1593,  0.2862, -1.1473,  1.7585,  3.1215, -0.9358, -0.5089,
              0.3816, -0.1661]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.546 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
